{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/img/cd.png","path":"img/cd.png","modified":1,"renderable":0},{"_id":"source/img/cd_tou.png","path":"img/cd_tou.png","modified":1,"renderable":0},{"_id":"source/img/grid.png","path":"img/grid.png","modified":1,"renderable":0},{"_id":"source/img/notice.png","path":"img/notice.png","modified":1,"renderable":0},{"_id":"source/img/top-light.png","path":"img/top-light.png","modified":1,"renderable":0},{"_id":"source/img/tp.png","path":"img/tp.png","modified":1,"renderable":0},{"_id":"source/img/wave-dark.png","path":"img/wave-dark.png","modified":1,"renderable":0},{"_id":"source/img/wave-light.png","path":"img/wave-light.png","modified":1,"renderable":0},{"_id":"source/img/avatar/nojsja.jpeg","path":"img/avatar/nojsja.jpeg","modified":1,"renderable":0},{"_id":"themes/snail/source/img/cd.png","path":"img/cd.png","modified":1,"renderable":1},{"_id":"themes/snail/source/img/cd_tou.png","path":"img/cd_tou.png","modified":1,"renderable":1},{"_id":"themes/snail/source/img/default.jpg","path":"img/default.jpg","modified":1,"renderable":1},{"_id":"themes/snail/source/img/notice.png","path":"img/notice.png","modified":1,"renderable":1},{"_id":"themes/snail/source/img/top-light.png","path":"img/top-light.png","modified":1,"renderable":1},{"_id":"themes/snail/source/img/tp.png","path":"img/tp.png","modified":1,"renderable":1},{"_id":"themes/snail/source/img/wave-dark.png","path":"img/wave-dark.png","modified":1,"renderable":1},{"_id":"themes/snail/source/img/wave-light.png","path":"img/wave-light.png","modified":1,"renderable":1},{"_id":"themes/snail/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/snail/source/css/dusign-common-light.css","path":"css/dusign-common-light.css","modified":1,"renderable":1},{"_id":"themes/snail/source/css/dusign-light.css","path":"css/dusign-light.css","modified":1,"renderable":1},{"_id":"themes/snail/source/css/font-awesome.css","path":"css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/snail/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/snail/source/css/font-awesome.star.css","path":"css/font-awesome.star.css","modified":1,"renderable":1},{"_id":"themes/snail/source/css/fonts.googleapis.css","path":"css/fonts.googleapis.css","modified":1,"renderable":1},{"_id":"themes/snail/source/css/github-markdown.css","path":"css/github-markdown.css","modified":1,"renderable":1},{"_id":"themes/snail/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/snail/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/snail/source/css/rocket.styl","path":"css/rocket.styl","modified":1,"renderable":1},{"_id":"themes/snail/source/css/refrence.yaml","path":"css/refrence.yaml","modified":1,"renderable":1},{"_id":"themes/snail/source/css/signature.styl","path":"css/signature.styl","modified":1,"renderable":1},{"_id":"themes/snail/source/css/toc.styl","path":"css/toc.styl","modified":1,"renderable":1},{"_id":"themes/snail/source/css/widget.styl","path":"css/widget.styl","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/js/MathJax.js","path":"js/MathJax.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/anchor.nojsja.js","path":"js/anchor.nojsja.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/buttons.js","path":"js/buttons.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/canvas-nest.js","path":"js/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/line.js","path":"js/line.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/mouse-click.js","path":"js/mouse-click.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/ribbonDynamic.js","path":"js/ribbonDynamic.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/ribbonStatic.js","path":"js/ribbonStatic.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":1,"renderable":0},{"_id":"themes/snail/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/snail/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/snail/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/categories-bg.jpg","path":"img/header_img/categories-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":1,"renderable":0},{"_id":"themes/snail/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/snail/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/snail/source/css/images/rocket.png","path":"css/images/rocket.png","modified":1,"renderable":1},{"_id":"themes/snail/source/js/Valine.min.js","path":"js/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","path":"fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","modified":1,"renderable":1},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","path":"fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","modified":1,"renderable":1},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":1,"renderable":0},{"_id":"themes/snail/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":1,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":1,"renderable":0},{"_id":"source/img/header_img/tag-bg.jpg","path":"img/header_img/tag-bg.jpg","modified":1,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home3.jpg","path":"img/header_img/home3.jpg","modified":1,"renderable":0},{"_id":"themes/snail/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":1,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":1,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":1,"renderable":0},{"_id":"source/img/header_img/photography-bg.jpeg","path":"img/header_img/photography-bg.jpeg","modified":1,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":1,"renderable":0},{"_id":"source/img/header_img/archive-bg.jpg","path":"img/header_img/archive-bg.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"690fed92322a4e9bf00266b0d7af4e0a6066031e","modified":1591842120651},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1591842120651},{"_id":"source/CNAME","hash":"4b0d28231461a1e392ea3da30784d9f207c3b28b","modified":1607306828498},{"_id":"source/robots.txt","hash":"92566f393a37de1b3d80739ac2f82edf0e8f416a","modified":1607250962301},{"_id":"themes/snail/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1591842120635},{"_id":"themes/snail/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1591842120635},{"_id":"themes/snail/.DS_Store","hash":"783a3e27be97b986d0aa6bcc8e7334c52d17961c","modified":1591842120635},{"_id":"source/_posts/.DS_Store","hash":"a04ebe66fb85ce923d4ac52d351b7da0babaa3bd","modified":1591842120651},{"_id":"source/_posts/2017-10-21-sass开发规范.md","hash":"04cbb5cdf592810b78cbeb2d76687acc2d6a162a","modified":1607251897699},{"_id":"source/_posts/2018-01-04-模仿RequireJs的用法写一个低配版的模块加载器.md","hash":"378d5774309c85c2de3f7534ee93ae0850f721e0","modified":1610782338589},{"_id":"source/_posts/2018-07-09-原生Js实现瀑布流效果.md","hash":"294d22d2dd411812b8d751a0445aefdf9767b7f9","modified":1607251905795},{"_id":"source/_posts/2018-10-31-使用ES5实现ES6中的Promise.md","hash":"b3130b4c2eabdf8447cf43134e1808136a2ef86d","modified":1607251912251},{"_id":"source/_posts/2018-11-05-简单实现一个Javascript动画处理类.md","hash":"072131e0fd6581900d9dce26049644aae28d5f42","modified":1612269041762},{"_id":"source/_posts/2019-04-04-LinuxMint18日常软件安装配置.md","hash":"7e0c8b0cfe741ba1aad56fd4c91686a908831271","modified":1607251929067},{"_id":"source/_posts/2018-11-06-用Javascript实现一个可自定义样式的tootips组件.md","hash":"34fb2151ec4959de96aaf2293479ee1bde7d32f6","modified":1607251922615},{"_id":"source/_posts/2019-04-04-proxychains终端代理.md","hash":"1757c3c13bf12edd26c70a6d7636edb33384d503","modified":1607251933207},{"_id":"source/_posts/2019-09-29-联想y7000安装ubuntu18-04显卡驱动解决方案.md","hash":"4d4c0c22bf26e5a7c7cae19e62a51e5aa041239b","modified":1607251951446},{"_id":"source/_posts/2019-10-01-polipo服务配置shadowsocks终端代理.md","hash":"53f69d80175aec7e468998f9d594a248ba786ddb","modified":1607251960689},{"_id":"source/_posts/2019-11-14-Docker运行容器化的Tim和Wechat.md","hash":"7c094907c1f02b220e43a058dd212a3977b03fbd","modified":1607251980456},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）.md","hash":"3bbf598a5cd0874ad41a5eea5df9674c79e97148","modified":1607251969984},{"_id":"source/_posts/2019-10-26-Electron-Mobx-React开发记录（二）.md","hash":"8c0fe502bf845f0c56779d6e7334ff0599e5e1be","modified":1607251975824},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录.md","hash":"c890022a153d94e0cf59cbca8c4432ac61e829cf","modified":1610421505056},{"_id":"source/_posts/2020-03-07-基于s3对象存储多文件分片上传的Javascript实现（一）.md","hash":"819e235d7bde3ba8fde47d571a1572ac6e0dc525","modified":1607251989364},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录.md","hash":"c00a8dc50b7bff36f9540d98f5e8c4305c6b8288","modified":1607251995596},{"_id":"source/_posts/2020-03-26-基于s3对象存储多文件分片上传的Javascript实现（二）.md","hash":"4c76a5ff1297a8b547f49961ef79b98c77c2f077","modified":1607252002624},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具.md","hash":"b5365b203514f059353f8be91be24a758e044d28","modified":1607252008752},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录.md","hash":"e717aa452a0899152e781b3799d8b341b7f2ee44","modified":1607252015008},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件.md","hash":"54e103be499a0559271f381576aa7e77f8e977e9","modified":1608516974131},{"_id":"source/_posts/2020-10-23-基于deepin-wine在Ubuntu20-04上安装新版微信.md","hash":"279e0b8805843cf67bb1e7a69a2b5c77c82b6310","modified":1607252043716},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索.md","hash":"517e302d1d8c1e5a39639ccd7dd7f0d1d846ff38","modified":1608516937163},{"_id":"source/_posts/2020-10-25-LeetCode探险记：动态规划、栈和回溯.md","hash":"9453b6ad79db462a83030f6f2b53cf30b2835776","modified":1612243764470},{"_id":"source/_posts/2020-09-25-32个手撕JS（转）.md","hash":"3c820d0fad47f6c86e3f2181e7bb3ebbdaf0b08d","modified":1607252036204},{"_id":"source/_posts/2020-12-08-Electron-Node多进程工具开发日记.md","hash":"c17f945ca9a2aafe7d8c3e5fb08d055c1e16f25d","modified":1608518154354},{"_id":"source/_posts/2021-01-25-理解React：Fiber架构和新旧生命周期.md","hash":"ee50489200dfdf9ea735a3a4c6bab7a9a72cf5c3","modified":1611712243513},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI.md","hash":"e68f5d8cbcf0c25c074e6733bcd9500bc9f27432","modified":1608704889664},{"_id":"source/_posts/2021-02-12-webpack优化技巧详解.txt","hash":"e606001d07907f5772b00e5704ee423bf76f0cb9","modified":1615632324773},{"_id":"source/about/index.md","hash":"b16109fe02b1aa2c90f06c64d7193b74e6a92162","modified":1611717796436},{"_id":"source/archive/index.md","hash":"5507617fc70aee3beb56299b64046704fb1cf143","modified":1611717607698},{"_id":"source/_posts/2021-01-29-前端123：浏览器缓存的工作方式.md","hash":"559225ca216c57ec2bd2458f317490f67e7b0490","modified":1613098794850},{"_id":"source/img/cd.png","hash":"9e2948f8fcdd6a33d4d88be26c26cc5a3f284a39","modified":1591855279388},{"_id":"source/img/cd_tou.png","hash":"f3be731e88699b3221349f154675f23efe6bbcaf","modified":1591855279388},{"_id":"source/img/grid.png","hash":"c2ef59db0838c5a17f74c0d25f9c508a6ab2a803","modified":1611714284675},{"_id":"source/img/notice.png","hash":"7dd33804c5db9ce303c6518defb0fab36ac443c5","modified":1591855279388},{"_id":"source/img/top-light.png","hash":"35795d86dc6bd0fe217ed9ac5a84c69fe3d89bbc","modified":1591855279388},{"_id":"source/img/tp.png","hash":"4d2a36c85473c8cdbbf0cc8f5930baf27be7af9b","modified":1591846976321},{"_id":"source/img/wave-dark.png","hash":"af6e4c8e6923e2ecbcd8118698c826559a3410f2","modified":1591855279388},{"_id":"source/img/wave-light.png","hash":"876873f352f953ea90b1d428f563572291052f65","modified":1591847967929},{"_id":"source/categories/index.md","hash":"c0c2275e1976fd84940b582baa81e7e893e1ed5d","modified":1611717605010},{"_id":"source/tags/index.md","hash":"51956b645623d891e1d5ab8da7c11fe96d3b6b73","modified":1611717883883},{"_id":"themes/snail/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1591842120635},{"_id":"themes/snail/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1591842120635},{"_id":"themes/snail/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1591842120635},{"_id":"themes/snail/layout/.DS_Store","hash":"e45cdab01049822593cf65f23f18a828ea573ab9","modified":1591842120635},{"_id":"themes/snail/layout/about.ejs","hash":"a946b4a2467fbc4709b8615f769936152a9f7f8a","modified":1591842120635},{"_id":"themes/snail/layout/archive.ejs","hash":"f8a1da07f95c2c8d042a56fe91e0f5f17998886b","modified":1597996117318},{"_id":"themes/snail/layout/categories.ejs","hash":"fb74aa2ce5a03ae5ffdbccbde20111b92e544c16","modified":1591842120635},{"_id":"themes/snail/layout/index.ejs","hash":"c23b88ad6a83f23af3d1c41da22bd96034cf2934","modified":1608707512166},{"_id":"themes/snail/layout/keynote.ejs","hash":"b5c0af8bc6654c977d485b2011075b88ab299eab","modified":1607261177272},{"_id":"themes/snail/layout/post.ejs","hash":"88664b736ad8f714d48e0047d5b9abd3de6b19d3","modified":1611711357567},{"_id":"themes/snail/layout/page.ejs","hash":"dfe3b5b0586a5783e1a7b90ede6dfca9a17c4316","modified":1607261172436},{"_id":"themes/snail/layout/layout.ejs","hash":"942935c14ed13c27a7472b228d74577363689583","modified":1607306357925},{"_id":"themes/snail/layout/tags.ejs","hash":"369b73aba39607ba51280bb611037dba04d633fb","modified":1591842120635},{"_id":"themes/snail/source/.DS_Store","hash":"ed06a70def8b481e44815adacc512b1dd1ca9d08","modified":1591842120635},{"_id":"source/_posts/2021-02-07-前端性能优化技巧详解-1.md","hash":"c2fe382e53fac40efa49bc81d030c9be8a3de027","modified":1615804935645},{"_id":"source/.github/workflows/sync.yml","hash":"01c0f25fcf458d5fceacebeec04ebe4b02fe0e89","modified":1605958364231},{"_id":"source/_posts/2018-11-06-用Javascript实现一个可自定义样式的tootips组件/tootip.png","hash":"8ce8a1c43017dc63f72082da4d798cb9349cfe0c","modified":1603351087843},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-13.png","hash":"2f929624df2751c01731ed1ba21cda2ffb7d7092","modified":1586108677376},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-11.png","hash":"8ae8ed9c52709ffdde63ef92ed26578e87e05cce","modified":1586108677372},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-2.png","hash":"63ab9b51046225b0846b88664d90cacc1db4aab3","modified":1586108677376},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-3.png","hash":"f331b6722e7cf2035e00f1dd307c58a2379b0c7f","modified":1586108677376},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/smb_node.jpg","hash":"72c4e525a48b19119d956a702696f684f5a25288","modified":1592795005373},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/smb_dir.jpg","hash":"1bd124d75fda4ef614e06332b8b1a529007a7b6b","modified":1592795005369},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/smb_shutdown.jpg","hash":"d438236562b837d4c18fe0bdc69b08945f651487","modified":1592795005373},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/smb_node_conf.jpg","hash":"d001b75a12d9565133ef54cc37faeceaf1fa2517","modified":1592795005373},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/waterfall-2.jpg","hash":"4d7458625acd7ac9b3768b84c32fee7b5572776d","modified":1586108677404},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-1.png","hash":"578e4bdb1137ef445656eb97ee67c435f19a8d06","modified":1586108677396},{"_id":"source/_posts/2020-03-07-基于s3对象存储多文件分片上传的Javascript实现（一）/upload.png","hash":"2ff71d516e47ee8826ecda7484b454cb7d3e719f","modified":1583548213080},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/snapshot_select.png","hash":"824dd884cf2adb5e242e4f9ea0fa6e01f8f2bb90","modified":1586108677396},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-3.png","hash":"db2dd99b4426807d07e845c53d951a4ddb2ea674","modified":1586108677396},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-2.png","hash":"a62ee08694c713d651e0172c1599e079ad63737d","modified":1586108677396},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/snapshot.png","hash":"3a129083f67b48903e4ae97b03f4f4512bff7d38","modified":1586108677396},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-6.png","hash":"a14dd20862d5cfabd75e921a58bab86b6dc479b6","modified":1586108677396},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-5.png","hash":"4d50533df3958632bc7099d7bbe49e0daffbed18","modified":1586108677396},{"_id":"source/_posts/2020-03-26-基于s3对象存储多文件分片上传的Javascript实现（二）/upload.png","hash":"2ff71d516e47ee8826ecda7484b454cb7d3e719f","modified":1586108677400},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/electron-lang.png","hash":"aeda22e50ab9801aca9a3f3d74e89ed960a5f2be","modified":1593748900888},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具/dev-tools-storage2.png","hash":"a53c1d7f58f5fc2052d449e35ff4bcaaf3e1d22a","modified":1587095578980},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_node_conf.jpg","hash":"d001b75a12d9565133ef54cc37faeceaf1fa2517","modified":1598407282793},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_node.jpg","hash":"72c4e525a48b19119d956a702696f684f5a25288","modified":1598407282749},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_share_mount.jpg","hash":"ee01b63581608b8e2ad68b5da32cb06dd16b4a00","modified":1592795005373},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_share.jpg","hash":"03fbf2643769ccf566ce83da60211a86c15ddf0e","modified":1592795005373},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/electron1.png","hash":"03dfc09384dd407f3d10d3e973907d2752f9815b","modified":1597749125199},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/refreshTasks.jpg","hash":"220ad00cc03f3f9bfc0e18a49b816124ad63cf16","modified":1597749125199},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件/editable_tree.png","hash":"43d532b32b00d1c5bf197016668ed726c0f4a90b","modified":1606565340763},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件/tree_add_sister.png","hash":"42893bddcc35f02e9629e10a2725b4c9b4611336","modified":1606565831081},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件/tree_in_edit.png","hash":"ac9b535e5c4a610e9aad74d7efd23efa1f169b1a","modified":1606565831293},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件/tree_add_sub.png","hash":"7e59e0fccc12209e3871e3b2e91620786428b00f","modified":1606565831169},{"_id":"source/_posts/2020-10-25-LeetCode探险记：动态规划、栈和回溯/drawio-1.png","hash":"1a7f8c1cc63ca2540454e8a7580ba79fb69568e6","modified":1603617181140},{"_id":"source/img/avatar/nojsja.jpeg","hash":"71fc59f8b263f90563e6f4f7c91efac2c7c97921","modified":1586108677408},{"_id":"themes/snail/layout/_widget/.DS_Store","hash":"9c0d84234456e5db3004fe76dd78d0d93efe3fc5","modified":1591842120635},{"_id":"themes/snail/layout/_widget/archive.ejs","hash":"7594929d472806ca4c64d9906d9903a96de111a0","modified":1591842120635},{"_id":"themes/snail/layout/_widget/category.ejs","hash":"710139c577fbb38bd23d996bfc32858da9b55d05","modified":1591848113900},{"_id":"themes/snail/layout/_widget/featured-tags.ejs","hash":"455c9b407d327ef7ca492308f100e9f3c04e0b5f","modified":1607261183748},{"_id":"themes/snail/layout/_widget/friends-blog.ejs","hash":"4fc6641f724f41ac55beeee3768b555b78459e83","modified":1607261406599},{"_id":"themes/snail/layout/_widget/recent-posts.ejs","hash":"a52cadf0a940d38046c50ef76734f2c4d2932306","modified":1607261382619},{"_id":"themes/snail/layout/_widget/search.ejs","hash":"5138e624a0f20abcac0132e3e5bddf4698109ed0","modified":1591842120635},{"_id":"themes/snail/layout/_widget/short-about.ejs","hash":"2d79c1401005e3c59ffdbf588b66dcc1c6a93301","modified":1611721723536},{"_id":"themes/snail/layout/_widget/visitor.ejs","hash":"5d8505f7c0e0e01ace05f1c259e8d56289a6eebd","modified":1591847200893},{"_id":"themes/snail/layout/_partial/.DS_Store","hash":"b67df80bf88e0f64ba66ad760f724d8c44d2c390","modified":1591842120635},{"_id":"themes/snail/layout/_partial/anchor.ejs","hash":"156ee7f105953c2c9e37c680b03aae4daee92c9c","modified":1607307551862},{"_id":"themes/snail/layout/_partial/comment.ejs","hash":"57e7f750c795919121afc51fce7be91b24aecb83","modified":1598597471982},{"_id":"themes/snail/layout/_partial/footer.ejs","hash":"a4180dcdef5b08625d8faec878447378ce3a116a","modified":1607306060653},{"_id":"themes/snail/layout/_partial/head.ejs","hash":"0fa1ff7bde7085fd491db00d690c3ce5a2bb6a9c","modified":1611711207188},{"_id":"themes/snail/layout/_partial/header.ejs","hash":"3f3a15a26c17d1e3de372ae4c7ef8107bb084486","modified":1611722482273},{"_id":"themes/snail/layout/_partial/music.ejs","hash":"5c83764bb26191f1a21a0e9ca1de0471a37b6405","modified":1597819552986},{"_id":"themes/snail/layout/_partial/nav.ejs","hash":"bd1ea5f32f8bf2f21fbfd8abc7ec8d9c33f485c9","modified":1607252520121},{"_id":"themes/snail/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1591842120635},{"_id":"themes/snail/layout/_partial/sidebar.ejs","hash":"2e4e528a555917b2a267da4db2440bcc4a7a65ab","modified":1591842120635},{"_id":"themes/snail/layout/_partial/star.ejs","hash":"eec08202adbea86e9f53c7dfa7813833bdb343e7","modified":1591842120635},{"_id":"themes/snail/layout/_partial/toc.ejs","hash":"6fb56caac9f6cc7701edf8c6505c007c9562e0fb","modified":1591842120635},{"_id":"themes/snail/source/img/.DS_Store","hash":"946c77b313a0b54b7752989d970d116de33897e1","modified":1591842120643},{"_id":"themes/snail/source/img/cd.png","hash":"9e2948f8fcdd6a33d4d88be26c26cc5a3f284a39","modified":1591842120643},{"_id":"themes/snail/source/img/cd_tou.png","hash":"f3be731e88699b3221349f154675f23efe6bbcaf","modified":1591842120643},{"_id":"themes/snail/source/img/default.jpg","hash":"22910d296bc4d2a687e1d2c3583d984d77ff119b","modified":1591842120643},{"_id":"themes/snail/source/img/notice.png","hash":"7dd33804c5db9ce303c6518defb0fab36ac443c5","modified":1591842120643},{"_id":"themes/snail/source/img/top-light.png","hash":"35795d86dc6bd0fe217ed9ac5a84c69fe3d89bbc","modified":1591842120643},{"_id":"themes/snail/source/img/tp.png","hash":"4d2a36c85473c8cdbbf0cc8f5930baf27be7af9b","modified":1591842120643},{"_id":"themes/snail/source/img/wave-dark.png","hash":"af6e4c8e6923e2ecbcd8118698c826559a3410f2","modified":1591842120643},{"_id":"themes/snail/source/img/wave-light.png","hash":"876873f352f953ea90b1d428f563572291052f65","modified":1591842120643},{"_id":"themes/snail/source/css/.DS_Store","hash":"0cff62c01dffa557aea8139bec65d19bab1a406b","modified":1591842120635},{"_id":"themes/snail/source/css/archive.styl","hash":"715bcbd085eb95ec26c9805c11c374919cde971c","modified":1591842120635},{"_id":"themes/snail/source/css/dusign-common-light.css","hash":"11f0d1a854b0ef803a0f0d9c6b744b3ed74253bf","modified":1591842120635},{"_id":"themes/snail/source/css/dusign-light.css","hash":"d7d8b1fd0dae57cd2c12079ccb74e9db1cc5371d","modified":1611907972581},{"_id":"themes/snail/source/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1591842120639},{"_id":"themes/snail/source/css/font-awesome.min.css","hash":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5","modified":1597995367846},{"_id":"themes/snail/source/css/font-awesome.star.css","hash":"5e536c20b1633dd798b27b1860292edb00bdc5e4","modified":1591842120639},{"_id":"themes/snail/source/css/fonts.googleapis.css","hash":"61735f2f7925a9a90d55475a6c33b6b94d39ba2e","modified":1591842120639},{"_id":"themes/snail/source/css/github-markdown.css","hash":"02891a25b3a4de468b2b571ee6550f485fc2d557","modified":1611711935675},{"_id":"themes/snail/source/css/highlight.styl","hash":"35b39d78f224bb7bb8111a7b2b9a3e59fbc1ff01","modified":1606973821608},{"_id":"themes/snail/source/css/gitment.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1591842120639},{"_id":"themes/snail/source/css/rocket.styl","hash":"568931bf488af083da2e4a9517a0d63c39f2983b","modified":1612693381753},{"_id":"themes/snail/source/css/refrence.yaml","hash":"0a2d45ac9beab155a8f99fa1d1f22346e721ff84","modified":1606972098151},{"_id":"themes/snail/source/css/signature.styl","hash":"88159b31c59d59c01a0b534af57242662a2a3969","modified":1591842120639},{"_id":"themes/snail/source/css/toc.styl","hash":"8126d6469f1fbf790a4e0829ed871c54557360b2","modified":1591842120639},{"_id":"themes/snail/source/css/widget.styl","hash":"4e5433414ebf838abcf7f734f960c6f6cc4d3e37","modified":1591852355277},{"_id":"themes/snail/source/fonts/.DS_Store","hash":"c62411b1d7033164ffeac47a5c5091716b1ef0ed","modified":1591842120639},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1591842120643},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1591842120643},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1591842120643},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1591842120643},{"_id":"themes/snail/source/js/.DS_Store","hash":"2ab9cda44457d3ffbac70955968c866c2ab41d12","modified":1591842120647},{"_id":"themes/snail/source/js/MathJax.js","hash":"856a82431059889d446290c2f015c60bfb58a0b5","modified":1597994887498},{"_id":"themes/snail/source/js/anchor.nojsja.js","hash":"12936ab576869018e7b9431007b9663dccd2bc09","modified":1607307162632},{"_id":"themes/snail/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1591842120647},{"_id":"themes/snail/source/js/buttons.js","hash":"016694e3a3671df0c451334a025ce87ace1848b8","modified":1597994267638},{"_id":"themes/snail/source/js/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1597994563757},{"_id":"themes/snail/source/js/canvas-nest.js","hash":"ccfef66760b1490ebf7d510c8a3a78d7a753601a","modified":1591842120647},{"_id":"themes/snail/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1591842120647},{"_id":"themes/snail/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1591842120647},{"_id":"themes/snail/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1591842120651},{"_id":"themes/snail/source/js/line.js","hash":"f43e647e938bcc51d043b1d64ddbfb847f9fee96","modified":1591842120651},{"_id":"themes/snail/source/js/mouse-click.js","hash":"19836369f0c47643e5e2e78edd3d75c43f1717c6","modified":1591842120651},{"_id":"themes/snail/source/js/ribbonDynamic.js","hash":"f37800912f97ae4c9d375608c5aad462847c8e43","modified":1591842120651},{"_id":"themes/snail/source/js/ribbonStatic.js","hash":"552f5b67778ff6282090cf06b33aaeb1a95eca37","modified":1591842120651},{"_id":"themes/snail/source/js/search.js","hash":"7e780c538d23147e4fdc5c19eba5747a137234f3","modified":1591842120651},{"_id":"themes/snail/source/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1591842120651},{"_id":"source/_posts/2018-10-31-使用ES5实现ES6中的Promise/lifeIsStrange.jpg","hash":"01e12f5319efa056db6cd359d9bf820079bf69c3","modified":1586108677388},{"_id":"source/_posts/2018-11-06-用Javascript实现一个可自定义样式的tootips组件/tootips.gif","hash":"9eeeda2b7dfd1e51909c635b97fe5691c4bf53ca","modified":1603349453235},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/waterfall-3.jpg","hash":"e9ae0afb7829e68a8f46ffada84373ae026cf787","modified":1586108677404},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/Fly.jpg","hash":"88fbee27cef45dfe26b5fb0b084313fa8887b5b6","modified":1571021686188},{"_id":"source/_posts/2019-10-26-Electron-Mobx-React开发记录（二）/Fly.jpg","hash":"88fbee27cef45dfe26b5fb0b084313fa8887b5b6","modified":1586108677368},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx9.png","hash":"0c1433628cd9227b7cb07753a1ed79a36e8125a1","modified":1586108677392},{"_id":"source/_posts/2020-03-07-基于s3对象存储多文件分片上传的Javascript实现（一）/shards_upload.jpg","hash":"0fbc0f41f8db68b2d203bfeb40a10ed1db35ad1b","modified":1583548240551},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-4.png","hash":"7e4dfbf28f940c524b7c2826847f392e7aabb942","modified":1586108677396},{"_id":"source/_posts/2020-03-26-基于s3对象存储多文件分片上传的Javascript实现（二）/node_pipe.png","hash":"15c7b639515b467910837bb5f2ef1a1a25f66909","modified":1586108677392},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具/dev-tools-debug.png","hash":"9757e8b511ce555b5c659efba249bca3f7d248be","modified":1587095383770},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具/dev-tools-storage.png","hash":"c14bd49b84de0dd92b9d22c92b4c2fe32b558c58","modified":1587095299785},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/shards_upload.jpg","hash":"0fbc0f41f8db68b2d203bfeb40a10ed1db35ad1b","modified":1586108677396},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_upload_record.jpg","hash":"5d997b622999b74664784035398ce970e7d3596a","modified":1592795005377},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/chromium.jpg","hash":"aca6a7f76b3c9d07786ab462387d7ad467ee0a11","modified":1597749125199},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/inspect.jpg","hash":"db57826656845f6533b405ae8b9fbd654235dc0c","modified":1597749125199},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/upload_memory.jpg","hash":"c40aca3c3783ce3072fcb257deac73041feca60c","modified":1597749125199},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/shards_upload.jpg","hash":"0fbc0f41f8db68b2d203bfeb40a10ed1db35ad1b","modified":1597544498871},{"_id":"source/_posts/2020-10-25-LeetCode探险记：动态规划、栈和回溯/drawio-2.png","hash":"0f25613dc233732c7e6ffbdc76b752c906d9b3a9","modified":1603696954122},{"_id":"source/_posts/2020-12-08-Electron-Node多进程工具开发日记/chromium.jpg","hash":"aca6a7f76b3c9d07786ab462387d7ad467ee0a11","modified":1608518207302},{"_id":"source/_posts/2020-12-08-Electron-Node多进程工具开发日记/electron-re.png","hash":"905bf43076d68044e42ec28ae6e5f965fb069df1","modified":1608516720538},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/chromium.jpg","hash":"aca6a7f76b3c9d07786ab462387d7ad467ee0a11","modified":1608285931273},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/electron-re.png","hash":"905bf43076d68044e42ec28ae6e5f965fb069df1","modified":1608515985805},{"_id":"source/img/header_img/about.jpg","hash":"fda614a689e2557831f157d4fad104aec259f2d1","modified":1586108677408},{"_id":"themes/snail/source/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1591842120635},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1591842120643},{"_id":"themes/snail/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1591842120643},{"_id":"themes/snail/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1591842120643},{"_id":"themes/snail/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1591842120647},{"_id":"themes/snail/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1591842120651},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-1.jpg","hash":"2f2a11b7d0fddda07c17e99be43633f23b6583a3","modified":1586108677372},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-12.png","hash":"9530e2c1ea32225e8674ca2fa296c0f80e450157","modified":1586108677372},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx2.png","hash":"07f4fb4a584c4ae7be2aa5256eaceb9aad03cdb9","modified":1586108677392},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx5.png","hash":"8baae467c558711224feb2c241012bdc46004716","modified":1586108677392},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx3.png","hash":"192a7ab1f6411b166deb64d38ed67f2dbfffab50","modified":1586108677392},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx6.png","hash":"e72cec49c559744899d5a23f0bfa30f4356045cf","modified":1586108677392},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx4.png","hash":"192a7ab1f6411b166deb64d38ed67f2dbfffab50","modified":1586108677392},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx8.png","hash":"fdb356e7d6388d858f9b861d95062ed72274400d","modified":1586108677392},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-bug1.gif","hash":"7e1143cb1125a5289dabf1e5c8b2243eaa2cea3d","modified":1586108677396},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/smb_upload_now.jpg","hash":"4b28118688f086ab9e11c90b79e1073598305aa6","modified":1597544448899},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/process-manager.main.png","hash":"84293d69d6bb5bca92e9b825d2e3d596b4dcf0f4","modified":1608287349755},{"_id":"source/img/header_img/archive.jpg","hash":"4ef24aaf2edd05ebbbcdc024e61d6b52e1f80e0f","modified":1586108677408},{"_id":"source/img/header_img/categories-bg.jpg","hash":"aa83bedb9e15aa971fbf7951e9924397c4a22f54","modified":1591831354000},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1586108677416},{"_id":"themes/snail/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1591842120643},{"_id":"themes/snail/source/css/images/ironman.png","hash":"ed4cfd8d6cb29fe389768e78701c1e704de0a4b4","modified":1591842120639},{"_id":"themes/snail/source/css/images/rocket.png","hash":"76f4a29befec0558eba79e91d494b8186ac83bd9","modified":1591842120639},{"_id":"themes/snail/source/js/Valine.min.js","hash":"b64fbb45ba5495e16013b7d3d114071eb10c16aa","modified":1597746257487},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","hash":"7e70fcb471e56b2a19f2252930953b3e60fe1a9f","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","hash":"72816c753b283b3073922e0dbaf43b7b0eca084a","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","hash":"5978679d456a2caa60c4577d88015f6287541558","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","hash":"080ec6814b7c0524080725bb14771f6acaea1f81","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","hash":"aadbddac4c13b6104b7c1e8734388b8236d21986","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","hash":"2b17a95811ba31d575f51bc355e64a5fea5bb7ee","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","hash":"87a7218891499b54fc511fba5788d6c571c530da","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","hash":"28d5bef0604f6ff6605018bf5cb0c39becf8ee7d","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","hash":"8569fb80b97a650e8af5e3617e784f9d70759a6a","modified":1591842120643},{"_id":"themes/snail/source/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","hash":"513e3f0c1faabe03d220a4482b770b0d7b0c6c15","modified":1591842120643},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-10.png","hash":"c869b15cada3d4690f2bdd695e4486d8db277b13","modified":1586108677372},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-14.png","hash":"33615ccf60fa2adb47aa70113e00030ddc84cd76","modified":1586108677376},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-5.png","hash":"793113383ec939091149fdbda57e7ffb1be2be9b","modified":1586108677376},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-8.png","hash":"60000d58e2b4699fe83242c91709c87c7af06a7c","modified":1586108677380},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-7.png","hash":"73c40e7f1f5d92baa4fee2613833b78e2efde447","modified":1586108677380},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-9.png","hash":"a863261a9a1730c361887d336738a414c2f0a53f","modified":1586108677380},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx1.png","hash":"899db5dde67d4417c78848d93794b9118dd03b99","modified":1586108677392},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx7.png","hash":"699ca58d9abc07172b853d85230691bc95359a8b","modified":1586108677392},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-bug-fix.gif","hash":"879461e9e878149d4275058d141c4501776c2350","modified":1586108677396},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具/dev-tools.png","hash":"b529d71e083d91f52eba17b90d1ebeeb89374475","modified":1587094240633},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_upload_now.jpg","hash":"4b28118688f086ab9e11c90b79e1073598305aa6","modified":1597749125199},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/upload_performance.jpg","hash":"b5f5e38a9e7bfa908345bac9dd4fbd3dc29b6149","modified":1597749125199},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/process-manager.console.png","hash":"690d3fa68090da90ec30de838c262bc49c3894bc","modified":1608287349659},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/process-manager.trends.png","hash":"57e8486f374e296f2bbd7d9a86745e6e773589d0","modified":1608287349839},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/smb_upload_now.jpg","hash":"4b28118688f086ab9e11c90b79e1073598305aa6","modified":1608285931374},{"_id":"source/img/header_img/archives-widget.jpg","hash":"3dc11cfeac5c8e05e66fe8c78f1c3a51517f738c","modified":1586108677408},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-6.png","hash":"0a9748216e91b802bf53cc5b589f7557af46d58c","modified":1586108677376},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx10.png","hash":"699ca58d9abc07172b853d85230691bc95359a8b","modified":1586108677392},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_login.jpg","hash":"81e82333a656fbf309920825555516e033c54dbf","modified":1592795005373},{"_id":"source/_posts/2020-12-08-Electron-Node多进程工具开发日记/smb_upload_now.jpg","hash":"4b28118688f086ab9e11c90b79e1073598305aa6","modified":1608518143862},{"_id":"themes/snail/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1591842120647},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-bug2.gif","hash":"027471c8f8c9f81eec010d1f64aa9abff423e59c","modified":1586108677396},{"_id":"source/img/article_header/article_bg.jpg","hash":"a51db494ff5b672793985001dafb581598c9c2de","modified":1586108677404},{"_id":"source/img/header_img/home.jpg","hash":"ae194734c8fddbfc4fcb673a3d9685d038e49dcc","modified":1586108677412},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1586108677412},{"_id":"source/img/header_img/tag-bg.jpg","hash":"2564dc7118d94e886cb5c510f55b82070343b30e","modified":1611716911950},{"_id":"source/img/header_img/tag.png","hash":"2fc57dff9e7ca736be24b04cce54ac7476937b67","modified":1586108677412},{"_id":"source/_posts/2019-09-29-联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop2.png","hash":"7bb9f6713506e7a4a57def450ea0f7f01c894fb0","modified":1586108677364},{"_id":"source/_posts/2019-09-29-联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop3.png","hash":"aed0dbf83defa9800c0ab059d17e9c4040f94c4b","modified":1586108677368},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/process-manager.devtools.png","hash":"aa9156efce0d8e214bc7c226dbd5830962a6e713","modified":1608287349715},{"_id":"source/img/header_img/home3.jpg","hash":"d1f39791cb2a331d8bd3cedc5d7a0f940e0b4f68","modified":1586108677412},{"_id":"themes/snail/source/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1591842120639},{"_id":"source/_posts/2018-11-05-简单实现一个Javascript动画处理类/animation.gif","hash":"77eadaec7549bb72c597258999dc2e065eadc19b","modified":1586108677384},{"_id":"source/img/article_header/article_header.png","hash":"ecd26beb4e13612ff419ad794f0371be823222e6","modified":1586108677404},{"_id":"source/img/header_img/404.png","hash":"1b98b8219ecee2e263c8c81c58a53e32a62c3526","modified":1586108677408},{"_id":"source/img/header_img/home-bg-o.png","hash":"e9ba54c513f0a37bbccddfdf7841570f86cdc6a5","modified":1586108677408},{"_id":"source/_posts/2019-09-29-联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop.png","hash":"a2214d606233f1b469428dc445f2ec2f1f8b5088","modified":1586108677360},{"_id":"source/img/header_img/photography-bg.jpeg","hash":"bf09062486ed9ffb7af99649cf465a5de38f5f26","modified":1591860258527},{"_id":"source/_posts/2020-10-23-基于deepin-wine在Ubuntu20-04上安装新版微信/wechat3.0.png","hash":"22d56724f647b75f02bb71646adef8452e70df0c","modified":1603438976623},{"_id":"source/img/header_img/home2.png","hash":"74d23c05e93a2e4bb469737f69d1714d1074bcf9","modified":1586108677412},{"_id":"source/_posts/2019-04-04-LinuxMint18日常软件安装配置/city.jpg","hash":"08717680f36945972e73560f62de5b4ff1334bd4","modified":1598411112966},{"_id":"source/img/header_img/archive-bg.jpg","hash":"a86c934a2f33e8aad54f9cd854900afd5904bdb5","modified":1611717176487},{"_id":"source/_posts/2018-07-09-原生Js实现瀑布流效果/waterfall-1.gif","hash":"5c2321cba8e414d902be7e4ae403d2a12ac814d0","modified":1586108677404},{"_id":"public/img/cd.png","hash":"7b1d07ff8f90b47545d3a951750b671817b7e72d","modified":1615806774119},{"_id":"public/img/cd_tou.png","hash":"493b2ee58b2ad9981d4285a8440a780d4efb406b","modified":1615806774119},{"_id":"public/img/grid.png","hash":"e40bf16689d5f5ab1ecab7c25ff4be174e737b07","modified":1615806774119},{"_id":"public/img/wave-light.png","hash":"af75ad9bd8533cac82b74f06462a9acd0eaccdff","modified":1615806774119},{"_id":"public/img/default.jpg","hash":"fc75240d2a5e0b2627360cc8b956e6a43849f5dc","modified":1615806774119},{"_id":"public/img/header_img/about.jpg","hash":"ac16903ff5a66af9280fab58617a8e5c894877b3","modified":1615806774119},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"fd31e0a5016505904ad65946b69745ec2872b4e6","modified":1615806774119},{"_id":"public/img/header_img/archive.jpg","hash":"d3be1abb2d3b5bdef4216cc469daea3f46349c3a","modified":1615806774119},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"3208aada1ec75b117feea59006b08c76c1d5e150","modified":1615806774119},{"_id":"public/img/article_header/article_bg.jpg","hash":"6128f76ebdc20a3ccb2ca593c6842a8bb63a1d1a","modified":1615806774119},{"_id":"public/img/header_img/home.jpg","hash":"adb9e1fe9e43215a6cb7bccecae0b759bf6599cc","modified":1615806774119},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"89b5d79b99e88d484b502a587a845bbb98ba8ba4","modified":1615806774119},{"_id":"public/img/header_img/home3.jpg","hash":"cd84c8b700d32784afdd7fdfec725f254cf2a45d","modified":1615806774119},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"d386a2e85b1928b911eddce981fbddf85b13f220","modified":1615806774119},{"_id":"public/img/header_img/404.png","hash":"fd3caa0224f4bac1f0aaee3484281df775fea7a7","modified":1615806774119},{"_id":"public/img/header_img/home-bg-o.png","hash":"7023da5d25cdc38f2b552e2cc3322fe49f499163","modified":1615806774119},{"_id":"public/img/header_img/home2.png","hash":"3f74583fd6a81c30562dbc8bd504f57cb36e977f","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-bug-fix.gif","hash":"fccce7b27fb8fc4362c2b27c0a84939dcd7bf702","modified":1615806774119},{"_id":"public/2020/04/16/前端浏览器开发工具/dev-tools.png","hash":"c6e411f871e7da6425839dade6496fefb48e99ad","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/smb_upload_now.jpg","hash":"d43f109ef737abb7c64b93cc22f2fbc3b01d6694","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/upload_performance.jpg","hash":"5fc16ee3f4e5162175e897f71efed5300dd3fce6","modified":1615806774119},{"_id":"public/2020/12/18/Electron多进程工具开发日记2：进程管理UI/process-manager.console.png","hash":"a3f377af4f6f617c6524dadce9fe61a7d47697f4","modified":1615806774119},{"_id":"public/2020/12/18/Electron多进程工具开发日记2：进程管理UI/process-manager.trends.png","hash":"24f8c4bd7982b7be580346a0a4882f5695ea9fa3","modified":1615806774119},{"_id":"public/2020/12/18/Electron多进程工具开发日记2：进程管理UI/smb_upload_now.jpg","hash":"d43f109ef737abb7c64b93cc22f2fbc3b01d6694","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/smb_login.jpg","hash":"3a161d6d5e04e2f1a5dd3deca30f1e69ef0ebf8d","modified":1615806774119},{"_id":"public/2020/12/08/Electron-Node多进程工具开发日记/smb_upload_now.jpg","hash":"d43f109ef737abb7c64b93cc22f2fbc3b01d6694","modified":1615806774119},{"_id":"public/2018/11/05/简单实现一个Javascript动画处理类/animation.gif","hash":"97e7d2d42f4f26a78c1fba1694a920e2a6c2a6a7","modified":1615806774119},{"_id":"public/2019/04/04/LinuxMint18日常软件安装配置/city.jpg","hash":"f0df33064389912f2d01a2c50353864ae71fa6d3","modified":1615806774119},{"_id":"public/2020/10/23/基于deepin-wine在Ubuntu20-04上安装新版微信/wechat3.0.png","hash":"8bc8b715c8e03d06132e07b9eabf603c3e3ef8e9","modified":1615806774119},{"_id":"public/2018/11/06/用Javascript实现一个可自定义样式的tootips组件/tootip.png","hash":"0c3b8c8840a7c78b05c30475f95b1e462af65a9c","modified":1615806774119},{"_id":"public/2018/11/06/用Javascript实现一个可自定义样式的tootips组件/tootips.gif","hash":"f4e99222e5a3e3f2070fd5a613172fe44f84334c","modified":1615806774119},{"_id":"public/2020/03/07/基于s3对象存储多文件分片上传的Javascript实现（一）/shards_upload.jpg","hash":"820d03c9acfc4e4d4c86fee633e5cb30fa599aa1","modified":1615806774119},{"_id":"public/2020/03/26/基于s3对象存储多文件分片上传的Javascript实现（二）/node_pipe.png","hash":"a0c7d4ea6c5ccc5d63072c7637a2db520cffd15a","modified":1615806774119},{"_id":"public/2020/10/25/LeetCode探险记：动态规划、栈和回溯/drawio-1.png","hash":"c714afed021c2c27cf520a52a60c81930e1f960b","modified":1615806774119},{"_id":"public/2020/10/25/LeetCode探险记：动态规划、栈和回溯/drawio-2.png","hash":"0965e6a4133ffd3d1fff880883f555a3ae934a46","modified":1615806774119},{"_id":"public/2019/09/29/联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop.png","hash":"bd72f21f3745cbf2a38590a3fecd646a629046f5","modified":1615806774119},{"_id":"public/2020/12/08/Electron-Node多进程工具开发日记/chromium.jpg","hash":"a5e193b840a4876e4ff89cae0e277d2ef8b5e74f","modified":1615806774119},{"_id":"public/2020/12/08/Electron-Node多进程工具开发日记/electron-re.png","hash":"561d1462ea3ba5c8935844b92bdc8459484f4eb6","modified":1615806774119},{"_id":"public/2020/04/16/前端浏览器开发工具/dev-tools-debug.png","hash":"71e80f527196cac384e1e27e1eb0c66756758ce8","modified":1615806774119},{"_id":"public/2020/04/16/前端浏览器开发工具/dev-tools-storage.png","hash":"a8ab0ed159f7fd01bf9c06a1577d1a72f3926ea4","modified":1615806774119},{"_id":"public/2020/04/16/前端浏览器开发工具/dev-tools-storage2.png","hash":"28ddb3518ae6fb334a9887e428cfcdc244f9023a","modified":1615806774119},{"_id":"public/2020/08/28/基于Antd库实现可编辑树组件/editable_tree.png","hash":"b2464a5d104fb688a87fb1db6b1ed1c2f8239fea","modified":1615806774119},{"_id":"public/2020/08/28/基于Antd库实现可编辑树组件/tree_add_sister.png","hash":"010b22c8b92d52eabf1591f598ee5c84956f11ae","modified":1615806774119},{"_id":"public/2020/08/28/基于Antd库实现可编辑树组件/tree_add_sub.png","hash":"8e1ff6ec40610ed27af6427c180355f58c1af19a","modified":1615806774119},{"_id":"public/2020/08/28/基于Antd库实现可编辑树组件/tree_in_edit.png","hash":"506519d7f07b62b3b6585c70bbcd3065d5c146b4","modified":1615806774119},{"_id":"public/2020/12/18/Electron多进程工具开发日记2：进程管理UI/chromium.jpg","hash":"a5e193b840a4876e4ff89cae0e277d2ef8b5e74f","modified":1615806774119},{"_id":"public/2020/12/18/Electron多进程工具开发日记2：进程管理UI/electron-re.png","hash":"561d1462ea3ba5c8935844b92bdc8459484f4eb6","modified":1615806774119},{"_id":"public/2020/12/18/Electron多进程工具开发日记2：进程管理UI/process-manager.devtools.png","hash":"7f2ff004af58475ffa1d806cdc5b0f2476ee10d8","modified":1615806774119},{"_id":"public/2020/12/18/Electron多进程工具开发日记2：进程管理UI/process-manager.main.png","hash":"910b5bc096d583543deb5065765e6205344101a6","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/chromium.jpg","hash":"a5e193b840a4876e4ff89cae0e277d2ef8b5e74f","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/electron1.png","hash":"4d4f8ed9bfcad27f57b6e95c4177c5a168333bbf","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/inspect.jpg","hash":"34b28afb1eda26e0de0685303adda4e23f345034","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/refreshTasks.jpg","hash":"0828e8df96c07b5fae359beeabb465bec4520039","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/shards_upload.jpg","hash":"820d03c9acfc4e4d4c86fee633e5cb30fa599aa1","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/smb_upload_now.jpg","hash":"d43f109ef737abb7c64b93cc22f2fbc3b01d6694","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/upload_memory.jpg","hash":"ae124eef6ab63572a91470f39179539f4bcdb0a0","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/electron-lang.png","hash":"8f7cdef3e08c86e11b484c9f14c1a7c4506d5fb4","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/shards_upload.jpg","hash":"820d03c9acfc4e4d4c86fee633e5cb30fa599aa1","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/smb_node.jpg","hash":"8a77594e5de48f3a576c65f0569df79adc4eb166","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/smb_node_conf.jpg","hash":"d969603b0b6bdd94fa6a811f8ed2908016940150","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/smb_share.jpg","hash":"fa1a4abeee04e649d6a0d531e217fca9423617ad","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/smb_share_mount.jpg","hash":"c7e50f9e772a8f63ab6eba41f3807de2ead168ff","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/smb_upload_record.jpg","hash":"6639dd243cb6ab18fa50babdf896791cda13e13c","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-bug2.gif","hash":"98e1fbff38cd13d7c03ef84e00c6c9be54735f79","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/snapshot.png","hash":"a61b806568c481c22884194c46f08cb09bdc1341","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/snapshot_select.png","hash":"59ceff5d623013fa4306ab119471e710cf0aee19","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-1.png","hash":"d2a4646a6b46ac6e8be2865846c46c313dcce545","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-2.png","hash":"ca0e1f8ea884f485deb8c311ac31b6574c89f877","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-3.png","hash":"e6a43aeb341590efe6ae5dd852c3fc01e1d7862f","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-4.png","hash":"31fcb86c18de952e529bb885fb24291639881004","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-5.png","hash":"ce6c867bdd0000e4aeeb4929e642fee215a381d1","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-6.png","hash":"638fa008070bcc259543193a99b7612a5b2fcae3","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/tree-bug1.gif","hash":"80dcce41f18fb541e51e5cf40b8f53a39723b6fd","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/smb_dir.jpg","hash":"0325c01b5c156a999e6499ae6542c52da0e9fa60","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/smb_node.jpg","hash":"8a77594e5de48f3a576c65f0569df79adc4eb166","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/smb_node_conf.jpg","hash":"d969603b0b6bdd94fa6a811f8ed2908016940150","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/smb_shutdown.jpg","hash":"0477fa80186bd539ca4400ceedb341548aaadca8","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/waterfall-2.jpg","hash":"bbdda0636779d855dc2ba622ec673566980aa6d4","modified":1615806774119},{"_id":"public/.github/workflows/sync.json","hash":"6433e8ee9f953c23ac46245ad08f68fe5852f64a","modified":1615806774119},{"_id":"public/baidusitemap.xml","hash":"0962bfef4755da0737b13eababbcd95d4157a6e1","modified":1615806774119},{"_id":"public/search.xml","hash":"e0f11a1a9469bdafd925fe06937e2ee645e89467","modified":1615806774119},{"_id":"public/sitemap.xml","hash":"9c59dfa0b82875b69e381cbb36dd2bf469e3d593","modified":1615806774119},{"_id":"public/404.html","hash":"00cb43cdf1d8a6d767db2d1787a57a0b4b637493","modified":1615806774119},{"_id":"public/2019/10/01/polipo服务配置shadowsocks终端代理/index.html","hash":"f549499fe5d7b074fc70216086312627e61c4fe8","modified":1615806774119},{"_id":"public/2019/04/04/proxychains终端代理/index.html","hash":"373a21cbbb2f0c03d0c7c170ea756082ef9791d3","modified":1615806774119},{"_id":"public/about/index.html","hash":"11a57fe7e2ecc8cabfecd9631f340b946e40a96b","modified":1615806774119},{"_id":"public/categories/index.html","hash":"e2ffd7768e6644c9db4edee9d7ff21eec033613c","modified":1615806774119},{"_id":"public/tags/index.html","hash":"67894b5d72f15fc80e85214f8918f2fa7753483f","modified":1615806774119},{"_id":"public/2021/02/07/前端性能优化技巧详解-1/index.html","hash":"7dfa6737a3e8f26fa426d1b344f4107f01f9526d","modified":1615806774119},{"_id":"public/2021/01/29/前端123：浏览器缓存的工作方式/index.html","hash":"225949582c75ca6363b2e29cbb7a7e8a1cb30a09","modified":1615806774119},{"_id":"public/2021/01/25/理解React：Fiber架构和新旧生命周期/index.html","hash":"ab0ae50642593fee3e33beee908fa679bf98fcdb","modified":1615806774119},{"_id":"public/2020/12/18/Electron多进程工具开发日记2：进程管理UI/index.html","hash":"17050692db6b9692f923a2c708d7d844d34a3512","modified":1615806774119},{"_id":"public/2020/12/08/Electron-Node多进程工具开发日记/index.html","hash":"f2c720d9efe53fc89067f66f52c26ed46846e48d","modified":1615806774119},{"_id":"public/2020/10/25/LeetCode探险记：动态规划、栈和回溯/index.html","hash":"3177ab1c17d44f53aa7768b3f95fe6d108d1f73f","modified":1615806774119},{"_id":"public/2020/10/23/基于deepin-wine在Ubuntu20-04上安装新版微信/index.html","hash":"7269911b7557e834650488eca74a51ba45283c9e","modified":1615806774119},{"_id":"public/2020/09/25/32个手撕JS（转）/index.html","hash":"0a35224c0a9bbde2b7fcf1e55e7514732f62c124","modified":1615806774119},{"_id":"public/2020/08/28/基于Antd库实现可编辑树组件/index.html","hash":"f5b68cd4b6523208385054b516acfcfca96cad87","modified":1615806774119},{"_id":"public/2020/08/16/基于Electron的smb客户端文件上传优化探索/index.html","hash":"a4b771fd18a696d4c89b78a4f3308ee02e3165d6","modified":1615806774119},{"_id":"public/2020/07/17/基于Electron的smb客户端开发记录/index.html","hash":"cae1ef95be568de6dc2b5133abcaefe11dfb8368","modified":1615806774119},{"_id":"public/2020/04/16/前端浏览器开发工具/index.html","hash":"8061df4f58d8032069aa162af76d231cfbbdef3d","modified":1615806774119},{"_id":"public/2020/03/26/基于s3对象存储多文件分片上传的Javascript实现（二）/index.html","hash":"6d038f895a2d9596d291b9a4dae80b597c297a64","modified":1615806774119},{"_id":"public/2020/03/22/echarts图表-树形图开发记录/index.html","hash":"42ccce6de6a8085dc234c612a5935d53e997daa9","modified":1615806774119},{"_id":"public/2020/03/07/基于s3对象存储多文件分片上传的Javascript实现（一）/index.html","hash":"bdd98adc42401ceaa791b89ab7b5f17d3315f05d","modified":1615806774119},{"_id":"public/2019/11/14/Docker运行容器化的Tim和Wechat/index.html","hash":"cee6155de9f3bb6a40f7652327f859167c09d665","modified":1615806774119},{"_id":"public/2019/10/26/Electron-Mobx-React开发记录（二）/index.html","hash":"1e50b609f22c24295948ab7d0988091a046e7162","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/index.html","hash":"71399b0eba57b214b8c028cfe122b731a00a8df7","modified":1615806774119},{"_id":"public/2019/09/29/联想y7000安装ubuntu18-04显卡驱动解决方案/index.html","hash":"ce638dfc9603e58daf592f41cbf872b8b479ffb9","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/index.html","hash":"8b1b6279c14a75f501c00e3a06f5557888ca56bb","modified":1615806774119},{"_id":"public/2019/04/04/LinuxMint18日常软件安装配置/index.html","hash":"36c563d72065d67b6ee8ca99dd55899d825953c6","modified":1615806774119},{"_id":"public/2018/11/06/用Javascript实现一个可自定义样式的tootips组件/index.html","hash":"415a786215e910bae1c838ecde2c0471e61eb7d9","modified":1615806774119},{"_id":"public/2018/11/05/简单实现一个Javascript动画处理类/index.html","hash":"e49f3199784f99eadb69950d3a227c9b9c5aeb28","modified":1615806774119},{"_id":"public/2018/10/31/使用ES5实现ES6中的Promise/index.html","hash":"1c2bb539611b72eca040688e12d90c61a0dab4dd","modified":1615806774119},{"_id":"public/2018/07/09/原生Js实现瀑布流效果/index.html","hash":"03718a96c1ceafb15de60b4167ea89ec09afb112","modified":1615806774119},{"_id":"public/2018/01/04/模仿RequireJs的用法写一个低配版的模块加载器/index.html","hash":"f9175f2d0975e6b8a060b7e17c21f29c6692210e","modified":1615806774119},{"_id":"public/2017/10/21/sass开发规范/index.html","hash":"5ff6b14ed926cd609d96525dd8c0233ef8de5098","modified":1615806774119},{"_id":"public/archive/index.html","hash":"8585d45976f39d9da39d1aebbeca89238f00f320","modified":1615806774119},{"_id":"public/archives/index.html","hash":"855a0eb20a85c33fa49a7411ffd55fcd80cc4087","modified":1615806774119},{"_id":"public/archives/archives/2/index.html","hash":"e9f8d6c2ddc6f1be7a63afbafdf416974ebcdf02","modified":1615806774119},{"_id":"public/archives/archives/3/index.html","hash":"b414b231927e01b191387519f48f4fdf38865a66","modified":1615806774119},{"_id":"public/archives/2017/index.html","hash":"aa4b89d0001d016490c1bdcccc941a3c28909c63","modified":1615806774119},{"_id":"public/archives/2017/10/index.html","hash":"96ede7fd5603283fb537b0fbb856866bc2a1103d","modified":1615806774119},{"_id":"public/archives/2018/index.html","hash":"65c1196565f26667b8bc47ddeada199209fa20d0","modified":1615806774119},{"_id":"public/archives/2018/01/index.html","hash":"bcc11758296a7aab520f9504e036a7efcbdcbd37","modified":1615806774119},{"_id":"public/archives/2018/07/index.html","hash":"9cf9f99a2c4f1303b220b9b54becebb9732133ed","modified":1615806774119},{"_id":"public/archives/2018/10/index.html","hash":"9d02ca859ee4aca33db29d550a6dc2d437db22f4","modified":1615806774119},{"_id":"public/archives/2018/11/index.html","hash":"25eebc11602b639c8d55da9b8013a05f0a94da14","modified":1615806774119},{"_id":"public/archives/2019/index.html","hash":"70e82ac757a80a7fd6bdd504b25b090b24cc4ddf","modified":1615806774119},{"_id":"public/archives/2019/04/index.html","hash":"37fb6936bca947bebd9e0ad09ea7818651855a8b","modified":1615806774119},{"_id":"public/archives/2019/06/index.html","hash":"08f0c55c3eaf81c650a22378c8956dc27595a7be","modified":1615806774119},{"_id":"public/archives/2019/09/index.html","hash":"cfaf8e55578211a33440881a42541667d7b4452f","modified":1615806774119},{"_id":"public/archives/2019/10/index.html","hash":"30bef7de61cb53afbeb547e0e09e51950f6a0206","modified":1615806774119},{"_id":"public/archives/2019/11/index.html","hash":"e0aea84dc8f9a5c97613709e95c640383d75d17f","modified":1615806774119},{"_id":"public/archives/2020/index.html","hash":"6dfe392fa6f2a423906f8ded171781d9163ee4a2","modified":1615806774119},{"_id":"public/archives/2020/archives/2/index.html","hash":"938c7958d993c11ffbcf4c24282fc3712e8feaf4","modified":1615806774119},{"_id":"public/archives/2020/03/index.html","hash":"8573b9785938602814e6257d91a729109a086ab5","modified":1615806774119},{"_id":"public/archives/2020/04/index.html","hash":"6d8df908635b1a98251008a96bd39bd321029e31","modified":1615806774119},{"_id":"public/archives/2020/07/index.html","hash":"63cc14913eb740ce416b8f19f085f1a2dbd859bb","modified":1615806774119},{"_id":"public/archives/2020/08/index.html","hash":"8485664ad622b2291edd798c3176eb8c79521dba","modified":1615806774119},{"_id":"public/archives/2020/09/index.html","hash":"ad2b2222079c01be650f3a6d464bffbc53448296","modified":1615806774119},{"_id":"public/archives/2020/10/index.html","hash":"110edf88ec9dbe6e9e6feb8c70dcde47d6ef6956","modified":1615806774119},{"_id":"public/archives/2020/12/index.html","hash":"0087a4116f84356aee03bc87f76b31c73af1a996","modified":1615806774119},{"_id":"public/archives/2021/index.html","hash":"c70435a7ee166e1dcb56e05b94cf2d3e187874e7","modified":1615806774119},{"_id":"public/archives/2021/01/index.html","hash":"cef9e0bf2903ac9e96f59eaf46a61432bc2b2625","modified":1615806774119},{"_id":"public/archives/2021/02/index.html","hash":"9f28b5ca9bd896481fd4ce419901ede092cf22b8","modified":1615806774119},{"_id":"public/categories/Sass/index.html","hash":"efb15e14773980662488390e32cb82659a4bdc83","modified":1615806774119},{"_id":"public/categories/Javascript/index.html","hash":"ae6d9a47983bf25329a1efcab39dd74237e9f2d2","modified":1615806774119},{"_id":"public/categories/Linux/index.html","hash":"0a4674f4b283764ce321df13b5ee778ca04ee12a","modified":1615806774119},{"_id":"public/categories/Mobx/index.html","hash":"c7244cadedf394c0c1dcd0e2a65c00f3fde02b79","modified":1615806774119},{"_id":"public/categories/Electron/index.html","hash":"6032f6f7426a10b9b7d68853c303c2552e40c197","modified":1615806774119},{"_id":"public/categories/Echarts/index.html","hash":"88f7edbf269aa6854b72ce39c1ea9fef62329cdf","modified":1615806774119},{"_id":"public/categories/Javascript/Node/index.html","hash":"ed5811726480bf9a95e7585ab2d885714faef564","modified":1615806774119},{"_id":"public/categories/Tools/index.html","hash":"e5324bff94c5fe8e915edb0c4d0011e9d682b44a","modified":1615806774119},{"_id":"public/categories/Antd/index.html","hash":"18253b0fdd0c69d23a943ab3a051eab45163352c","modified":1615806774119},{"_id":"public/categories/Js/index.html","hash":"b86a8deddc4b0f5bb39259595d19966b8f485156","modified":1615806774119},{"_id":"public/categories/Mobx/Electron/index.html","hash":"b00b2ca6835f40b5643f7156118680750617f02e","modified":1615806774119},{"_id":"public/categories/React/index.html","hash":"b7834a63ebaad05dd64271fb92dfe7d6eb58bdb2","modified":1615806774119},{"_id":"public/categories/HTTP/index.html","hash":"f2c92a8e74e5348a648f2be5a77ba39b785fda61","modified":1615806774119},{"_id":"public/categories/Antd/React/index.html","hash":"7c3476f7c288176f3fc11284f48a9a1132dc884f","modified":1615806774119},{"_id":"public/categories/Electron/Node/index.html","hash":"80e6657e97fa5bf709711f2eb372db4624c46eff","modified":1615806774119},{"_id":"public/categories/Performance/index.html","hash":"65e123c482d59b60a11067d2a5de21da367fc890","modified":1615806774119},{"_id":"public/categories/Performance/Javascript/index.html","hash":"edcf3269451eef5d75c1bccbbd8e571c475091ef","modified":1615806774119},{"_id":"public/categories/Performance/Javascript/HTML/index.html","hash":"6289e46c9f2c8d99aac20a5ce0bebe8642eefe8f","modified":1615806774119},{"_id":"public/categories/Performance/Javascript/HTML/CSS/index.html","hash":"3f8ae459e6e73ca0732956e6ae016fa6da73130f","modified":1615806774119},{"_id":"public/index.html","hash":"ddac2aad365bf6b423cca8a61bff79190578a9b1","modified":1615806774119},{"_id":"public/archives/2/index.html","hash":"89bb410ca7bfdc2d86976ffacceec25d74358708","modified":1615806774119},{"_id":"public/tags/sass/index.html","hash":"9b9d267851d28a91323004379d5afae8b4d92ba6","modified":1615806774119},{"_id":"public/tags/css/index.html","hash":"79d06a860a0c4afb3bb97ed1caceee46436128ce","modified":1615806774119},{"_id":"public/tags/devtools/index.html","hash":"5048743a629182697d7992d422ca0b14a26fab76","modified":1615806774119},{"_id":"public/tags/javascript/index.html","hash":"d5e84af9947a416e10bcd359ad74b3af201e993f","modified":1615806774119},{"_id":"public/tags/promise/index.html","hash":"b68df1b11c87d512c98db1011b3609ceb9784270","modified":1615806774119},{"_id":"public/tags/es6/index.html","hash":"9586409bc7580d83578e5a133ceb30913c21e3e2","modified":1615806774119},{"_id":"public/tags/animation/index.html","hash":"b7500c9b6cbe6cefe1ee796913a229ae76d77b5b","modified":1615806774119},{"_id":"public/tags/linux/index.html","hash":"d7bb59dcf5fb8bd36ab2e5d25515e6e4e642585f","modified":1615806774119},{"_id":"public/tags/mint/index.html","hash":"1af6d9fb1fe194a7b621636a23bf62fc97bd6482","modified":1615806774119},{"_id":"public/tags/proxy/index.html","hash":"e58cf245c356164c3d750fbe0032661aff762393","modified":1615806774119},{"_id":"public/tags/shadowsocks/index.html","hash":"47b2c8c7fa36d210c3ce89fa2e5c47445ea4fb2a","modified":1615806774119},{"_id":"public/tags/ubuntu18-04/index.html","hash":"b61e026feedb041750cd9b5fc24899fc0bc617a8","modified":1615806774119},{"_id":"public/tags/docker/index.html","hash":"3bfee3c7ebcb00bbe3711b6b31100eaf1760c42a","modified":1615806774119},{"_id":"public/tags/desktop/index.html","hash":"5d841a428c98e9aab9655d7cc5860a45dfe73e7d","modified":1615806774119},{"_id":"public/tags/react/index.html","hash":"37a8f1f33abf57e0d4935651a00b079ed210415d","modified":1615806774119},{"_id":"public/tags/mobx/index.html","hash":"296d23571dd54015bcba953af02fbe3659ba77ea","modified":1615806774119},{"_id":"public/tags/electron/index.html","hash":"0649f2b1178f53086ff820dd33bdf7cf6f2a5adb","modified":1615806774119},{"_id":"public/tags/upload/index.html","hash":"bd0417c1706c9f972ed62acd00b62099820691ff","modified":1615806774119},{"_id":"public/tags/aws/index.html","hash":"847b00d5ab5e9f1e9cef6bdba2f85818400111c4","modified":1615806774119},{"_id":"public/tags/s3/index.html","hash":"1c5be3e883a25462a021620ddfb7ad3b22330186","modified":1615806774119},{"_id":"public/tags/echarts/index.html","hash":"50b422e8f947fef20c2bf4e71ac51061a535f909","modified":1615806774119},{"_id":"public/tags/node/index.html","hash":"0599f89ac16cf774f1c93438b36ee02129fcaf3f","modified":1615806774119},{"_id":"public/tags/browser/index.html","hash":"10a1221bfb6009a7eb0c0f69175be61db63b7f83","modified":1615806774119},{"_id":"public/tags/tools/index.html","hash":"c428ab4eb99f21f73faf5a22dc431f687b711643","modified":1615806774119},{"_id":"public/tags/smb/index.html","hash":"b2632590e1b80d6f1bfcba3a62340cf2f7e87b42","modified":1615806774119},{"_id":"public/tags/antd/index.html","hash":"8e086cc555f4ee3b2712961d0858857baddc2bd4","modified":1615806774119},{"_id":"public/tags/tree/index.html","hash":"793dc1ea3e69a7cef4febd389d60ddc514423478","modified":1615806774119},{"_id":"public/tags/ubuntu20-04/index.html","hash":"2623ee87a7d222461a06a15592bda9122cf7d361","modified":1615806774119},{"_id":"public/tags/leetcode/index.html","hash":"53296143cb951b44500f02ecb4df554d82560ed1","modified":1615806774119},{"_id":"public/tags/js/index.html","hash":"6812e59d36dc1c84af89897613374ec6153723c5","modified":1615806774119},{"_id":"public/tags/process/index.html","hash":"f51fbab1f1aa0f47170b86d8d615749ac9013ed7","modified":1615806774119},{"_id":"public/tags/cache/index.html","hash":"282d3063984c386ae9e7da555ecdfdd266bad3f6","modified":1615806774119},{"_id":"public/tags/html/index.html","hash":"1d0f17498f41d5a5a129e28cb5cf5473636a90df","modified":1615806774119},{"_id":"public/tags/performance/index.html","hash":"33711ce40a306308619622da00841753593012ed","modified":1615806774119},{"_id":"public/CNAME","hash":"4b0d28231461a1e392ea3da30784d9f207c3b28b","modified":1615806774119},{"_id":"public/robots.txt","hash":"92566f393a37de1b3d80739ac2f82edf0e8f416a","modified":1615806774119},{"_id":"public/img/notice.png","hash":"7dd33804c5db9ce303c6518defb0fab36ac443c5","modified":1615806774119},{"_id":"public/img/top-light.png","hash":"35795d86dc6bd0fe217ed9ac5a84c69fe3d89bbc","modified":1615806774119},{"_id":"public/img/tp.png","hash":"4d2a36c85473c8cdbbf0cc8f5930baf27be7af9b","modified":1615806774119},{"_id":"public/img/wave-dark.png","hash":"af6e4c8e6923e2ecbcd8118698c826559a3410f2","modified":1615806774119},{"_id":"public/img/avatar/nojsja.jpeg","hash":"71fc59f8b263f90563e6f4f7c91efac2c7c97921","modified":1615806774119},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1615806774119},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1615806774119},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1615806774119},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1615806774119},{"_id":"public/css/images/ironman.png","hash":"ed4cfd8d6cb29fe389768e78701c1e704de0a4b4","modified":1615806774119},{"_id":"public/css/images/rocket.png","hash":"76f4a29befec0558eba79e91d494b8186ac83bd9","modified":1615806774119},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3g3D_vx3rCubqg.woff2","hash":"7e70fcb471e56b2a19f2252930953b3e60fe1a9f","modified":1615806774119},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gTD_vx3rCubqg.woff2","hash":"72816c753b283b3073922e0dbaf43b7b0eca084a","modified":1615806774119},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gbD_vx3rCubqg.woff2","hash":"5978679d456a2caa60c4577d88015f6287541558","modified":1615806774119},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gfD_vx3rCubqg.woff2","hash":"080ec6814b7c0524080725bb14771f6acaea1f81","modified":1615806774119},{"_id":"public/fonts/googleapis/JTURjIg1_i6t8kCHKm45_dJE3gnD_vx3rCs.woff2","hash":"aadbddac4c13b6104b7c1e8734388b8236d21986","modified":1615806774119},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459W1hyyTh89ZNpQ.woff2","hash":"2b17a95811ba31d575f51bc355e64a5fea5bb7ee","modified":1615806774119},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WRhyyTh89ZNpQ.woff2","hash":"87a7218891499b54fc511fba5788d6c571c530da","modified":1615806774119},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WZhyyTh89ZNpQ.woff2","hash":"28d5bef0604f6ff6605018bf5cb0c39becf8ee7d","modified":1615806774119},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WdhyyTh89ZNpQ.woff2","hash":"8569fb80b97a650e8af5e3617e784f9d70759a6a","modified":1615806774119},{"_id":"public/fonts/googleapis/JTUSjIg1_i6t8kCHKm459WlhyyTh89Y.woff2","hash":"513e3f0c1faabe03d220a4482b770b0d7b0c6c15","modified":1615806774119},{"_id":"public/2020/03/07/基于s3对象存储多文件分片上传的Javascript实现（一）/upload.png","hash":"2ff71d516e47ee8826ecda7484b454cb7d3e719f","modified":1615806774119},{"_id":"public/2020/03/26/基于s3对象存储多文件分片上传的Javascript实现（二）/upload.png","hash":"2ff71d516e47ee8826ecda7484b454cb7d3e719f","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-11.png","hash":"8ae8ed9c52709ffdde63ef92ed26578e87e05cce","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-13.png","hash":"2f929624df2751c01731ed1ba21cda2ffb7d7092","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-2.png","hash":"63ab9b51046225b0846b88664d90cacc1db4aab3","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-3.png","hash":"f331b6722e7cf2035e00f1dd307c58a2379b0c7f","modified":1615806774119},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1615806774119},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1615806774119},{"_id":"public/2018/10/31/使用ES5实现ES6中的Promise/lifeIsStrange.jpg","hash":"01e12f5319efa056db6cd359d9bf820079bf69c3","modified":1615806774119},{"_id":"public/2019/10/26/Electron-Mobx-React开发记录（二）/Fly.jpg","hash":"88fbee27cef45dfe26b5fb0b084313fa8887b5b6","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/Fly.jpg","hash":"88fbee27cef45dfe26b5fb0b084313fa8887b5b6","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx9.png","hash":"0c1433628cd9227b7cb07753a1ed79a36e8125a1","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/waterfall-3.jpg","hash":"e9ae0afb7829e68a8f46ffada84373ae026cf787","modified":1615806774119},{"_id":"public/css/archive.css","hash":"e1b0bdb6585fb031f3a7f9ffc0012245453db404","modified":1615806774119},{"_id":"public/css/dusign-common-light.css","hash":"8ea6cd8d67c09ec96de17171b32bdae458ecc366","modified":1615806774119},{"_id":"public/css/fonts.googleapis.css","hash":"9c28829a3fecff92dc9d806c74dcd49ea5dd8f62","modified":1615806774119},{"_id":"public/css/github-markdown.css","hash":"d5e1ea8fb01b40d92d4d7402af84c1853d875447","modified":1615806774119},{"_id":"public/css/highlight.css","hash":"e73cdb102a5be785414bbc5ed6eb391b62bab4d4","modified":1615806774119},{"_id":"public/css/gitment.css","hash":"7bfb40bdac7bbd214cb9974719a87b02ecd8cd78","modified":1615806774119},{"_id":"public/css/rocket.css","hash":"6848c6584e729d42a5f76778cf015d8fe4d7d36d","modified":1615806774119},{"_id":"public/css/signature.css","hash":"b9ec3c9372942dd6a3b2a29cd66781c5147d47d7","modified":1615806774119},{"_id":"public/css/toc.css","hash":"93c52d3c1fdadb2329679ca94b6be83ccef39142","modified":1615806774119},{"_id":"public/css/widget.css","hash":"e22abcabc8e82322c27eb392c415c23bb09a010e","modified":1615806774119},{"_id":"public/js/MathJax.js","hash":"a241e02696145d159bfe9b05909e0aba399c5bb1","modified":1615806774119},{"_id":"public/js/anchor.nojsja.js","hash":"10a08436a8aadf783548ba9bf3947aa757749647","modified":1615806774119},{"_id":"public/js/buttons.js","hash":"57ca12fe599877f1d03d284e8a73a4eeca026bea","modified":1615806774119},{"_id":"public/js/busuanzi.pure.mini.js","hash":"718a25f0713ee08bc30bdcbcb6cccb7589b56a62","modified":1615806774119},{"_id":"public/js/canvas-nest.js","hash":"e8714d7991950b5bfa7b826c72d97a792dceaeed","modified":1615806774119},{"_id":"public/js/hux-blog.js","hash":"99d6b17851a85d525b46ccaa6fb95631222ae79c","modified":1615806774119},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1615806774119},{"_id":"public/js/jquery.nav.js","hash":"3d6db9ab6f5d7c82f9d42dfad454af62551788bf","modified":1615806774119},{"_id":"public/js/line.js","hash":"3bbd812a906c5f53f0a9bc872fd59115c31a4833","modified":1615806774119},{"_id":"public/js/mouse-click.js","hash":"1189fa279053b84093906786734888ffbaed4bf0","modified":1615806774119},{"_id":"public/js/ribbonDynamic.js","hash":"1d678d1fab2cbb1ed8cdae468a593dc921b26915","modified":1615806774119},{"_id":"public/js/ribbonStatic.js","hash":"0856c2e39b127a02b351b60b4630bc541c012d6a","modified":1615806774119},{"_id":"public/js/search.js","hash":"47f39115e427748ffb47b2f5084e7eb55f5f0e6c","modified":1615806774119},{"_id":"public/js/totop.js","hash":"fd586f615e9521f890a891dba74e5664eaf23ba1","modified":1615806774119},{"_id":"public/css/refrence.json","hash":"6b41c0006b848e930a7bd08e5e57296574f8d823","modified":1615806774119},{"_id":"public/css/dusign-light.css","hash":"6199dcdc589e783fd271ed283cc12ec2a5016037","modified":1615806774119},{"_id":"public/css/font-awesome.min.css","hash":"8c15c6bd82c71e9ef1bb11cf24e502fe07518ac5","modified":1615806774119},{"_id":"public/css/font-awesome.css","hash":"7578c98756db8157f1738f6da8107e3db85d012d","modified":1615806774119},{"_id":"public/css/font-awesome.star.css","hash":"175c63d07dc152483da4b770e7b5cbbbc5d19e4e","modified":1615806774119},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1615806774119},{"_id":"public/js/bootstrap.js","hash":"8017a76fe7330137757961efb0ae3125243fa791","modified":1615806774119},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1615806774119},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1615806774119},{"_id":"public/js/Valine.min.js","hash":"b64fbb45ba5495e16013b7d3d114071eb10c16aa","modified":1615806774119},{"_id":"public/js/jquery.js","hash":"b30d74236f66524fdbeceb42d8f8d5a0a94a9775","modified":1615806774119},{"_id":"public/img/header_img/categories-bg.jpg","hash":"aa83bedb9e15aa971fbf7951e9924397c4a22f54","modified":1615806774119},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1615806774119},{"_id":"public/img/header_img/archives-widget.jpg","hash":"3dc11cfeac5c8e05e66fe8c78f1c3a51517f738c","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-10.png","hash":"c869b15cada3d4690f2bdd695e4486d8db277b13","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx2.png","hash":"07f4fb4a584c4ae7be2aa5256eaceb9aad03cdb9","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx3.png","hash":"192a7ab1f6411b166deb64d38ed67f2dbfffab50","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx4.png","hash":"192a7ab1f6411b166deb64d38ed67f2dbfffab50","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx6.png","hash":"e72cec49c559744899d5a23f0bfa30f4356045cf","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx8.png","hash":"fdb356e7d6388d858f9b861d95062ed72274400d","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-1.jpg","hash":"2f2a11b7d0fddda07c17e99be43633f23b6583a3","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-12.png","hash":"9530e2c1ea32225e8674ca2fa296c0f80e450157","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-14.png","hash":"33615ccf60fa2adb47aa70113e00030ddc84cd76","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-5.png","hash":"793113383ec939091149fdbda57e7ffb1be2be9b","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-8.png","hash":"60000d58e2b4699fe83242c91709c87c7af06a7c","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-7.png","hash":"73c40e7f1f5d92baa4fee2613833b78e2efde447","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-9.png","hash":"a863261a9a1730c361887d336738a414c2f0a53f","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx1.png","hash":"899db5dde67d4417c78848d93794b9118dd03b99","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx10.png","hash":"699ca58d9abc07172b853d85230691bc95359a8b","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx5.png","hash":"8baae467c558711224feb2c241012bdc46004716","modified":1615806774119},{"_id":"public/2019/10/14/Electron-Mobx-React开发记录（一）/mobx7.png","hash":"699ca58d9abc07172b853d85230691bc95359a8b","modified":1615806774119},{"_id":"public/2019/06/12/Ubuntu18踩坑记录/Ubuntu18.04-6.png","hash":"0a9748216e91b802bf53cc5b589f7557af46d58c","modified":1615806774119},{"_id":"public/img/header_img/tag.png","hash":"2fc57dff9e7ca736be24b04cce54ac7476937b67","modified":1615806774119},{"_id":"public/2019/09/29/联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop2.png","hash":"7bb9f6713506e7a4a57def450ea0f7f01c894fb0","modified":1615806774119},{"_id":"public/2019/09/29/联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop3.png","hash":"aed0dbf83defa9800c0ab059d17e9c4040f94c4b","modified":1615806774119},{"_id":"public/img/header_img/tag-bg.jpg","hash":"2564dc7118d94e886cb5c510f55b82070343b30e","modified":1615806774119},{"_id":"public/img/article_header/article_header.png","hash":"ecd26beb4e13612ff419ad794f0371be823222e6","modified":1615806774119},{"_id":"public/img/header_img/photography-bg.jpeg","hash":"bf09062486ed9ffb7af99649cf465a5de38f5f26","modified":1615806774119},{"_id":"public/img/header_img/archive-bg.jpg","hash":"a86c934a2f33e8aad54f9cd854900afd5904bdb5","modified":1615806774119},{"_id":"public/2018/07/09/原生Js实现瀑布流效果/waterfall-1.gif","hash":"5c2321cba8e414d902be7e4ae403d2a12ac814d0","modified":1615806774119}],"Category":[{"name":"Sass","_id":"ckmahmuqd0005kl951tb1g25q"},{"name":"Javascript","_id":"ckmahmuqj000ckl959ud28lvu"},{"name":"Linux","_id":"ckmahmur10010kl952x3q6ofm"},{"name":"Mobx","_id":"ckmahmuri001ukl955odhe6fo"},{"name":"Electron","_id":"ckmahmurl0023kl95ci4uaoho"},{"name":"Echarts","_id":"ckmahmurn002akl952awx4o7s"},{"name":"Node","parent":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmurs002dkl95gta192ep"},{"name":"Tools","_id":"ckmahmurw002ikl95bega6rha"},{"name":"Antd","_id":"ckmahmury002qkl95hq14fz4n"},{"name":"Js","_id":"ckmahmurz002xkl950unq5ty2"},{"name":"Electron","parent":"ckmahmuri001ukl955odhe6fo","_id":"ckmahmus00035kl95cu09a6tj"},{"name":"React","_id":"ckmahmus1003akl9562m77zja"},{"name":"HTTP","_id":"ckmahmus2003ekl951ij05c2c"},{"name":"React","parent":"ckmahmury002qkl95hq14fz4n","_id":"ckmahmus3003kkl957s9e450m"},{"name":"Node","parent":"ckmahmurl0023kl95ci4uaoho","_id":"ckmahmus4003okl958sp705tl"},{"name":"Performance","_id":"ckmahmuso005jkl95fxly2jh9"},{"name":"Javascript","parent":"ckmahmuso005jkl95fxly2jh9","_id":"ckmahmut0005mkl952mg02t83"},{"name":"HTML","parent":"ckmahmut0005mkl952mg02t83","_id":"ckmahmutb005pkl955yw2bqfr"},{"name":"CSS","parent":"ckmahmutb005pkl955yw2bqfr","_id":"ckmahmuto005skl95d3o28fc9"}],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2020-06-11T02:22:00.651Z","updated":"2020-06-11T02:22:00.651Z","path":"404.html","title":"","comments":1,"_id":"ckmahmuog0000kl95aw7tdm4w","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"关于","date":"2017-10-03T02:48:33.000Z","description":"一定有什么事儿还没发生","header-img":"http://nojsja.gitee.io/static-resources/images/hexo/header_img/about.jpg","aplayer":true,"comments":0,"_content":"\n### 一句话\n\n>Style hungry, Stay foolish.\n\n### 关于我\n\n>Coder: 前端开发\n>Photograher: 喜欢拍照，静物摄影和人像摄影.\n>Gamer: Xbox One X 我的爱.\n\n### 兴趣方向\n\n> Javascript生态/Electron/Linux\n\n### 参与社区\n\n > Github：https://github.com/nojsja\n >\n > 简书：https://www.jianshu.com/u/d5c8b784c1d0\n >\n > 掘金：https://juejin.cn/user/3298190612015405/posts\n\n### 联系我\n\n>Email: yangwei13@outlook.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"关于\"\ndate: 2017-10-03 10:48:33\ndescription: \"一定有什么事儿还没发生\"\nheader-img: \"http://nojsja.gitee.io/static-resources/images/hexo/header_img/about.jpg\"\naplayer: true\ncomments: false\n---\n\n### 一句话\n\n>Style hungry, Stay foolish.\n\n### 关于我\n\n>Coder: 前端开发\n>Photograher: 喜欢拍照，静物摄影和人像摄影.\n>Gamer: Xbox One X 我的爱.\n\n### 兴趣方向\n\n> Javascript生态/Electron/Linux\n\n### 参与社区\n\n > Github：https://github.com/nojsja\n >\n > 简书：https://www.jianshu.com/u/d5c8b784c1d0\n >\n > 掘金：https://juejin.cn/user/3298190612015405/posts\n\n### 联系我\n\n>Email: yangwei13@outlook.com\n\n","updated":"2021-01-27T03:23:16.436Z","path":"about/index.html","_id":"ckmahmuq90002kl955tcegmxr","content":"<h3 id=\"一句话\">一句话</h3><blockquote><p>Style hungry, Stay foolish.</p></blockquote><h3 id=\"关于我\">关于我</h3><blockquote><p>Coder: 前端开发<br>Photograher: 喜欢拍照，静物摄影和人像摄影.<br>Gamer: Xbox One X 我的爱.</p></blockquote><h3 id=\"兴趣方向\">兴趣方向</h3><blockquote><p>Javascript生态/Electron/Linux</p></blockquote><h3 id=\"参与社区\">参与社区</h3><blockquote><p>Github：<a href=\"https://github.com/nojsja\" target=\"_blank\" rel=\"noopener\">https://github.com/nojsja</a></p><p>简书：<a href=\"https://www.jianshu.com/u/d5c8b784c1d0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/d5c8b784c1d0</a></p><p>掘金：<a href=\"https://juejin.cn/user/3298190612015405/posts\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/user/3298190612015405/posts</a></p></blockquote><h3 id=\"联系我\">联系我</h3><blockquote><p>Email: <a href=\"mailto:yangwei13@outlook.com\">yangwei13@outlook.com</a></p></blockquote>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一句话\">一句话</h3><blockquote><p>Style hungry, Stay foolish.</p></blockquote><h3 id=\"关于我\">关于我</h3><blockquote><p>Coder: 前端开发<br>Photograher: 喜欢拍照，静物摄影和人像摄影.<br>Gamer: Xbox One X 我的爱.</p></blockquote><h3 id=\"兴趣方向\">兴趣方向</h3><blockquote><p>Javascript生态/Electron/Linux</p></blockquote><h3 id=\"参与社区\">参与社区</h3><blockquote><p>Github：<a href=\"https://github.com/nojsja\" target=\"_blank\" rel=\"noopener\">https://github.com/nojsja</a></p><p>简书：<a href=\"https://www.jianshu.com/u/d5c8b784c1d0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/u/d5c8b784c1d0</a></p><p>掘金：<a href=\"https://juejin.cn/user/3298190612015405/posts\" target=\"_blank\" rel=\"noopener\">https://juejin.cn/user/3298190612015405/posts</a></p></blockquote><h3 id=\"联系我\">联系我</h3><blockquote><p>Email: <a href=\"mailto:yangwei13@outlook.com\">yangwei13@outlook.com</a></p></blockquote>"},{"layout":"archive","title":"时间轴","header-img":"http://nojsja.gitee.io/static-resources/images/hexo/header_img/archive-bg.jpg","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Have goals that are actually meaningful to all of your brain, not just a piece, and immerse yourself in whatever it is you do.","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"时间轴\"\nheader-img: \"http://nojsja.gitee.io/static-resources/images/hexo/header_img/archive-bg.jpg\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Have goals that are actually meaningful to all of your brain, not just a piece, and immerse yourself in whatever it is you do.\"\n---\n","updated":"2021-01-27T03:20:07.698Z","path":"archive/index.html","_id":"ckmahmuqc0004kl953xxx863s","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"categories","title":"目录","header-img":"http://nojsja.gitee.io/static-resources/images/hexo/header_img/categories-bg.jpg","comments":0,"date":"2017-03-20T12:49:56.000Z","description":"Approach the New Year with resolve to find the opportunities hidden in each new day.","_content":"","source":"categories/index.md","raw":"---\nlayout: \"categories\"\ntitle: \"目录\"\nheader-img: \"http://nojsja.gitee.io/static-resources/images/hexo/header_img/categories-bg.jpg\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Approach the New Year with resolve to find the opportunities hidden in each new day.\"\n---\n","updated":"2021-01-27T03:20:05.010Z","path":"categories/index.html","_id":"ckmahmuqf0008kl958oqb1hun","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"标签","description":"One way to get the most out of life is to look upon it as an adventure.","header-img":"http://nojsja.gitee.io/static-resources/images/hexo/header_img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"标签\"\ndescription: \"One way to get the most out of life is to look upon it as an adventure.\"\nheader-img: \"http://nojsja.gitee.io/static-resources/images/hexo/header_img/tag-bg.jpg\"\n---\n","date":"2021-01-27T03:24:43.883Z","updated":"2021-01-27T03:24:43.883Z","path":"tags/index.html","comments":1,"_id":"ckmahmuqh000akl952jija4mw","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"name: Sync\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Sync to Gitee\n      uses: wearerequired/git-mirror-action@master\n      env:\n          # 注意在 Settings->Secrets 配置 GITEE_RSA_PRIVATE_KEY\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n      with:\n          # 注意替换为你的 GitHub 源仓库地址\n          source-repo: \"git@github.com:nojsja/blogs.git\"\n          # 注意替换为你的 Gitee 目标仓库地址\n          destination-repo: \"git@gitee.com:nojsja/blogs.git\"\n\n    - name: Build Gitee Pages\n      uses: yanglbme/gitee-pages-action@master\n      with:\n          # 注意替换为你的 Gitee 用户名\n          gitee-username: nojsja\n          # 注意在 Settings->Secrets 配置 GITEE_PASSWORD\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          # 注意替换为你的 Gitee 仓库\n          gitee-repo: nojsja/blogs\n","source":".github/workflows/sync.yml","raw":"name: Sync\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Sync to Gitee\n      uses: wearerequired/git-mirror-action@master\n      env:\n          # 注意在 Settings->Secrets 配置 GITEE_RSA_PRIVATE_KEY\n          SSH_PRIVATE_KEY: ${{ secrets.GITEE_RSA_PRIVATE_KEY }}\n      with:\n          # 注意替换为你的 GitHub 源仓库地址\n          source-repo: \"git@github.com:nojsja/blogs.git\"\n          # 注意替换为你的 Gitee 目标仓库地址\n          destination-repo: \"git@gitee.com:nojsja/blogs.git\"\n\n    - name: Build Gitee Pages\n      uses: yanglbme/gitee-pages-action@master\n      with:\n          # 注意替换为你的 Gitee 用户名\n          gitee-username: nojsja\n          # 注意在 Settings->Secrets 配置 GITEE_PASSWORD\n          gitee-password: ${{ secrets.GITEE_PASSWORD }}\n          # 注意替换为你的 Gitee 仓库\n          gitee-repo: nojsja/blogs\n","date":"2020-11-21T11:32:44.231Z","updated":"2020-11-21T11:32:44.231Z","path":".github/workflows/sync.json","layout":"false","title":"","comments":1,"_id":"ckmahmusn005ikl95hci386z7","content":"{\"name\":\"Sync\",\"on\":{\"push\":{\"branches\":[\"master\"]}},\"jobs\":{\"build\":{\"runs-on\":\"ubuntu-latest\",\"steps\":[{\"name\":\"Sync to Gitee\",\"uses\":\"wearerequired/git-mirror-action@master\",\"env\":{\"SSH_PRIVATE_KEY\":\"$\"},\"with\":{\"source-repo\":\"git@github.com:nojsja/blogs.git\",\"destination-repo\":\"git@gitee.com:nojsja/blogs.git\"}},{\"name\":\"Build Gitee Pages\",\"uses\":\"yanglbme/gitee-pages-action@master\",\"with\":{\"gitee-username\":\"nojsja\",\"gitee-password\":\"$\",\"gitee-repo\":\"nojsja/blogs\"}}]}}}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"Sync\",\"on\":{\"push\":{\"branches\":[\"master\"]}},\"jobs\":{\"build\":{\"runs-on\":\"ubuntu-latest\",\"steps\":[{\"name\":\"Sync to Gitee\",\"uses\":\"wearerequired/git-mirror-action@master\",\"env\":{\"SSH_PRIVATE_KEY\":\"$\"},\"with\":{\"source-repo\":\"git@github.com:nojsja/blogs.git\",\"destination-repo\":\"git@gitee.com:nojsja/blogs.git\"}},{\"name\":\"Build Gitee Pages\",\"uses\":\"yanglbme/gitee-pages-action@master\",\"with\":{\"gitee-username\":\"nojsja\",\"gitee-password\":\"$\",\"gitee-repo\":\"nojsja/blogs\"}}]}}}"}],"Post":[{"title":"sass开发规范","catalog":true,"toc_nav_num":true,"date":"2017-10-21T08:30:35.000Z","subtitle":"sass css","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2017-10-21T08:30:35.000Z","_content":"\n>author: nojsja\n\n#### 目录\n---------------------------------\n\n1. sass语法  \n2. 命名  \n3. 书写顺序  \n4. 代码嵌套  \n5. 注释  \n\n#### sass语法\n---------------------------------\n\n>sass是一门编程语言，支持css语法以及一般编程语言中的函数、宏、变量和各种逻辑语法等等，sass文件最终会被编译成css文件。  \n\n1. 变量  \n2. 计算功能    \n3. 继承  \n4. Mixin  \n5. 函数  \n6. 高级用法  \n\n##### 变量  \n\nSass允许使用变量，所有变量以$开头：  \n\n```scss\n$blue: #1875e7;\n　div {\n　　　color: $blue;\n　}\n```\n\n内嵌到字符串中的变量需要写在 ' #{} ' 中间：  \n\n```scss\n$side: left;\n.rounded {\n　border-#{$side}-radius: 5px;\n}\n```\n\n##### 计算功能  \n\nSass允许在代码中使用算式：  \n\n```scss\nbody {\n　margin: (14px/2);\n　top: 50px + 100px;\n　right: $var * 10%;\n}\n```\n\n##### 继承  \n\nSass允许一个选择器使用关键字 @extend 继承另一个选择器：  \n\n```scss\n.class1 {\n　　border: 1px solid #ddd;\n}\n\n.class2 {\n　 @extend .class1;\n　 font-size:120%;\n}\n```\n\n##### Mixin  \n\nMixin是可以重用的代码块，使用 @mixin 关键字定义一个代码块：  \n\n```scss\n@mixin left {\n　float: left;\n　margin-left: 10px;\n}\n\n```\n\n使用 @include 调用这个mixin：  \n\n```scss\ndiv {\n　 @include left;\n}\n```\n\nmixin还能制定参数和参数默认值：  \n\n```scss\n@mixin left($value: 10px) {\n　 float: left;\n　 margin-right: $value;\n}\n```\n\n使用的时候可以直接使用默认值或是加入参数值：  \n\n```scss\ndiv {\n　　　　@include left(20px);\n　　}\n```\n\n##### 函数  \n\nSass允许用户使用 @function 关键字编写自己的函数，函数可以直接使用：  \n\n```scss\n@function double($n) {\n　 @return $n * 2;\n}\n\n#sidebar {\n　width: double(5px);\n}\n```\n\n##### 高级用法  \n\n* 引入外部文件  \n* 使用条件语句  \n* 使用循环语句  \n\n引入外部文件：  \n\n```scss\n@import \"../foo.css\";\n```\n\n使用条件语句：  \n```scss\np {\n　@if 1 + 1 == 2 { border: 1px solid; }\n　@if 5 < 3 { border: 2px dotted; }\n}\n\n@if $color == '#fff' {\n　background-color: #000;\n} @else {\n　background-color: #fff;\n}\n```\n\n使用循环语句，支持for和while循环：　\n\n```scss\n@for $i from 1 to 10 {\n　　.border-#{$i} {\n　　　　border: #{$i}px solid blue;\n　　}\n}\n\n$i: 6;\n　　@while $i > 0 {\n　　　　.item-#{$i} { width: 2em * $i; }\n　　　　$i: $i - 2;\n　　}\n```\n\n#### 命名\n---------------------------------\n\n1. ID命名  \n2. Class命名  \n3. 父元素和子元素的命名规则  \n\n##### ID命名  \n\n统一采用驼峰命名法(camelCase)，第一个首字母小写，其它单词的首字母大写：  \n\n```scss\n/* bad */\n#rootlistitem {...}\n#RootListItem {...}\n\n/* good */\n#rootListItem {...}\n```\n\n命名单词数最好不要超过3个：  \n\n```scss\n/* bad */\n#rootListItemWrapper {...}\n\n/* good */\n#rootListWrapper {...}\n```\n\n##### Class命名  \n\n类的命名统一使用连字符 '-' 连接各个单词，命名中不允许出现大写字母：  \n\n```\n/* bad */\n.contentWrapper {...}\n\n/* good */\n.content-wrapper {...}\n```\n\n类名最好使用三个及三个以下的单词，至多不超过四个：  \n\n```scss\n/* bad */\n.file-detail-list-item-wrapper {...}\n\n/* not-good */\n.file-detail-list-wrapper {...}\n\n/* good */\n.file-detail-wrapper {...}\n.file-wrapper {...}\n\n```\n\n##### 父元素和子元素的命名规则  \n\n父元素和多级子元素的命名需要体现元素在页面的功能、样式、或结构：  \n\n```scss\n.file-list-wrapper {\n\n  .file-list-header {...}\n\n  .file-list-body {\n\n    .list-body-aside {\n\n      .body-aside-left {...}\n      .body-aside-right {...}\n    }\n\n    .list-body-main {...}\n  }\n\n  .file-list-footer {...}\n}\n```\n\n#### 书写顺序\n---------------------------------\n\n内部属性书写顺序应该按照从上到下是 布局定位、盒模型属性、表现性属性和其它：  \n\n```scss\n.class {\n  /* 布局定位 */\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  /* 盒模型属性 */\n  display: block;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: 1rem;\n  height: 1rem;\n  margin: 1em;\n  padding: 1em;\n  border: 3px solid #ddd;\n  border-radius: 5px;\n\n  /* 表现性属性 */\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  font-weight: bold;\n  line-height: 1rem;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #eee;\n  color: #000;\n\n  /* 其它 */\n  z-index: 500;\n}\n\n```\n\n#### 代码缩进和嵌套\n---------------------------------\n\n1. 代码缩进  \n2. 多层嵌套  \n\n##### 代码缩进  \n\n代码缩进统一使用两个空格，不要用四个空格和tab(编辑器内可以自定义tab输出的空格数，不用手打两个空格)   \n\n```scss\n/* bad */\n.class {\n    position: fixed;\n}\n\n/* good */\n.class {\n  position: fixed;\n}\n```\n\n选择器与花括号之间要保留一个空格，属性名之后的冒号与属性值之间要保留一个空格，选择符号两边各保留一个空格    \n\n```scss\n/* bad */\n.class>div{\n  position:fixed;\n}\n\n/* good */\n.class > div {\n  position: fixed;\n}\n```\n\n##### 多层嵌套  \n\n在Sass中你可以嵌套选择器，这可以使代码变得更模块化和可读，嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器(优先使用子选择器' > '，提高css查询性能)  \n\n```scss\n/* bad */\n.content {\n  display: block;\n}\n\n.content > .news-article > .title {\n  font-size: 1.2em;\n\n/* bad */\n.content {\n  display: block;\n\n  > .news-article {\n    > .title {\n      font-size: 1.2em;\n    }\n  }\n\n/* good */\ncontent {\n  display: block;\n\n  > .news-article > .title {\n    font-size: 1.2em;\n  }\n}\n```\n\n在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询，你可以在任何给定的嵌套层次中使用媒体查询  \n\n```scss\n/* bad */\n.content-page {\n  font-size: 1.2rem;\n\n  > .main {\n    background-color: whitesmoke;\n\n    > .latest-news {\n      padding: 1rem;\n\n      > .news-article {\n        padding: 1rem;\n\n        > .title {\n          font-size: 2rem;\n        }\n      }\n    }\n\n    > .content {\n      margin-top: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  > .page-footer {\n    margin-top: 2rem;\n    font-size: 1rem;\n  }\n}\n\n@media screen and (min-width: 641px) {\n  .content-page {\n    font-size: 1rem;\n\n    > .main > .latest-news > .news-article > .title {\n      font-size: 3rem;\n    }\n\n    > .page-footer {\n      font-size: 0.8rem;\n    }\n  }\n}\n\n\n\n/* good */\n.content-page {\n  font-size: 1.2rem;\n\n  @media screen and (min-width: 641px) {\n    font-size: 1rem;\n  }\n\n  > .main {\n    background-color: whitesmoke;\n\n    > .latest-news {\n      padding: 1rem;\n\n      > .news-article {\n        padding: 1rem;\n\n        > .title {\n          font-size: 2rem;\n\n          @media screen and (min-width: 641px) {\n            font-size: 3rem;\n          }\n        }\n      }\n    }\n\n    > .content {\n      margin-top: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  > .page-footer {\n    margin-top: 2rem;\n    font-size: 1rem;\n\n    @media screen and (min-width: 641px) {\n      font-size: 0.8rem;\n    }\n  }\n}\n```\n\n嵌套顺序和选择器，以下是一个sass块应该具有的顺序：  \n\n1. 当前选择器的样式属性  \n2. 当前选择器的伪类选择器 (:first-letter, :hover, :active)伪类元素 (:before and :after)  \n3. 当前选择器的声明样式 (.selected, .active, .enlarged)  \n4. 用Sass的上下文媒体查询  \n5. 子选择器作为最后的部分  \n\n```scss\n.product-teaser {\n  /* 当前选择器的样式属性 */\n  display: inline-block;\n  padding: 1rem;\n  background-color: whitesmoke;\n  color: grey;\n\n  /* 当前选择器的伪类选择器 */\n  &:hover {\n    color: black;\n  }\n\n  &:before {\n    content: \"\";\n    display: block;\n    border-top: 1px solid grey;\n  }\n\n  &:after {\n    content: \"\";\n    display: block;\n    border-top: 1px solid grey;\n  }\n\n  /* 当前选择器的声明样式 */\n  &.active {\n    background-color: pink;\n    color: red;\n  }\n\n  /* 上下文媒体查询 */\n  @media screen and (max-width: 640px) {\n    display: block;\n    font-size: 2em;\n  }\n\n  /* 子选择器 */\n  > .content > .title {\n    font-size: 1.2em;\n\n    /* 子选择器上下文媒体查询 */\n    @media screen and (max-width: 640px) {\n      letter-spacing: 0.2em;\n      text-transform: uppercase;\n    }\n  }\n}\n```\n\n#### 注释  \n---------------------------------\n\n>代码编辑器一般都可以自定义代码段(snippets)，通过编辑自定义代码段配置文件将快捷键绑定到一段自定义代码可以实现快捷插入代码段  \n\n1. 组件注释  \n2. 子组件注释  \n3. 一般注释  \n\n##### 组件注释  \n\n一个大组件需要使用组件注释，体现页面结构。  \n\n```scss\n  /* ==========================================================\n  父组件 file-list\n  ============================================================= */\n  .file-list {...}\n\n```\n\n##### 子组件注释  \n\n一个组件的子组件需要使用子组件注释，体现组件整体结构。  \n\n```scss\n  /* 子组件 file-list-item\n  ============================================================= */\n  .file-list-item {...}\n\n```\n\n##### 一般注释  \n\n使用块注释和行注释都行，重要的是体现代码结构和代码简洁度  \n\n```scss\n/* 块注释 */\n.class1 {\n\n  // 行注释\n  .title {...}\n\n  .content {  // 行注释2\n    color: #fff;\n  }\n}\n```\n","source":"_posts/2017-10-21-sass开发规范.md","raw":"---\ntitle: \"sass开发规范\"\ncatalog: true\ntoc_nav_num: true\ndate:   2017-10-21 16:30:35\nsubtitle: \"sass css\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- sass\n- css\ncategories:\n- Sass\nupdateDate: 2017-10-21 16:30:35\n---\n\n>author: nojsja\n\n#### 目录\n---------------------------------\n\n1. sass语法  \n2. 命名  \n3. 书写顺序  \n4. 代码嵌套  \n5. 注释  \n\n#### sass语法\n---------------------------------\n\n>sass是一门编程语言，支持css语法以及一般编程语言中的函数、宏、变量和各种逻辑语法等等，sass文件最终会被编译成css文件。  \n\n1. 变量  \n2. 计算功能    \n3. 继承  \n4. Mixin  \n5. 函数  \n6. 高级用法  \n\n##### 变量  \n\nSass允许使用变量，所有变量以$开头：  \n\n```scss\n$blue: #1875e7;\n　div {\n　　　color: $blue;\n　}\n```\n\n内嵌到字符串中的变量需要写在 ' #{} ' 中间：  \n\n```scss\n$side: left;\n.rounded {\n　border-#{$side}-radius: 5px;\n}\n```\n\n##### 计算功能  \n\nSass允许在代码中使用算式：  \n\n```scss\nbody {\n　margin: (14px/2);\n　top: 50px + 100px;\n　right: $var * 10%;\n}\n```\n\n##### 继承  \n\nSass允许一个选择器使用关键字 @extend 继承另一个选择器：  \n\n```scss\n.class1 {\n　　border: 1px solid #ddd;\n}\n\n.class2 {\n　 @extend .class1;\n　 font-size:120%;\n}\n```\n\n##### Mixin  \n\nMixin是可以重用的代码块，使用 @mixin 关键字定义一个代码块：  \n\n```scss\n@mixin left {\n　float: left;\n　margin-left: 10px;\n}\n\n```\n\n使用 @include 调用这个mixin：  \n\n```scss\ndiv {\n　 @include left;\n}\n```\n\nmixin还能制定参数和参数默认值：  \n\n```scss\n@mixin left($value: 10px) {\n　 float: left;\n　 margin-right: $value;\n}\n```\n\n使用的时候可以直接使用默认值或是加入参数值：  \n\n```scss\ndiv {\n　　　　@include left(20px);\n　　}\n```\n\n##### 函数  \n\nSass允许用户使用 @function 关键字编写自己的函数，函数可以直接使用：  \n\n```scss\n@function double($n) {\n　 @return $n * 2;\n}\n\n#sidebar {\n　width: double(5px);\n}\n```\n\n##### 高级用法  \n\n* 引入外部文件  \n* 使用条件语句  \n* 使用循环语句  \n\n引入外部文件：  \n\n```scss\n@import \"../foo.css\";\n```\n\n使用条件语句：  \n```scss\np {\n　@if 1 + 1 == 2 { border: 1px solid; }\n　@if 5 < 3 { border: 2px dotted; }\n}\n\n@if $color == '#fff' {\n　background-color: #000;\n} @else {\n　background-color: #fff;\n}\n```\n\n使用循环语句，支持for和while循环：　\n\n```scss\n@for $i from 1 to 10 {\n　　.border-#{$i} {\n　　　　border: #{$i}px solid blue;\n　　}\n}\n\n$i: 6;\n　　@while $i > 0 {\n　　　　.item-#{$i} { width: 2em * $i; }\n　　　　$i: $i - 2;\n　　}\n```\n\n#### 命名\n---------------------------------\n\n1. ID命名  \n2. Class命名  \n3. 父元素和子元素的命名规则  \n\n##### ID命名  \n\n统一采用驼峰命名法(camelCase)，第一个首字母小写，其它单词的首字母大写：  \n\n```scss\n/* bad */\n#rootlistitem {...}\n#RootListItem {...}\n\n/* good */\n#rootListItem {...}\n```\n\n命名单词数最好不要超过3个：  \n\n```scss\n/* bad */\n#rootListItemWrapper {...}\n\n/* good */\n#rootListWrapper {...}\n```\n\n##### Class命名  \n\n类的命名统一使用连字符 '-' 连接各个单词，命名中不允许出现大写字母：  \n\n```\n/* bad */\n.contentWrapper {...}\n\n/* good */\n.content-wrapper {...}\n```\n\n类名最好使用三个及三个以下的单词，至多不超过四个：  \n\n```scss\n/* bad */\n.file-detail-list-item-wrapper {...}\n\n/* not-good */\n.file-detail-list-wrapper {...}\n\n/* good */\n.file-detail-wrapper {...}\n.file-wrapper {...}\n\n```\n\n##### 父元素和子元素的命名规则  \n\n父元素和多级子元素的命名需要体现元素在页面的功能、样式、或结构：  \n\n```scss\n.file-list-wrapper {\n\n  .file-list-header {...}\n\n  .file-list-body {\n\n    .list-body-aside {\n\n      .body-aside-left {...}\n      .body-aside-right {...}\n    }\n\n    .list-body-main {...}\n  }\n\n  .file-list-footer {...}\n}\n```\n\n#### 书写顺序\n---------------------------------\n\n内部属性书写顺序应该按照从上到下是 布局定位、盒模型属性、表现性属性和其它：  \n\n```scss\n.class {\n  /* 布局定位 */\n  position: absolute;\n  top: 0;\n  left: 0;\n\n  /* 盒模型属性 */\n  display: block;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: 1rem;\n  height: 1rem;\n  margin: 1em;\n  padding: 1em;\n  border: 3px solid #ddd;\n  border-radius: 5px;\n\n  /* 表现性属性 */\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  font-weight: bold;\n  line-height: 1rem;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #eee;\n  color: #000;\n\n  /* 其它 */\n  z-index: 500;\n}\n\n```\n\n#### 代码缩进和嵌套\n---------------------------------\n\n1. 代码缩进  \n2. 多层嵌套  \n\n##### 代码缩进  \n\n代码缩进统一使用两个空格，不要用四个空格和tab(编辑器内可以自定义tab输出的空格数，不用手打两个空格)   \n\n```scss\n/* bad */\n.class {\n    position: fixed;\n}\n\n/* good */\n.class {\n  position: fixed;\n}\n```\n\n选择器与花括号之间要保留一个空格，属性名之后的冒号与属性值之间要保留一个空格，选择符号两边各保留一个空格    \n\n```scss\n/* bad */\n.class>div{\n  position:fixed;\n}\n\n/* good */\n.class > div {\n  position: fixed;\n}\n```\n\n##### 多层嵌套  \n\n在Sass中你可以嵌套选择器，这可以使代码变得更模块化和可读，嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器(优先使用子选择器' > '，提高css查询性能)  \n\n```scss\n/* bad */\n.content {\n  display: block;\n}\n\n.content > .news-article > .title {\n  font-size: 1.2em;\n\n/* bad */\n.content {\n  display: block;\n\n  > .news-article {\n    > .title {\n      font-size: 1.2em;\n    }\n  }\n\n/* good */\ncontent {\n  display: block;\n\n  > .news-article > .title {\n    font-size: 1.2em;\n  }\n}\n```\n\n在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询，你可以在任何给定的嵌套层次中使用媒体查询  \n\n```scss\n/* bad */\n.content-page {\n  font-size: 1.2rem;\n\n  > .main {\n    background-color: whitesmoke;\n\n    > .latest-news {\n      padding: 1rem;\n\n      > .news-article {\n        padding: 1rem;\n\n        > .title {\n          font-size: 2rem;\n        }\n      }\n    }\n\n    > .content {\n      margin-top: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  > .page-footer {\n    margin-top: 2rem;\n    font-size: 1rem;\n  }\n}\n\n@media screen and (min-width: 641px) {\n  .content-page {\n    font-size: 1rem;\n\n    > .main > .latest-news > .news-article > .title {\n      font-size: 3rem;\n    }\n\n    > .page-footer {\n      font-size: 0.8rem;\n    }\n  }\n}\n\n\n\n/* good */\n.content-page {\n  font-size: 1.2rem;\n\n  @media screen and (min-width: 641px) {\n    font-size: 1rem;\n  }\n\n  > .main {\n    background-color: whitesmoke;\n\n    > .latest-news {\n      padding: 1rem;\n\n      > .news-article {\n        padding: 1rem;\n\n        > .title {\n          font-size: 2rem;\n\n          @media screen and (min-width: 641px) {\n            font-size: 3rem;\n          }\n        }\n      }\n    }\n\n    > .content {\n      margin-top: 2rem;\n      padding: 1rem;\n    }\n  }\n\n  > .page-footer {\n    margin-top: 2rem;\n    font-size: 1rem;\n\n    @media screen and (min-width: 641px) {\n      font-size: 0.8rem;\n    }\n  }\n}\n```\n\n嵌套顺序和选择器，以下是一个sass块应该具有的顺序：  \n\n1. 当前选择器的样式属性  \n2. 当前选择器的伪类选择器 (:first-letter, :hover, :active)伪类元素 (:before and :after)  \n3. 当前选择器的声明样式 (.selected, .active, .enlarged)  \n4. 用Sass的上下文媒体查询  \n5. 子选择器作为最后的部分  \n\n```scss\n.product-teaser {\n  /* 当前选择器的样式属性 */\n  display: inline-block;\n  padding: 1rem;\n  background-color: whitesmoke;\n  color: grey;\n\n  /* 当前选择器的伪类选择器 */\n  &:hover {\n    color: black;\n  }\n\n  &:before {\n    content: \"\";\n    display: block;\n    border-top: 1px solid grey;\n  }\n\n  &:after {\n    content: \"\";\n    display: block;\n    border-top: 1px solid grey;\n  }\n\n  /* 当前选择器的声明样式 */\n  &.active {\n    background-color: pink;\n    color: red;\n  }\n\n  /* 上下文媒体查询 */\n  @media screen and (max-width: 640px) {\n    display: block;\n    font-size: 2em;\n  }\n\n  /* 子选择器 */\n  > .content > .title {\n    font-size: 1.2em;\n\n    /* 子选择器上下文媒体查询 */\n    @media screen and (max-width: 640px) {\n      letter-spacing: 0.2em;\n      text-transform: uppercase;\n    }\n  }\n}\n```\n\n#### 注释  \n---------------------------------\n\n>代码编辑器一般都可以自定义代码段(snippets)，通过编辑自定义代码段配置文件将快捷键绑定到一段自定义代码可以实现快捷插入代码段  \n\n1. 组件注释  \n2. 子组件注释  \n3. 一般注释  \n\n##### 组件注释  \n\n一个大组件需要使用组件注释，体现页面结构。  \n\n```scss\n  /* ==========================================================\n  父组件 file-list\n  ============================================================= */\n  .file-list {...}\n\n```\n\n##### 子组件注释  \n\n一个组件的子组件需要使用子组件注释，体现组件整体结构。  \n\n```scss\n  /* 子组件 file-list-item\n  ============================================================= */\n  .file-list-item {...}\n\n```\n\n##### 一般注释  \n\n使用块注释和行注释都行，重要的是体现代码结构和代码简洁度  \n\n```scss\n/* 块注释 */\n.class1 {\n\n  // 行注释\n  .title {...}\n\n  .content {  // 行注释2\n    color: #fff;\n  }\n}\n```\n","slug":"sass开发规范","published":1,"updated":"2020-12-06T10:51:37.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuq70001kl95gock0m2j","content":"<blockquote><p>author: nojsja</p></blockquote><h4 id=\"目录\">目录</h4><hr><ol><li>sass语法</li><li>命名</li><li>书写顺序</li><li>代码嵌套</li><li>注释</li></ol><h4 id=\"sass语法\">sass语法</h4><hr><blockquote><p>sass是一门编程语言，支持css语法以及一般编程语言中的函数、宏、变量和各种逻辑语法等等，sass文件最终会被编译成css文件。</p></blockquote><ol><li>变量</li><li>计算功能</li><li>继承</li><li>Mixin</li><li>函数</li><li>高级用法</li></ol><h5 id=\"变量\">变量</h5><p>Sass允许使用变量，所有变量以$开头：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$blue</span>: <span class=\"number\">#1875e7</span>;</span><br><span class=\"line\">　<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"variable\">$blue</span>;</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure><p>内嵌到字符串中的变量需要写在 ’ #{} ’ 中间：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$side</span>: left;</span><br><span class=\"line\"><span class=\"selector-class\">.rounded</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">border</span>-#&#123;<span class=\"variable\">$side</span>&#125;-radius: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"计算功能\">计算功能</h5><p>Sass允许在代码中使用算式：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">margin</span>: (<span class=\"number\">14px</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">　<span class=\"attribute\">top</span>: <span class=\"number\">50px</span> + <span class=\"number\">100px</span>;</span><br><span class=\"line\">　<span class=\"attribute\">right</span>: <span class=\"variable\">$var</span> * <span class=\"number\">10%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"继承\">继承</h5><p>Sass允许一个选择器使用关键字 @extend 继承另一个选择器：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\">　　<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class2</span> &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@extend</span> .class1;</span><br><span class=\"line\">　 <span class=\"attribute\">font-size</span>:<span class=\"number\">120%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Mixin\">Mixin</h5><p>Mixin是可以重用的代码块，使用 @mixin 关键字定义一个代码块：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> left &#123;</span><br><span class=\"line\">　<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>使用 @include 调用这个mixin：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@include</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>mixin还能制定参数和参数默认值：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> left(<span class=\"variable\">$value</span>: <span class=\"number\">10px</span>) &#123;</span><br><span class=\"line\">　 <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　 <span class=\"attribute\">margin-right</span>: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候可以直接使用默认值或是加入参数值：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">@include</span> left(<span class=\"number\">20px</span>);</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure><h5 id=\"函数\">函数</h5><p>Sass允许用户使用 @function 关键字编写自己的函数，函数可以直接使用：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@function</span> double(<span class=\"variable\">$n</span>) &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@return</span> <span class=\"variable\">$n</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">width</span>: double(<span class=\"number\">5px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"高级用法\">高级用法</h5><ul><li>引入外部文件</li><li>使用条件语句</li><li>使用循环语句</li></ul><p>引入外部文件：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"../foo.css\"</span>;</span><br></pre></td></tr></table></figure><p>使用条件语句：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">　<span class=\"keyword\">@if</span> <span class=\"number\">1</span> + <span class=\"number\">1</span> == <span class=\"number\">2</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid; &#125;</span><br><span class=\"line\">　<span class=\"keyword\">@if</span> <span class=\"number\">5</span> &lt; <span class=\"number\">3</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@if</span> <span class=\"variable\">$color</span> == <span class=\"string\">'#fff'</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>使用循环语句，支持for和while循环：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> <span class=\"variable\">$i</span> from <span class=\"number\">1</span> to <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">　　<span class=\"selector-class\">.border-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</span><br><span class=\"line\">　　　　<span class=\"attribute\">border</span>: #&#123;<span class=\"variable\">$i</span>&#125;px solid blue;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$i</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">@while</span> <span class=\"variable\">$i</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">　　　　<span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">　　　　<span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure><h4 id=\"命名\">命名</h4><hr><ol><li>ID命名</li><li>Class命名</li><li>父元素和子元素的命名规则</li></ol><h5 id=\"ID命名\">ID命名</h5><p>统一采用驼峰命名法(camelCase)，第一个首字母小写，其它单词的首字母大写：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootlistitem</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#RootListItem</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListItem</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>命名单词数最好不要超过3个：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListItemWrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListWrapper</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Class命名\">Class命名</h5><p>类的命名统一使用连字符 ‘-’ 连接各个单词，命名中不允许出现大写字母：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* bad *&#x2F;</span><br><span class=\"line\">.contentWrapper &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* good *&#x2F;</span><br><span class=\"line\">.content-wrapper &#123;...&#125;</span><br></pre></td></tr></table></figure><p>类名最好使用三个及三个以下的单词，至多不超过四个：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-list-item-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* not-good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-list-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.file-wrapper</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id=\"父元素和子元素的命名规则\">父元素和子元素的命名规则</h5><p>父元素和多级子元素的命名需要体现元素在页面的功能、样式、或结构：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.file-list-wrapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-header</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-body</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-body-aside</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-class\">.body-aside-left</span> &#123;...&#125;</span><br><span class=\"line\">      <span class=\"selector-class\">.body-aside-right</span> &#123;...&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-body-main</span> &#123;...&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-footer</span> &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"书写顺序\">书写顺序</h4><hr><p>内部属性书写顺序应该按照从上到下是 布局定位、盒模型属性、表现性属性和其它：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 布局定位 */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 盒模型属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 表现性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Arial'</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">  <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 其它 */</span></span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"代码缩进和嵌套\">代码缩进和嵌套</h4><hr><ol><li>代码缩进</li><li>多层嵌套</li></ol><h5 id=\"代码缩进\">代码缩进</h5><p>代码缩进统一使用两个空格，不要用四个空格和tab(编辑器内可以自定义tab输出的空格数，不用手打两个空格)</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>选择器与花括号之间要保留一个空格，属性名之后的冒号与属性值之间要保留一个空格，选择符号两边各保留一个空格</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span>&gt;<span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"多层嵌套\">多层嵌套</h5><p>在Sass中你可以嵌套选择器，这可以使代码变得更模块化和可读，嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器(优先使用子选择器’ &gt; '，提高css查询性能)</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"attribute\">content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询，你可以在任何给定的嵌套层次中使用媒体查询</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.latest-news</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.main</span> &gt; <span class=\"selector-class\">.latest-news</span> &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.latest-news</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>嵌套顺序和选择器，以下是一个sass块应该具有的顺序：</p><ol><li>当前选择器的样式属性</li><li>当前选择器的伪类选择器 (:first-letter, :hover, :active)伪类元素 (:before and :after)</li><li>当前选择器的声明样式 (.selected, .active, .enlarged)</li><li>用Sass的上下文媒体查询</li><li>子选择器作为最后的部分</li></ol><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.product-teaser</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的样式属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的伪类选择器 */</span></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的声明样式 */</span></span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 上下文媒体查询 */</span></span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (max-width: <span class=\"number\">640px</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 子选择器 */</span></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.content</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 子选择器上下文媒体查询 */</span></span><br><span class=\"line\">    <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (max-width: <span class=\"number\">640px</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2em</span>;</span><br><span class=\"line\">      <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"注释\">注释</h4><hr><blockquote><p>代码编辑器一般都可以自定义代码段(snippets)，通过编辑自定义代码段配置文件将快捷键绑定到一段自定义代码可以实现快捷插入代码段</p></blockquote><ol><li>组件注释</li><li>子组件注释</li><li>一般注释</li></ol><h5 id=\"组件注释\">组件注释</h5><p>一个大组件需要使用组件注释，体现页面结构。</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ==========================================================</span></span><br><span class=\"line\"><span class=\"comment\">父组件 file-list</span></span><br><span class=\"line\"><span class=\"comment\">============================================================= */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-list</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id=\"子组件注释\">子组件注释</h5><p>一个组件的子组件需要使用子组件注释，体现组件整体结构。</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 子组件 file-list-item</span></span><br><span class=\"line\"><span class=\"comment\">============================================================= */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-list-item</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id=\"一般注释\">一般注释</h5><p>使用块注释和行注释都行，重要的是体现代码结构和代码简洁度</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 块注释 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 行注释</span></span><br><span class=\"line\">  <span class=\"selector-class\">.title</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.content</span> &#123;  <span class=\"comment\">// 行注释2</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>author: nojsja</p></blockquote><h4 id=\"目录\">目录</h4><hr><ol><li>sass语法</li><li>命名</li><li>书写顺序</li><li>代码嵌套</li><li>注释</li></ol><h4 id=\"sass语法\">sass语法</h4><hr><blockquote><p>sass是一门编程语言，支持css语法以及一般编程语言中的函数、宏、变量和各种逻辑语法等等，sass文件最终会被编译成css文件。</p></blockquote><ol><li>变量</li><li>计算功能</li><li>继承</li><li>Mixin</li><li>函数</li><li>高级用法</li></ol><h5 id=\"变量\">变量</h5><p>Sass允许使用变量，所有变量以$开头：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$blue</span>: <span class=\"number\">#1875e7</span>;</span><br><span class=\"line\">　<span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　　　<span class=\"attribute\">color</span>: <span class=\"variable\">$blue</span>;</span><br><span class=\"line\">　&#125;</span><br></pre></td></tr></table></figure><p>内嵌到字符串中的变量需要写在 ’ #{} ’ 中间：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$side</span>: left;</span><br><span class=\"line\"><span class=\"selector-class\">.rounded</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">border</span>-#&#123;<span class=\"variable\">$side</span>&#125;-radius: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"计算功能\">计算功能</h5><p>Sass允许在代码中使用算式：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">margin</span>: (<span class=\"number\">14px</span>/<span class=\"number\">2</span>);</span><br><span class=\"line\">　<span class=\"attribute\">top</span>: <span class=\"number\">50px</span> + <span class=\"number\">100px</span>;</span><br><span class=\"line\">　<span class=\"attribute\">right</span>: <span class=\"variable\">$var</span> * <span class=\"number\">10%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"继承\">继承</h5><p>Sass允许一个选择器使用关键字 @extend 继承另一个选择器：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\">　　<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.class2</span> &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@extend</span> .class1;</span><br><span class=\"line\">　 <span class=\"attribute\">font-size</span>:<span class=\"number\">120%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Mixin\">Mixin</h5><p>Mixin是可以重用的代码块，使用 @mixin 关键字定义一个代码块：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> left &#123;</span><br><span class=\"line\">　<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　<span class=\"attribute\">margin-left</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>使用 @include 调用这个mixin：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@include</span> left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>mixin还能制定参数和参数默认值：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> left(<span class=\"variable\">$value</span>: <span class=\"number\">10px</span>) &#123;</span><br><span class=\"line\">　 <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">　 <span class=\"attribute\">margin-right</span>: <span class=\"variable\">$value</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候可以直接使用默认值或是加入参数值：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">@include</span> left(<span class=\"number\">20px</span>);</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure><h5 id=\"函数\">函数</h5><p>Sass允许用户使用 @function 关键字编写自己的函数，函数可以直接使用：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@function</span> double(<span class=\"variable\">$n</span>) &#123;</span><br><span class=\"line\">　 <span class=\"keyword\">@return</span> <span class=\"variable\">$n</span> * <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">width</span>: double(<span class=\"number\">5px</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"高级用法\">高级用法</h5><ul><li>引入外部文件</li><li>使用条件语句</li><li>使用循环语句</li></ul><p>引入外部文件：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">\"../foo.css\"</span>;</span><br></pre></td></tr></table></figure><p>使用条件语句：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">　<span class=\"keyword\">@if</span> <span class=\"number\">1</span> + <span class=\"number\">1</span> == <span class=\"number\">2</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid; &#125;</span><br><span class=\"line\">　<span class=\"keyword\">@if</span> <span class=\"number\">5</span> &lt; <span class=\"number\">3</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@if</span> <span class=\"variable\">$color</span> == <span class=\"string\">'#fff'</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">@else</span> &#123;</span><br><span class=\"line\">　<span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>使用循环语句，支持for和while循环：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> <span class=\"variable\">$i</span> from <span class=\"number\">1</span> to <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">　　<span class=\"selector-class\">.border-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123;</span><br><span class=\"line\">　　　　<span class=\"attribute\">border</span>: #&#123;<span class=\"variable\">$i</span>&#125;px solid blue;</span><br><span class=\"line\">　　&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$i</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\">　　<span class=\"keyword\">@while</span> <span class=\"variable\">$i</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">　　　　<span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">　　　　<span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">　　&#125;</span><br></pre></td></tr></table></figure><h4 id=\"命名\">命名</h4><hr><ol><li>ID命名</li><li>Class命名</li><li>父元素和子元素的命名规则</li></ol><h5 id=\"ID命名\">ID命名</h5><p>统一采用驼峰命名法(camelCase)，第一个首字母小写，其它单词的首字母大写：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootlistitem</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#RootListItem</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListItem</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><p>命名单词数最好不要超过3个：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListItemWrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-id\">#rootListWrapper</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id=\"Class命名\">Class命名</h5><p>类的命名统一使用连字符 ‘-’ 连接各个单词，命名中不允许出现大写字母：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;* bad *&#x2F;</span><br><span class=\"line\">.contentWrapper &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;* good *&#x2F;</span><br><span class=\"line\">.content-wrapper &#123;...&#125;</span><br></pre></td></tr></table></figure><p>类名最好使用三个及三个以下的单词，至多不超过四个：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-list-item-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* not-good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-list-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-detail-wrapper</span> &#123;...&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.file-wrapper</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id=\"父元素和子元素的命名规则\">父元素和子元素的命名规则</h5><p>父元素和多级子元素的命名需要体现元素在页面的功能、样式、或结构：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.file-list-wrapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-header</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-body</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-body-aside</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"selector-class\">.body-aside-left</span> &#123;...&#125;</span><br><span class=\"line\">      <span class=\"selector-class\">.body-aside-right</span> &#123;...&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.list-body-main</span> &#123;...&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.file-list-footer</span> &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"书写顺序\">书写顺序</h4><hr><p>内部属性书写顺序应该按照从上到下是 布局定位、盒模型属性、表现性属性和其它：</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 布局定位 */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 盒模型属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#ddd</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 表现性属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">'Arial'</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">  <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 其它 */</span></span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"代码缩进和嵌套\">代码缩进和嵌套</h4><hr><ol><li>代码缩进</li><li>多层嵌套</li></ol><h5 id=\"代码缩进\">代码缩进</h5><p>代码缩进统一使用两个空格，不要用四个空格和tab(编辑器内可以自定义tab输出的空格数，不用手打两个空格)</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>选择器与花括号之间要保留一个空格，属性名之后的冒号与属性值之间要保留一个空格，选择符号两边各保留一个空格</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span>&gt;<span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:fixed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &gt; <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"多层嵌套\">多层嵌套</h5><p>在Sass中你可以嵌套选择器，这可以使代码变得更模块化和可读，嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器(优先使用子选择器’ &gt; '，提高css查询性能)</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"attribute\">content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询，你可以在任何给定的嵌套层次中使用媒体查询</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.latest-news</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.main</span> &gt; <span class=\"selector-class\">.latest-news</span> &gt; <span class=\"selector-class\">.news-article</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"selector-class\">.content-page</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.latest-news</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &gt; <span class=\"selector-class\">.news-article</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">          <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">            <span class=\"attribute\">font-size</span>: <span class=\"number\">3rem</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &gt; <span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">      <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.page-footer</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (min-width: <span class=\"number\">641px</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>嵌套顺序和选择器，以下是一个sass块应该具有的顺序：</p><ol><li>当前选择器的样式属性</li><li>当前选择器的伪类选择器 (:first-letter, :hover, :active)伪类元素 (:before and :after)</li><li>当前选择器的声明样式 (.selected, .active, .enlarged)</li><li>用Sass的上下文媒体查询</li><li>子选择器作为最后的部分</li></ol><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.product-teaser</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的样式属性 */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: whitesmoke;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: grey;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的伪类选择器 */</span></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: <span class=\"number\">1px</span> solid grey;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 当前选择器的声明样式 */</span></span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 上下文媒体查询 */</span></span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (max-width: <span class=\"number\">640px</span>) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 子选择器 */</span></span><br><span class=\"line\">  &gt; <span class=\"selector-class\">.content</span> &gt; <span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2em</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 子选择器上下文媒体查询 */</span></span><br><span class=\"line\">    <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (max-width: <span class=\"number\">640px</span>) &#123;</span><br><span class=\"line\">      <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2em</span>;</span><br><span class=\"line\">      <span class=\"attribute\">text-transform</span>: uppercase;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"注释\">注释</h4><hr><blockquote><p>代码编辑器一般都可以自定义代码段(snippets)，通过编辑自定义代码段配置文件将快捷键绑定到一段自定义代码可以实现快捷插入代码段</p></blockquote><ol><li>组件注释</li><li>子组件注释</li><li>一般注释</li></ol><h5 id=\"组件注释\">组件注释</h5><p>一个大组件需要使用组件注释，体现页面结构。</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ==========================================================</span></span><br><span class=\"line\"><span class=\"comment\">父组件 file-list</span></span><br><span class=\"line\"><span class=\"comment\">============================================================= */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-list</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id=\"子组件注释\">子组件注释</h5><p>一个组件的子组件需要使用子组件注释，体现组件整体结构。</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 子组件 file-list-item</span></span><br><span class=\"line\"><span class=\"comment\">============================================================= */</span></span><br><span class=\"line\"><span class=\"selector-class\">.file-list-item</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><h5 id=\"一般注释\">一般注释</h5><p>使用块注释和行注释都行，重要的是体现代码结构和代码简洁度</p><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 块注释 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.class1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 行注释</span></span><br><span class=\"line\">  <span class=\"selector-class\">.title</span> &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.content</span> &#123;  <span class=\"comment\">// 行注释2</span></span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"模仿RequireJs的用法写一个低配版的模块加载器","catalog":true,"comments":1,"indexing":true,"header-img":"/blogs/img/article_header/article_header.png","top":false,"tocnum":true,"date":"2018-01-04T07:25:39.000Z","subtitle":"RequireJs Implementation","_content":"\n#### Contents\n1. 前言\n2. 回顾RequireJs的基本用法\n3. 实现原理\n4. 使用方法\n5. 总结\n\n#### 前言\n________\n\n前段时间一直想用单页开发技术写一个自己的个人网站(使用es2015)，写了一部分之后，发现单页应用因为只有一个页面，所以第一次加载index.html时就要下载所有js文件，并且为了好管理各个部分的状态，需要划分页面的各个功能区为各个模块，es2015本身是不支持一些模块规范的(比如AMD、CMD、CommonJs等)，所以只能这样模拟实现：  \n\n```js\n  // global\n  var spa = (function(){...})();\n\n  // module blog\n  spa.blog = (function(){\n    ...\n    return {\n      do1: do1,\n      do2: do2,\n    };\n  })();\n\n  // module model\n  spa.model = (function(){...})();\n\n  // module shell\n  spa.model = (function(){...})();\n```\n\n并且各个模块之间又存在一些依赖关系，在index.html里面写script标签来载入模块时需要写很多个，同时也要根据依赖关系来确定书写顺序，页面逻辑混乱，如下：  \n\n```html\n  <script type=\"text/javascript\" src=\"/javascripts/spa.utils.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.model.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.mock.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.chat.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.blog.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.action.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.shell.js\"></script>\n```\n\n之前用过RequireJs(一个流行的JavaScript模块加载器)，它是用同构js的架构来写的，所以node.js环境下也能使用。我想自己可以尝试一下写一个低配版的js模块加载器 [requireJs-nojsja](https://github.com/nojsja/requireJs-nojsja) 来应付一下我这个单页网站，当然只是大致模仿了主要功能。  \n\n#### 回顾RequireJs的基本用法\n__________________________\n\n1. 配置模块信息  \n```js\n  requirejs.config({\n      baseUrl: '/javascripts',  // 配置根目录\n      paths: {\n        moduleA: 'a.js',\n        moduleB: 'b.js',\n        moduleC: 'c.js',\n      },\n      shim: {  // 配置不遵循amd规范的模块\n        moduleC: {\n          exports: 'log',\n          deps: ['moduleA']\n        }\n      },\n  });\n```\n2. 定义一个模块  \n```js\n  define(name, ['moduleA', 'moduleB'], function(a, b){\n    ...\n    return {\n      do: function() {\n        a.doSomething();\n        b.doAnother();\n      }\n    };\n  });\n```\n3. 引用一个模块  \n```js\n  // 引用模块\n  require(['moduleA', 'moduleB'], function(a, b) {\n    a.doSomething();\n    b.doAnother();\n  });\n```\n\n#### 实现原理\n____________\n\n1. config方法确定各个模块的依赖关系  \n```js\n  /* 记录模块访问地址和模块的依赖等信息 */\n  Require.config({\n    baseUrl: '/javascripts/',\n    paths: {\n      'moduleA': './moduleA.js',  // 相对于当前目录\n      'moduleB': '/javascripts/moduleB.js',  // 不使用baseUrl\n      'moduleC': 'moduleC.js',\n\n      'moduleD': {\n        url: 'moduleD.js',\n        deps: ['moduleE', 'moduleF'],\n      },\n      ...\n    },\n    shim: {\n      'moduleH': {\n        url: 'moduleH.js',\n        exports: 'log',\n      },\n    }\n  });\n```\n\n2. 数据请求过程分析  \n\n(1) config配置模块信息时并不会触发网络请求  \n(2) 在index.js主入口文件里使用require方法引用多个模块时，根据config配置文件构造一下所有模块的依赖分析树。按深度优先或是广度优先来遍历这个依赖树，将所有依赖按照依赖顺序放进一个数组，最后进行数组去重处理，因为会出现依赖重复的情况    \n\n```js\n  var dependsTree = new Tree('dependsTree');\n  var dependsArray = [];\n  var dependsFlag = {};  // 解决循环依赖\n\n  // 创建树\n  setDepends(depends, dependsTree);\n  // 得到依赖数组\n  sortDepends(dependsArray, dependsTree);\n  // 数据去重\n  arrayFilter(dependsArray);\n\n  return dependsArray;\n```\n\n(3) 创建XHR对象异步下载数组里面的所有js文件，按照依赖顺序挨个解析js代码，解析完成后触发回调函数，回调函数里传入各个模块的引用  \n  ```js\n    // ajax下载代码文件\n    Utils.request(url, 'get', null, function(responseText){\n      // 暂时保存\n      _temp[module_name] = responseText;\n    });\n\n    // 文件下载完成后eval解析代码\n    array.map(function(jsText){\n      ...\n      eval(jsText);\n      ...\n    });\n\n    // 调用回调函数\n    callback.apply(null, [dep1, dep2, dep3]);\n  ```\n\n#### 使用方法\n___________\n详细说明: github [README.md](https://github.com/nojsja/requireJs-nojsja)\n\n#### 总结\n________\n\n1. 下载js代码时我用了ajax来实现，所以对于跨域文件和CDN会有点问题，这个可以改成创建script标签，指定标签src，最后将document.head.appendChild(script)，这样来解决，其它的诸如使用XMLHttpRequest 2.0，iframe等也可以的，可以实验一下。\n2. 解析代码时我用了eval的方法，这个eval在JavaScript里面是众说纷纭，可以看看[这个](https://www.zhihu.com/question/20591877)，如果是用了上面创建script标签的方法的话，就不用自己eval了。\n3. 发现一个bug，存在循环依赖时，代码会报错，还没去解决。RequireJs是这样处理的：模块a依赖b，同时b依赖a，这种情况下b的模块函数被调用时，被传入的a是undefined，所以需要自己在b里面手动require一下a。","source":"_posts/2018-01-04-模仿RequireJs的用法写一个低配版的模块加载器.md","raw":"---\ntitle: 模仿RequireJs的用法写一个低配版的模块加载器\ncatalog: true\ncomments: true\nindexing: true\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntop: false\ntocnum: true\ndate: 2018-01-04 15:25:39\nsubtitle: RequireJs Implementation\ntags: \n- devtools\ncategories:\n- Javascript\n---\n\n#### Contents\n1. 前言\n2. 回顾RequireJs的基本用法\n3. 实现原理\n4. 使用方法\n5. 总结\n\n#### 前言\n________\n\n前段时间一直想用单页开发技术写一个自己的个人网站(使用es2015)，写了一部分之后，发现单页应用因为只有一个页面，所以第一次加载index.html时就要下载所有js文件，并且为了好管理各个部分的状态，需要划分页面的各个功能区为各个模块，es2015本身是不支持一些模块规范的(比如AMD、CMD、CommonJs等)，所以只能这样模拟实现：  \n\n```js\n  // global\n  var spa = (function(){...})();\n\n  // module blog\n  spa.blog = (function(){\n    ...\n    return {\n      do1: do1,\n      do2: do2,\n    };\n  })();\n\n  // module model\n  spa.model = (function(){...})();\n\n  // module shell\n  spa.model = (function(){...})();\n```\n\n并且各个模块之间又存在一些依赖关系，在index.html里面写script标签来载入模块时需要写很多个，同时也要根据依赖关系来确定书写顺序，页面逻辑混乱，如下：  \n\n```html\n  <script type=\"text/javascript\" src=\"/javascripts/spa.utils.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.model.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.mock.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.chat.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.blog.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.action.js\"></script>\n  <script type=\"text/javascript\" src=\"/javascripts/spa.shell.js\"></script>\n```\n\n之前用过RequireJs(一个流行的JavaScript模块加载器)，它是用同构js的架构来写的，所以node.js环境下也能使用。我想自己可以尝试一下写一个低配版的js模块加载器 [requireJs-nojsja](https://github.com/nojsja/requireJs-nojsja) 来应付一下我这个单页网站，当然只是大致模仿了主要功能。  \n\n#### 回顾RequireJs的基本用法\n__________________________\n\n1. 配置模块信息  \n```js\n  requirejs.config({\n      baseUrl: '/javascripts',  // 配置根目录\n      paths: {\n        moduleA: 'a.js',\n        moduleB: 'b.js',\n        moduleC: 'c.js',\n      },\n      shim: {  // 配置不遵循amd规范的模块\n        moduleC: {\n          exports: 'log',\n          deps: ['moduleA']\n        }\n      },\n  });\n```\n2. 定义一个模块  \n```js\n  define(name, ['moduleA', 'moduleB'], function(a, b){\n    ...\n    return {\n      do: function() {\n        a.doSomething();\n        b.doAnother();\n      }\n    };\n  });\n```\n3. 引用一个模块  \n```js\n  // 引用模块\n  require(['moduleA', 'moduleB'], function(a, b) {\n    a.doSomething();\n    b.doAnother();\n  });\n```\n\n#### 实现原理\n____________\n\n1. config方法确定各个模块的依赖关系  \n```js\n  /* 记录模块访问地址和模块的依赖等信息 */\n  Require.config({\n    baseUrl: '/javascripts/',\n    paths: {\n      'moduleA': './moduleA.js',  // 相对于当前目录\n      'moduleB': '/javascripts/moduleB.js',  // 不使用baseUrl\n      'moduleC': 'moduleC.js',\n\n      'moduleD': {\n        url: 'moduleD.js',\n        deps: ['moduleE', 'moduleF'],\n      },\n      ...\n    },\n    shim: {\n      'moduleH': {\n        url: 'moduleH.js',\n        exports: 'log',\n      },\n    }\n  });\n```\n\n2. 数据请求过程分析  \n\n(1) config配置模块信息时并不会触发网络请求  \n(2) 在index.js主入口文件里使用require方法引用多个模块时，根据config配置文件构造一下所有模块的依赖分析树。按深度优先或是广度优先来遍历这个依赖树，将所有依赖按照依赖顺序放进一个数组，最后进行数组去重处理，因为会出现依赖重复的情况    \n\n```js\n  var dependsTree = new Tree('dependsTree');\n  var dependsArray = [];\n  var dependsFlag = {};  // 解决循环依赖\n\n  // 创建树\n  setDepends(depends, dependsTree);\n  // 得到依赖数组\n  sortDepends(dependsArray, dependsTree);\n  // 数据去重\n  arrayFilter(dependsArray);\n\n  return dependsArray;\n```\n\n(3) 创建XHR对象异步下载数组里面的所有js文件，按照依赖顺序挨个解析js代码，解析完成后触发回调函数，回调函数里传入各个模块的引用  \n  ```js\n    // ajax下载代码文件\n    Utils.request(url, 'get', null, function(responseText){\n      // 暂时保存\n      _temp[module_name] = responseText;\n    });\n\n    // 文件下载完成后eval解析代码\n    array.map(function(jsText){\n      ...\n      eval(jsText);\n      ...\n    });\n\n    // 调用回调函数\n    callback.apply(null, [dep1, dep2, dep3]);\n  ```\n\n#### 使用方法\n___________\n详细说明: github [README.md](https://github.com/nojsja/requireJs-nojsja)\n\n#### 总结\n________\n\n1. 下载js代码时我用了ajax来实现，所以对于跨域文件和CDN会有点问题，这个可以改成创建script标签，指定标签src，最后将document.head.appendChild(script)，这样来解决，其它的诸如使用XMLHttpRequest 2.0，iframe等也可以的，可以实验一下。\n2. 解析代码时我用了eval的方法，这个eval在JavaScript里面是众说纷纭，可以看看[这个](https://www.zhihu.com/question/20591877)，如果是用了上面创建script标签的方法的话，就不用自己eval了。\n3. 发现一个bug，存在循环依赖时，代码会报错，还没去解决。RequireJs是这样处理的：模块a依赖b，同时b依赖a，这种情况下b的模块函数被调用时，被传入的a是undefined，所以需要自己在b里面手动require一下a。","slug":"模仿RequireJs的用法写一个低配版的模块加载器","published":1,"updated":"2021-01-16T07:32:18.589Z","layout":"post","photos":[],"link":"","_id":"ckmahmuqb0003kl95cifrhj6r","content":"<h4 id=\"Contents\">Contents</h4><ol><li>前言</li><li>回顾RequireJs的基本用法</li><li>实现原理</li><li>使用方法</li><li>总结</li></ol><h4 id=\"前言\">前言</h4><hr><p>前段时间一直想用单页开发技术写一个自己的个人网站(使用es2015)，写了一部分之后，发现单页应用因为只有一个页面，所以第一次加载index.html时就要下载所有js文件，并且为了好管理各个部分的状态，需要划分页面的各个功能区为各个模块，es2015本身是不支持一些模块规范的(比如AMD、CMD、CommonJs等)，所以只能这样模拟实现：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> spa = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module blog</span></span><br><span class=\"line\">spa.blog = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    do1: do1,</span><br><span class=\"line\">    do2: do2,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module model</span></span><br><span class=\"line\">spa.model = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module shell</span></span><br><span class=\"line\">spa.model = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)();</span><br></pre></td></tr></table></figure><p>并且各个模块之间又存在一些依赖关系，在index.html里面写script标签来载入模块时需要写很多个，同时也要根据依赖关系来确定书写顺序，页面逻辑混乱，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.utils.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.model.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.mock.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.chat.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.blog.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.action.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.shell.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前用过RequireJs(一个流行的JavaScript模块加载器)，它是用同构js的架构来写的，所以node.js环境下也能使用。我想自己可以尝试一下写一个低配版的js模块加载器 <a href=\"https://github.com/nojsja/requireJs-nojsja\" target=\"_blank\" rel=\"noopener\">requireJs-nojsja</a> 来应付一下我这个单页网站，当然只是大致模仿了主要功能。</p><h4 id=\"回顾RequireJs的基本用法\">回顾RequireJs的基本用法</h4><hr><ol><li>配置模块信息</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requirejs.config(&#123;</span><br><span class=\"line\">    baseUrl: <span class=\"string\">'/javascripts'</span>,  <span class=\"comment\">// 配置根目录</span></span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">      moduleA: <span class=\"string\">'a.js'</span>,</span><br><span class=\"line\">      moduleB: <span class=\"string\">'b.js'</span>,</span><br><span class=\"line\">      moduleC: <span class=\"string\">'c.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    shim: &#123;  <span class=\"comment\">// 配置不遵循amd规范的模块</span></span><br><span class=\"line\">      moduleC: &#123;</span><br><span class=\"line\">        exports: <span class=\"string\">'log'</span>,</span><br><span class=\"line\">        deps: [<span class=\"string\">'moduleA'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>定义一个模块</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(name, [<span class=\"string\">'moduleA'</span>, <span class=\"string\">'moduleB'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      a.doSomething();</span><br><span class=\"line\">      b.doAnother();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>引用一个模块</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用模块</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'moduleA'</span>, <span class=\"string\">'moduleB'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  a.doSomething();</span><br><span class=\"line\">  b.doAnother();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"实现原理\">实现原理</h4><hr><ol><li>config方法确定各个模块的依赖关系</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 记录模块访问地址和模块的依赖等信息 */</span></span><br><span class=\"line\">Require.config(&#123;</span><br><span class=\"line\">  baseUrl: <span class=\"string\">'/javascripts/'</span>,</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    <span class=\"string\">'moduleA'</span>: <span class=\"string\">'./moduleA.js'</span>,  <span class=\"comment\">// 相对于当前目录</span></span><br><span class=\"line\">    <span class=\"string\">'moduleB'</span>: <span class=\"string\">'/javascripts/moduleB.js'</span>,  <span class=\"comment\">// 不使用baseUrl</span></span><br><span class=\"line\">    <span class=\"string\">'moduleC'</span>: <span class=\"string\">'moduleC.js'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'moduleD'</span>: &#123;</span><br><span class=\"line\">      url: <span class=\"string\">'moduleD.js'</span>,</span><br><span class=\"line\">      deps: [<span class=\"string\">'moduleE'</span>, <span class=\"string\">'moduleF'</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  shim: &#123;</span><br><span class=\"line\">    <span class=\"string\">'moduleH'</span>: &#123;</span><br><span class=\"line\">      url: <span class=\"string\">'moduleH.js'</span>,</span><br><span class=\"line\">      exports: <span class=\"string\">'log'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>数据请求过程分析</li></ol><p>(1) config配置模块信息时并不会触发网络请求<br>(2) 在index.js主入口文件里使用require方法引用多个模块时，根据config配置文件构造一下所有模块的依赖分析树。按深度优先或是广度优先来遍历这个依赖树，将所有依赖按照依赖顺序放进一个数组，最后进行数组去重处理，因为会出现依赖重复的情况</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dependsTree = <span class=\"keyword\">new</span> Tree(<span class=\"string\">'dependsTree'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dependsArray = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> dependsFlag = &#123;&#125;;  <span class=\"comment\">// 解决循环依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建树</span></span><br><span class=\"line\">setDepends(depends, dependsTree);</span><br><span class=\"line\"><span class=\"comment\">// 得到依赖数组</span></span><br><span class=\"line\">sortDepends(dependsArray, dependsTree);</span><br><span class=\"line\"><span class=\"comment\">// 数据去重</span></span><br><span class=\"line\">arrayFilter(dependsArray);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> dependsArray;</span><br></pre></td></tr></table></figure><p>(3) 创建XHR对象异步下载数组里面的所有js文件，按照依赖顺序挨个解析js代码，解析完成后触发回调函数，回调函数里传入各个模块的引用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax下载代码文件</span></span><br><span class=\"line\">Utils.request(url, <span class=\"string\">'get'</span>, <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responseText</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 暂时保存</span></span><br><span class=\"line\">  _temp[module_name] = responseText;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件下载完成后eval解析代码</span></span><br><span class=\"line\">array.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsText</span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">eval</span>(jsText);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用回调函数</span></span><br><span class=\"line\">callback.apply(<span class=\"literal\">null</span>, [dep1, dep2, dep3]);</span><br></pre></td></tr></table></figure><h4 id=\"使用方法\">使用方法</h4><hr><p>详细说明: github <a href=\"https://github.com/nojsja/requireJs-nojsja\" target=\"_blank\" rel=\"noopener\">README.md</a></p><h4 id=\"总结\">总结</h4><hr><ol><li>下载js代码时我用了ajax来实现，所以对于跨域文件和CDN会有点问题，这个可以改成创建script标签，指定标签src，最后将document.head.appendChild(script)，这样来解决，其它的诸如使用XMLHttpRequest 2.0，iframe等也可以的，可以实验一下。</li><li>解析代码时我用了eval的方法，这个eval在JavaScript里面是众说纷纭，可以看看<a href=\"https://www.zhihu.com/question/20591877\" target=\"_blank\" rel=\"noopener\">这个</a>，如果是用了上面创建script标签的方法的话，就不用自己eval了。</li><li>发现一个bug，存在循环依赖时，代码会报错，还没去解决。RequireJs是这样处理的：模块a依赖b，同时b依赖a，这种情况下b的模块函数被调用时，被传入的a是undefined，所以需要自己在b里面手动require一下a。</li></ol>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Contents\">Contents</h4><ol><li>前言</li><li>回顾RequireJs的基本用法</li><li>实现原理</li><li>使用方法</li><li>总结</li></ol><h4 id=\"前言\">前言</h4><hr><p>前段时间一直想用单页开发技术写一个自己的个人网站(使用es2015)，写了一部分之后，发现单页应用因为只有一个页面，所以第一次加载index.html时就要下载所有js文件，并且为了好管理各个部分的状态，需要划分页面的各个功能区为各个模块，es2015本身是不支持一些模块规范的(比如AMD、CMD、CommonJs等)，所以只能这样模拟实现：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// global</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> spa = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module blog</span></span><br><span class=\"line\">spa.blog = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    do1: do1,</span><br><span class=\"line\">    do2: do2,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module model</span></span><br><span class=\"line\">spa.model = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// module shell</span></span><br><span class=\"line\">spa.model = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;...&#125;)();</span><br></pre></td></tr></table></figure><p>并且各个模块之间又存在一些依赖关系，在index.html里面写script标签来载入模块时需要写很多个，同时也要根据依赖关系来确定书写顺序，页面逻辑混乱，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.utils.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.model.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.mock.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.chat.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.blog.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.action.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/javascripts/spa.shell.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前用过RequireJs(一个流行的JavaScript模块加载器)，它是用同构js的架构来写的，所以node.js环境下也能使用。我想自己可以尝试一下写一个低配版的js模块加载器 <a href=\"https://github.com/nojsja/requireJs-nojsja\" target=\"_blank\" rel=\"noopener\">requireJs-nojsja</a> 来应付一下我这个单页网站，当然只是大致模仿了主要功能。</p><h4 id=\"回顾RequireJs的基本用法\">回顾RequireJs的基本用法</h4><hr><ol><li>配置模块信息</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requirejs.config(&#123;</span><br><span class=\"line\">    baseUrl: <span class=\"string\">'/javascripts'</span>,  <span class=\"comment\">// 配置根目录</span></span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">      moduleA: <span class=\"string\">'a.js'</span>,</span><br><span class=\"line\">      moduleB: <span class=\"string\">'b.js'</span>,</span><br><span class=\"line\">      moduleC: <span class=\"string\">'c.js'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    shim: &#123;  <span class=\"comment\">// 配置不遵循amd规范的模块</span></span><br><span class=\"line\">      moduleC: &#123;</span><br><span class=\"line\">        exports: <span class=\"string\">'log'</span>,</span><br><span class=\"line\">        deps: [<span class=\"string\">'moduleA'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>定义一个模块</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(name, [<span class=\"string\">'moduleA'</span>, <span class=\"string\">'moduleB'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      a.doSomething();</span><br><span class=\"line\">      b.doAnother();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>引用一个模块</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引用模块</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'moduleA'</span>, <span class=\"string\">'moduleB'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  a.doSomething();</span><br><span class=\"line\">  b.doAnother();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"实现原理\">实现原理</h4><hr><ol><li>config方法确定各个模块的依赖关系</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 记录模块访问地址和模块的依赖等信息 */</span></span><br><span class=\"line\">Require.config(&#123;</span><br><span class=\"line\">  baseUrl: <span class=\"string\">'/javascripts/'</span>,</span><br><span class=\"line\">  paths: &#123;</span><br><span class=\"line\">    <span class=\"string\">'moduleA'</span>: <span class=\"string\">'./moduleA.js'</span>,  <span class=\"comment\">// 相对于当前目录</span></span><br><span class=\"line\">    <span class=\"string\">'moduleB'</span>: <span class=\"string\">'/javascripts/moduleB.js'</span>,  <span class=\"comment\">// 不使用baseUrl</span></span><br><span class=\"line\">    <span class=\"string\">'moduleC'</span>: <span class=\"string\">'moduleC.js'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'moduleD'</span>: &#123;</span><br><span class=\"line\">      url: <span class=\"string\">'moduleD.js'</span>,</span><br><span class=\"line\">      deps: [<span class=\"string\">'moduleE'</span>, <span class=\"string\">'moduleF'</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  shim: &#123;</span><br><span class=\"line\">    <span class=\"string\">'moduleH'</span>: &#123;</span><br><span class=\"line\">      url: <span class=\"string\">'moduleH.js'</span>,</span><br><span class=\"line\">      exports: <span class=\"string\">'log'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>数据请求过程分析</li></ol><p>(1) config配置模块信息时并不会触发网络请求<br>(2) 在index.js主入口文件里使用require方法引用多个模块时，根据config配置文件构造一下所有模块的依赖分析树。按深度优先或是广度优先来遍历这个依赖树，将所有依赖按照依赖顺序放进一个数组，最后进行数组去重处理，因为会出现依赖重复的情况</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dependsTree = <span class=\"keyword\">new</span> Tree(<span class=\"string\">'dependsTree'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dependsArray = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> dependsFlag = &#123;&#125;;  <span class=\"comment\">// 解决循环依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建树</span></span><br><span class=\"line\">setDepends(depends, dependsTree);</span><br><span class=\"line\"><span class=\"comment\">// 得到依赖数组</span></span><br><span class=\"line\">sortDepends(dependsArray, dependsTree);</span><br><span class=\"line\"><span class=\"comment\">// 数据去重</span></span><br><span class=\"line\">arrayFilter(dependsArray);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> dependsArray;</span><br></pre></td></tr></table></figure><p>(3) 创建XHR对象异步下载数组里面的所有js文件，按照依赖顺序挨个解析js代码，解析完成后触发回调函数，回调函数里传入各个模块的引用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ajax下载代码文件</span></span><br><span class=\"line\">Utils.request(url, <span class=\"string\">'get'</span>, <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responseText</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 暂时保存</span></span><br><span class=\"line\">  _temp[module_name] = responseText;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 文件下载完成后eval解析代码</span></span><br><span class=\"line\">array.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsText</span>)</span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">eval</span>(jsText);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用回调函数</span></span><br><span class=\"line\">callback.apply(<span class=\"literal\">null</span>, [dep1, dep2, dep3]);</span><br></pre></td></tr></table></figure><h4 id=\"使用方法\">使用方法</h4><hr><p>详细说明: github <a href=\"https://github.com/nojsja/requireJs-nojsja\" target=\"_blank\" rel=\"noopener\">README.md</a></p><h4 id=\"总结\">总结</h4><hr><ol><li>下载js代码时我用了ajax来实现，所以对于跨域文件和CDN会有点问题，这个可以改成创建script标签，指定标签src，最后将document.head.appendChild(script)，这样来解决，其它的诸如使用XMLHttpRequest 2.0，iframe等也可以的，可以实验一下。</li><li>解析代码时我用了eval的方法，这个eval在JavaScript里面是众说纷纭，可以看看<a href=\"https://www.zhihu.com/question/20591877\" target=\"_blank\" rel=\"noopener\">这个</a>，如果是用了上面创建script标签的方法的话，就不用自己eval了。</li><li>发现一个bug，存在循环依赖时，代码会报错，还没去解决。RequireJs是这样处理的：模块a依赖b，同时b依赖a，这种情况下b的模块函数被调用时，被传入的a是undefined，所以需要自己在b里面手动require一下a。</li></ol>"},{"title":"原生Js实现瀑布流效果","catalog":true,"toc_nav_num":true,"date":"2018-07-09T08:01:26.000Z","subtitle":"javascript waterFall","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-07-09T08:01:26.000Z","_content":"\n#### 盗用的效果图\n![preview](waterfall-1.gif)\n\n#### 效果分析\n瀑布流中图片的宽度都是固定的，但是高度需要设置为auto以使图片不变形，高度不固定。首先想到能不能用float属性让图片流动，想象中很美好，实际效果如下，可以看到因为第三个元素的高度问题，第二行元素流动时被第三个元素挡住，导致了布局错乱。\n\n![float](waterfall-2.jpg)  \n\n看看百度图片是怎么实现图片布局的，如下图，可以看出百度用了讨巧的办法，图片跟我们这个瀑布流的图片的宽高设定正好相反，百度图片的列数同样固定，但是高度也固定，而宽度不固定，这样处理的话正好能避免上面那个float流动的问题，这个... 好吧 最后我们还是来说说怎样实现我们效果图中那样的瀑布流布局。\n\n![baidu](waterfall-3.jpg)  \n\n#### 解决方法\n\n* html结构如下，需要说明的是container元素是相对定位，每个item元素都是绝对定位，这样我们通过设置item元素的top和left值就能改变它们的位置了，图片的宽度是100%(这儿思考一下为什么img的父级需要设置box-sizing: border-box)。\n\n```html\n<!-- 页面结构 -->\n<div class=\"water-fall-container\">\n  <div class=\"water-fall-item\">\n    <img src=\"url\">\n  </div>\n  ...\n  <div class=\"water-fall-item\">\n    <img src=\"url\">\n  </div>\n</div>\n\n```\n\n* 我把主要逻辑写成了构造函数的形式，这样一个页面中通过传入不同的参数就能创建多个瀑布流实例。构造函数中我们依次需要传入容器元素本身、子元素的选择器(.water-fall-item)、\n每一列自定义的宽度(单位是px)、图片之间间隔的距离(实际上是padding-right 和 padding-bottom 的值，单位px)，通过这些指标我们首先能够计算出容器元素的宽度，\n(容器宽度 / 列宽) === 总共的列数，最后在step函数里就是布局的代码了，step做的事儿就是遍历容器元素下的每个item元素，设置它们的宽度、高度、top值、left值以及padding值，\n其中第一行元素top值固定为零，left值依次根据数组下标再乘以列宽，到了第二行之后的元素就省事儿了，直接设置当前元素的top值为 对应的那个上一排元素的top值+上一排元素的高度值(clientHeight)，而left值每一排都相同，因为列宽和列数是固定的。\n\n```javascript\n\n/**\n * [WaterFall 图片瀑布流构造函数]\n * @param  {DomElement} father   [瀑布流的容器元素]\n * @param  {String} childClass   [瀑布流子元素类名选择器 如: .water-fall-item]\n * @param  {Number} columnWidth  [设定每一列的宽度，单位: px]\n * @param  {Number} paddingWidth [设定图片之间的间隔距离， 单位: px]\n */\nfunction WaterFall(father, childClass, columnWidth, paddingWidth) {\n  this.$container = father;  // 容器\n  this.childSelector = childClass;  // 子代img选择器\n  this.children = [];  // 子代img\n  this.columnWidth = columnWidth;  // 单列宽度\n  this.paddingWidth = paddingWidth + 'px';  // 图片之间的间隔距离\n\n  this.totalWidth = this.$container.clientWidth;  // 容器宽度\n  this.columnNum = ~~(this.totalWidth / this.columnWidth);  // 列数\n\n  // 调用多次\n  this.step = function () {\n    this.totalWidth = this.$container.clientWidth;\n    this.columnNum = ~~(this.totalWidth / this.columnWidth);\n    this.children = this.$container.querySelectorAll(this.childSelector);\n    for (var i = 0; i < this.children.length; i++) {\n      this.children[i].style.width = this.columnWidth + 'px';\n      this.children[i].style.height = 'auto';\n      this.children[i].style.paddingRight = this.paddingWidth;\n      this.children[i].style.paddingBottom = this.paddingWidth;\n\n      // 每行第一个设置左padding\n      if (i % this.columnNum === 0) {\n        this.children[i].style.paddingLeft = this.paddingWidth;\n      }\n\n      // 第一行 和 其它行的不同处理\n      if (i < this.columnNum) {\n        this.children[i].style.left = (i) * this.columnWidth + 'px';\n        this.children[i].style.top = (i) * 0 + 'px';\n      }else {\n        this.children[i].style.left = this.children[i - this.columnNum].style.left;\n        this.children[i].style.top = +this.children[i - this.columnNum].style.top.replace('px', '') +\n                                      this.children[i - this.columnNum].clientHeight + 'px';\n      }\n    }\n  };\n};\n\n```\n\n* 再看看从页面图片加载到生成瀑布流实例我是怎样处理的，前面部分先通过一组图片url地址将所有图片加载到页面上，中间设定参数后生成一个瀑布流实例，最后重点是\n弄清楚我们需要在什么时候调用waterfall.step()函数来处理页面中item元素的重排。我可能用了个比价笨的办法：在所有图片加载完成之前 使用定时器 轮询每个图片的加载情况，并进行布局，所有图片加载完后就取消定时器。最后别忘记 窗口拖动后也要重新布局，在这儿我用了一个函数节流的思想，防止resize短时间内多次触发，改善页面性能，至于节流函数怎么写，大家可以看看相关概念然后自己实现一个，so easy !\n\n```javascript\n\n/**\n * [waterFallInit 瀑布流初始化]\n * @param  {String} wData [图片url的数组]\n */\nvar waterFallInit = function (wData) {\n  var fragment = document.createDocumentFragment();\n  var div, img, timer, $imgs, length, index = 0;\n  // 载入图片\n  for (var i = 0; i < wData.length; i++) {\n    div = document.createElement('div');\n    img = document.createElement('img');\n    div.setAttribute('class', 'water-fall-item');\n    img.setAttribute('src', wData[i]);\n    div.appendChild(img);\n    fragment.appendChild(div);\n    if (i === wData.length - 1) {\n      domMap.$waterFall.appendChild(fragment);\n    }\n  }\n\n  // 一个瀑布流实例\n  var waterfall = new WaterFall(domMap.$waterFall, '.water-fall-item', 200, 5);\n\n  // 轮询所有图片的加载状态\n  timer = setInterval(function () {\n    index=0;\n    $imgs = domMap.$waterFall.querySelectorAll('.water-fall-item > img');\n    length = $imgs.length;\n    // 统计图片加载完成的数量\n    for (var i = 0; i < $imgs.length; i++) {\n      if ($imgs[i].complete) {\n        if (++index === length) clearInterval(timer);\n      }\n    }\n    waterfall.step();\n  }, 250);\n\n  // 窗口拖动\n   window.onresize =  function () {\n     Utils.FnDelay(function () {\n       waterfall.step();\n     }, 800);\n   }\n};\n\n```\n\n#### 感谢阅读\n_代码存放在github：[nojsja](https://github.com/nojsja/javascript-learning/tree/master/normal/water-fall-layout)_\n","source":"_posts/2018-07-09-原生Js实现瀑布流效果.md","raw":"---\ntitle: \"原生Js实现瀑布流效果\"\ncatalog: true\ntoc_nav_num: true\ndate:   2018-07-09 16:01:26\nsubtitle: \"javascript waterFall\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- javascript\ncategories:\n- Javascript\nupdateDate: 2018-07-09 16:01:26\n---\n\n#### 盗用的效果图\n![preview](waterfall-1.gif)\n\n#### 效果分析\n瀑布流中图片的宽度都是固定的，但是高度需要设置为auto以使图片不变形，高度不固定。首先想到能不能用float属性让图片流动，想象中很美好，实际效果如下，可以看到因为第三个元素的高度问题，第二行元素流动时被第三个元素挡住，导致了布局错乱。\n\n![float](waterfall-2.jpg)  \n\n看看百度图片是怎么实现图片布局的，如下图，可以看出百度用了讨巧的办法，图片跟我们这个瀑布流的图片的宽高设定正好相反，百度图片的列数同样固定，但是高度也固定，而宽度不固定，这样处理的话正好能避免上面那个float流动的问题，这个... 好吧 最后我们还是来说说怎样实现我们效果图中那样的瀑布流布局。\n\n![baidu](waterfall-3.jpg)  \n\n#### 解决方法\n\n* html结构如下，需要说明的是container元素是相对定位，每个item元素都是绝对定位，这样我们通过设置item元素的top和left值就能改变它们的位置了，图片的宽度是100%(这儿思考一下为什么img的父级需要设置box-sizing: border-box)。\n\n```html\n<!-- 页面结构 -->\n<div class=\"water-fall-container\">\n  <div class=\"water-fall-item\">\n    <img src=\"url\">\n  </div>\n  ...\n  <div class=\"water-fall-item\">\n    <img src=\"url\">\n  </div>\n</div>\n\n```\n\n* 我把主要逻辑写成了构造函数的形式，这样一个页面中通过传入不同的参数就能创建多个瀑布流实例。构造函数中我们依次需要传入容器元素本身、子元素的选择器(.water-fall-item)、\n每一列自定义的宽度(单位是px)、图片之间间隔的距离(实际上是padding-right 和 padding-bottom 的值，单位px)，通过这些指标我们首先能够计算出容器元素的宽度，\n(容器宽度 / 列宽) === 总共的列数，最后在step函数里就是布局的代码了，step做的事儿就是遍历容器元素下的每个item元素，设置它们的宽度、高度、top值、left值以及padding值，\n其中第一行元素top值固定为零，left值依次根据数组下标再乘以列宽，到了第二行之后的元素就省事儿了，直接设置当前元素的top值为 对应的那个上一排元素的top值+上一排元素的高度值(clientHeight)，而left值每一排都相同，因为列宽和列数是固定的。\n\n```javascript\n\n/**\n * [WaterFall 图片瀑布流构造函数]\n * @param  {DomElement} father   [瀑布流的容器元素]\n * @param  {String} childClass   [瀑布流子元素类名选择器 如: .water-fall-item]\n * @param  {Number} columnWidth  [设定每一列的宽度，单位: px]\n * @param  {Number} paddingWidth [设定图片之间的间隔距离， 单位: px]\n */\nfunction WaterFall(father, childClass, columnWidth, paddingWidth) {\n  this.$container = father;  // 容器\n  this.childSelector = childClass;  // 子代img选择器\n  this.children = [];  // 子代img\n  this.columnWidth = columnWidth;  // 单列宽度\n  this.paddingWidth = paddingWidth + 'px';  // 图片之间的间隔距离\n\n  this.totalWidth = this.$container.clientWidth;  // 容器宽度\n  this.columnNum = ~~(this.totalWidth / this.columnWidth);  // 列数\n\n  // 调用多次\n  this.step = function () {\n    this.totalWidth = this.$container.clientWidth;\n    this.columnNum = ~~(this.totalWidth / this.columnWidth);\n    this.children = this.$container.querySelectorAll(this.childSelector);\n    for (var i = 0; i < this.children.length; i++) {\n      this.children[i].style.width = this.columnWidth + 'px';\n      this.children[i].style.height = 'auto';\n      this.children[i].style.paddingRight = this.paddingWidth;\n      this.children[i].style.paddingBottom = this.paddingWidth;\n\n      // 每行第一个设置左padding\n      if (i % this.columnNum === 0) {\n        this.children[i].style.paddingLeft = this.paddingWidth;\n      }\n\n      // 第一行 和 其它行的不同处理\n      if (i < this.columnNum) {\n        this.children[i].style.left = (i) * this.columnWidth + 'px';\n        this.children[i].style.top = (i) * 0 + 'px';\n      }else {\n        this.children[i].style.left = this.children[i - this.columnNum].style.left;\n        this.children[i].style.top = +this.children[i - this.columnNum].style.top.replace('px', '') +\n                                      this.children[i - this.columnNum].clientHeight + 'px';\n      }\n    }\n  };\n};\n\n```\n\n* 再看看从页面图片加载到生成瀑布流实例我是怎样处理的，前面部分先通过一组图片url地址将所有图片加载到页面上，中间设定参数后生成一个瀑布流实例，最后重点是\n弄清楚我们需要在什么时候调用waterfall.step()函数来处理页面中item元素的重排。我可能用了个比价笨的办法：在所有图片加载完成之前 使用定时器 轮询每个图片的加载情况，并进行布局，所有图片加载完后就取消定时器。最后别忘记 窗口拖动后也要重新布局，在这儿我用了一个函数节流的思想，防止resize短时间内多次触发，改善页面性能，至于节流函数怎么写，大家可以看看相关概念然后自己实现一个，so easy !\n\n```javascript\n\n/**\n * [waterFallInit 瀑布流初始化]\n * @param  {String} wData [图片url的数组]\n */\nvar waterFallInit = function (wData) {\n  var fragment = document.createDocumentFragment();\n  var div, img, timer, $imgs, length, index = 0;\n  // 载入图片\n  for (var i = 0; i < wData.length; i++) {\n    div = document.createElement('div');\n    img = document.createElement('img');\n    div.setAttribute('class', 'water-fall-item');\n    img.setAttribute('src', wData[i]);\n    div.appendChild(img);\n    fragment.appendChild(div);\n    if (i === wData.length - 1) {\n      domMap.$waterFall.appendChild(fragment);\n    }\n  }\n\n  // 一个瀑布流实例\n  var waterfall = new WaterFall(domMap.$waterFall, '.water-fall-item', 200, 5);\n\n  // 轮询所有图片的加载状态\n  timer = setInterval(function () {\n    index=0;\n    $imgs = domMap.$waterFall.querySelectorAll('.water-fall-item > img');\n    length = $imgs.length;\n    // 统计图片加载完成的数量\n    for (var i = 0; i < $imgs.length; i++) {\n      if ($imgs[i].complete) {\n        if (++index === length) clearInterval(timer);\n      }\n    }\n    waterfall.step();\n  }, 250);\n\n  // 窗口拖动\n   window.onresize =  function () {\n     Utils.FnDelay(function () {\n       waterfall.step();\n     }, 800);\n   }\n};\n\n```\n\n#### 感谢阅读\n_代码存放在github：[nojsja](https://github.com/nojsja/javascript-learning/tree/master/normal/water-fall-layout)_\n","slug":"原生Js实现瀑布流效果","published":1,"updated":"2020-12-06T10:51:45.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuqe0007kl9590sfdeo1","content":"<h4 id=\"盗用的效果图\">盗用的效果图</h4><p><img src=\"waterfall-1.gif\" alt=\"preview\"></p><h4 id=\"效果分析\">效果分析</h4><p>瀑布流中图片的宽度都是固定的，但是高度需要设置为auto以使图片不变形，高度不固定。首先想到能不能用float属性让图片流动，想象中很美好，实际效果如下，可以看到因为第三个元素的高度问题，第二行元素流动时被第三个元素挡住，导致了布局错乱。</p><p><img src=\"waterfall-2.jpg\" alt=\"float\"></p><p>看看百度图片是怎么实现图片布局的，如下图，可以看出百度用了讨巧的办法，图片跟我们这个瀑布流的图片的宽高设定正好相反，百度图片的列数同样固定，但是高度也固定，而宽度不固定，这样处理的话正好能避免上面那个float流动的问题，这个… 好吧 最后我们还是来说说怎样实现我们效果图中那样的瀑布流布局。</p><p><img src=\"waterfall-3.jpg\" alt=\"baidu\"></p><h4 id=\"解决方法\">解决方法</h4><ul><li>html结构如下，需要说明的是container元素是相对定位，每个item元素都是绝对定位，这样我们通过设置item元素的top和left值就能改变它们的位置了，图片的宽度是100%(这儿思考一下为什么img的父级需要设置box-sizing: border-box)。</li></ul><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面结构 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我把主要逻辑写成了构造函数的形式，这样一个页面中通过传入不同的参数就能创建多个瀑布流实例。构造函数中我们依次需要传入容器元素本身、子元素的选择器(.water-fall-item)、<br>每一列自定义的宽度(单位是px)、图片之间间隔的距离(实际上是padding-right 和 padding-bottom 的值，单位px)，通过这些指标我们首先能够计算出容器元素的宽度，<br>(容器宽度 / 列宽) === 总共的列数，最后在step函数里就是布局的代码了，step做的事儿就是遍历容器元素下的每个item元素，设置它们的宽度、高度、top值、left值以及padding值，<br>其中第一行元素top值固定为零，left值依次根据数组下标再乘以列宽，到了第二行之后的元素就省事儿了，直接设置当前元素的top值为 对应的那个上一排元素的top值+上一排元素的高度值(clientHeight)，而left值每一排都相同，因为列宽和列数是固定的。</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [WaterFall 图片瀑布流构造函数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;DomElement&#125;</span> </span>father   [瀑布流的容器元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;String&#125;</span> </span>childClass   [瀑布流子元素类名选择器 如: .water-fall-item]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;Number&#125;</span> </span>columnWidth  [设定每一列的宽度，单位: px]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;Number&#125;</span> </span>paddingWidth [设定图片之间的间隔距离， 单位: px]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WaterFall</span>(<span class=\"params\">father, childClass, columnWidth, paddingWidth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$container = father;  <span class=\"comment\">// 容器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.childSelector = childClass;  <span class=\"comment\">// 子代img选择器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = [];  <span class=\"comment\">// 子代img</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.columnWidth = columnWidth;  <span class=\"comment\">// 单列宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.paddingWidth = paddingWidth + <span class=\"string\">'px'</span>;  <span class=\"comment\">// 图片之间的间隔距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.totalWidth = <span class=\"keyword\">this</span>.$container.clientWidth;  <span class=\"comment\">// 容器宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.columnNum = ~~(<span class=\"keyword\">this</span>.totalWidth / <span class=\"keyword\">this</span>.columnWidth);  <span class=\"comment\">// 列数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用多次</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.totalWidth = <span class=\"keyword\">this</span>.$container.clientWidth;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.columnNum = ~~(<span class=\"keyword\">this</span>.totalWidth / <span class=\"keyword\">this</span>.columnWidth);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children = <span class=\"keyword\">this</span>.$container.querySelectorAll(<span class=\"keyword\">this</span>.childSelector);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.children.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.width = <span class=\"keyword\">this</span>.columnWidth + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.height = <span class=\"string\">'auto'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.paddingRight = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.paddingBottom = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 每行第一个设置左padding</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i % <span class=\"keyword\">this</span>.columnNum === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.paddingLeft = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 第一行 和 其它行的不同处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &lt; <span class=\"keyword\">this</span>.columnNum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.left = (i) * <span class=\"keyword\">this</span>.columnWidth + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.top = (i) * <span class=\"number\">0</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.left = <span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].style.left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.top = +<span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].style.top.replace(<span class=\"string\">'px'</span>, <span class=\"string\">''</span>) +</span><br><span class=\"line\">                                      <span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].clientHeight + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>再看看从页面图片加载到生成瀑布流实例我是怎样处理的，前面部分先通过一组图片url地址将所有图片加载到页面上，中间设定参数后生成一个瀑布流实例，最后重点是<br>弄清楚我们需要在什么时候调用waterfall.step()函数来处理页面中item元素的重排。我可能用了个比价笨的办法：在所有图片加载完成之前 使用定时器 轮询每个图片的加载情况，并进行布局，所有图片加载完后就取消定时器。最后别忘记 窗口拖动后也要重新布局，在这儿我用了一个函数节流的思想，防止resize短时间内多次触发，改善页面性能，至于节流函数怎么写，大家可以看看相关概念然后自己实现一个，so easy !</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [waterFallInit 瀑布流初始化]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;String&#125;</span> </span>wData [图片url的数组]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> waterFallInit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">wData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> div, img, timer, $imgs, length, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 载入图片</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; wData.length; i++) &#123;</span><br><span class=\"line\">    div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">    div.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'water-fall-item'</span>);</span><br><span class=\"line\">    img.setAttribute(<span class=\"string\">'src'</span>, wData[i]);</span><br><span class=\"line\">    div.appendChild(img);</span><br><span class=\"line\">    fragment.appendChild(div);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === wData.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      domMap.$waterFall.appendChild(fragment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个瀑布流实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> waterfall = <span class=\"keyword\">new</span> WaterFall(domMap.$waterFall, <span class=\"string\">'.water-fall-item'</span>, <span class=\"number\">200</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 轮询所有图片的加载状态</span></span><br><span class=\"line\">  timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    $imgs = domMap.$waterFall.querySelectorAll(<span class=\"string\">'.water-fall-item &gt; img'</span>);</span><br><span class=\"line\">    length = $imgs.length;</span><br><span class=\"line\">    <span class=\"comment\">// 统计图片加载完成的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $imgs.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($imgs[i].complete) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++index === length) clearInterval(timer);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    waterfall.step();</span><br><span class=\"line\">  &#125;, <span class=\"number\">250</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 窗口拖动</span></span><br><span class=\"line\">   <span class=\"built_in\">window</span>.onresize =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     Utils.FnDelay(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       waterfall.step();</span><br><span class=\"line\">     &#125;, <span class=\"number\">800</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"感谢阅读\">感谢阅读</h4><p><em>代码存放在github：<a href=\"https://github.com/nojsja/javascript-learning/tree/master/normal/water-fall-layout\" target=\"_blank\" rel=\"noopener\">nojsja</a></em></p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"盗用的效果图\">盗用的效果图</h4><p><img src=\"waterfall-1.gif\" alt=\"preview\"></p><h4 id=\"效果分析\">效果分析</h4><p>瀑布流中图片的宽度都是固定的，但是高度需要设置为auto以使图片不变形，高度不固定。首先想到能不能用float属性让图片流动，想象中很美好，实际效果如下，可以看到因为第三个元素的高度问题，第二行元素流动时被第三个元素挡住，导致了布局错乱。</p><p><img src=\"waterfall-2.jpg\" alt=\"float\"></p><p>看看百度图片是怎么实现图片布局的，如下图，可以看出百度用了讨巧的办法，图片跟我们这个瀑布流的图片的宽高设定正好相反，百度图片的列数同样固定，但是高度也固定，而宽度不固定，这样处理的话正好能避免上面那个float流动的问题，这个… 好吧 最后我们还是来说说怎样实现我们效果图中那样的瀑布流布局。</p><p><img src=\"waterfall-3.jpg\" alt=\"baidu\"></p><h4 id=\"解决方法\">解决方法</h4><ul><li>html结构如下，需要说明的是container元素是相对定位，每个item元素都是绝对定位，这样我们通过设置item元素的top和left值就能改变它们的位置了，图片的宽度是100%(这儿思考一下为什么img的父级需要设置box-sizing: border-box)。</li></ul><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 页面结构 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"water-fall-item\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"url\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我把主要逻辑写成了构造函数的形式，这样一个页面中通过传入不同的参数就能创建多个瀑布流实例。构造函数中我们依次需要传入容器元素本身、子元素的选择器(.water-fall-item)、<br>每一列自定义的宽度(单位是px)、图片之间间隔的距离(实际上是padding-right 和 padding-bottom 的值，单位px)，通过这些指标我们首先能够计算出容器元素的宽度，<br>(容器宽度 / 列宽) === 总共的列数，最后在step函数里就是布局的代码了，step做的事儿就是遍历容器元素下的每个item元素，设置它们的宽度、高度、top值、left值以及padding值，<br>其中第一行元素top值固定为零，left值依次根据数组下标再乘以列宽，到了第二行之后的元素就省事儿了，直接设置当前元素的top值为 对应的那个上一排元素的top值+上一排元素的高度值(clientHeight)，而left值每一排都相同，因为列宽和列数是固定的。</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [WaterFall 图片瀑布流构造函数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;DomElement&#125;</span> </span>father   [瀑布流的容器元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;String&#125;</span> </span>childClass   [瀑布流子元素类名选择器 如: .water-fall-item]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;Number&#125;</span> </span>columnWidth  [设定每一列的宽度，单位: px]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;Number&#125;</span> </span>paddingWidth [设定图片之间的间隔距离， 单位: px]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WaterFall</span>(<span class=\"params\">father, childClass, columnWidth, paddingWidth</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$container = father;  <span class=\"comment\">// 容器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.childSelector = childClass;  <span class=\"comment\">// 子代img选择器</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = [];  <span class=\"comment\">// 子代img</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.columnWidth = columnWidth;  <span class=\"comment\">// 单列宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.paddingWidth = paddingWidth + <span class=\"string\">'px'</span>;  <span class=\"comment\">// 图片之间的间隔距离</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.totalWidth = <span class=\"keyword\">this</span>.$container.clientWidth;  <span class=\"comment\">// 容器宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.columnNum = ~~(<span class=\"keyword\">this</span>.totalWidth / <span class=\"keyword\">this</span>.columnWidth);  <span class=\"comment\">// 列数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用多次</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.totalWidth = <span class=\"keyword\">this</span>.$container.clientWidth;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.columnNum = ~~(<span class=\"keyword\">this</span>.totalWidth / <span class=\"keyword\">this</span>.columnWidth);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children = <span class=\"keyword\">this</span>.$container.querySelectorAll(<span class=\"keyword\">this</span>.childSelector);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.children.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.width = <span class=\"keyword\">this</span>.columnWidth + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.height = <span class=\"string\">'auto'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.paddingRight = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.children[i].style.paddingBottom = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 每行第一个设置左padding</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i % <span class=\"keyword\">this</span>.columnNum === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.paddingLeft = <span class=\"keyword\">this</span>.paddingWidth;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 第一行 和 其它行的不同处理</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i &lt; <span class=\"keyword\">this</span>.columnNum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.left = (i) * <span class=\"keyword\">this</span>.columnWidth + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.top = (i) * <span class=\"number\">0</span> + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.left = <span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].style.left;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.children[i].style.top = +<span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].style.top.replace(<span class=\"string\">'px'</span>, <span class=\"string\">''</span>) +</span><br><span class=\"line\">                                      <span class=\"keyword\">this</span>.children[i - <span class=\"keyword\">this</span>.columnNum].clientHeight + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>再看看从页面图片加载到生成瀑布流实例我是怎样处理的，前面部分先通过一组图片url地址将所有图片加载到页面上，中间设定参数后生成一个瀑布流实例，最后重点是<br>弄清楚我们需要在什么时候调用waterfall.step()函数来处理页面中item元素的重排。我可能用了个比价笨的办法：在所有图片加载完成之前 使用定时器 轮询每个图片的加载情况，并进行布局，所有图片加载完后就取消定时器。最后别忘记 窗口拖动后也要重新布局，在这儿我用了一个函数节流的思想，防止resize短时间内多次触发，改善页面性能，至于节流函数怎么写，大家可以看看相关概念然后自己实现一个，so easy !</li></ul><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [waterFallInit 瀑布流初始化]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;String&#125;</span> </span>wData [图片url的数组]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> waterFallInit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">wData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> div, img, timer, $imgs, length, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 载入图片</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; wData.length; i++) &#123;</span><br><span class=\"line\">    div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">    img = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'img'</span>);</span><br><span class=\"line\">    div.setAttribute(<span class=\"string\">'class'</span>, <span class=\"string\">'water-fall-item'</span>);</span><br><span class=\"line\">    img.setAttribute(<span class=\"string\">'src'</span>, wData[i]);</span><br><span class=\"line\">    div.appendChild(img);</span><br><span class=\"line\">    fragment.appendChild(div);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === wData.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      domMap.$waterFall.appendChild(fragment);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个瀑布流实例</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> waterfall = <span class=\"keyword\">new</span> WaterFall(domMap.$waterFall, <span class=\"string\">'.water-fall-item'</span>, <span class=\"number\">200</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 轮询所有图片的加载状态</span></span><br><span class=\"line\">  timer = setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    index=<span class=\"number\">0</span>;</span><br><span class=\"line\">    $imgs = domMap.$waterFall.querySelectorAll(<span class=\"string\">'.water-fall-item &gt; img'</span>);</span><br><span class=\"line\">    length = $imgs.length;</span><br><span class=\"line\">    <span class=\"comment\">// 统计图片加载完成的数量</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $imgs.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($imgs[i].complete) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++index === length) clearInterval(timer);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    waterfall.step();</span><br><span class=\"line\">  &#125;, <span class=\"number\">250</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 窗口拖动</span></span><br><span class=\"line\">   <span class=\"built_in\">window</span>.onresize =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     Utils.FnDelay(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       waterfall.step();</span><br><span class=\"line\">     &#125;, <span class=\"number\">800</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"感谢阅读\">感谢阅读</h4><p><em>代码存放在github：<a href=\"https://github.com/nojsja/javascript-learning/tree/master/normal/water-fall-layout\" target=\"_blank\" rel=\"noopener\">nojsja</a></em></p>"},{"title":"使用ES5实现ES6中的Promise","catalog":true,"toc_nav_num":true,"date":"2018-10-30T17:15:00.000Z","subtitle":"es6 promise","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-10-30T17:15:00.000Z","_content":"\n![life is strange](lifeIsStrange.jpg)\n\n[源代码 => github / nojsja / promise-self](https://github.com/nojsja/promise-nojsja)\n\n### 目录\n\n1. 谈谈Promise\n2. Promise分析和实现\n3. 总结\n\n### 谈谈Promise\n---------------\n\n>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。\n它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像\n同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。  \n\n>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，\n也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的\nthen 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled\n和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的\nonfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法，\n所以在异步操作的完成和绑定处理方法之间不存在竞争）。  \n\n#### 一个 Promise有以下几种状态\n * pending: 初始状态，不是成功或失败状态。  \n * fulfilled: 意味着操作成功完成。  \n * rejected: 意味着操作失败。  \n\n#### Javascript事件循环\n关于js线程和事件循环可以看[这篇文章](https://zhuanlan.zhihu.com/p/33058983)\n * 创建Promise时传入的函数的执行应该延迟到下一次事件循环中，而不应该在主线程执行栈中被调用。\n * Promise.then传入的onResolve, onReject函数的执行也应该延迟到下一次事件循环。  \n\n具体表现可以看下一段代码，即使是promise对象中没有异步操作，控制台也会先打印b再打印a：\n```js\nvar p1 = new Promise(function (resolve, reject) {\n  resolve('a');\n}).then(function (value) {\n  console.log(value);\n});\n\nconsole.log('b');\n\n// result => b a\n\n```\n\n#### Promise.all(iterable)\n这个方法返回一个新的promise对象，该promise对象当iterable参数对象里所有的promise对象\n都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise\n对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值\n的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败\n状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。\n\n#### Promise.race(iterable)\n当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回\n值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。  \n\n#### Promise.reject(value) / Promise.resolve(value)\n返回一个状态为失败(成功)的Promise对象，并将给定的失败(成功)信息传递给对应的处理方法。\n如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；\n否则的话(该value为空，基本类型或者不带then方法的对象)，返回的Promise对象状态为fulfilled，\n并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，\n使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n\n### Promise分析和实现\n--------------------\n\n#### 实现难点分析\n在思考实现原理的时候，Promise.then这个方法花了我最长的时间，一个Promise对象可以使用then方法接收一个成功的回调函数和一个错误的回调函数，哪个回调函数的最终被执行取决于当前Promise对象的最终状态，可以使用promise.then(fn1, fn2).then(fn3, fn4).then(fn5, fn6)这种链式回调连接无数个异步方法。如果前一个then方法中的 success callback 或 fail callback 也返回了一个Promise对象的话，那么当前Promise对象的状态最终还是要取决于返回的这个Promise对象，就像发生了状态之间的传递一样。并且在这样的条件下，各个then方法链接的函数仍然能保持顺序依次执行。\n\n#### 难点分析和解决\n通过以上对then方法的分析，我们可以看出，promise.then方法的状态都是独立的，promise.then的回调方法中可以再次返回一个Promise对象，我们姑且把这一过程称为父Promise和子Promise的状态传递和继承，所以在设计then方法时应当考虑then方法返回的其实应该是一个具有独立状态的Promise对象，只不过该Promise对象的状态还需要看then方法传入的两个回调函数是不是返回了另一个Promise对象，如果返回了，那么就要发生状态传递。我们可以用设计模式中观察者模式的思想来定义一个Promise对象，Promise对象可以有三种状态，成功和失败状态的变化会触发各自对应的观察者函数事件，所以每一个Promise.then方法其实就是在对一个Promise对象做状态事件注册，事件注册和状态改变这两个操作是相互独立的。那么如何把当前父Promise的对象状态和then函数中返回的Promise对象的状态联系起来呢？这个逻辑就是下面代码中的`analysisPromise`方法，它的作用就是分析一个回调的返回值，将当前Promise对象状态改变的方法`reject`和`resolve`递归传递下去，各个不同的调用栈对应各个不同的执行上下文，但是目的只有一个就是改变最初传入的那个Promise对象的状态。\n\n* promise.then的设计\n```js\n/**\n * [then 应该返回一个全新的Promise对象，不应该与当前Promise存在功能耦合]\n * @param  {[type]} successFn [description]\n * @param  {[type]} errorFn   [description]\n */\nPromise.prototype.then = function (successCallback, errorCallback) {\n\n  var promise, x;\n  var self = this;\n\n  if (self.status === 'fulfilled') {\n    promise = new Promise(function (resolve, reject) {\n      // delay to next event loop\n      setTimeout(function () {\n        try {\n          x = successCallback(self.value);\n          analysisPromise(x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }else if (self.status === 'rejected') {\n    promise = new Promise(function (resolve, reject) {\n      // delay to next event loop\n      setTimeout(function () {\n        try {\n          x = errorCallback(self.reason);\n          analysisPromise(x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n\n    });\n  }else if (self.status === 'pending') {\n    promise = new Promise(function (resolve, reject) {\n\n      // 延迟到下一个事件循环\n      setTimeout(function () {\n        self.onFulfilledCallbacks.push(function () {\n          try {\n            x = successCallback(self.value);\n            // 分析返回值 然后更改 当前promise状态\n            analysisPromise(x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        });\n\n        self.onRejectedCallbacks.push(function () {\n          try {\n            x = errorCallback ? errorCallback(self.reason) : undefined;\n            // 分析返回值 然后更改 当前promise状态\n            analysisPromise(x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      })\n    });\n\n  }\n\n  return promise;\n};\n```\n* analysisPromise方法的设计\n```js\n/**\n * [analysisPromise 使用递归将状态控制权转移]\n * @param  {[Any]} x        [value]\n * @param  {[Func]} resolve [get into success state]\n * @param  {[Func]} reject  [get into fail state]\n */\nvar analysisPromise = function (x, resolve, reject) {\n\n  var then, y;\n  if (x !== undefined && (typeof x === 'object' || typeof x === 'function')) {\n    then = x.then;\n    // obj Promise\n    if (then && typeof then === 'function') {\n      then.call(x, function (value) {\n        // callback return a promise\n        analysisPromise(value, resolve, reject);\n      }, function (error) {\n        reject(error);\n      });\n    // normal\n    }else {\n      resolve(x);\n    }\n  // normal\n  }else {\n    resolve(x);\n  }\n};\n```\n\n#### 其它部分的实现\n* catch方法  \n这边只是简单的捕获了一下错误然后调用回调函数即可。\n```js\nPromise.prototype.catch = function (handleError) {\n  if (this.status === 'pending') {\n    this.onRejectedCallbacks.push(handleError);\n  }else {\n    this.reason && handleError(this.reason);\n  }\n};\n```\n\n* all方法  \nall方法首先判断可以通过promise.all([promise]).then这种形式调用，那么all也应该返回一个Promise对象，这个对象的成功状态取决于传入的各个promise的成功状态，失败状态只取决于其中一个传入的最先失败的的promise，所以应该遍历和分析所有传入的promise的状态情况，和设计then方法的时候一样需要考虑状态传递的问题，将各个promise产生的计算值存入一个数组，一旦有promise失败，马上返回失败信息，结束整个promise对象的状态监听。\n```js\nPromise.all = function (pArray) {\n  var rArray = [];\n  var promise = new Promise(function (resolve, reject) {\n\n    pArray.forEach(function (pr, i) {\n\n        if (pr instanceof Promise) {\n          pr.then(function (value1) {\n            analysisPromise(value1, function (value2) {\n              rArray[i] = value2;\n              if (rArray.length === pArray.length) {\n                resolve(rArray);\n              }\n            }, reject);\n\n          }, function (error) {\n            reject(error);\n          });\n\n        }else {\n          rArray[i] = pr;\n          if (rArray.length === pArray.length) {\n            resolve(rArray);\n          }\n        }\n\n    });\n\n  });\n\n  return promise;\n};\n```\n\n* race方法  \nrace方法就更简单了，考虑状态的传递之后，传入的任意一个promise的状态改变都会直接表现为整个promise对象的状态最终值。all方法和race方法，前者是状态协同，后者状态竞争。\n```js\nPromise.race = function (pArray) {\n  var rArray = [];\n  var promise = new Promise(function (resolve, reject) {\n    pArray.forEach(function (pr, i) {\n        if (pr instanceof Promise) {\n          pr.then(function (value) {\n            analysisPromise(value, resolve, reject);\n          }, function (error) {\n            reject(error);\n          });\n        }else {\n          rArray[i] = pr;\n        }\n    });\n  });\n\n  return promise;\n};\n```\n\n* 静态方法 Promise.resolve 和 Promise.reject\n直接返回一个最终态为成功或失败的promise对象即可。\n```js\nPromise.resolve = function (value) {\n  return new Promise(function (resolve, reject) {\n      resolve(value);\n  });\n};\nPromise.reject = function (reason) {\n  return new Promise(function (resolve, reject) {\n      reject(reason);\n  });\n};\n```\n\n### 总结\n--------\nPromise实现的难点其实是怎样考虑那个状态传递的过程(`analysisPromise`方法的实现)，各种回调的设计容易让人混乱，需要考虑各个promise对象的`原子性`同时又要保持各个可能出现相互嵌套的promise对象之间的依赖和联系。如果结构设计地比较合理的话，`Promise.all`、`Promise.race`这两个方法是很容易被实现出来的，因为它们只是对多个promise对象的状态管理而已。\n","source":"_posts/2018-10-31-使用ES5实现ES6中的Promise.md","raw":"---\ntitle: \"使用ES5实现ES6中的Promise\"\ncatalog: true\ntoc_nav_num: true\ndate: 2018-10-31 01:15:00\nsubtitle: \"es6 promise\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- promise\n- es6\ncategories:\n- Javascript\nupdateDate: 2018-10-31 01:15:00\n---\n\n![life is strange](lifeIsStrange.jpg)\n\n[源代码 => github / nojsja / promise-self](https://github.com/nojsja/promise-nojsja)\n\n### 目录\n\n1. 谈谈Promise\n2. Promise分析和实现\n3. 总结\n\n### 谈谈Promise\n---------------\n\n>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。\n它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像\n同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。  \n\n>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，\n也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的\nthen 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled\n和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的\nonfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法，\n所以在异步操作的完成和绑定处理方法之间不存在竞争）。  \n\n#### 一个 Promise有以下几种状态\n * pending: 初始状态，不是成功或失败状态。  \n * fulfilled: 意味着操作成功完成。  \n * rejected: 意味着操作失败。  \n\n#### Javascript事件循环\n关于js线程和事件循环可以看[这篇文章](https://zhuanlan.zhihu.com/p/33058983)\n * 创建Promise时传入的函数的执行应该延迟到下一次事件循环中，而不应该在主线程执行栈中被调用。\n * Promise.then传入的onResolve, onReject函数的执行也应该延迟到下一次事件循环。  \n\n具体表现可以看下一段代码，即使是promise对象中没有异步操作，控制台也会先打印b再打印a：\n```js\nvar p1 = new Promise(function (resolve, reject) {\n  resolve('a');\n}).then(function (value) {\n  console.log(value);\n});\n\nconsole.log('b');\n\n// result => b a\n\n```\n\n#### Promise.all(iterable)\n这个方法返回一个新的promise对象，该promise对象当iterable参数对象里所有的promise对象\n都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise\n对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值\n的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败\n状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。\n\n#### Promise.race(iterable)\n当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回\n值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。  \n\n#### Promise.reject(value) / Promise.resolve(value)\n返回一个状态为失败(成功)的Promise对象，并将给定的失败(成功)信息传递给对应的处理方法。\n如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；\n否则的话(该value为空，基本类型或者不带then方法的对象)，返回的Promise对象状态为fulfilled，\n并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，\n使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。\n\n### Promise分析和实现\n--------------------\n\n#### 实现难点分析\n在思考实现原理的时候，Promise.then这个方法花了我最长的时间，一个Promise对象可以使用then方法接收一个成功的回调函数和一个错误的回调函数，哪个回调函数的最终被执行取决于当前Promise对象的最终状态，可以使用promise.then(fn1, fn2).then(fn3, fn4).then(fn5, fn6)这种链式回调连接无数个异步方法。如果前一个then方法中的 success callback 或 fail callback 也返回了一个Promise对象的话，那么当前Promise对象的状态最终还是要取决于返回的这个Promise对象，就像发生了状态之间的传递一样。并且在这样的条件下，各个then方法链接的函数仍然能保持顺序依次执行。\n\n#### 难点分析和解决\n通过以上对then方法的分析，我们可以看出，promise.then方法的状态都是独立的，promise.then的回调方法中可以再次返回一个Promise对象，我们姑且把这一过程称为父Promise和子Promise的状态传递和继承，所以在设计then方法时应当考虑then方法返回的其实应该是一个具有独立状态的Promise对象，只不过该Promise对象的状态还需要看then方法传入的两个回调函数是不是返回了另一个Promise对象，如果返回了，那么就要发生状态传递。我们可以用设计模式中观察者模式的思想来定义一个Promise对象，Promise对象可以有三种状态，成功和失败状态的变化会触发各自对应的观察者函数事件，所以每一个Promise.then方法其实就是在对一个Promise对象做状态事件注册，事件注册和状态改变这两个操作是相互独立的。那么如何把当前父Promise的对象状态和then函数中返回的Promise对象的状态联系起来呢？这个逻辑就是下面代码中的`analysisPromise`方法，它的作用就是分析一个回调的返回值，将当前Promise对象状态改变的方法`reject`和`resolve`递归传递下去，各个不同的调用栈对应各个不同的执行上下文，但是目的只有一个就是改变最初传入的那个Promise对象的状态。\n\n* promise.then的设计\n```js\n/**\n * [then 应该返回一个全新的Promise对象，不应该与当前Promise存在功能耦合]\n * @param  {[type]} successFn [description]\n * @param  {[type]} errorFn   [description]\n */\nPromise.prototype.then = function (successCallback, errorCallback) {\n\n  var promise, x;\n  var self = this;\n\n  if (self.status === 'fulfilled') {\n    promise = new Promise(function (resolve, reject) {\n      // delay to next event loop\n      setTimeout(function () {\n        try {\n          x = successCallback(self.value);\n          analysisPromise(x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }else if (self.status === 'rejected') {\n    promise = new Promise(function (resolve, reject) {\n      // delay to next event loop\n      setTimeout(function () {\n        try {\n          x = errorCallback(self.reason);\n          analysisPromise(x, resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n      });\n\n    });\n  }else if (self.status === 'pending') {\n    promise = new Promise(function (resolve, reject) {\n\n      // 延迟到下一个事件循环\n      setTimeout(function () {\n        self.onFulfilledCallbacks.push(function () {\n          try {\n            x = successCallback(self.value);\n            // 分析返回值 然后更改 当前promise状态\n            analysisPromise(x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        });\n\n        self.onRejectedCallbacks.push(function () {\n          try {\n            x = errorCallback ? errorCallback(self.reason) : undefined;\n            // 分析返回值 然后更改 当前promise状态\n            analysisPromise(x, resolve, reject);\n          } catch (e) {\n            reject(e);\n          }\n        });\n      })\n    });\n\n  }\n\n  return promise;\n};\n```\n* analysisPromise方法的设计\n```js\n/**\n * [analysisPromise 使用递归将状态控制权转移]\n * @param  {[Any]} x        [value]\n * @param  {[Func]} resolve [get into success state]\n * @param  {[Func]} reject  [get into fail state]\n */\nvar analysisPromise = function (x, resolve, reject) {\n\n  var then, y;\n  if (x !== undefined && (typeof x === 'object' || typeof x === 'function')) {\n    then = x.then;\n    // obj Promise\n    if (then && typeof then === 'function') {\n      then.call(x, function (value) {\n        // callback return a promise\n        analysisPromise(value, resolve, reject);\n      }, function (error) {\n        reject(error);\n      });\n    // normal\n    }else {\n      resolve(x);\n    }\n  // normal\n  }else {\n    resolve(x);\n  }\n};\n```\n\n#### 其它部分的实现\n* catch方法  \n这边只是简单的捕获了一下错误然后调用回调函数即可。\n```js\nPromise.prototype.catch = function (handleError) {\n  if (this.status === 'pending') {\n    this.onRejectedCallbacks.push(handleError);\n  }else {\n    this.reason && handleError(this.reason);\n  }\n};\n```\n\n* all方法  \nall方法首先判断可以通过promise.all([promise]).then这种形式调用，那么all也应该返回一个Promise对象，这个对象的成功状态取决于传入的各个promise的成功状态，失败状态只取决于其中一个传入的最先失败的的promise，所以应该遍历和分析所有传入的promise的状态情况，和设计then方法的时候一样需要考虑状态传递的问题，将各个promise产生的计算值存入一个数组，一旦有promise失败，马上返回失败信息，结束整个promise对象的状态监听。\n```js\nPromise.all = function (pArray) {\n  var rArray = [];\n  var promise = new Promise(function (resolve, reject) {\n\n    pArray.forEach(function (pr, i) {\n\n        if (pr instanceof Promise) {\n          pr.then(function (value1) {\n            analysisPromise(value1, function (value2) {\n              rArray[i] = value2;\n              if (rArray.length === pArray.length) {\n                resolve(rArray);\n              }\n            }, reject);\n\n          }, function (error) {\n            reject(error);\n          });\n\n        }else {\n          rArray[i] = pr;\n          if (rArray.length === pArray.length) {\n            resolve(rArray);\n          }\n        }\n\n    });\n\n  });\n\n  return promise;\n};\n```\n\n* race方法  \nrace方法就更简单了，考虑状态的传递之后，传入的任意一个promise的状态改变都会直接表现为整个promise对象的状态最终值。all方法和race方法，前者是状态协同，后者状态竞争。\n```js\nPromise.race = function (pArray) {\n  var rArray = [];\n  var promise = new Promise(function (resolve, reject) {\n    pArray.forEach(function (pr, i) {\n        if (pr instanceof Promise) {\n          pr.then(function (value) {\n            analysisPromise(value, resolve, reject);\n          }, function (error) {\n            reject(error);\n          });\n        }else {\n          rArray[i] = pr;\n        }\n    });\n  });\n\n  return promise;\n};\n```\n\n* 静态方法 Promise.resolve 和 Promise.reject\n直接返回一个最终态为成功或失败的promise对象即可。\n```js\nPromise.resolve = function (value) {\n  return new Promise(function (resolve, reject) {\n      resolve(value);\n  });\n};\nPromise.reject = function (reason) {\n  return new Promise(function (resolve, reject) {\n      reject(reason);\n  });\n};\n```\n\n### 总结\n--------\nPromise实现的难点其实是怎样考虑那个状态传递的过程(`analysisPromise`方法的实现)，各种回调的设计容易让人混乱，需要考虑各个promise对象的`原子性`同时又要保持各个可能出现相互嵌套的promise对象之间的依赖和联系。如果结构设计地比较合理的话，`Promise.all`、`Promise.race`这两个方法是很容易被实现出来的，因为它们只是对多个promise对象的状态管理而已。\n","slug":"使用ES5实现ES6中的Promise","published":1,"updated":"2020-12-06T10:51:52.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuqg0009kl95gwf61wn1","content":"<p><img src=\"lifeIsStrange.jpg\" alt=\"life is strange\"></p><p><a href=\"https://github.com/nojsja/promise-nojsja\" target=\"_blank\" rel=\"noopener\">源代码 =&gt; github / nojsja / promise-self</a></p><h3 id=\"目录\">目录</h3><ol><li>谈谈Promise</li><li>Promise分析和实现</li><li>总结</li></ol><h3 id=\"谈谈Promise\">谈谈Promise</h3><hr><blockquote><p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。<br>它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像<br>同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。</p></blockquote><blockquote><p>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，<br>也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的<br>then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled<br>和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的<br>onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法，<br>所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p></blockquote><h4 id=\"一个-Promise有以下几种状态\">一个 Promise有以下几种状态</h4><ul><li>pending: 初始状态，不是成功或失败状态。</li><li>fulfilled: 意味着操作成功完成。</li><li>rejected: 意味着操作失败。</li></ul><h4 id=\"Javascript事件循环\">Javascript事件循环</h4><p>关于js线程和事件循环可以看<a href=\"https://zhuanlan.zhihu.com/p/33058983\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p><ul><li>创建Promise时传入的函数的执行应该延迟到下一次事件循环中，而不应该在主线程执行栈中被调用。</li><li>Promise.then传入的onResolve, onReject函数的执行也应该延迟到下一次事件循环。</li></ul><p>具体表现可以看下一段代码，即使是promise对象中没有异步操作，控制台也会先打印b再打印a：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result =&gt; b a</span></span><br></pre></td></tr></table></figure><h4 id=\"Promise-all-iterable\">Promise.all(iterable)</h4><p>这个方法返回一个新的promise对象，该promise对象当iterable参数对象里所有的promise对象<br>都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise<br>对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值<br>的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败<br>状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。</p><h4 id=\"Promise-race-iterable\">Promise.race(iterable)</h4><p>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回<br>值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。</p><h4 id=\"Promise-reject-value-Promise-resolve-value\">Promise.reject(value) / Promise.resolve(value)</h4><p>返回一个状态为失败(成功)的Promise对象，并将给定的失败(成功)信息传递给对应的处理方法。<br>如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；<br>否则的话(该value为空，基本类型或者不带then方法的对象)，返回的Promise对象状态为fulfilled，<br>并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，<br>使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。</p><h3 id=\"Promise分析和实现\">Promise分析和实现</h3><hr><h4 id=\"实现难点分析\">实现难点分析</h4><p>在思考实现原理的时候，Promise.then这个方法花了我最长的时间，一个Promise对象可以使用then方法接收一个成功的回调函数和一个错误的回调函数，哪个回调函数的最终被执行取决于当前Promise对象的最终状态，可以使用promise.then(fn1, fn2).then(fn3, fn4).then(fn5, fn6)这种链式回调连接无数个异步方法。如果前一个then方法中的 success callback 或 fail callback 也返回了一个Promise对象的话，那么当前Promise对象的状态最终还是要取决于返回的这个Promise对象，就像发生了状态之间的传递一样。并且在这样的条件下，各个then方法链接的函数仍然能保持顺序依次执行。</p><h4 id=\"难点分析和解决\">难点分析和解决</h4><p>通过以上对then方法的分析，我们可以看出，promise.then方法的状态都是独立的，promise.then的回调方法中可以再次返回一个Promise对象，我们姑且把这一过程称为父Promise和子Promise的状态传递和继承，所以在设计then方法时应当考虑then方法返回的其实应该是一个具有独立状态的Promise对象，只不过该Promise对象的状态还需要看then方法传入的两个回调函数是不是返回了另一个Promise对象，如果返回了，那么就要发生状态传递。我们可以用设计模式中观察者模式的思想来定义一个Promise对象，Promise对象可以有三种状态，成功和失败状态的变化会触发各自对应的观察者函数事件，所以每一个Promise.then方法其实就是在对一个Promise对象做状态事件注册，事件注册和状态改变这两个操作是相互独立的。那么如何把当前父Promise的对象状态和then函数中返回的Promise对象的状态联系起来呢？这个逻辑就是下面代码中的<code>analysisPromise</code>方法，它的作用就是分析一个回调的返回值，将当前Promise对象状态改变的方法<code>reject</code>和<code>resolve</code>递归传递下去，各个不同的调用栈对应各个不同的执行上下文，但是目的只有一个就是改变最初传入的那个Promise对象的状态。</p><ul><li>promise.then的设计</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [then 应该返回一个全新的Promise对象，不应该与当前Promise存在功能耦合]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>successFn [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>errorFn   [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">successCallback, errorCallback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise, x;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// delay to next event loop</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          x = successCallback(self.value);</span><br><span class=\"line\">          analysisPromise(x, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// delay to next event loop</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          x = errorCallback(self.reason);</span><br><span class=\"line\">          analysisPromise(x, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 延迟到下一个事件循环</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        self.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x = successCallback(self.value);</span><br><span class=\"line\">            <span class=\"comment\">// 分析返回值 然后更改 当前promise状态</span></span><br><span class=\"line\">            analysisPromise(x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        self.onRejectedCallbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x = errorCallback ? errorCallback(self.reason) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 分析返回值 然后更改 当前promise状态</span></span><br><span class=\"line\">            analysisPromise(x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>analysisPromise方法的设计</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [analysisPromise 使用递归将状态控制权转移]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>x        [value]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Func]&#125;</span> </span>resolve [get into success state]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Func]&#125;</span> </span>reject  [get into fail state]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> analysisPromise = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> then, y;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x !== <span class=\"literal\">undefined</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    then = x.then;</span><br><span class=\"line\">    <span class=\"comment\">// obj Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (then &amp;&amp; <span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// callback return a promise</span></span><br><span class=\"line\">        analysisPromise(value, resolve, reject);</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// normal</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// normal</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"其它部分的实现\">其它部分的实现</h4><ul><li>catch方法<br>这边只是简单的捕获了一下错误然后调用回调函数即可。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handleError</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks.push(handleError);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason &amp;&amp; handleError(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>all方法<br>all方法首先判断可以通过promise.all([promise]).then这种形式调用，那么all也应该返回一个Promise对象，这个对象的成功状态取决于传入的各个promise的成功状态，失败状态只取决于其中一个传入的最先失败的的promise，所以应该遍历和分析所有传入的promise的状态情况，和设计then方法的时候一样需要考虑状态传递的问题，将各个promise产生的计算值存入一个数组，一旦有promise失败，马上返回失败信息，结束整个promise对象的状态监听。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pArray.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pr, i</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          pr.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</span><br><span class=\"line\">            analysisPromise(value1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value2</span>) </span>&#123;</span><br><span class=\"line\">              rArray[i] = value2;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (rArray.length === pArray.length) &#123;</span><br><span class=\"line\">                resolve(rArray);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          rArray[i] = pr;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rArray.length === pArray.length) &#123;</span><br><span class=\"line\">            resolve(rArray);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>race方法<br>race方法就更简单了，考虑状态的传递之后，传入的任意一个promise的状态改变都会直接表现为整个promise对象的状态最终值。all方法和race方法，前者是状态协同，后者状态竞争。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    pArray.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pr, i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          pr.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            analysisPromise(value, resolve, reject);</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          rArray[i] = pr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>静态方法 Promise.resolve 和 Promise.reject<br>直接返回一个最终态为成功或失败的promise对象即可。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      reject(reason);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"总结\">总结</h3><hr><p>Promise实现的难点其实是怎样考虑那个状态传递的过程(<code>analysisPromise</code>方法的实现)，各种回调的设计容易让人混乱，需要考虑各个promise对象的<code>原子性</code>同时又要保持各个可能出现相互嵌套的promise对象之间的依赖和联系。如果结构设计地比较合理的话，<code>Promise.all</code>、<code>Promise.race</code>这两个方法是很容易被实现出来的，因为它们只是对多个promise对象的状态管理而已。</p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"lifeIsStrange.jpg\" alt=\"life is strange\"></p><p><a href=\"https://github.com/nojsja/promise-nojsja\" target=\"_blank\" rel=\"noopener\">源代码 =&gt; github / nojsja / promise-self</a></p><h3 id=\"目录\">目录</h3><ol><li>谈谈Promise</li><li>Promise分析和实现</li><li>总结</li></ol><h3 id=\"谈谈Promise\">谈谈Promise</h3><hr><blockquote><p>Promise 对象是一个代理对象（代理一个值），被代理的值在Promise对象创建时可能是未知的。<br>它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像<br>同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象。</p></blockquote><blockquote><p>pending 状态的 Promise 对象可能触发fulfilled 状态并传递一个值给相应的状态处理方法，<br>也可能触发失败状态（rejected）并传递失败信息。当其中任一种情况出现时，Promise 对象的<br>then 方法绑定的处理方法（handlers ）就会被调用（then方法包含两个参数：onfulfilled<br>和 onrejected，它们都是 Function 类型。当Promise状态为fulfilled时，调用 then 的<br>onfulfilled 方法，当Promise状态为rejected时，调用 then 的 onrejected 方法，<br>所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p></blockquote><h4 id=\"一个-Promise有以下几种状态\">一个 Promise有以下几种状态</h4><ul><li>pending: 初始状态，不是成功或失败状态。</li><li>fulfilled: 意味着操作成功完成。</li><li>rejected: 意味着操作失败。</li></ul><h4 id=\"Javascript事件循环\">Javascript事件循环</h4><p>关于js线程和事件循环可以看<a href=\"https://zhuanlan.zhihu.com/p/33058983\" target=\"_blank\" rel=\"noopener\">这篇文章</a></p><ul><li>创建Promise时传入的函数的执行应该延迟到下一次事件循环中，而不应该在主线程执行栈中被调用。</li><li>Promise.then传入的onResolve, onReject函数的执行也应该延迟到下一次事件循环。</li></ul><p>具体表现可以看下一段代码，即使是promise对象中没有异步操作，控制台也会先打印b再打印a：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result =&gt; b a</span></span><br></pre></td></tr></table></figure><h4 id=\"Promise-all-iterable\">Promise.all(iterable)</h4><p>这个方法返回一个新的promise对象，该promise对象当iterable参数对象里所有的promise对象<br>都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise<br>对象的失败。这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值<br>的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致；如果这个新的promise对象触发了失败<br>状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。Promise.all方法常被用于处理多个promise对象的状态集合。</p><h4 id=\"Promise-race-iterable\">Promise.race(iterable)</h4><p>当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回<br>值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。</p><h4 id=\"Promise-reject-value-Promise-resolve-value\">Promise.reject(value) / Promise.resolve(value)</h4><p>返回一个状态为失败(成功)的Promise对象，并将给定的失败(成功)信息传递给对应的处理方法。<br>如果该值是thenable(即，带有then方法的对象)，返回的Promise对象的最终状态由then方法执行决定；<br>否则的话(该value为空，基本类型或者不带then方法的对象)，返回的Promise对象状态为fulfilled，<br>并且将该value传递给对应的then方法。通常而言，如果你不知道一个值是否是Promise对象，<br>使用Promise.resolve(value) 来返回一个Promise对象,这样就能将该value以Promise对象形式使用。</p><h3 id=\"Promise分析和实现\">Promise分析和实现</h3><hr><h4 id=\"实现难点分析\">实现难点分析</h4><p>在思考实现原理的时候，Promise.then这个方法花了我最长的时间，一个Promise对象可以使用then方法接收一个成功的回调函数和一个错误的回调函数，哪个回调函数的最终被执行取决于当前Promise对象的最终状态，可以使用promise.then(fn1, fn2).then(fn3, fn4).then(fn5, fn6)这种链式回调连接无数个异步方法。如果前一个then方法中的 success callback 或 fail callback 也返回了一个Promise对象的话，那么当前Promise对象的状态最终还是要取决于返回的这个Promise对象，就像发生了状态之间的传递一样。并且在这样的条件下，各个then方法链接的函数仍然能保持顺序依次执行。</p><h4 id=\"难点分析和解决\">难点分析和解决</h4><p>通过以上对then方法的分析，我们可以看出，promise.then方法的状态都是独立的，promise.then的回调方法中可以再次返回一个Promise对象，我们姑且把这一过程称为父Promise和子Promise的状态传递和继承，所以在设计then方法时应当考虑then方法返回的其实应该是一个具有独立状态的Promise对象，只不过该Promise对象的状态还需要看then方法传入的两个回调函数是不是返回了另一个Promise对象，如果返回了，那么就要发生状态传递。我们可以用设计模式中观察者模式的思想来定义一个Promise对象，Promise对象可以有三种状态，成功和失败状态的变化会触发各自对应的观察者函数事件，所以每一个Promise.then方法其实就是在对一个Promise对象做状态事件注册，事件注册和状态改变这两个操作是相互独立的。那么如何把当前父Promise的对象状态和then函数中返回的Promise对象的状态联系起来呢？这个逻辑就是下面代码中的<code>analysisPromise</code>方法，它的作用就是分析一个回调的返回值，将当前Promise对象状态改变的方法<code>reject</code>和<code>resolve</code>递归传递下去，各个不同的调用栈对应各个不同的执行上下文，但是目的只有一个就是改变最初传入的那个Promise对象的状态。</p><ul><li>promise.then的设计</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [then 应该返回一个全新的Promise对象，不应该与当前Promise存在功能耦合]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>successFn [description]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>errorFn   [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">successCallback, errorCallback</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise, x;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'fulfilled'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// delay to next event loop</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          x = successCallback(self.value);</span><br><span class=\"line\">          analysisPromise(x, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'rejected'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// delay to next event loop</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          x = errorCallback(self.reason);</span><br><span class=\"line\">          analysisPromise(x, resolve, reject);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          reject(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (self.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 延迟到下一个事件循环</span></span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        self.onFulfilledCallbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x = successCallback(self.value);</span><br><span class=\"line\">            <span class=\"comment\">// 分析返回值 然后更改 当前promise状态</span></span><br><span class=\"line\">            analysisPromise(x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        self.onRejectedCallbacks.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            x = errorCallback ? errorCallback(self.reason) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 分析返回值 然后更改 当前promise状态</span></span><br><span class=\"line\">            analysisPromise(x, resolve, reject);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            reject(e);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>analysisPromise方法的设计</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [analysisPromise 使用递归将状态控制权转移]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>x        [value]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Func]&#125;</span> </span>resolve [get into success state]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Func]&#125;</span> </span>reject  [get into fail state]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> analysisPromise = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> then, y;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x !== <span class=\"literal\">undefined</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123;</span><br><span class=\"line\">    then = x.then;</span><br><span class=\"line\">    <span class=\"comment\">// obj Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (then &amp;&amp; <span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">      then.call(x, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// callback return a promise</span></span><br><span class=\"line\">        analysisPromise(value, resolve, reject);</span><br><span class=\"line\">      &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">        reject(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// normal</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">// normal</span></span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    resolve(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"其它部分的实现\">其它部分的实现</h4><ul><li>catch方法<br>这边只是简单的捕获了一下错误然后调用回调函数即可。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.prototype.catch = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">handleError</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onRejectedCallbacks.push(handleError);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reason &amp;&amp; handleError(<span class=\"keyword\">this</span>.reason);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>all方法<br>all方法首先判断可以通过promise.all([promise]).then这种形式调用，那么all也应该返回一个Promise对象，这个对象的成功状态取决于传入的各个promise的成功状态，失败状态只取决于其中一个传入的最先失败的的promise，所以应该遍历和分析所有传入的promise的状态情况，和设计then方法的时候一样需要考虑状态传递的问题，将各个promise产生的计算值存入一个数组，一旦有promise失败，马上返回失败信息，结束整个promise对象的状态监听。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    pArray.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pr, i</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          pr.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</span><br><span class=\"line\">            analysisPromise(value1, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value2</span>) </span>&#123;</span><br><span class=\"line\">              rArray[i] = value2;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (rArray.length === pArray.length) &#123;</span><br><span class=\"line\">                resolve(rArray);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;, reject);</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          rArray[i] = pr;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rArray.length === pArray.length) &#123;</span><br><span class=\"line\">            resolve(rArray);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>race方法<br>race方法就更简单了，考虑状态的传递之后，传入的任意一个promise的状态改变都会直接表现为整个promise对象的状态最终值。all方法和race方法，前者是状态协同，后者状态竞争。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.race = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pArray</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> rArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    pArray.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">pr, i</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Promise</span>) &#123;</span><br><span class=\"line\">          pr.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">            analysisPromise(value, resolve, reject);</span><br><span class=\"line\">          &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          rArray[i] = pr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>静态方法 Promise.resolve 和 Promise.reject<br>直接返回一个最终态为成功或失败的promise对象即可。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      resolve(value);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      reject(reason);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"总结\">总结</h3><hr><p>Promise实现的难点其实是怎样考虑那个状态传递的过程(<code>analysisPromise</code>方法的实现)，各种回调的设计容易让人混乱，需要考虑各个promise对象的<code>原子性</code>同时又要保持各个可能出现相互嵌套的promise对象之间的依赖和联系。如果结构设计地比较合理的话，<code>Promise.all</code>、<code>Promise.race</code>这两个方法是很容易被实现出来的，因为它们只是对多个promise对象的状态管理而已。</p>"},{"title":"简单实现一个Javascript动画处理类","catalog":true,"toc_nav_num":true,"date":"2018-11-04T17:10:00.000Z","subtitle":"animation javascript","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-11-04T17:10:00.000Z","_content":"\n#### 目录\n\n1. 预览图\n\n2. 代码实现\n\n3. 总结\n\n#### 预览图\n----------------\n> Gif预览图录制时帧数较低，实际浏览器上运行时会更流畅 ~  \n\n[=> 源代码](https://github.com/nojsja/javascript-learning/tree/master/js-animation)\n\n![animation.gif](animation.gif)\n\n#### 代码实现\n-------------------\n\n##### 缓动函数\n> 涉及一些数学原理，感兴趣的可以单独了解一下。\n```js\n/**\n * [tween 缓动算法]\n * @param {[Number]}  t [动画已经消耗的时间]\n * @param {[String]}  b [目标开始的位置]\n * @param {[String]}  c [目标开始位置和结束位置的距离]\n * @param {[Number]}  d [动画总持续时间]\n */\nvar tween = {\n  linear: function( time, start, distance, duration ) { return distance*time/duration + start; },\n  easeIn: function( time, start, distance, duration ) { return distance * ( time /= duration ) * time + start; },\n  strongEaseIn: function(time, start, distance, duration) { return distance * ( time /= duration ) * time * time * time * time + start; },\n  strongEaseOut: function(time, start, distance, duration) { return distance * ( ( time = time / duration - 1) * time * time * time * time + 1 ) + start; },\n  sinEaseIn: function( time, start, distance, duration ) { return distance * ( time /= duration) * time * time + start; },\n  sinEaseOut: function(time,start,distance,duration){ return distance * ( ( time = time / duration - 1) * time * time + 1 ) + start; },\n};\n```\n\n##### 帧请求函数兼容写法\n> requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。\n```js\n// 动画帧请求函数兼容写法\nwindow.requestAnimationFrame = (function(){\n  return  window.requestAnimationFrame       ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame    ||\n          window.oRequestAnimationFrame      ||\n          window.msRequestAnimationFrame     ||\n          function( callback ){\n            return window.setTimeout(callback, 1000 / 60);\n          };\n})();\n```\n\n##### 编写Animation动画类\n> 使用了了ES5语法，为了直接兼容浏览器，ES6的语法会更简洁，代码零散度更低。  \n\n* 初始化执行动画的某个dom元素\n\n```js\n/* ------------------- 动画控制类 ------------------- */\nvar Animation = function () {\n  this.store = { // status store\n  };\n};\n\n/* ------------------- 初始化处理元素 ------------------- */\nAnimation.prototype.setTarget = function (selector) {\n  var element = document.querySelector(selector);\n  if (element) {\n    this.store[selector] = {\n      selector: selector,\n      element: document.querySelector(selector),\n      status: 'pending',\n      queue: [\n      ],\n      timeStart: '',\n      positionStart: {\n        x: '',\n        y: '',\n      },\n      positionEnd: {\n        x: '',\n        y: '',\n      },\n    };\n  }\n};\n```\n* 动画调用主要函数`update`的编写\n\n> 运用了设计模式中`享元模式`的思想来分离变化(`Animation.store属性`)和不变的部分。  \n\n```js\n/**\n * [start 开始动画]\n * @param  {[String]} selector [选择器]\n * @param  {[type]} func     [缓动动画]\n */\nAnimation.prototype.start = function (selector, func) {\n  var that = this;\n  var target = this.store[selector];\n  target.status = 'running';\n\n  // 帧调用函数\n  that.update({x: 0, y: 0}, selector);\n};\n\n/**\n * [update 更新位置]\n * @param  {[type]} selector [description]\n */\nAnimation.prototype.update =  function (position, selector) {\n  var target = this.store[selector],\n    that = this,\n    timeUsed,\n    positionX, positionY;\n  //\n  if (!target || !target.queue.length) {\n    target.status = 'pending';\n    return;\n  };\n\n  // reset position\n  target.element.style.left = position.x + 'px';\n  target.element.style.top = position.y + 'px';\n\n  // position\n  target.positionStart = {\n    x: position.x,\n    y: position.y,\n  };\n  target.positionEnd = {\n    x: position.x + target.queue[0].x,\n    y: position.y + target.queue[0].y,\n  };\n  // time\n  target.timeStart = null;\n\n  // 递归调用\n  var callback = function (time) {\n    if (target.timeStart === null) target.timeStart = time;\n    timeUsed = time - target.timeStart;\n    // 当前动画完成\n    if (timeUsed >= target.queue[0].duration) {\n      target.queue.shift();\n      // 误差矫正\n      that.step(target.element, target.positionEnd.x, target.positionEnd.y);\n      target.status = 'running';\n      // var position = target.element.getBoundingClientRect();\n      var position = {\n        x: parseInt(target.element.style.left),\n        y: parseInt(target.element.style.top),\n      };\n      // 下一个动画\n      that.update(position, selector);\n      return;\n    }\n    // 计算元素坐标\n    positionX = target.queue[0].func(\n      timeUsed,\n      target.positionStart.x,\n      target.positionEnd.x - target.positionStart.x,\n      target.queue[0].duration,\n    );\n    positionY = target.queue[0].func(\n      timeUsed,\n      target.positionStart.y,\n      target.positionEnd.y - target.positionStart.y,\n      target.queue[0].duration,\n    );\n    that.step(target.element, positionX, positionY);\n\n    // 递归帧函数调用\n    requestAnimationFrame(callback);\n  };\n\n  requestAnimationFrame(callback);\n};\n```\n\n* 其它一些方法(部分暂未实现)\n\n```js\n/**\n * [step dom操作]\n * @param  {[DOM]} element [dom 元素]\n * @param  {[Number]} x        [x坐标]\n * @param  {[Number]} y        [y坐标]\n */\nAnimation.prototype.step = function (element, x, y) {\n  element.style.left = x + 'px';\n  element.style.top = y + 'px';\n};\n\n/* ------------------- 暂停动画 ------------------- */\nAnimation.prototype.pause = function (selector) {\n  // 尚待实现\n};\n\n/* ------------------- 结束动画 ------------------- */\nAnimation.prototype.stop = function (selector) {\n    // 尚待实现\n};\n\n/**\n * [push 加入动画队列]\n * @param  {[String]} selector [dom选择器]\n * @param  {[Object]} conf     [相对位置数据]\n */\nAnimation.prototype.push = function (selector, conf) {\n  if (this.store[selector]) {\n    this.store[selector].queue.push({\n      x: conf.x,\n      y: conf.y,\n      duration: conf.duration || 1000,\n      func: tween[conf.func] || tween['linear'],\n    });\n  }\n};\n\n/* ------------------- 动画出队列 ------------------- */\nAnimation.prototype.pop = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.pop();\n  }\n};\n\n/* ------------------- 清空动画队列 ------------------- */\nAnimation.prototype.clear = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.length = 1;\n  }\n};\n```\n##### Animation调用方式\n1. 初始化元素\n2. 插入多个动画数据(坐标相对值、动画执行时间、缓动方式)\n3. 开始执行动画\n\n```js\nvar anime = new Animation();\nanime.setTarget('#animationTarget');\n// 右下角移动50px\nanime.push('#animationTarget', { x: 50, y: 50, duration: 1000, func: 'easeIn' });\n// 右上角移动50px\nanime.push('#animationTarget', { x: -50, y: -50, duration: 500, func: 'linear' });\n// 横向移动50px\nanime.push('#animationTarget', { x: 50, y: 0, duration: 1000, func: 'easeIn' });\n// 纵向移动50px\nanime.push('#animationTarget', { x: 0, y: 50, duration: 500, func: 'linear' });\n// 开始执行动画\nanime.start('#animationTarget');\n```\n\n#### 总结\n-------------\nJavaScript动画的性能比CSS动画低很多，平时实际做页面时应该尽量使用CSS3和Canvas来实现动画效果，但是一名合格的JSER，也应该对Js的动画实现原理熟知，知道怎样优化动画性能，以及运用适合的设计模式优化代码结构。\n\n##### 感谢阅读\n","source":"_posts/2018-11-05-简单实现一个Javascript动画处理类.md","raw":"---\ntitle: \"简单实现一个Javascript动画处理类\"\ncatalog: true\ntoc_nav_num: true\ndate: 2018-11-05 01:10:00\nsubtitle: \"animation javascript\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- animation\ncategories:\n- Javascript\nupdateDate: 2018-11-05 01:10:00\n---\n\n#### 目录\n\n1. 预览图\n\n2. 代码实现\n\n3. 总结\n\n#### 预览图\n----------------\n> Gif预览图录制时帧数较低，实际浏览器上运行时会更流畅 ~  \n\n[=> 源代码](https://github.com/nojsja/javascript-learning/tree/master/js-animation)\n\n![animation.gif](animation.gif)\n\n#### 代码实现\n-------------------\n\n##### 缓动函数\n> 涉及一些数学原理，感兴趣的可以单独了解一下。\n```js\n/**\n * [tween 缓动算法]\n * @param {[Number]}  t [动画已经消耗的时间]\n * @param {[String]}  b [目标开始的位置]\n * @param {[String]}  c [目标开始位置和结束位置的距离]\n * @param {[Number]}  d [动画总持续时间]\n */\nvar tween = {\n  linear: function( time, start, distance, duration ) { return distance*time/duration + start; },\n  easeIn: function( time, start, distance, duration ) { return distance * ( time /= duration ) * time + start; },\n  strongEaseIn: function(time, start, distance, duration) { return distance * ( time /= duration ) * time * time * time * time + start; },\n  strongEaseOut: function(time, start, distance, duration) { return distance * ( ( time = time / duration - 1) * time * time * time * time + 1 ) + start; },\n  sinEaseIn: function( time, start, distance, duration ) { return distance * ( time /= duration) * time * time + start; },\n  sinEaseOut: function(time,start,distance,duration){ return distance * ( ( time = time / duration - 1) * time * time + 1 ) + start; },\n};\n```\n\n##### 帧请求函数兼容写法\n> requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。\n```js\n// 动画帧请求函数兼容写法\nwindow.requestAnimationFrame = (function(){\n  return  window.requestAnimationFrame       ||\n          window.webkitRequestAnimationFrame ||\n          window.mozRequestAnimationFrame    ||\n          window.oRequestAnimationFrame      ||\n          window.msRequestAnimationFrame     ||\n          function( callback ){\n            return window.setTimeout(callback, 1000 / 60);\n          };\n})();\n```\n\n##### 编写Animation动画类\n> 使用了了ES5语法，为了直接兼容浏览器，ES6的语法会更简洁，代码零散度更低。  \n\n* 初始化执行动画的某个dom元素\n\n```js\n/* ------------------- 动画控制类 ------------------- */\nvar Animation = function () {\n  this.store = { // status store\n  };\n};\n\n/* ------------------- 初始化处理元素 ------------------- */\nAnimation.prototype.setTarget = function (selector) {\n  var element = document.querySelector(selector);\n  if (element) {\n    this.store[selector] = {\n      selector: selector,\n      element: document.querySelector(selector),\n      status: 'pending',\n      queue: [\n      ],\n      timeStart: '',\n      positionStart: {\n        x: '',\n        y: '',\n      },\n      positionEnd: {\n        x: '',\n        y: '',\n      },\n    };\n  }\n};\n```\n* 动画调用主要函数`update`的编写\n\n> 运用了设计模式中`享元模式`的思想来分离变化(`Animation.store属性`)和不变的部分。  \n\n```js\n/**\n * [start 开始动画]\n * @param  {[String]} selector [选择器]\n * @param  {[type]} func     [缓动动画]\n */\nAnimation.prototype.start = function (selector, func) {\n  var that = this;\n  var target = this.store[selector];\n  target.status = 'running';\n\n  // 帧调用函数\n  that.update({x: 0, y: 0}, selector);\n};\n\n/**\n * [update 更新位置]\n * @param  {[type]} selector [description]\n */\nAnimation.prototype.update =  function (position, selector) {\n  var target = this.store[selector],\n    that = this,\n    timeUsed,\n    positionX, positionY;\n  //\n  if (!target || !target.queue.length) {\n    target.status = 'pending';\n    return;\n  };\n\n  // reset position\n  target.element.style.left = position.x + 'px';\n  target.element.style.top = position.y + 'px';\n\n  // position\n  target.positionStart = {\n    x: position.x,\n    y: position.y,\n  };\n  target.positionEnd = {\n    x: position.x + target.queue[0].x,\n    y: position.y + target.queue[0].y,\n  };\n  // time\n  target.timeStart = null;\n\n  // 递归调用\n  var callback = function (time) {\n    if (target.timeStart === null) target.timeStart = time;\n    timeUsed = time - target.timeStart;\n    // 当前动画完成\n    if (timeUsed >= target.queue[0].duration) {\n      target.queue.shift();\n      // 误差矫正\n      that.step(target.element, target.positionEnd.x, target.positionEnd.y);\n      target.status = 'running';\n      // var position = target.element.getBoundingClientRect();\n      var position = {\n        x: parseInt(target.element.style.left),\n        y: parseInt(target.element.style.top),\n      };\n      // 下一个动画\n      that.update(position, selector);\n      return;\n    }\n    // 计算元素坐标\n    positionX = target.queue[0].func(\n      timeUsed,\n      target.positionStart.x,\n      target.positionEnd.x - target.positionStart.x,\n      target.queue[0].duration,\n    );\n    positionY = target.queue[0].func(\n      timeUsed,\n      target.positionStart.y,\n      target.positionEnd.y - target.positionStart.y,\n      target.queue[0].duration,\n    );\n    that.step(target.element, positionX, positionY);\n\n    // 递归帧函数调用\n    requestAnimationFrame(callback);\n  };\n\n  requestAnimationFrame(callback);\n};\n```\n\n* 其它一些方法(部分暂未实现)\n\n```js\n/**\n * [step dom操作]\n * @param  {[DOM]} element [dom 元素]\n * @param  {[Number]} x        [x坐标]\n * @param  {[Number]} y        [y坐标]\n */\nAnimation.prototype.step = function (element, x, y) {\n  element.style.left = x + 'px';\n  element.style.top = y + 'px';\n};\n\n/* ------------------- 暂停动画 ------------------- */\nAnimation.prototype.pause = function (selector) {\n  // 尚待实现\n};\n\n/* ------------------- 结束动画 ------------------- */\nAnimation.prototype.stop = function (selector) {\n    // 尚待实现\n};\n\n/**\n * [push 加入动画队列]\n * @param  {[String]} selector [dom选择器]\n * @param  {[Object]} conf     [相对位置数据]\n */\nAnimation.prototype.push = function (selector, conf) {\n  if (this.store[selector]) {\n    this.store[selector].queue.push({\n      x: conf.x,\n      y: conf.y,\n      duration: conf.duration || 1000,\n      func: tween[conf.func] || tween['linear'],\n    });\n  }\n};\n\n/* ------------------- 动画出队列 ------------------- */\nAnimation.prototype.pop = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.pop();\n  }\n};\n\n/* ------------------- 清空动画队列 ------------------- */\nAnimation.prototype.clear = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.length = 1;\n  }\n};\n```\n##### Animation调用方式\n1. 初始化元素\n2. 插入多个动画数据(坐标相对值、动画执行时间、缓动方式)\n3. 开始执行动画\n\n```js\nvar anime = new Animation();\nanime.setTarget('#animationTarget');\n// 右下角移动50px\nanime.push('#animationTarget', { x: 50, y: 50, duration: 1000, func: 'easeIn' });\n// 右上角移动50px\nanime.push('#animationTarget', { x: -50, y: -50, duration: 500, func: 'linear' });\n// 横向移动50px\nanime.push('#animationTarget', { x: 50, y: 0, duration: 1000, func: 'easeIn' });\n// 纵向移动50px\nanime.push('#animationTarget', { x: 0, y: 50, duration: 500, func: 'linear' });\n// 开始执行动画\nanime.start('#animationTarget');\n```\n\n#### 总结\n-------------\nJavaScript动画的性能比CSS动画低很多，平时实际做页面时应该尽量使用CSS3和Canvas来实现动画效果，但是一名合格的JSER，也应该对Js的动画实现原理熟知，知道怎样优化动画性能，以及运用适合的设计模式优化代码结构。\n\n##### 感谢阅读\n","slug":"简单实现一个Javascript动画处理类","published":1,"updated":"2021-02-02T12:30:41.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuqj000bkl95g1t62g6g","content":"<h4 id=\"目录\">目录</h4><ol><li><p>预览图</p></li><li><p>代码实现</p></li><li><p>总结</p></li></ol><h4 id=\"预览图\">预览图</h4><hr><blockquote><p>Gif预览图录制时帧数较低，实际浏览器上运行时会更流畅 ~</p></blockquote><p><a href=\"https://github.com/nojsja/javascript-learning/tree/master/js-animation\" target=\"_blank\" rel=\"noopener\">=&gt; 源代码</a></p><p><img src=\"animation.gif\" alt=\"animation.gif\"></p><h4 id=\"代码实现\">代码实现</h4><hr><h5 id=\"缓动函数\">缓动函数</h5><blockquote><p>涉及一些数学原理，感兴趣的可以单独了解一下。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [tween 缓动算法]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>t [动画已经消耗的时间]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>b [目标开始的位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>c [目标开始位置和结束位置的距离]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>d [动画总持续时间]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tween = &#123;</span><br><span class=\"line\">  linear: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance*time/duration + start; &#125;,</span><br><span class=\"line\">  easeIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time + start; &#125;,</span><br><span class=\"line\">  strongEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time * time * time * time + start; &#125;,</span><br><span class=\"line\">  strongEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">  sinEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration) * time * time + start; &#125;,</span><br><span class=\"line\">  sinEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time,start,distance,duration</span>)</span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h5 id=\"帧请求函数兼容写法\">帧请求函数兼容写法</h5><blockquote><p>requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动画帧请求函数兼容写法</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"built_in\">window</span>.requestAnimationFrame       ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.webkitRequestAnimationFrame ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.mozRequestAnimationFrame    ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.oRequestAnimationFrame      ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.msRequestAnimationFrame     ||</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> callback </span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.setTimeout(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><h5 id=\"编写Animation动画类\">编写Animation动画类</h5><blockquote><p>使用了了ES5语法，为了直接兼容浏览器，ES6的语法会更简洁，代码零散度更低。</p></blockquote><ul><li>初始化执行动画的某个dom元素</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ------------------- 动画控制类 ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Animation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.store = &#123; <span class=\"comment\">// status store</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 初始化处理元素 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.setTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector] = &#123;</span><br><span class=\"line\">      selector: selector,</span><br><span class=\"line\">      element: <span class=\"built_in\">document</span>.querySelector(selector),</span><br><span class=\"line\">      status: <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">      queue: [</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      timeStart: <span class=\"string\">''</span>,</span><br><span class=\"line\">      positionStart: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      positionEnd: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>动画调用主要函数<code>update</code>的编写</li></ul><blockquote><p>运用了设计模式中<code>享元模式</code>的思想来分离变化(<code>Animation.store属性</code>)和不变的部分。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [start 开始动画]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>func     [缓动动画]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector];</span><br><span class=\"line\">  target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 帧调用函数</span></span><br><span class=\"line\">  that.update(&#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>&#125;, selector);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [update 更新位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>selector [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.update =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector],</span><br><span class=\"line\">    that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    timeUsed,</span><br><span class=\"line\">    positionX, positionY;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!target || !target.queue.length) &#123;</span><br><span class=\"line\">    target.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset position</span></span><br><span class=\"line\">  target.element.style.left = position.x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  target.element.style.top = position.y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// position</span></span><br><span class=\"line\">  target.positionStart = &#123;</span><br><span class=\"line\">    x: position.x,</span><br><span class=\"line\">    y: position.y,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  target.positionEnd = &#123;</span><br><span class=\"line\">    x: position.x + target.queue[<span class=\"number\">0</span>].x,</span><br><span class=\"line\">    y: position.y + target.queue[<span class=\"number\">0</span>].y,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// time</span></span><br><span class=\"line\">  target.timeStart = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.timeStart === <span class=\"literal\">null</span>) target.timeStart = time;</span><br><span class=\"line\">    timeUsed = time - target.timeStart;</span><br><span class=\"line\">    <span class=\"comment\">// 当前动画完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeUsed &gt;= target.queue[<span class=\"number\">0</span>].duration) &#123;</span><br><span class=\"line\">      target.queue.shift();</span><br><span class=\"line\">      <span class=\"comment\">// 误差矫正</span></span><br><span class=\"line\">      that.step(target.element, target.positionEnd.x, target.positionEnd.y);</span><br><span class=\"line\">      target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\">      <span class=\"comment\">// var position = target.element.getBoundingClientRect();</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> position = &#123;</span><br><span class=\"line\">        x: <span class=\"built_in\">parseInt</span>(target.element.style.left),</span><br><span class=\"line\">        y: <span class=\"built_in\">parseInt</span>(target.element.style.top),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 下一个动画</span></span><br><span class=\"line\">      that.update(position, selector);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算元素坐标</span></span><br><span class=\"line\">    positionX = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.x,</span><br><span class=\"line\">      target.positionEnd.x - target.positionStart.x,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    positionY = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.y,</span><br><span class=\"line\">      target.positionEnd.y - target.positionStart.y,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    that.step(target.element, positionX, positionY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归帧函数调用</span></span><br><span class=\"line\">    requestAnimationFrame(callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  requestAnimationFrame(callback);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>其它一些方法(部分暂未实现)</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [step dom操作]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[DOM]&#125;</span> </span>element [dom 元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>x        [x坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>y        [y坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, x, y</span>) </span>&#123;</span><br><span class=\"line\">  element.style.left = x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  element.style.top = y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 暂停动画 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pause = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 尚待实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 结束动画 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.stop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尚待实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [push 加入动画队列]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [dom选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>conf     [相对位置数据]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, conf</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.push(&#123;</span><br><span class=\"line\">      x: conf.x,</span><br><span class=\"line\">      y: conf.y,</span><br><span class=\"line\">      duration: conf.duration || <span class=\"number\">1000</span>,</span><br><span class=\"line\">      func: tween[conf.func] || tween[<span class=\"string\">'linear'</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 动画出队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 清空动画队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.clear = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h5 id=\"Animation调用方式\">Animation调用方式</h5><ol><li>初始化元素</li><li>插入多个动画数据(坐标相对值、动画执行时间、缓动方式)</li><li>开始执行动画</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anime = <span class=\"keyword\">new</span> Animation();</span><br><span class=\"line\">anime.setTarget(<span class=\"string\">'#animationTarget'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 右下角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 右上角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">-50</span>, <span class=\"attr\">y</span>: <span class=\"number\">-50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 横向移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 纵向移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 开始执行动画</span></span><br><span class=\"line\">anime.start(<span class=\"string\">'#animationTarget'</span>);</span><br></pre></td></tr></table></figure><h4 id=\"总结\">总结</h4><hr><p>JavaScript动画的性能比CSS动画低很多，平时实际做页面时应该尽量使用CSS3和Canvas来实现动画效果，但是一名合格的JSER，也应该对Js的动画实现原理熟知，知道怎样优化动画性能，以及运用适合的设计模式优化代码结构。</p><h5 id=\"感谢阅读\">感谢阅读</h5>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"目录\">目录</h4><ol><li><p>预览图</p></li><li><p>代码实现</p></li><li><p>总结</p></li></ol><h4 id=\"预览图\">预览图</h4><hr><blockquote><p>Gif预览图录制时帧数较低，实际浏览器上运行时会更流畅 ~</p></blockquote><p><a href=\"https://github.com/nojsja/javascript-learning/tree/master/js-animation\" target=\"_blank\" rel=\"noopener\">=&gt; 源代码</a></p><p><img src=\"animation.gif\" alt=\"animation.gif\"></p><h4 id=\"代码实现\">代码实现</h4><hr><h5 id=\"缓动函数\">缓动函数</h5><blockquote><p>涉及一些数学原理，感兴趣的可以单独了解一下。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [tween 缓动算法]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>t [动画已经消耗的时间]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>b [目标开始的位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>c [目标开始位置和结束位置的距离]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>d [动画总持续时间]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tween = &#123;</span><br><span class=\"line\">  linear: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance*time/duration + start; &#125;,</span><br><span class=\"line\">  easeIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time + start; &#125;,</span><br><span class=\"line\">  strongEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time * time * time * time + start; &#125;,</span><br><span class=\"line\">  strongEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">  sinEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration) * time * time + start; &#125;,</span><br><span class=\"line\">  sinEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time,start,distance,duration</span>)</span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h5 id=\"帧请求函数兼容写法\">帧请求函数兼容写法</h5><blockquote><p>requestAnimationFrame是浏览器用于定时循环操作的一个接口，类似于setTimeout，主要用途是按帧对网页进行重绘。设置这个API的目的是为了让各种网页动画效果（DOM动画、Canvas动画、SVG动画、WebGL动画）能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。代码中使用这个API，就是告诉浏览器希望执行一个动画，让浏览器在下一个动画帧安排一次网页重绘。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动画帧请求函数兼容写法</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.requestAnimationFrame = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"built_in\">window</span>.requestAnimationFrame       ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.webkitRequestAnimationFrame ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.mozRequestAnimationFrame    ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.oRequestAnimationFrame      ||</span><br><span class=\"line\">          <span class=\"built_in\">window</span>.msRequestAnimationFrame     ||</span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> callback </span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.setTimeout(callback, <span class=\"number\">1000</span> / <span class=\"number\">60</span>);</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><h5 id=\"编写Animation动画类\">编写Animation动画类</h5><blockquote><p>使用了了ES5语法，为了直接兼容浏览器，ES6的语法会更简洁，代码零散度更低。</p></blockquote><ul><li>初始化执行动画的某个dom元素</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ------------------- 动画控制类 ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Animation = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.store = &#123; <span class=\"comment\">// status store</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 初始化处理元素 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.setTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector] = &#123;</span><br><span class=\"line\">      selector: selector,</span><br><span class=\"line\">      element: <span class=\"built_in\">document</span>.querySelector(selector),</span><br><span class=\"line\">      status: <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">      queue: [</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      timeStart: <span class=\"string\">''</span>,</span><br><span class=\"line\">      positionStart: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      positionEnd: &#123;</span><br><span class=\"line\">        x: <span class=\"string\">''</span>,</span><br><span class=\"line\">        y: <span class=\"string\">''</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>动画调用主要函数<code>update</code>的编写</li></ul><blockquote><p>运用了设计模式中<code>享元模式</code>的思想来分离变化(<code>Animation.store属性</code>)和不变的部分。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [start 开始动画]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>func     [缓动动画]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector];</span><br><span class=\"line\">  target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 帧调用函数</span></span><br><span class=\"line\">  that.update(&#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>&#125;, selector);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [update 更新位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>selector [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.update =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector],</span><br><span class=\"line\">    that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    timeUsed,</span><br><span class=\"line\">    positionX, positionY;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!target || !target.queue.length) &#123;</span><br><span class=\"line\">    target.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset position</span></span><br><span class=\"line\">  target.element.style.left = position.x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  target.element.style.top = position.y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// position</span></span><br><span class=\"line\">  target.positionStart = &#123;</span><br><span class=\"line\">    x: position.x,</span><br><span class=\"line\">    y: position.y,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  target.positionEnd = &#123;</span><br><span class=\"line\">    x: position.x + target.queue[<span class=\"number\">0</span>].x,</span><br><span class=\"line\">    y: position.y + target.queue[<span class=\"number\">0</span>].y,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// time</span></span><br><span class=\"line\">  target.timeStart = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.timeStart === <span class=\"literal\">null</span>) target.timeStart = time;</span><br><span class=\"line\">    timeUsed = time - target.timeStart;</span><br><span class=\"line\">    <span class=\"comment\">// 当前动画完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeUsed &gt;= target.queue[<span class=\"number\">0</span>].duration) &#123;</span><br><span class=\"line\">      target.queue.shift();</span><br><span class=\"line\">      <span class=\"comment\">// 误差矫正</span></span><br><span class=\"line\">      that.step(target.element, target.positionEnd.x, target.positionEnd.y);</span><br><span class=\"line\">      target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\">      <span class=\"comment\">// var position = target.element.getBoundingClientRect();</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> position = &#123;</span><br><span class=\"line\">        x: <span class=\"built_in\">parseInt</span>(target.element.style.left),</span><br><span class=\"line\">        y: <span class=\"built_in\">parseInt</span>(target.element.style.top),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 下一个动画</span></span><br><span class=\"line\">      that.update(position, selector);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 计算元素坐标</span></span><br><span class=\"line\">    positionX = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.x,</span><br><span class=\"line\">      target.positionEnd.x - target.positionStart.x,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    positionY = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.y,</span><br><span class=\"line\">      target.positionEnd.y - target.positionStart.y,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    that.step(target.element, positionX, positionY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 递归帧函数调用</span></span><br><span class=\"line\">    requestAnimationFrame(callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  requestAnimationFrame(callback);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ul><li>其它一些方法(部分暂未实现)</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [step dom操作]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[DOM]&#125;</span> </span>element [dom 元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>x        [x坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>y        [y坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, x, y</span>) </span>&#123;</span><br><span class=\"line\">  element.style.left = x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  element.style.top = y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 暂停动画 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pause = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 尚待实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 结束动画 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.stop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 尚待实现</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [push 加入动画队列]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [dom选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>conf     [相对位置数据]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, conf</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.push(&#123;</span><br><span class=\"line\">      x: conf.x,</span><br><span class=\"line\">      y: conf.y,</span><br><span class=\"line\">      duration: conf.duration || <span class=\"number\">1000</span>,</span><br><span class=\"line\">      func: tween[conf.func] || tween[<span class=\"string\">'linear'</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 动画出队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 清空动画队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.clear = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h5 id=\"Animation调用方式\">Animation调用方式</h5><ol><li>初始化元素</li><li>插入多个动画数据(坐标相对值、动画执行时间、缓动方式)</li><li>开始执行动画</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anime = <span class=\"keyword\">new</span> Animation();</span><br><span class=\"line\">anime.setTarget(<span class=\"string\">'#animationTarget'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 右下角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 右上角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">-50</span>, <span class=\"attr\">y</span>: <span class=\"number\">-50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 横向移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 纵向移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 开始执行动画</span></span><br><span class=\"line\">anime.start(<span class=\"string\">'#animationTarget'</span>);</span><br></pre></td></tr></table></figure><h4 id=\"总结\">总结</h4><hr><p>JavaScript动画的性能比CSS动画低很多，平时实际做页面时应该尽量使用CSS3和Canvas来实现动画效果，但是一名合格的JSER，也应该对Js的动画实现原理熟知，知道怎样优化动画性能，以及运用适合的设计模式优化代码结构。</p><h5 id=\"感谢阅读\">感谢阅读</h5>"},{"title":"LinuxMint18日常软件安装配置","catalog":true,"toc_nav_num":true,"date":"2019-04-04T08:30:35.000Z","subtitle":"linux mint","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-04-04T08:30:35.000Z","_content":"\n![city](city.jpg)\n>实装机器是linux mint18.3，理论上也适用于ubuntu\n\n#### 目录\n1. QQ 8.1 的 安装配置\n2. 微信的安装配置\n3. 印象笔记的安装配置\n4. 安装 Mac-os 主题\n5. 怎样自由上网(翻墙)\n6. 安装办公软件wps\n7. 实用工具推荐：tmux、stacer、oh-my-zsh、SmartGit、Docky\n8. chrome实用插件整理\n\n#### QQ 8.1 的 安装配置\n---------------------\n\n##### 方案一： Wine + deepingCrossover + deepinQQ 8.1\n>日常使用基本没有bug，能够保存密码自动登录  \n\n1. Wine安装  \nWine(Wine Is Not Emulator)，Wine是一个在x86、x86-64上容许类Unix操作系统在X Window System下运行Microsoft Windows程式的软件。  \n跟着执行几个命令即可，安装可能有点慢，一个小时内能搞定吧。[-->阅读安装步骤](https://wiki.winehq.org/Ubuntu)  \n\n2. deepinCrossover安装  \n如果是64位系统，先添加对32位库的支持：  \n~~~sh\nsudo dpkg --add-architecture i386\nsudo apt-get update\n~~~\n可能需要添加下列32位库：\n~~~sh\nsudo apt-get install lib32z1 lib32ncurses5  \n~~~\n[crossover下载地址](https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2Fcrossover-%E4%BB%A5%E5%8F%8Aqq%E5%AE%89%E8%A3%85)，到我的网盘下载crossover-15_15.0.3-1_all.deb、crossover-15_15.0.3-1_all-free.deb、deepin-crossover-helper_1.0deepin0_all.deb三个文件，在第一步的Wine安装完毕后按照以上下载说明的顺序依次安装三个deb包。\n\n3. deepinQQ 8.1安装  \ndeepinCrossover安装好后，到刚才下载三个deb包的地址那儿继续下载第四个deb包:apps.com.qq.im_8.1.17255deepin11_i386.deb，下载好后安装即可正常使用QQ。\n\n##### 方案二： 绿色无需安装精简版QQ\n> 缺点；不能保存密码，每次登录都要输入密码，优点：安装步骤忽略为零  \n\n* 下载地址：[QQ.AppImage](https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2FQQ_Linux)下载好后直接双击并允许可执行权限即可。\n\n#### 微信的安装配置\n----------------\n>微信官方没有客户端，都是第三方封装的网页版微信，够用了，发送文件都行  \n\n##### 方案一：electron-wechat\n[下载地址](https://github.com/geeeeeeeeek/electronic-wechat/releases)，到github找自己要安装的版本的tar包，下载好后，使用tar -xf 命令解压，在把解压目录内的 electronic-wechat 可执行程序 赋予可执行权限，相关命令是 sudo chmod 755 ./electronic-wechat，最后再建立两个软链接到 /usr/local/bin 和 /home/你的用户名/Desktop/ 目录即可，相关命令是： sudo ln -s path/to/electronic-wechat path/to/目标地址，这样做的目的是：让你可以从终端启动微信，并且在桌面建立了一个微信的快捷方式，直接点击即可运行微信。  \n\n##### 方案二：weweChat\n[下载地址](https://github.com/trazyn/weweChat/releases)，到这个地址找wewechat的相关deb包下载安装即可，我用的就是这个版本，UI和上面那个有点差别，还不错的。  \n\n#### 印象笔记的安装配置\n--------------------\n>印象笔记官方也没有开发Linux版本，说是维护成本太大，但是开放了API让第三方程序或是网页可以直接调用，所以有了我们下面这个使用Electron技术封装的网页版印象笔记Whatever，跟网页版看着一样，只不过有了一层桌面软件的壳，值得一提的是 我觉得网页版印象笔记更好用，界面也更现代化，这儿提供一个[Electron的应用中心](https://electronjs.org/apps)，里面很多第三方开发者的app，大部分可以Linux使用，自己找找，说不定有你喜欢的，最后附上Whatever的[下载地址](https://electronjs.org/apps/whatever)，选择适合你的版本下载安装即可。\n\n#### 安装 Mac-os 主题\n-------------------\n* 安装到Linux Mint  \n~~~sh\nsudo add-apt-repository ppa:noobslab/macbuntu\nsudo apt update\nsudo apt install macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7\n~~~\n\n* 从Linux Mint卸载  \n~~~sh\nsudo add-apt-repository -r ppa:noobslab/macbuntu\nsudo apt update\nsudo apt remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts\n-v7\n~~~\n\n安装好了要自己去设置界面切换啊～\n\n#### 怎样自由上网(翻墙)\n--------------------\n1. 从vultr买外国云主机，最低$2.5一个月，基本上是所有服务商里面最便宜的了，配置也是最低[官方地址](https://my.vultr.com/)  \n2. 登录自己的服务器  \n3. 服务器一键安装shadowsocks服务 [参考地址](https://xyzardq.github.io/2017/03/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAshadowsocks%E5%8F%8A%E4%BC%98%E5%8C%96/)  \n4. 自己电脑安装Shadowsocks-Qt5，设置好服务器地址，端口和本地代理地址和端口  \n~~~sh\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n~~~\n5. chrome安装SwitchyOmega插件，很方便的代理插件，Firefox上也有相应的版本，安装好后设置ip和端口 映射到第四步Shadowsocks-Qt5里设置的本地ip和端口即可享受自由的上网生活，附上一篇[教程](http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/)\n\n#### 安装办公软件wps\n------------------\n>Linux上最好用的办公软件，没有之一，无奈官方宣布暂时不更新了，linux mint自带的Liboffice不太好用，格式跟office不太兼容，[wps官网下载直达](http://linux.wps.cn/)\n\n#### 实用工具推荐\n---------------\n1. tmux终端工具\n>Tmux 简单来说就是终端里的『窗口管理器』，强烈推荐。附上\n[使用教程](http://wdxtub.com/2016/03/30/tmux-guide/)\n\n2. stacer系统管理工具\n>系统进程可视化管理和垃圾清理工具，就是相当于Linux上的电脑管家，还能查看系统占用，卸载软件包，配置开机启动，管理apt软件源等等，非常强大好用，附上[下载地址](https://sourceforge.net/projects/stacer/)\n\n3. oh-my-zsh终端模拟器\n>支持插件、主题、自定义配置的强大的终端模拟器，用来替代自带的bash，附上[安装教程](http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html)\n\n4. SmartGit仓库管理可视化工具\n>大名鼎鼎的分布式版本控制软件git的可视化工具，免费又强大，只是界面是英文的，不过我想你应该不太会介意\n\n5. Docky  \n>漂亮的dock工具栏，方便酷炫实用  \n\n6. Peek\n>强大的屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件  \n\n7. Inkscape\n>跨平台免费强大的svg图片绘制工具  \n\n#### chrome实用插件整理\n---------------------\n1. infinity标签页  \n>浏览器首页管理器，可以添加很多网站的快捷进入图标，方便美观\n2. Octotree  \n>让你在浏览github仓库时可以利用左侧的文件资源浏览树更方便地查看项目结构和页面跳转\n3. Postman  \n>api测试神器，很强大，甚至能发送带cookie的请求，各种请求、响应编辑功能也非常实用\n4. SwitchyOmega  \n>大家都用的代理软件，不说了\n5. 印象笔记剪藏  \n>随时随地把网络资源保存到你的笔记本里\n6. SimpRead - 简阅  \n>让浏览器支持纯净的阅读模式\n7. Full Page Screen Capture  \n>全屏截图，真的是全屏，你的浏览器标签页有多长，它就能截多长\n8. 高效网页截图编辑插件\n>另一个好用的截图插件\n\n#### 感谢阅读\n有时间还会继续更新本文\n","source":"_posts/2019-04-04-LinuxMint18日常软件安装配置.md","raw":"---\ntitle: \"LinuxMint18日常软件安装配置\"\ncatalog: true\ntoc_nav_num: true\ndate:   2019-04-04 16:30:35\nsubtitle: \"linux mint\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- linux\n- mint\ncategories:\n- Linux\nupdateDate: 2019-04-04 16:30:35\n---\n\n![city](city.jpg)\n>实装机器是linux mint18.3，理论上也适用于ubuntu\n\n#### 目录\n1. QQ 8.1 的 安装配置\n2. 微信的安装配置\n3. 印象笔记的安装配置\n4. 安装 Mac-os 主题\n5. 怎样自由上网(翻墙)\n6. 安装办公软件wps\n7. 实用工具推荐：tmux、stacer、oh-my-zsh、SmartGit、Docky\n8. chrome实用插件整理\n\n#### QQ 8.1 的 安装配置\n---------------------\n\n##### 方案一： Wine + deepingCrossover + deepinQQ 8.1\n>日常使用基本没有bug，能够保存密码自动登录  \n\n1. Wine安装  \nWine(Wine Is Not Emulator)，Wine是一个在x86、x86-64上容许类Unix操作系统在X Window System下运行Microsoft Windows程式的软件。  \n跟着执行几个命令即可，安装可能有点慢，一个小时内能搞定吧。[-->阅读安装步骤](https://wiki.winehq.org/Ubuntu)  \n\n2. deepinCrossover安装  \n如果是64位系统，先添加对32位库的支持：  \n~~~sh\nsudo dpkg --add-architecture i386\nsudo apt-get update\n~~~\n可能需要添加下列32位库：\n~~~sh\nsudo apt-get install lib32z1 lib32ncurses5  \n~~~\n[crossover下载地址](https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2Fcrossover-%E4%BB%A5%E5%8F%8Aqq%E5%AE%89%E8%A3%85)，到我的网盘下载crossover-15_15.0.3-1_all.deb、crossover-15_15.0.3-1_all-free.deb、deepin-crossover-helper_1.0deepin0_all.deb三个文件，在第一步的Wine安装完毕后按照以上下载说明的顺序依次安装三个deb包。\n\n3. deepinQQ 8.1安装  \ndeepinCrossover安装好后，到刚才下载三个deb包的地址那儿继续下载第四个deb包:apps.com.qq.im_8.1.17255deepin11_i386.deb，下载好后安装即可正常使用QQ。\n\n##### 方案二： 绿色无需安装精简版QQ\n> 缺点；不能保存密码，每次登录都要输入密码，优点：安装步骤忽略为零  \n\n* 下载地址：[QQ.AppImage](https://pan.baidu.com/disk/home?#/all?vmode=list&path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2FQQ_Linux)下载好后直接双击并允许可执行权限即可。\n\n#### 微信的安装配置\n----------------\n>微信官方没有客户端，都是第三方封装的网页版微信，够用了，发送文件都行  \n\n##### 方案一：electron-wechat\n[下载地址](https://github.com/geeeeeeeeek/electronic-wechat/releases)，到github找自己要安装的版本的tar包，下载好后，使用tar -xf 命令解压，在把解压目录内的 electronic-wechat 可执行程序 赋予可执行权限，相关命令是 sudo chmod 755 ./electronic-wechat，最后再建立两个软链接到 /usr/local/bin 和 /home/你的用户名/Desktop/ 目录即可，相关命令是： sudo ln -s path/to/electronic-wechat path/to/目标地址，这样做的目的是：让你可以从终端启动微信，并且在桌面建立了一个微信的快捷方式，直接点击即可运行微信。  \n\n##### 方案二：weweChat\n[下载地址](https://github.com/trazyn/weweChat/releases)，到这个地址找wewechat的相关deb包下载安装即可，我用的就是这个版本，UI和上面那个有点差别，还不错的。  \n\n#### 印象笔记的安装配置\n--------------------\n>印象笔记官方也没有开发Linux版本，说是维护成本太大，但是开放了API让第三方程序或是网页可以直接调用，所以有了我们下面这个使用Electron技术封装的网页版印象笔记Whatever，跟网页版看着一样，只不过有了一层桌面软件的壳，值得一提的是 我觉得网页版印象笔记更好用，界面也更现代化，这儿提供一个[Electron的应用中心](https://electronjs.org/apps)，里面很多第三方开发者的app，大部分可以Linux使用，自己找找，说不定有你喜欢的，最后附上Whatever的[下载地址](https://electronjs.org/apps/whatever)，选择适合你的版本下载安装即可。\n\n#### 安装 Mac-os 主题\n-------------------\n* 安装到Linux Mint  \n~~~sh\nsudo add-apt-repository ppa:noobslab/macbuntu\nsudo apt update\nsudo apt install macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7\n~~~\n\n* 从Linux Mint卸载  \n~~~sh\nsudo add-apt-repository -r ppa:noobslab/macbuntu\nsudo apt update\nsudo apt remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts\n-v7\n~~~\n\n安装好了要自己去设置界面切换啊～\n\n#### 怎样自由上网(翻墙)\n--------------------\n1. 从vultr买外国云主机，最低$2.5一个月，基本上是所有服务商里面最便宜的了，配置也是最低[官方地址](https://my.vultr.com/)  \n2. 登录自己的服务器  \n3. 服务器一键安装shadowsocks服务 [参考地址](https://xyzardq.github.io/2017/03/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAshadowsocks%E5%8F%8A%E4%BC%98%E5%8C%96/)  \n4. 自己电脑安装Shadowsocks-Qt5，设置好服务器地址，端口和本地代理地址和端口  \n~~~sh\nsudo add-apt-repository ppa:hzwhuang/ss-qt5\nsudo apt-get update\nsudo apt-get install shadowsocks-qt5\n~~~\n5. chrome安装SwitchyOmega插件，很方便的代理插件，Firefox上也有相应的版本，安装好后设置ip和端口 映射到第四步Shadowsocks-Qt5里设置的本地ip和端口即可享受自由的上网生活，附上一篇[教程](http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/)\n\n#### 安装办公软件wps\n------------------\n>Linux上最好用的办公软件，没有之一，无奈官方宣布暂时不更新了，linux mint自带的Liboffice不太好用，格式跟office不太兼容，[wps官网下载直达](http://linux.wps.cn/)\n\n#### 实用工具推荐\n---------------\n1. tmux终端工具\n>Tmux 简单来说就是终端里的『窗口管理器』，强烈推荐。附上\n[使用教程](http://wdxtub.com/2016/03/30/tmux-guide/)\n\n2. stacer系统管理工具\n>系统进程可视化管理和垃圾清理工具，就是相当于Linux上的电脑管家，还能查看系统占用，卸载软件包，配置开机启动，管理apt软件源等等，非常强大好用，附上[下载地址](https://sourceforge.net/projects/stacer/)\n\n3. oh-my-zsh终端模拟器\n>支持插件、主题、自定义配置的强大的终端模拟器，用来替代自带的bash，附上[安装教程](http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html)\n\n4. SmartGit仓库管理可视化工具\n>大名鼎鼎的分布式版本控制软件git的可视化工具，免费又强大，只是界面是英文的，不过我想你应该不太会介意\n\n5. Docky  \n>漂亮的dock工具栏，方便酷炫实用  \n\n6. Peek\n>强大的屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件  \n\n7. Inkscape\n>跨平台免费强大的svg图片绘制工具  \n\n#### chrome实用插件整理\n---------------------\n1. infinity标签页  \n>浏览器首页管理器，可以添加很多网站的快捷进入图标，方便美观\n2. Octotree  \n>让你在浏览github仓库时可以利用左侧的文件资源浏览树更方便地查看项目结构和页面跳转\n3. Postman  \n>api测试神器，很强大，甚至能发送带cookie的请求，各种请求、响应编辑功能也非常实用\n4. SwitchyOmega  \n>大家都用的代理软件，不说了\n5. 印象笔记剪藏  \n>随时随地把网络资源保存到你的笔记本里\n6. SimpRead - 简阅  \n>让浏览器支持纯净的阅读模式\n7. Full Page Screen Capture  \n>全屏截图，真的是全屏，你的浏览器标签页有多长，它就能截多长\n8. 高效网页截图编辑插件\n>另一个好用的截图插件\n\n#### 感谢阅读\n有时间还会继续更新本文\n","slug":"LinuxMint18日常软件安装配置","published":1,"updated":"2020-12-06T10:52:09.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuql000ekl950vtn3clw","content":"<p><img src=\"city.jpg\" alt=\"city\"></p><blockquote><p>实装机器是linux mint18.3，理论上也适用于ubuntu</p></blockquote><h4 id=\"目录\">目录</h4><ol><li>QQ 8.1 的 安装配置</li><li>微信的安装配置</li><li>印象笔记的安装配置</li><li>安装 Mac-os 主题</li><li>怎样自由上网(翻墙)</li><li>安装办公软件wps</li><li>实用工具推荐：tmux、stacer、oh-my-zsh、SmartGit、Docky</li><li>chrome实用插件整理</li></ol><h4 id=\"QQ-8-1-的-安装配置\">QQ 8.1 的 安装配置</h4><hr><h5 id=\"方案一：-Wine-deepingCrossover-deepinQQ-8-1\">方案一： Wine + deepingCrossover + deepinQQ 8.1</h5><blockquote><p>日常使用基本没有bug，能够保存密码自动登录</p></blockquote><ol><li><p>Wine安装<br>Wine(Wine Is Not Emulator)，Wine是一个在x86、x86-64上容许类Unix操作系统在X Window System下运行Microsoft Windows程式的软件。<br>跟着执行几个命令即可，安装可能有点慢，一个小时内能搞定吧。<a href=\"https://wiki.winehq.org/Ubuntu\" target=\"_blank\" rel=\"noopener\">–&gt;阅读安装步骤</a></p></li><li><p>deepinCrossover安装<br>如果是64位系统，先添加对32位库的支持：</p></li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --add-architecture i386</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure><p>可能需要添加下列32位库：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32z1 lib32ncurses5</span><br></pre></td></tr></table></figure><p><a href=\"https://pan.baidu.com/disk/home?#/all?vmode=list&amp;path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2Fcrossover-%E4%BB%A5%E5%8F%8Aqq%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">crossover下载地址</a>，到我的网盘下载crossover-15_15.0.3-1_all.deb、crossover-15_15.0.3-1_all-free.deb、deepin-crossover-helper_1.0deepin0_all.deb三个文件，在第一步的Wine安装完毕后按照以上下载说明的顺序依次安装三个deb包。</p><ol start=\"3\"><li>deepinQQ 8.1安装<br>deepinCrossover安装好后，到刚才下载三个deb包的地址那儿继续下载第四个deb包:apps.com.qq.im_8.1.17255deepin11_i386.deb，下载好后安装即可正常使用QQ。</li></ol><h5 id=\"方案二：-绿色无需安装精简版QQ\">方案二： 绿色无需安装精简版QQ</h5><blockquote><p>缺点；不能保存密码，每次登录都要输入密码，优点：安装步骤忽略为零</p></blockquote><ul><li>下载地址：<a href=\"https://pan.baidu.com/disk/home?#/all?vmode=list&amp;path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2FQQ_Linux\" target=\"_blank\" rel=\"noopener\">QQ.AppImage</a>下载好后直接双击并允许可执行权限即可。</li></ul><h4 id=\"微信的安装配置\">微信的安装配置</h4><hr><blockquote><p>微信官方没有客户端，都是第三方封装的网页版微信，够用了，发送文件都行</p></blockquote><h5 id=\"方案一：electron-wechat\">方案一：electron-wechat</h5><p><a href=\"https://github.com/geeeeeeeeek/electronic-wechat/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a>，到github找自己要安装的版本的tar包，下载好后，使用tar -xf 命令解压，在把解压目录内的 electronic-wechat 可执行程序 赋予可执行权限，相关命令是 sudo chmod 755 ./electronic-wechat，最后再建立两个软链接到 /usr/local/bin 和 /home/你的用户名/Desktop/ 目录即可，相关命令是： sudo ln -s path/to/electronic-wechat path/to/目标地址，这样做的目的是：让你可以从终端启动微信，并且在桌面建立了一个微信的快捷方式，直接点击即可运行微信。</p><h5 id=\"方案二：weweChat\">方案二：weweChat</h5><p><a href=\"https://github.com/trazyn/weweChat/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a>，到这个地址找wewechat的相关deb包下载安装即可，我用的就是这个版本，UI和上面那个有点差别，还不错的。</p><h4 id=\"印象笔记的安装配置\">印象笔记的安装配置</h4><hr><blockquote><p>印象笔记官方也没有开发Linux版本，说是维护成本太大，但是开放了API让第三方程序或是网页可以直接调用，所以有了我们下面这个使用Electron技术封装的网页版印象笔记Whatever，跟网页版看着一样，只不过有了一层桌面软件的壳，值得一提的是 我觉得网页版印象笔记更好用，界面也更现代化，这儿提供一个<a href=\"https://electronjs.org/apps\" target=\"_blank\" rel=\"noopener\">Electron的应用中心</a>，里面很多第三方开发者的app，大部分可以Linux使用，自己找找，说不定有你喜欢的，最后附上Whatever的<a href=\"https://electronjs.org/apps/whatever\" target=\"_blank\" rel=\"noopener\">下载地址</a>，选择适合你的版本下载安装即可。</p></blockquote><h4 id=\"安装-Mac-os-主题\">安装 Mac-os 主题</h4><hr><ul><li>安装到Linux Mint</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7</span><br></pre></td></tr></table></figure><ul><li>从Linux Mint卸载</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository -r ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts</span><br><span class=\"line\">-v7</span><br></pre></td></tr></table></figure><p>安装好了要自己去设置界面切换啊～</p><h4 id=\"怎样自由上网-翻墙\">怎样自由上网(翻墙)</h4><hr><ol><li>从vultr买外国云主机，最低$2.5一个月，基本上是所有服务商里面最便宜的了，配置也是最低<a href=\"https://my.vultr.com/\" target=\"_blank\" rel=\"noopener\">官方地址</a></li><li>登录自己的服务器</li><li>服务器一键安装shadowsocks服务 <a href=\"https://xyzardq.github.io/2017/03/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAshadowsocks%E5%8F%8A%E4%BC%98%E5%8C%96/\" target=\"_blank\" rel=\"noopener\">参考地址</a></li><li>自己电脑安装Shadowsocks-Qt5，设置好服务器地址，端口和本地代理地址和端口</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure><ol start=\"5\"><li>chrome安装SwitchyOmega插件，很方便的代理插件，Firefox上也有相应的版本，安装好后设置ip和端口 映射到第四步Shadowsocks-Qt5里设置的本地ip和端口即可享受自由的上网生活，附上一篇<a href=\"http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/\" target=\"_blank\" rel=\"noopener\">教程</a></li></ol><h4 id=\"安装办公软件wps\">安装办公软件wps</h4><hr><blockquote><p>Linux上最好用的办公软件，没有之一，无奈官方宣布暂时不更新了，linux mint自带的Liboffice不太好用，格式跟office不太兼容，<a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">wps官网下载直达</a></p></blockquote><h4 id=\"实用工具推荐\">实用工具推荐</h4><hr><ol><li>tmux终端工具</li></ol><blockquote><p>Tmux 简单来说就是终端里的『窗口管理器』，强烈推荐。附上<br><a href=\"http://wdxtub.com/2016/03/30/tmux-guide/\" target=\"_blank\" rel=\"noopener\">使用教程</a></p></blockquote><ol start=\"2\"><li>stacer系统管理工具</li></ol><blockquote><p>系统进程可视化管理和垃圾清理工具，就是相当于Linux上的电脑管家，还能查看系统占用，卸载软件包，配置开机启动，管理apt软件源等等，非常强大好用，附上<a href=\"https://sourceforge.net/projects/stacer/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p></blockquote><ol start=\"3\"><li>oh-my-zsh终端模拟器</li></ol><blockquote><p>支持插件、主题、自定义配置的强大的终端模拟器，用来替代自带的bash，附上<a href=\"http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html\" target=\"_blank\" rel=\"noopener\">安装教程</a></p></blockquote><ol start=\"4\"><li>SmartGit仓库管理可视化工具</li></ol><blockquote><p>大名鼎鼎的分布式版本控制软件git的可视化工具，免费又强大，只是界面是英文的，不过我想你应该不太会介意</p></blockquote><ol start=\"5\"><li>Docky</li></ol><blockquote><p>漂亮的dock工具栏，方便酷炫实用</p></blockquote><ol start=\"6\"><li>Peek</li></ol><blockquote><p>强大的屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件</p></blockquote><ol start=\"7\"><li>Inkscape</li></ol><blockquote><p>跨平台免费强大的svg图片绘制工具</p></blockquote><h4 id=\"chrome实用插件整理\">chrome实用插件整理</h4><hr><ol><li>infinity标签页</li></ol><blockquote><p>浏览器首页管理器，可以添加很多网站的快捷进入图标，方便美观</p></blockquote><ol start=\"2\"><li>Octotree</li></ol><blockquote><p>让你在浏览github仓库时可以利用左侧的文件资源浏览树更方便地查看项目结构和页面跳转</p></blockquote><ol start=\"3\"><li>Postman</li></ol><blockquote><p>api测试神器，很强大，甚至能发送带cookie的请求，各种请求、响应编辑功能也非常实用</p></blockquote><ol start=\"4\"><li>SwitchyOmega</li></ol><blockquote><p>大家都用的代理软件，不说了</p></blockquote><ol start=\"5\"><li>印象笔记剪藏</li></ol><blockquote><p>随时随地把网络资源保存到你的笔记本里</p></blockquote><ol start=\"6\"><li>SimpRead - 简阅</li></ol><blockquote><p>让浏览器支持纯净的阅读模式</p></blockquote><ol start=\"7\"><li>Full Page Screen Capture</li></ol><blockquote><p>全屏截图，真的是全屏，你的浏览器标签页有多长，它就能截多长</p></blockquote><ol start=\"8\"><li>高效网页截图编辑插件</li></ol><blockquote><p>另一个好用的截图插件</p></blockquote><h4 id=\"感谢阅读\">感谢阅读</h4><p>有时间还会继续更新本文</p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"city.jpg\" alt=\"city\"></p><blockquote><p>实装机器是linux mint18.3，理论上也适用于ubuntu</p></blockquote><h4 id=\"目录\">目录</h4><ol><li>QQ 8.1 的 安装配置</li><li>微信的安装配置</li><li>印象笔记的安装配置</li><li>安装 Mac-os 主题</li><li>怎样自由上网(翻墙)</li><li>安装办公软件wps</li><li>实用工具推荐：tmux、stacer、oh-my-zsh、SmartGit、Docky</li><li>chrome实用插件整理</li></ol><h4 id=\"QQ-8-1-的-安装配置\">QQ 8.1 的 安装配置</h4><hr><h5 id=\"方案一：-Wine-deepingCrossover-deepinQQ-8-1\">方案一： Wine + deepingCrossover + deepinQQ 8.1</h5><blockquote><p>日常使用基本没有bug，能够保存密码自动登录</p></blockquote><ol><li><p>Wine安装<br>Wine(Wine Is Not Emulator)，Wine是一个在x86、x86-64上容许类Unix操作系统在X Window System下运行Microsoft Windows程式的软件。<br>跟着执行几个命令即可，安装可能有点慢，一个小时内能搞定吧。<a href=\"https://wiki.winehq.org/Ubuntu\" target=\"_blank\" rel=\"noopener\">–&gt;阅读安装步骤</a></p></li><li><p>deepinCrossover安装<br>如果是64位系统，先添加对32位库的支持：</p></li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg --add-architecture i386</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure><p>可能需要添加下列32位库：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32z1 lib32ncurses5</span><br></pre></td></tr></table></figure><p><a href=\"https://pan.baidu.com/disk/home?#/all?vmode=list&amp;path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2Fcrossover-%E4%BB%A5%E5%8F%8Aqq%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">crossover下载地址</a>，到我的网盘下载crossover-15_15.0.3-1_all.deb、crossover-15_15.0.3-1_all-free.deb、deepin-crossover-helper_1.0deepin0_all.deb三个文件，在第一步的Wine安装完毕后按照以上下载说明的顺序依次安装三个deb包。</p><ol start=\"3\"><li>deepinQQ 8.1安装<br>deepinCrossover安装好后，到刚才下载三个deb包的地址那儿继续下载第四个deb包:apps.com.qq.im_8.1.17255deepin11_i386.deb，下载好后安装即可正常使用QQ。</li></ol><h5 id=\"方案二：-绿色无需安装精简版QQ\">方案二： 绿色无需安装精简版QQ</h5><blockquote><p>缺点；不能保存密码，每次登录都要输入密码，优点：安装步骤忽略为零</p></blockquote><ul><li>下载地址：<a href=\"https://pan.baidu.com/disk/home?#/all?vmode=list&amp;path=%2F%E5%B7%A5%E5%85%B7%E5%92%8C%E8%BD%AF%E4%BB%B6%2FQQ_Linux\" target=\"_blank\" rel=\"noopener\">QQ.AppImage</a>下载好后直接双击并允许可执行权限即可。</li></ul><h4 id=\"微信的安装配置\">微信的安装配置</h4><hr><blockquote><p>微信官方没有客户端，都是第三方封装的网页版微信，够用了，发送文件都行</p></blockquote><h5 id=\"方案一：electron-wechat\">方案一：electron-wechat</h5><p><a href=\"https://github.com/geeeeeeeeek/electronic-wechat/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a>，到github找自己要安装的版本的tar包，下载好后，使用tar -xf 命令解压，在把解压目录内的 electronic-wechat 可执行程序 赋予可执行权限，相关命令是 sudo chmod 755 ./electronic-wechat，最后再建立两个软链接到 /usr/local/bin 和 /home/你的用户名/Desktop/ 目录即可，相关命令是： sudo ln -s path/to/electronic-wechat path/to/目标地址，这样做的目的是：让你可以从终端启动微信，并且在桌面建立了一个微信的快捷方式，直接点击即可运行微信。</p><h5 id=\"方案二：weweChat\">方案二：weweChat</h5><p><a href=\"https://github.com/trazyn/weweChat/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a>，到这个地址找wewechat的相关deb包下载安装即可，我用的就是这个版本，UI和上面那个有点差别，还不错的。</p><h4 id=\"印象笔记的安装配置\">印象笔记的安装配置</h4><hr><blockquote><p>印象笔记官方也没有开发Linux版本，说是维护成本太大，但是开放了API让第三方程序或是网页可以直接调用，所以有了我们下面这个使用Electron技术封装的网页版印象笔记Whatever，跟网页版看着一样，只不过有了一层桌面软件的壳，值得一提的是 我觉得网页版印象笔记更好用，界面也更现代化，这儿提供一个<a href=\"https://electronjs.org/apps\" target=\"_blank\" rel=\"noopener\">Electron的应用中心</a>，里面很多第三方开发者的app，大部分可以Linux使用，自己找找，说不定有你喜欢的，最后附上Whatever的<a href=\"https://electronjs.org/apps/whatever\" target=\"_blank\" rel=\"noopener\">下载地址</a>，选择适合你的版本下载安装即可。</p></blockquote><h4 id=\"安装-Mac-os-主题\">安装 Mac-os 主题</h4><hr><ul><li>安装到Linux Mint</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts-v7</span><br></pre></td></tr></table></figure><ul><li>从Linux Mint卸载</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository -r ppa:noobslab/macbuntu</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt remove macbuntu-os-icons-lts-v7 macbuntu-os-ithemes-lts</span><br><span class=\"line\">-v7</span><br></pre></td></tr></table></figure><p>安装好了要自己去设置界面切换啊～</p><h4 id=\"怎样自由上网-翻墙\">怎样自由上网(翻墙)</h4><hr><ol><li>从vultr买外国云主机，最低$2.5一个月，基本上是所有服务商里面最便宜的了，配置也是最低<a href=\"https://my.vultr.com/\" target=\"_blank\" rel=\"noopener\">官方地址</a></li><li>登录自己的服务器</li><li>服务器一键安装shadowsocks服务 <a href=\"https://xyzardq.github.io/2017/03/07/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E9%94%AE%E6%90%AD%E5%BB%BAshadowsocks%E5%8F%8A%E4%BC%98%E5%8C%96/\" target=\"_blank\" rel=\"noopener\">参考地址</a></li><li>自己电脑安装Shadowsocks-Qt5，设置好服务器地址，端口和本地代理地址和端口</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure><ol start=\"5\"><li>chrome安装SwitchyOmega插件，很方便的代理插件，Firefox上也有相应的版本，安装好后设置ip和端口 映射到第四步Shadowsocks-Qt5里设置的本地ip和端口即可享受自由的上网生活，附上一篇<a href=\"http://www.cylong.com/blog/2017/04/09/chrome-SwitchyOmega/\" target=\"_blank\" rel=\"noopener\">教程</a></li></ol><h4 id=\"安装办公软件wps\">安装办公软件wps</h4><hr><blockquote><p>Linux上最好用的办公软件，没有之一，无奈官方宣布暂时不更新了，linux mint自带的Liboffice不太好用，格式跟office不太兼容，<a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">wps官网下载直达</a></p></blockquote><h4 id=\"实用工具推荐\">实用工具推荐</h4><hr><ol><li>tmux终端工具</li></ol><blockquote><p>Tmux 简单来说就是终端里的『窗口管理器』，强烈推荐。附上<br><a href=\"http://wdxtub.com/2016/03/30/tmux-guide/\" target=\"_blank\" rel=\"noopener\">使用教程</a></p></blockquote><ol start=\"2\"><li>stacer系统管理工具</li></ol><blockquote><p>系统进程可视化管理和垃圾清理工具，就是相当于Linux上的电脑管家，还能查看系统占用，卸载软件包，配置开机启动，管理apt软件源等等，非常强大好用，附上<a href=\"https://sourceforge.net/projects/stacer/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p></blockquote><ol start=\"3\"><li>oh-my-zsh终端模拟器</li></ol><blockquote><p>支持插件、主题、自定义配置的强大的终端模拟器，用来替代自带的bash，附上<a href=\"http://yijiebuyi.com/blog/b9b5e1ebb719f22475c38c4819ab8151.html\" target=\"_blank\" rel=\"noopener\">安装教程</a></p></blockquote><ol start=\"4\"><li>SmartGit仓库管理可视化工具</li></ol><blockquote><p>大名鼎鼎的分布式版本控制软件git的可视化工具，免费又强大，只是界面是英文的，不过我想你应该不太会介意</p></blockquote><ol start=\"5\"><li>Docky</li></ol><blockquote><p>漂亮的dock工具栏，方便酷炫实用</p></blockquote><ol start=\"6\"><li>Peek</li></ol><blockquote><p>强大的屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件</p></blockquote><ol start=\"7\"><li>Inkscape</li></ol><blockquote><p>跨平台免费强大的svg图片绘制工具</p></blockquote><h4 id=\"chrome实用插件整理\">chrome实用插件整理</h4><hr><ol><li>infinity标签页</li></ol><blockquote><p>浏览器首页管理器，可以添加很多网站的快捷进入图标，方便美观</p></blockquote><ol start=\"2\"><li>Octotree</li></ol><blockquote><p>让你在浏览github仓库时可以利用左侧的文件资源浏览树更方便地查看项目结构和页面跳转</p></blockquote><ol start=\"3\"><li>Postman</li></ol><blockquote><p>api测试神器，很强大，甚至能发送带cookie的请求，各种请求、响应编辑功能也非常实用</p></blockquote><ol start=\"4\"><li>SwitchyOmega</li></ol><blockquote><p>大家都用的代理软件，不说了</p></blockquote><ol start=\"5\"><li>印象笔记剪藏</li></ol><blockquote><p>随时随地把网络资源保存到你的笔记本里</p></blockquote><ol start=\"6\"><li>SimpRead - 简阅</li></ol><blockquote><p>让浏览器支持纯净的阅读模式</p></blockquote><ol start=\"7\"><li>Full Page Screen Capture</li></ol><blockquote><p>全屏截图，真的是全屏，你的浏览器标签页有多长，它就能截多长</p></blockquote><ol start=\"8\"><li>高效网页截图编辑插件</li></ol><blockquote><p>另一个好用的截图插件</p></blockquote><h4 id=\"感谢阅读\">感谢阅读</h4><p>有时间还会继续更新本文</p>"},{"title":"用Javascript实现一个可自定义样式的tootips组件","catalog":true,"toc_nav_num":true,"date":"2018-11-06T11:16:00.000Z","subtitle":"animation javascript","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-11-06T11:16:00.000Z","_content":"\n#### 前言\n\n> 最近做的一个jQuery老项目经常会用tootips组件在一个html元素周围显示提示信息，虽然有现成的组件可以使用，但是很多tootips组件处理起来并不灵活，不能够自定义tootips样式和显示的内容及布局等等，而且tootips组件本身的样式可能会被目标组件的样式影响，所以想自己实现一个tootips组件：可以自定义显示内容，并且tootips的位置和布局完全不受页面元素影响。\n\n![tootip.png](tootip.png)\n\n#### 预览图\n----------------\n\n[=> 源代码](https://github.com/nojsja/javascript-learning/tree/master/code-challenge/es5-component/js-tooltips)\n\n![animation.gif](tootips.gif)\n\n#### 代码实现\n------------\n\n##### 组件结构\n```js\n var Tootips = (function () {\n  \n  /* 工具函数 */\n  var utils = {\n    ...\n  }\n \n\n  /**\n   * [renderContainer 构造html]\n   * @param  {[Object]} options   [自定义参数]\n   * @param  {[String]} type   [渲染类型 -> text | html]\n   * @param  {[String]} target   [渲染字符串]\n   */\n  function renderContainer($selector, tootipKey) {\n   ...\n };\n\n\n /**\n  * [showTootips 操作页面属性显示一个元素]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} tootipKey [可能已经生成过一次tooptips组件了]\n  */\n function showTootips($selector) {\n   ...\n };\n\n /**\n  * [hideTooTips 操作页面属性隐藏一个元素]\n  * @param  {[$Object]} $selector [一个页面元素]\n  */\n function hideTooTips($selector) {\n   ...\n };\n\n\n /**\n  * [eventListen 进行事件监听]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} trigger [触发事件监听类型]\n  */\n function eventListen($selector, _trigger, $context) {\n   ...\n }\n\n /**\n  * [renderHtml 使用html字符串进行初始化]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} htmlstr   [html字符串]\n  * @param  {[Object]} options   [自定义参数]\n  */\n function init(_$selector, _options) {\n   ...\n }\n\n return {\n   init: init,\n\n   /**\n   * [trigger 手动触发元素的显示和隐藏]\n   * @param  {[$Object]} $selector [一个页面元素]\n   */\n   trigger: function($selector) {\n    if (!utils.element.getData($selector, 'isActivated')) {\n      showTootips($selector, utils.element.getAttr($selector, 'tootip-key'));\n    }else {\n      hideTooTips($selector);\n    }\n  },\n\n  /**\n  * [getStatus 获取某个元素的状态]\n  * @param  {[$Object]} $selector [一个页面元素]\n  */\n   status: function ($selector) {\n    return {\n      isActivated: utils.element.getData($selector, 'isActivated') ? true : false,\n      isInited: utils.element.getAttr($selector, 'tootip-key') ? true : false,\n      key: utils.element.getAttr($selector, 'tootip-key') || null,\n    };\n  },\n }\n})();\n\n```\n\n#### 工具函数封装\n\n>主要用于简化dom操作，实现了一些类似jQuery的API；还封装了用于计算元素坐标的纯函数\n\n```js\nvar utils = {\n    actions: {\n      // [symbol]: [Timer]\n    },\n    element: {\n     jsonWrapper: function(target) {\n       var jsonParseRule = /^\\{\"([\\w\\W])+\\}$/;\n       if (jsonParseRule.test(target)) return JSON.parse(target);\n       return (typeof target === 'object' && target !== null) ?\n         JSON.stringify(target) :\n         target;\n     },\n     elementWrapper: function($element) {\n       return (typeof $element === 'object') ? $element : document.querySelector($element);\n     },\n     setAttr: function($element, key, value) {\n       $element = this.elementWrapper($element);\n       (key) && $element.setAttribute(key, this.jsonWrapper(value));\n       return this;\n     },\n     setCss: function($element, styleKey, styleValue, important) {\n       $element = this.elementWrapper($element);\n       $element.style.setProperty(styleKey, styleValue, important === 'important' ? important : undefined);\n       return this;\n     },\n     getAttr: function($element, key) {\n       $element = this.elementWrapper($element);\n       return (key) ? this.jsonWrapper($element.getAttribute(key)) : undefined;\n     },\n     setData: function($element, key, value) {\n       $element = this.elementWrapper($element);\n       (key) && this.setAttr($element, 'data-' + key, value);\n       return this;\n     },\n     getData: function($element, key) {\n       $element = this.elementWrapper($element);\n       return key ? this.getAttr($element, 'data-' + key) : undefined;\n     },\n     addClass: function($element, className) {\n       $element = this.elementWrapper($element);\n       var classes = $element.className.split(' ');\n       if (!classes.includes(className)) {\n         classes.push(className);\n         $element.className = classes.join(' ');\n       }\n       return this;\n     },\n     removeClass: function($element, className) {\n       $element = this.elementWrapper($element);\n       var classes = $element.className.split(' ');\n       var index = classes.indexOf(className);\n       if (index !== -1) {\n         classes.splice(index, 1);\n         $element.className = classes.join(' ');\n       }\n       return this;\n     },\n     empty: function($element) {\n       $element = this.elementWrapper($element);\n       $element.innerHTML = '';\n     },\n     html: function($element, htmlStr) {\n       $element = this.elementWrapper($element);\n       $element.innerHTML = htmlStr;\n     }\n    },\n   /* 根据宿主元素第一次计算横坐标和纵坐标 */\n   renderX1: function (r, d) {\n     if (d === 'top' || d === 'bottom')\n       return (r.x + r.width / 2 + 'px');\n     if (d === 'left')\n       return (r.x - 6 + 'px');\n     if (d === 'right')\n       return (r.x + r.width + 6 + 'px');\n     if (d === 'bottomleft' || d === 'topleft')\n       return (r.x + 'px');\n     if (d === 'bottomright' || d === 'topright')\n       return (r.x + r.width + 'px');\n   },\n   renderY1: function (r, d) {\n     if (d === 'top')\n       return (r.y - 6 + 'px');\n     if (d === 'left' || d === 'right')\n       return (r.y + r.height / 2 + 'px');\n     if (d === 'bottom')\n       return (r.y + r.height + 6 + 'px');\n     if (d === 'bottomleft' || d === 'bottomright')\n       return (r.y + r.height + 'px');\n     if (d === 'topleft' || d === 'topright')\n       return (r.y + 'px');\n   },\n   /* 根据生成的tootips元素宽高第二次计算横坐标和纵坐标 */\n   renderX2: function (r, d) {\n     if (d === 'top' || d === 'bottom')\n       return (r.x - r.width / 2 + 'px');\n     if (d === 'left' || d === 'bottomleft' || d === 'topleft')\n       return (r.x - r.width + 'px');\n     if (d === 'right')\n       return (r.x + 'px');\n     if (d === 'bottomright' || d === 'topright')\n      return (r.x + r.widht + 'px');\n   },\n   renderY2: function (r, d) {\n     if (d === 'top' || d === 'topleft' || d === 'topright')\n       return (r.y - r.height + 'px');\n     if (d === 'left' || d === 'right')\n       return (r.y - r.height / 2 + 'px');\n     if (d === 'bottom' || d === 'bottomleft' || d === 'bottomright')\n       return (r.y + 'px');\n   },\n   /* 使用函数去抖防止调用混乱 */\n   actionDebounce: function(symbol, action, params) {\n     var that = this;\n     var timer = setTimeout(function() {\n       action(params);\n       clearTimeout(timer);\n       delete that.actions[symbol];\n     }, 300);\n \n     if (!that.actions[symbol]) {\n       that.actions[symbol] = timer;\n     } else {\n       clearTimeout(that.actions[symbol]);\n       that.actions[symbol] = timer;\n     }\n   }\n }\n```\n\n##### 初始化一个元素\n> 对一个html元素进行初始化，在元素上绑定数据和设置事件监听器\n\n```js\n/**\n * [renderHtml 使用html字符串进行初始化]\n * @param  {[$Object]} $selector [一个页面元素]\n * @param  {[String]} htmlstr   [html字符串]\n * @param  {[Object]} options   [自定义参数]\n */\nfunction init(_$selector, _options) {\n\n  var $selector = utils.element.elementWrapper(_$selector),\n      trigger = _options['trigger'] ? _options['trigger'] : 'mouseover', // click | hover\n      $context = utils.element.elementWrapper(_options['context']),\n      key = utils.element.getAttr($selector, 'tootip-key');\n   \n   utils.element.setData($selector, 'tootip-target', _options.value)\n     .setData($selector, 'tootip-type', _options.type)\n     .setData($selector, 'tootip-options', _options)\n     .setData($selector, 'tootip-trigger', _options.trigger)\n     .setCss($selector, 'cursor', 'pointer');\n\n  (!key) && eventListen($selector, trigger, $context);\n}\n```\n\n##### 根据传入属性创建tootips组件\n\n* 使用`getBoundingClientRect()`方法获取目标组件的位置和宽高\n* tootips组件根据获取的位置和宽高进行窗口定位(`position: fixed`)\n* 根据传入的属性设置tootips组件的样式\n* 返回一个dom元素\n\n\n```js\n/**\n   * [renderContainer 构造html]\n   * @param  {[Object]} options   [自定义参数]\n   * @param  {[String]} type   [渲染类型 -> text | html]\n   * @param  {[String]} target   [渲染字符串]\n   */\n  function renderContainer($selector, tootipKey) {\n   var type = utils.element.getData($selector, 'tootip-type'),\n      options = utils.element.getData($selector, 'tootip-options'),\n      trigger = utils.element.getData($selector, 'tootip-trigger'),\n      target = utils.element.getData($selector, 'tootip-target');\n\n   // 提取属性\n   var randomKey = '_' + Math.random().toString(36).substr(2);\n   var $wrapper = tootipKey ? utils.element.elementWrapper('div[tootip-key='+tootipKey+']') : document.createElement('div');\n   var cssStyle = options.style || {};\n   var styleSheet = options.css || '';\n   var direction = options.direction || 'top';\n   var triangleArray = ['top', 'left', 'right','bottom'];\n   var triangleClass = 'triangle-' +\n     triangleArray[triangleArray.length - 1 - triangleArray.indexOf(direction)];\n   var shadowClassMap = {\n     top: 'tootip-shadow-top-right',\n     bottom: 'tootip-shadow-bottom-right',\n     left: 'tootip-shadow-top-left',\n     right: 'tootip-shadow-top-right',\n   }\n   var rect = $selector.getBoundingClientRect();\n\n   utils.element.setCss($wrapper, 'border', 'solid 1px rgb(212, 212, 212)')\n    .setCss($wrapper, 'position', 'fixed')\n    .setCss($wrapper, 'left', utils.renderX1(rect, direction))\n    .setCss($wrapper, 'top', utils.renderY1(rect, direction))\n    .setAttr($wrapper, 'tootip-key', tootipKey || randomKey)\n    .addClass($wrapper, triangleClass + ' abnormal-tips-container ' + shadowClassMap[direction] + ' ' + styleSheet);\n    utils.element.setAttr($selector, 'tootip-key', tootipKey || randomKey);\n\n   // 第一次创建dom结构\n   if (!tootipKey && trigger === 'mouseover') {\n     $wrapper.onmouseout = function () {\n       utils.actionDebounce(randomKey, hideTooTips, $selector);\n     };\n     $wrapper.onmouseover = function () {\n       utils.actionDebounce(randomKey, showTootips, $selector);\n     };\n   }\n\n   Object.keys(cssStyle).forEach(function (attr) {\n     utils.element.setCss($wrapper, attr, cssStyle[attr]);\n   });\n\n   utils.element.html($wrapper, type === 'html' ? target : ('<span>' + target +'</span>'));\n\n   return $wrapper;\n };\n```\n\n##### 绑定事件监听器\n\n> 对一个元素进行初始化后需要给tooltips组件绑定监听器(`click`或`mouse`事件)，让tootips组件能够响应鼠标的点击或是划过\n\n注意`utils.actionDebounce`方法运用了函数去抖的思想，防止在短时间内高频触发Tootip显示/隐藏时发生的调用混乱问题，多次调用时只响应最新的触发事件。\n\n```js\n/**\n  * [eventListen 进行事件监听]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} trigger [触发事件监听类型]\n  */\n function eventListen($selector, _trigger, $context) {\n\n   var trigger = (_trigger instanceof Array) ? _trigger : [_trigger];\n\n   // click事件监听\n   if(trigger.includes('click')) {\n     ($context || $selector)\n       .onclick = function () {\n         if (!utils.element.getData($selector, 'isActivated')) {\n           utils.actionDebounce(utils.element.getAttr($selector, 'tootip-key'), showTootips, $selector);\n         } else {\n           utils.actionDebounce(utils.element.getAttr($selector, 'tootip-key'), hideTooTips, $selector);\n         }\n       };\n   } \n\n   // 鼠标事件监听\n   if(trigger.includes('mouseover')) {\n     ($context || $selector)\n       .onmouseout = function () {\n         utils.actionDebounce(utils.element.getAttr($selector, 'tootip-key'), hideTooTips, $selector);\n       };\n     ($context || $selector)\n       .onmouseover = function () {\n         utils.actionDebounce(utils.element.getAttr($selector, 'tootip-key'), showTootips, $selector);\n       };\n   }\n }\n\n```\n\n* 实现showTootips方法  \n在tootips组件中可以自定义显示html内容或text内容，tootips组件被添加到页面之前，tootips组件的宽度和高度是不可获取的，所以在show方法中需要对tootips元素进行二次定位，同样使用`getBoundingClientRect()`方法获取tootips元素坐标和宽高。\n\n```js\n/**\n  * [showTootips 操作页面属性显示一个元素]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} tootipKey [可能已经生成过一次tooptips组件了]\n  */\n function showTootips($selector) {\n   if (utils.element.getData($selector, 'isActivated')) return;\n   var tootipKey = utils.element.getAttr($selector, 'tootip-key');\n   var $dom = renderContainer($selector, tootipKey);\n   if (!tootipKey) {\n     document.body.appendChild($dom);\n   } else {\n    utils.element.removeClass($dom, 'hidden');\n   }\n   utils.element.setData($selector, 'isActivated', true);\n\n   var options = utils.element.getData($selector, 'tootip-options');\n   var rect = $dom.getBoundingClientRect();\n\n   utils.element\n     .setCss($dom, 'top', utils.renderY2(rect, options.direction))\n     .setCss($dom, 'left', utils.renderX2(rect, options.direction));\n };\n```\n\n* 实现hideTootips方法  \nhide方法的作用是将当前元素对应的tootips组件从页面移出，之前初始化的时候在目标元素和生成的tootips元素上设置了同一个`key`属性，现在可以根据`key`来移除每个目标元素对应的tootips元素。\n\n```js\n/**\n  * [hideTooTips 操作页面属性隐藏一个元素]\n  * @param  {[$Object]} $selector [一个页面元素]\n  */\n function hideTooTips($selector) {\n   var key = utils.element.getAttr($selector, 'tootip-key');\n   var $element = utils.element.elementWrapper('div[tootip-key='+key+']');\n   utils.element.addClass($element, 'hidden');\n   utils.element.setData($selector, 'isActivated', '');\n };\n```\n\n\n\n##### 使用方式\n\n> 设置tootips方向、显示内容字符串(可以是html字符串)、触发方式(click / mouseover)、自定义css属性、自定义样式表。\n\n```js\nTootips.init(('#t1'), {\n  trigger: 'mouseover', // 触发方式\n  type: 'html', // 内容显示类型\n  value: '<h3>header</h3><p>body</p>', // 内容显示值\n  direction: 'top', // 显示方向\n  style: { // tootips组件自定义样式\n    'font-size': '1rem',\n    'color': 'red',\n    'min-width': '5rem',\n    'padding': '5px 10px',\n    'border-radius': '5px',\n    'background-color': 'white',\n  },\n  css: '', // tootips组件自定义样式表\n});\n```\n\n#### 总结\n--------\n\n* tootips组件的坐标完全使用javasript来获取和设置\n* tootips组件的定位类型为`position: fixed`，不受页面布局影响\n* `getBoundingClientRect()`方法可以获取目标元素的坐标、宽高等数据\n* tootips组件支持传入自定义样式\n* tootips组件支持显示含有html标签的字符串和普通字符串\n* tootips组件支持设置触发方式(`click` / `mouseover`)\n\n##### 感谢阅读\n","source":"_posts/2018-11-06-用Javascript实现一个可自定义样式的tootips组件.md","raw":"---\ntitle: \"用Javascript实现一个可自定义样式的tootips组件\"\ncatalog: true\ntoc_nav_num: true\ndate:  2018-11-06 19:16:00\nsubtitle: \"animation javascript\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- javascript\ncategories:\n- Javascript\nupdateDate: 2018-11-06 19:16:00\n---\n\n#### 前言\n\n> 最近做的一个jQuery老项目经常会用tootips组件在一个html元素周围显示提示信息，虽然有现成的组件可以使用，但是很多tootips组件处理起来并不灵活，不能够自定义tootips样式和显示的内容及布局等等，而且tootips组件本身的样式可能会被目标组件的样式影响，所以想自己实现一个tootips组件：可以自定义显示内容，并且tootips的位置和布局完全不受页面元素影响。\n\n![tootip.png](tootip.png)\n\n#### 预览图\n----------------\n\n[=> 源代码](https://github.com/nojsja/javascript-learning/tree/master/code-challenge/es5-component/js-tooltips)\n\n![animation.gif](tootips.gif)\n\n#### 代码实现\n------------\n\n##### 组件结构\n```js\n var Tootips = (function () {\n  \n  /* 工具函数 */\n  var utils = {\n    ...\n  }\n \n\n  /**\n   * [renderContainer 构造html]\n   * @param  {[Object]} options   [自定义参数]\n   * @param  {[String]} type   [渲染类型 -> text | html]\n   * @param  {[String]} target   [渲染字符串]\n   */\n  function renderContainer($selector, tootipKey) {\n   ...\n };\n\n\n /**\n  * [showTootips 操作页面属性显示一个元素]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} tootipKey [可能已经生成过一次tooptips组件了]\n  */\n function showTootips($selector) {\n   ...\n };\n\n /**\n  * [hideTooTips 操作页面属性隐藏一个元素]\n  * @param  {[$Object]} $selector [一个页面元素]\n  */\n function hideTooTips($selector) {\n   ...\n };\n\n\n /**\n  * [eventListen 进行事件监听]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} trigger [触发事件监听类型]\n  */\n function eventListen($selector, _trigger, $context) {\n   ...\n }\n\n /**\n  * [renderHtml 使用html字符串进行初始化]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} htmlstr   [html字符串]\n  * @param  {[Object]} options   [自定义参数]\n  */\n function init(_$selector, _options) {\n   ...\n }\n\n return {\n   init: init,\n\n   /**\n   * [trigger 手动触发元素的显示和隐藏]\n   * @param  {[$Object]} $selector [一个页面元素]\n   */\n   trigger: function($selector) {\n    if (!utils.element.getData($selector, 'isActivated')) {\n      showTootips($selector, utils.element.getAttr($selector, 'tootip-key'));\n    }else {\n      hideTooTips($selector);\n    }\n  },\n\n  /**\n  * [getStatus 获取某个元素的状态]\n  * @param  {[$Object]} $selector [一个页面元素]\n  */\n   status: function ($selector) {\n    return {\n      isActivated: utils.element.getData($selector, 'isActivated') ? true : false,\n      isInited: utils.element.getAttr($selector, 'tootip-key') ? true : false,\n      key: utils.element.getAttr($selector, 'tootip-key') || null,\n    };\n  },\n }\n})();\n\n```\n\n#### 工具函数封装\n\n>主要用于简化dom操作，实现了一些类似jQuery的API；还封装了用于计算元素坐标的纯函数\n\n```js\nvar utils = {\n    actions: {\n      // [symbol]: [Timer]\n    },\n    element: {\n     jsonWrapper: function(target) {\n       var jsonParseRule = /^\\{\"([\\w\\W])+\\}$/;\n       if (jsonParseRule.test(target)) return JSON.parse(target);\n       return (typeof target === 'object' && target !== null) ?\n         JSON.stringify(target) :\n         target;\n     },\n     elementWrapper: function($element) {\n       return (typeof $element === 'object') ? $element : document.querySelector($element);\n     },\n     setAttr: function($element, key, value) {\n       $element = this.elementWrapper($element);\n       (key) && $element.setAttribute(key, this.jsonWrapper(value));\n       return this;\n     },\n     setCss: function($element, styleKey, styleValue, important) {\n       $element = this.elementWrapper($element);\n       $element.style.setProperty(styleKey, styleValue, important === 'important' ? important : undefined);\n       return this;\n     },\n     getAttr: function($element, key) {\n       $element = this.elementWrapper($element);\n       return (key) ? this.jsonWrapper($element.getAttribute(key)) : undefined;\n     },\n     setData: function($element, key, value) {\n       $element = this.elementWrapper($element);\n       (key) && this.setAttr($element, 'data-' + key, value);\n       return this;\n     },\n     getData: function($element, key) {\n       $element = this.elementWrapper($element);\n       return key ? this.getAttr($element, 'data-' + key) : undefined;\n     },\n     addClass: function($element, className) {\n       $element = this.elementWrapper($element);\n       var classes = $element.className.split(' ');\n       if (!classes.includes(className)) {\n         classes.push(className);\n         $element.className = classes.join(' ');\n       }\n       return this;\n     },\n     removeClass: function($element, className) {\n       $element = this.elementWrapper($element);\n       var classes = $element.className.split(' ');\n       var index = classes.indexOf(className);\n       if (index !== -1) {\n         classes.splice(index, 1);\n         $element.className = classes.join(' ');\n       }\n       return this;\n     },\n     empty: function($element) {\n       $element = this.elementWrapper($element);\n       $element.innerHTML = '';\n     },\n     html: function($element, htmlStr) {\n       $element = this.elementWrapper($element);\n       $element.innerHTML = htmlStr;\n     }\n    },\n   /* 根据宿主元素第一次计算横坐标和纵坐标 */\n   renderX1: function (r, d) {\n     if (d === 'top' || d === 'bottom')\n       return (r.x + r.width / 2 + 'px');\n     if (d === 'left')\n       return (r.x - 6 + 'px');\n     if (d === 'right')\n       return (r.x + r.width + 6 + 'px');\n     if (d === 'bottomleft' || d === 'topleft')\n       return (r.x + 'px');\n     if (d === 'bottomright' || d === 'topright')\n       return (r.x + r.width + 'px');\n   },\n   renderY1: function (r, d) {\n     if (d === 'top')\n       return (r.y - 6 + 'px');\n     if (d === 'left' || d === 'right')\n       return (r.y + r.height / 2 + 'px');\n     if (d === 'bottom')\n       return (r.y + r.height + 6 + 'px');\n     if (d === 'bottomleft' || d === 'bottomright')\n       return (r.y + r.height + 'px');\n     if (d === 'topleft' || d === 'topright')\n       return (r.y + 'px');\n   },\n   /* 根据生成的tootips元素宽高第二次计算横坐标和纵坐标 */\n   renderX2: function (r, d) {\n     if (d === 'top' || d === 'bottom')\n       return (r.x - r.width / 2 + 'px');\n     if (d === 'left' || d === 'bottomleft' || d === 'topleft')\n       return (r.x - r.width + 'px');\n     if (d === 'right')\n       return (r.x + 'px');\n     if (d === 'bottomright' || d === 'topright')\n      return (r.x + r.widht + 'px');\n   },\n   renderY2: function (r, d) {\n     if (d === 'top' || d === 'topleft' || d === 'topright')\n       return (r.y - r.height + 'px');\n     if (d === 'left' || d === 'right')\n       return (r.y - r.height / 2 + 'px');\n     if (d === 'bottom' || d === 'bottomleft' || d === 'bottomright')\n       return (r.y + 'px');\n   },\n   /* 使用函数去抖防止调用混乱 */\n   actionDebounce: function(symbol, action, params) {\n     var that = this;\n     var timer = setTimeout(function() {\n       action(params);\n       clearTimeout(timer);\n       delete that.actions[symbol];\n     }, 300);\n \n     if (!that.actions[symbol]) {\n       that.actions[symbol] = timer;\n     } else {\n       clearTimeout(that.actions[symbol]);\n       that.actions[symbol] = timer;\n     }\n   }\n }\n```\n\n##### 初始化一个元素\n> 对一个html元素进行初始化，在元素上绑定数据和设置事件监听器\n\n```js\n/**\n * [renderHtml 使用html字符串进行初始化]\n * @param  {[$Object]} $selector [一个页面元素]\n * @param  {[String]} htmlstr   [html字符串]\n * @param  {[Object]} options   [自定义参数]\n */\nfunction init(_$selector, _options) {\n\n  var $selector = utils.element.elementWrapper(_$selector),\n      trigger = _options['trigger'] ? _options['trigger'] : 'mouseover', // click | hover\n      $context = utils.element.elementWrapper(_options['context']),\n      key = utils.element.getAttr($selector, 'tootip-key');\n   \n   utils.element.setData($selector, 'tootip-target', _options.value)\n     .setData($selector, 'tootip-type', _options.type)\n     .setData($selector, 'tootip-options', _options)\n     .setData($selector, 'tootip-trigger', _options.trigger)\n     .setCss($selector, 'cursor', 'pointer');\n\n  (!key) && eventListen($selector, trigger, $context);\n}\n```\n\n##### 根据传入属性创建tootips组件\n\n* 使用`getBoundingClientRect()`方法获取目标组件的位置和宽高\n* tootips组件根据获取的位置和宽高进行窗口定位(`position: fixed`)\n* 根据传入的属性设置tootips组件的样式\n* 返回一个dom元素\n\n\n```js\n/**\n   * [renderContainer 构造html]\n   * @param  {[Object]} options   [自定义参数]\n   * @param  {[String]} type   [渲染类型 -> text | html]\n   * @param  {[String]} target   [渲染字符串]\n   */\n  function renderContainer($selector, tootipKey) {\n   var type = utils.element.getData($selector, 'tootip-type'),\n      options = utils.element.getData($selector, 'tootip-options'),\n      trigger = utils.element.getData($selector, 'tootip-trigger'),\n      target = utils.element.getData($selector, 'tootip-target');\n\n   // 提取属性\n   var randomKey = '_' + Math.random().toString(36).substr(2);\n   var $wrapper = tootipKey ? utils.element.elementWrapper('div[tootip-key='+tootipKey+']') : document.createElement('div');\n   var cssStyle = options.style || {};\n   var styleSheet = options.css || '';\n   var direction = options.direction || 'top';\n   var triangleArray = ['top', 'left', 'right','bottom'];\n   var triangleClass = 'triangle-' +\n     triangleArray[triangleArray.length - 1 - triangleArray.indexOf(direction)];\n   var shadowClassMap = {\n     top: 'tootip-shadow-top-right',\n     bottom: 'tootip-shadow-bottom-right',\n     left: 'tootip-shadow-top-left',\n     right: 'tootip-shadow-top-right',\n   }\n   var rect = $selector.getBoundingClientRect();\n\n   utils.element.setCss($wrapper, 'border', 'solid 1px rgb(212, 212, 212)')\n    .setCss($wrapper, 'position', 'fixed')\n    .setCss($wrapper, 'left', utils.renderX1(rect, direction))\n    .setCss($wrapper, 'top', utils.renderY1(rect, direction))\n    .setAttr($wrapper, 'tootip-key', tootipKey || randomKey)\n    .addClass($wrapper, triangleClass + ' abnormal-tips-container ' + shadowClassMap[direction] + ' ' + styleSheet);\n    utils.element.setAttr($selector, 'tootip-key', tootipKey || randomKey);\n\n   // 第一次创建dom结构\n   if (!tootipKey && trigger === 'mouseover') {\n     $wrapper.onmouseout = function () {\n       utils.actionDebounce(randomKey, hideTooTips, $selector);\n     };\n     $wrapper.onmouseover = function () {\n       utils.actionDebounce(randomKey, showTootips, $selector);\n     };\n   }\n\n   Object.keys(cssStyle).forEach(function (attr) {\n     utils.element.setCss($wrapper, attr, cssStyle[attr]);\n   });\n\n   utils.element.html($wrapper, type === 'html' ? target : ('<span>' + target +'</span>'));\n\n   return $wrapper;\n };\n```\n\n##### 绑定事件监听器\n\n> 对一个元素进行初始化后需要给tooltips组件绑定监听器(`click`或`mouse`事件)，让tootips组件能够响应鼠标的点击或是划过\n\n注意`utils.actionDebounce`方法运用了函数去抖的思想，防止在短时间内高频触发Tootip显示/隐藏时发生的调用混乱问题，多次调用时只响应最新的触发事件。\n\n```js\n/**\n  * [eventListen 进行事件监听]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} trigger [触发事件监听类型]\n  */\n function eventListen($selector, _trigger, $context) {\n\n   var trigger = (_trigger instanceof Array) ? _trigger : [_trigger];\n\n   // click事件监听\n   if(trigger.includes('click')) {\n     ($context || $selector)\n       .onclick = function () {\n         if (!utils.element.getData($selector, 'isActivated')) {\n           utils.actionDebounce(utils.element.getAttr($selector, 'tootip-key'), showTootips, $selector);\n         } else {\n           utils.actionDebounce(utils.element.getAttr($selector, 'tootip-key'), hideTooTips, $selector);\n         }\n       };\n   } \n\n   // 鼠标事件监听\n   if(trigger.includes('mouseover')) {\n     ($context || $selector)\n       .onmouseout = function () {\n         utils.actionDebounce(utils.element.getAttr($selector, 'tootip-key'), hideTooTips, $selector);\n       };\n     ($context || $selector)\n       .onmouseover = function () {\n         utils.actionDebounce(utils.element.getAttr($selector, 'tootip-key'), showTootips, $selector);\n       };\n   }\n }\n\n```\n\n* 实现showTootips方法  \n在tootips组件中可以自定义显示html内容或text内容，tootips组件被添加到页面之前，tootips组件的宽度和高度是不可获取的，所以在show方法中需要对tootips元素进行二次定位，同样使用`getBoundingClientRect()`方法获取tootips元素坐标和宽高。\n\n```js\n/**\n  * [showTootips 操作页面属性显示一个元素]\n  * @param  {[$Object]} $selector [一个页面元素]\n  * @param  {[String]} tootipKey [可能已经生成过一次tooptips组件了]\n  */\n function showTootips($selector) {\n   if (utils.element.getData($selector, 'isActivated')) return;\n   var tootipKey = utils.element.getAttr($selector, 'tootip-key');\n   var $dom = renderContainer($selector, tootipKey);\n   if (!tootipKey) {\n     document.body.appendChild($dom);\n   } else {\n    utils.element.removeClass($dom, 'hidden');\n   }\n   utils.element.setData($selector, 'isActivated', true);\n\n   var options = utils.element.getData($selector, 'tootip-options');\n   var rect = $dom.getBoundingClientRect();\n\n   utils.element\n     .setCss($dom, 'top', utils.renderY2(rect, options.direction))\n     .setCss($dom, 'left', utils.renderX2(rect, options.direction));\n };\n```\n\n* 实现hideTootips方法  \nhide方法的作用是将当前元素对应的tootips组件从页面移出，之前初始化的时候在目标元素和生成的tootips元素上设置了同一个`key`属性，现在可以根据`key`来移除每个目标元素对应的tootips元素。\n\n```js\n/**\n  * [hideTooTips 操作页面属性隐藏一个元素]\n  * @param  {[$Object]} $selector [一个页面元素]\n  */\n function hideTooTips($selector) {\n   var key = utils.element.getAttr($selector, 'tootip-key');\n   var $element = utils.element.elementWrapper('div[tootip-key='+key+']');\n   utils.element.addClass($element, 'hidden');\n   utils.element.setData($selector, 'isActivated', '');\n };\n```\n\n\n\n##### 使用方式\n\n> 设置tootips方向、显示内容字符串(可以是html字符串)、触发方式(click / mouseover)、自定义css属性、自定义样式表。\n\n```js\nTootips.init(('#t1'), {\n  trigger: 'mouseover', // 触发方式\n  type: 'html', // 内容显示类型\n  value: '<h3>header</h3><p>body</p>', // 内容显示值\n  direction: 'top', // 显示方向\n  style: { // tootips组件自定义样式\n    'font-size': '1rem',\n    'color': 'red',\n    'min-width': '5rem',\n    'padding': '5px 10px',\n    'border-radius': '5px',\n    'background-color': 'white',\n  },\n  css: '', // tootips组件自定义样式表\n});\n```\n\n#### 总结\n--------\n\n* tootips组件的坐标完全使用javasript来获取和设置\n* tootips组件的定位类型为`position: fixed`，不受页面布局影响\n* `getBoundingClientRect()`方法可以获取目标元素的坐标、宽高等数据\n* tootips组件支持传入自定义样式\n* tootips组件支持显示含有html标签的字符串和普通字符串\n* tootips组件支持设置触发方式(`click` / `mouseover`)\n\n##### 感谢阅读\n","slug":"用Javascript实现一个可自定义样式的tootips组件","published":1,"updated":"2020-12-06T10:52:02.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuqm000fkl95gt5de1hm","content":"<h4 id=\"前言\">前言</h4><blockquote><p>最近做的一个jQuery老项目经常会用tootips组件在一个html元素周围显示提示信息，虽然有现成的组件可以使用，但是很多tootips组件处理起来并不灵活，不能够自定义tootips样式和显示的内容及布局等等，而且tootips组件本身的样式可能会被目标组件的样式影响，所以想自己实现一个tootips组件：可以自定义显示内容，并且tootips的位置和布局完全不受页面元素影响。</p></blockquote><p><img src=\"tootip.png\" alt=\"tootip.png\"></p><h4 id=\"预览图\">预览图</h4><hr><p><a href=\"https://github.com/nojsja/javascript-learning/tree/master/code-challenge/es5-component/js-tooltips\" target=\"_blank\" rel=\"noopener\">=&gt; 源代码</a></p><p><img src=\"tootips.gif\" alt=\"animation.gif\"></p><h4 id=\"代码实现\">代码实现</h4><hr><h5 id=\"组件结构\">组件结构</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> Tootips = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 工具函数 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> utils = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [renderContainer 构造html]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>type   [渲染类型 -&gt; text | html]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>target   [渲染字符串]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContainer</span>(<span class=\"params\">$selector, tootipKey</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [showTootips 操作页面属性显示一个元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>tootipKey [可能已经生成过一次tooptips组件了]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTootips</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [hideTooTips 操作页面属性隐藏一个元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hideTooTips</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [eventListen 进行事件监听]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>trigger [触发事件监听类型]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListen</span>(<span class=\"params\">$selector, _trigger, $context</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [renderHtml 使用html字符串进行初始化]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>htmlstr   [html字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_$selector, _options</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">   init: init,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [trigger 手动触发元素的显示和隐藏]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">   trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!utils.element.getData($selector, <span class=\"string\">'isActivated'</span>)) &#123;</span><br><span class=\"line\">      showTootips($selector, utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      hideTooTips($selector);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [getStatus 获取某个元素的状态]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">   status: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isActivated: utils.element.getData($selector, <span class=\"string\">'isActivated'</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">      isInited: utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">      key: utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>) || <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><h4 id=\"工具函数封装\">工具函数封装</h4><blockquote><p>主要用于简化dom操作，实现了一些类似jQuery的API；还封装了用于计算元素坐标的纯函数</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> utils = &#123;</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// [symbol]: [Timer]</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    element: &#123;</span><br><span class=\"line\">     jsonWrapper: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> jsonParseRule = <span class=\"regexp\">/^\\&#123;\"([\\w\\W])+\\&#125;$/</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (jsonParseRule.test(target)) <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(target);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> target === <span class=\"string\">'object'</span> &amp;&amp; target !== <span class=\"literal\">null</span>) ?</span><br><span class=\"line\">         <span class=\"built_in\">JSON</span>.stringify(target) :</span><br><span class=\"line\">         target;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     elementWrapper: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> $element === <span class=\"string\">'object'</span>) ? $element : <span class=\"built_in\">document</span>.querySelector($element);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     setAttr: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, key, value</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       (key) &amp;&amp; $element.setAttribute(key, <span class=\"keyword\">this</span>.jsonWrapper(value));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     setCss: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, styleKey, styleValue, important</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       $element.style.setProperty(styleKey, styleValue, important === <span class=\"string\">'important'</span> ? important : <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     getAttr: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, key</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (key) ? <span class=\"keyword\">this</span>.jsonWrapper($element.getAttribute(key)) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     setData: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, key, value</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       (key) &amp;&amp; <span class=\"keyword\">this</span>.setAttr($element, <span class=\"string\">'data-'</span> + key, value);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     getData: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, key</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> key ? <span class=\"keyword\">this</span>.getAttr($element, <span class=\"string\">'data-'</span> + key) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, className</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       <span class=\"keyword\">var</span> classes = $element.className.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!classes.includes(className)) &#123;</span><br><span class=\"line\">         classes.push(className);</span><br><span class=\"line\">         $element.className = classes.join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     removeClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, className</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       <span class=\"keyword\">var</span> classes = $element.className.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">       <span class=\"keyword\">var</span> index = classes.indexOf(className);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">         classes.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">         $element.className = classes.join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     empty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       $element.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, htmlStr</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       $element.innerHTML = htmlStr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"comment\">/* 根据宿主元素第一次计算横坐标和纵坐标 */</span></span><br><span class=\"line\">   renderX1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + r.width / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x - <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + r.width + <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottomleft'</span> || d === <span class=\"string\">'topleft'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottomright'</span> || d === <span class=\"string\">'topright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + r.width + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   renderY1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y - <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + r.height / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + r.height + <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottomleft'</span> || d === <span class=\"string\">'bottomright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + r.height + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'topleft'</span> || d === <span class=\"string\">'topright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"comment\">/* 根据生成的tootips元素宽高第二次计算横坐标和纵坐标 */</span></span><br><span class=\"line\">   renderX2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x - r.width / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'bottomleft'</span> || d === <span class=\"string\">'topleft'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x - r.width + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottomright'</span> || d === <span class=\"string\">'topright'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.x + r.widht + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   renderY2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'topleft'</span> || d === <span class=\"string\">'topright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y - r.height + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y - r.height / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottom'</span> || d === <span class=\"string\">'bottomleft'</span> || d === <span class=\"string\">'bottomright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"comment\">/* 使用函数去抖防止调用混乱 */</span></span><br><span class=\"line\">   actionDebounce: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">symbol, action, params</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       action(params);</span><br><span class=\"line\">       clearTimeout(timer);</span><br><span class=\"line\">       <span class=\"keyword\">delete</span> that.actions[symbol];</span><br><span class=\"line\">     &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!that.actions[symbol]) &#123;</span><br><span class=\"line\">       that.actions[symbol] = timer;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       clearTimeout(that.actions[symbol]);</span><br><span class=\"line\">       that.actions[symbol] = timer;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><h5 id=\"初始化一个元素\">初始化一个元素</h5><blockquote><p>对一个html元素进行初始化，在元素上绑定数据和设置事件监听器</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [renderHtml 使用html字符串进行初始化]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>htmlstr   [html字符串]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_$selector, _options</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $selector = utils.element.elementWrapper(_$selector),</span><br><span class=\"line\">      trigger = _options[<span class=\"string\">'trigger'</span>] ? _options[<span class=\"string\">'trigger'</span>] : <span class=\"string\">'mouseover'</span>, <span class=\"comment\">// click | hover</span></span><br><span class=\"line\">      $context = utils.element.elementWrapper(_options[<span class=\"string\">'context'</span>]),</span><br><span class=\"line\">      key = utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">   utils.element.setData($selector, <span class=\"string\">'tootip-target'</span>, _options.value)</span><br><span class=\"line\">     .setData($selector, <span class=\"string\">'tootip-type'</span>, _options.type)</span><br><span class=\"line\">     .setData($selector, <span class=\"string\">'tootip-options'</span>, _options)</span><br><span class=\"line\">     .setData($selector, <span class=\"string\">'tootip-trigger'</span>, _options.trigger)</span><br><span class=\"line\">     .setCss($selector, <span class=\"string\">'cursor'</span>, <span class=\"string\">'pointer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  (!key) &amp;&amp; eventListen($selector, trigger, $context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"根据传入属性创建tootips组件\">根据传入属性创建tootips组件</h5><ul><li>使用<code>getBoundingClientRect()</code>方法获取目标组件的位置和宽高</li><li>tootips组件根据获取的位置和宽高进行窗口定位(<code>position: fixed</code>)</li><li>根据传入的属性设置tootips组件的样式</li><li>返回一个dom元素</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [renderContainer 构造html]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>type   [渲染类型 -&gt; text | html]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>target   [渲染字符串]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContainer</span>(<span class=\"params\">$selector, tootipKey</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> type = utils.element.getData($selector, <span class=\"string\">'tootip-type'</span>),</span><br><span class=\"line\">      options = utils.element.getData($selector, <span class=\"string\">'tootip-options'</span>),</span><br><span class=\"line\">      trigger = utils.element.getData($selector, <span class=\"string\">'tootip-trigger'</span>),</span><br><span class=\"line\">      target = utils.element.getData($selector, <span class=\"string\">'tootip-target'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 提取属性</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> randomKey = <span class=\"string\">'_'</span> + <span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">36</span>).substr(<span class=\"number\">2</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> $wrapper = tootipKey ? utils.element.elementWrapper(<span class=\"string\">'div[tootip-key='</span>+tootipKey+<span class=\"string\">']'</span>) : <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> cssStyle = options.style || &#123;&#125;;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> styleSheet = options.css || <span class=\"string\">''</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> direction = options.direction || <span class=\"string\">'top'</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> triangleArray = [<span class=\"string\">'top'</span>, <span class=\"string\">'left'</span>, <span class=\"string\">'right'</span>,<span class=\"string\">'bottom'</span>];</span><br><span class=\"line\">   <span class=\"keyword\">var</span> triangleClass = <span class=\"string\">'triangle-'</span> +</span><br><span class=\"line\">     triangleArray[triangleArray.length - <span class=\"number\">1</span> - triangleArray.indexOf(direction)];</span><br><span class=\"line\">   <span class=\"keyword\">var</span> shadowClassMap = &#123;</span><br><span class=\"line\">     top: <span class=\"string\">'tootip-shadow-top-right'</span>,</span><br><span class=\"line\">     bottom: <span class=\"string\">'tootip-shadow-bottom-right'</span>,</span><br><span class=\"line\">     left: <span class=\"string\">'tootip-shadow-top-left'</span>,</span><br><span class=\"line\">     right: <span class=\"string\">'tootip-shadow-top-right'</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> rect = $selector.getBoundingClientRect();</span><br><span class=\"line\"></span><br><span class=\"line\">   utils.element.setCss($wrapper, <span class=\"string\">'border'</span>, <span class=\"string\">'solid 1px rgb(212, 212, 212)'</span>)</span><br><span class=\"line\">    .setCss($wrapper, <span class=\"string\">'position'</span>, <span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    .setCss($wrapper, <span class=\"string\">'left'</span>, utils.renderX1(rect, direction))</span><br><span class=\"line\">    .setCss($wrapper, <span class=\"string\">'top'</span>, utils.renderY1(rect, direction))</span><br><span class=\"line\">    .setAttr($wrapper, <span class=\"string\">'tootip-key'</span>, tootipKey || randomKey)</span><br><span class=\"line\">    .addClass($wrapper, triangleClass + <span class=\"string\">' abnormal-tips-container '</span> + shadowClassMap[direction] + <span class=\"string\">' '</span> + styleSheet);</span><br><span class=\"line\">    utils.element.setAttr($selector, <span class=\"string\">'tootip-key'</span>, tootipKey || randomKey);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 第一次创建dom结构</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!tootipKey &amp;&amp; trigger === <span class=\"string\">'mouseover'</span>) &#123;</span><br><span class=\"line\">     $wrapper.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       utils.actionDebounce(randomKey, hideTooTips, $selector);</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     $wrapper.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       utils.actionDebounce(randomKey, showTootips, $selector);</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">Object</span>.keys(cssStyle).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">     utils.element.setCss($wrapper, attr, cssStyle[attr]);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   utils.element.html($wrapper, type === <span class=\"string\">'html'</span> ? target : (<span class=\"string\">'&lt;span&gt;'</span> + target +<span class=\"string\">'&lt;/span&gt;'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> $wrapper;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure><h5 id=\"绑定事件监听器\">绑定事件监听器</h5><blockquote><p>对一个元素进行初始化后需要给tooltips组件绑定监听器(<code>click</code>或<code>mouse</code>事件)，让tootips组件能够响应鼠标的点击或是划过</p></blockquote><p>注意<code>utils.actionDebounce</code>方法运用了函数去抖的思想，防止在短时间内高频触发Tootip显示/隐藏时发生的调用混乱问题，多次调用时只响应最新的触发事件。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [eventListen 进行事件监听]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>trigger [触发事件监听类型]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListen</span>(<span class=\"params\">$selector, _trigger, $context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> trigger = (_trigger <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) ? _trigger : [_trigger];</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// click事件监听</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(trigger.includes(<span class=\"string\">'click'</span>)) &#123;</span><br><span class=\"line\">     ($context || $selector)</span><br><span class=\"line\">       .onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!utils.element.getData($selector, <span class=\"string\">'isActivated'</span>)) &#123;</span><br><span class=\"line\">           utils.actionDebounce(utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>), showTootips, $selector);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           utils.actionDebounce(utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>), hideTooTips, $selector);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 鼠标事件监听</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(trigger.includes(<span class=\"string\">'mouseover'</span>)) &#123;</span><br><span class=\"line\">     ($context || $selector)</span><br><span class=\"line\">       .onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         utils.actionDebounce(utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>), hideTooTips, $selector);</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">     ($context || $selector)</span><br><span class=\"line\">       .onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         utils.actionDebounce(utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>), showTootips, $selector);</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><ul><li>实现showTootips方法<br>在tootips组件中可以自定义显示html内容或text内容，tootips组件被添加到页面之前，tootips组件的宽度和高度是不可获取的，所以在show方法中需要对tootips元素进行二次定位，同样使用<code>getBoundingClientRect()</code>方法获取tootips元素坐标和宽高。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [showTootips 操作页面属性显示一个元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>tootipKey [可能已经生成过一次tooptips组件了]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTootips</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (utils.element.getData($selector, <span class=\"string\">'isActivated'</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> tootipKey = utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> $dom = renderContainer($selector, tootipKey);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!tootipKey) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.body.appendChild($dom);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    utils.element.removeClass($dom, <span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   utils.element.setData($selector, <span class=\"string\">'isActivated'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> options = utils.element.getData($selector, <span class=\"string\">'tootip-options'</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> rect = $dom.getBoundingClientRect();</span><br><span class=\"line\"></span><br><span class=\"line\">   utils.element</span><br><span class=\"line\">     .setCss($dom, <span class=\"string\">'top'</span>, utils.renderY2(rect, options.direction))</span><br><span class=\"line\">     .setCss($dom, <span class=\"string\">'left'</span>, utils.renderX2(rect, options.direction));</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure><ul><li>实现hideTootips方法<br>hide方法的作用是将当前元素对应的tootips组件从页面移出，之前初始化的时候在目标元素和生成的tootips元素上设置了同一个<code>key</code>属性，现在可以根据<code>key</code>来移除每个目标元素对应的tootips元素。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [hideTooTips 操作页面属性隐藏一个元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hideTooTips</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> key = utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> $element = utils.element.elementWrapper(<span class=\"string\">'div[tootip-key='</span>+key+<span class=\"string\">']'</span>);</span><br><span class=\"line\">   utils.element.addClass($element, <span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">   utils.element.setData($selector, <span class=\"string\">'isActivated'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure><h5 id=\"使用方式\">使用方式</h5><blockquote><p>设置tootips方向、显示内容字符串(可以是html字符串)、触发方式(click / mouseover)、自定义css属性、自定义样式表。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tootips.init((<span class=\"string\">'#t1'</span>), &#123;</span><br><span class=\"line\">  trigger: <span class=\"string\">'mouseover'</span>, <span class=\"comment\">// 触发方式</span></span><br><span class=\"line\">  type: <span class=\"string\">'html'</span>, <span class=\"comment\">// 内容显示类型</span></span><br><span class=\"line\">  value: <span class=\"string\">'&lt;h3&gt;header&lt;/h3&gt;&lt;p&gt;body&lt;/p&gt;'</span>, <span class=\"comment\">// 内容显示值</span></span><br><span class=\"line\">  direction: <span class=\"string\">'top'</span>, <span class=\"comment\">// 显示方向</span></span><br><span class=\"line\">  style: &#123; <span class=\"comment\">// tootips组件自定义样式</span></span><br><span class=\"line\">    <span class=\"string\">'font-size'</span>: <span class=\"string\">'1rem'</span>,</span><br><span class=\"line\">    <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">    <span class=\"string\">'min-width'</span>: <span class=\"string\">'5rem'</span>,</span><br><span class=\"line\">    <span class=\"string\">'padding'</span>: <span class=\"string\">'5px 10px'</span>,</span><br><span class=\"line\">    <span class=\"string\">'border-radius'</span>: <span class=\"string\">'5px'</span>,</span><br><span class=\"line\">    <span class=\"string\">'background-color'</span>: <span class=\"string\">'white'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  css: <span class=\"string\">''</span>, <span class=\"comment\">// tootips组件自定义样式表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"总结\">总结</h4><hr><ul><li>tootips组件的坐标完全使用javasript来获取和设置</li><li>tootips组件的定位类型为<code>position: fixed</code>，不受页面布局影响</li><li><code>getBoundingClientRect()</code>方法可以获取目标元素的坐标、宽高等数据</li><li>tootips组件支持传入自定义样式</li><li>tootips组件支持显示含有html标签的字符串和普通字符串</li><li>tootips组件支持设置触发方式(<code>click</code> / <code>mouseover</code>)</li></ul><h5 id=\"感谢阅读\">感谢阅读</h5>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"前言\">前言</h4><blockquote><p>最近做的一个jQuery老项目经常会用tootips组件在一个html元素周围显示提示信息，虽然有现成的组件可以使用，但是很多tootips组件处理起来并不灵活，不能够自定义tootips样式和显示的内容及布局等等，而且tootips组件本身的样式可能会被目标组件的样式影响，所以想自己实现一个tootips组件：可以自定义显示内容，并且tootips的位置和布局完全不受页面元素影响。</p></blockquote><p><img src=\"tootip.png\" alt=\"tootip.png\"></p><h4 id=\"预览图\">预览图</h4><hr><p><a href=\"https://github.com/nojsja/javascript-learning/tree/master/code-challenge/es5-component/js-tooltips\" target=\"_blank\" rel=\"noopener\">=&gt; 源代码</a></p><p><img src=\"tootips.gif\" alt=\"animation.gif\"></p><h4 id=\"代码实现\">代码实现</h4><hr><h5 id=\"组件结构\">组件结构</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">var</span> Tootips = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 工具函数 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> utils = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [renderContainer 构造html]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>type   [渲染类型 -&gt; text | html]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>target   [渲染字符串]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContainer</span>(<span class=\"params\">$selector, tootipKey</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [showTootips 操作页面属性显示一个元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>tootipKey [可能已经生成过一次tooptips组件了]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTootips</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [hideTooTips 操作页面属性隐藏一个元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hideTooTips</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [eventListen 进行事件监听]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>trigger [触发事件监听类型]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListen</span>(<span class=\"params\">$selector, _trigger, $context</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [renderHtml 使用html字符串进行初始化]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>htmlstr   [html字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_$selector, _options</span>) </span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">   init: init,</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [trigger 手动触发元素的显示和隐藏]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">   trigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!utils.element.getData($selector, <span class=\"string\">'isActivated'</span>)) &#123;</span><br><span class=\"line\">      showTootips($selector, utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      hideTooTips($selector);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [getStatus 获取某个元素的状态]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">   status: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      isActivated: utils.element.getData($selector, <span class=\"string\">'isActivated'</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">      isInited: utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>) ? <span class=\"literal\">true</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">      key: utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>) || <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><h4 id=\"工具函数封装\">工具函数封装</h4><blockquote><p>主要用于简化dom操作，实现了一些类似jQuery的API；还封装了用于计算元素坐标的纯函数</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> utils = &#123;</span><br><span class=\"line\">    actions: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// [symbol]: [Timer]</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    element: &#123;</span><br><span class=\"line\">     jsonWrapper: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">var</span> jsonParseRule = <span class=\"regexp\">/^\\&#123;\"([\\w\\W])+\\&#125;$/</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (jsonParseRule.test(target)) <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(target);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> target === <span class=\"string\">'object'</span> &amp;&amp; target !== <span class=\"literal\">null</span>) ?</span><br><span class=\"line\">         <span class=\"built_in\">JSON</span>.stringify(target) :</span><br><span class=\"line\">         target;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     elementWrapper: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> $element === <span class=\"string\">'object'</span>) ? $element : <span class=\"built_in\">document</span>.querySelector($element);</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     setAttr: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, key, value</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       (key) &amp;&amp; $element.setAttribute(key, <span class=\"keyword\">this</span>.jsonWrapper(value));</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     setCss: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, styleKey, styleValue, important</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       $element.style.setProperty(styleKey, styleValue, important === <span class=\"string\">'important'</span> ? important : <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     getAttr: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, key</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (key) ? <span class=\"keyword\">this</span>.jsonWrapper($element.getAttribute(key)) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     setData: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, key, value</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       (key) &amp;&amp; <span class=\"keyword\">this</span>.setAttr($element, <span class=\"string\">'data-'</span> + key, value);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     getData: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, key</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> key ? <span class=\"keyword\">this</span>.getAttr($element, <span class=\"string\">'data-'</span> + key) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     addClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, className</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       <span class=\"keyword\">var</span> classes = $element.className.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!classes.includes(className)) &#123;</span><br><span class=\"line\">         classes.push(className);</span><br><span class=\"line\">         $element.className = classes.join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     removeClass: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, className</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       <span class=\"keyword\">var</span> classes = $element.className.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">       <span class=\"keyword\">var</span> index = classes.indexOf(className);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">         classes.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">         $element.className = classes.join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     empty: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       $element.innerHTML = <span class=\"string\">''</span>;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     html: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$element, htmlStr</span>) </span>&#123;</span><br><span class=\"line\">       $element = <span class=\"keyword\">this</span>.elementWrapper($element);</span><br><span class=\"line\">       $element.innerHTML = htmlStr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">   <span class=\"comment\">/* 根据宿主元素第一次计算横坐标和纵坐标 */</span></span><br><span class=\"line\">   renderX1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + r.width / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x - <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + r.width + <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottomleft'</span> || d === <span class=\"string\">'topleft'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottomright'</span> || d === <span class=\"string\">'topright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + r.width + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   renderY1: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y - <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + r.height / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + r.height + <span class=\"number\">6</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottomleft'</span> || d === <span class=\"string\">'bottomright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + r.height + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'topleft'</span> || d === <span class=\"string\">'topright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"comment\">/* 根据生成的tootips元素宽高第二次计算横坐标和纵坐标 */</span></span><br><span class=\"line\">   renderX2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'bottom'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x - r.width / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'bottomleft'</span> || d === <span class=\"string\">'topleft'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x - r.width + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.x + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottomright'</span> || d === <span class=\"string\">'topright'</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (r.x + r.widht + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   renderY2: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">r, d</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'top'</span> || d === <span class=\"string\">'topleft'</span> || d === <span class=\"string\">'topright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y - r.height + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'left'</span> || d === <span class=\"string\">'right'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y - r.height / <span class=\"number\">2</span> + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (d === <span class=\"string\">'bottom'</span> || d === <span class=\"string\">'bottomleft'</span> || d === <span class=\"string\">'bottomright'</span>)</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (r.y + <span class=\"string\">'px'</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"comment\">/* 使用函数去抖防止调用混乱 */</span></span><br><span class=\"line\">   actionDebounce: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">symbol, action, params</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       action(params);</span><br><span class=\"line\">       clearTimeout(timer);</span><br><span class=\"line\">       <span class=\"keyword\">delete</span> that.actions[symbol];</span><br><span class=\"line\">     &#125;, <span class=\"number\">300</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!that.actions[symbol]) &#123;</span><br><span class=\"line\">       that.actions[symbol] = timer;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       clearTimeout(that.actions[symbol]);</span><br><span class=\"line\">       that.actions[symbol] = timer;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><h5 id=\"初始化一个元素\">初始化一个元素</h5><blockquote><p>对一个html元素进行初始化，在元素上绑定数据和设置事件监听器</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [renderHtml 使用html字符串进行初始化]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>htmlstr   [html字符串]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\">_$selector, _options</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $selector = utils.element.elementWrapper(_$selector),</span><br><span class=\"line\">      trigger = _options[<span class=\"string\">'trigger'</span>] ? _options[<span class=\"string\">'trigger'</span>] : <span class=\"string\">'mouseover'</span>, <span class=\"comment\">// click | hover</span></span><br><span class=\"line\">      $context = utils.element.elementWrapper(_options[<span class=\"string\">'context'</span>]),</span><br><span class=\"line\">      key = utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>);</span><br><span class=\"line\">   </span><br><span class=\"line\">   utils.element.setData($selector, <span class=\"string\">'tootip-target'</span>, _options.value)</span><br><span class=\"line\">     .setData($selector, <span class=\"string\">'tootip-type'</span>, _options.type)</span><br><span class=\"line\">     .setData($selector, <span class=\"string\">'tootip-options'</span>, _options)</span><br><span class=\"line\">     .setData($selector, <span class=\"string\">'tootip-trigger'</span>, _options.trigger)</span><br><span class=\"line\">     .setCss($selector, <span class=\"string\">'cursor'</span>, <span class=\"string\">'pointer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  (!key) &amp;&amp; eventListen($selector, trigger, $context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"根据传入属性创建tootips组件\">根据传入属性创建tootips组件</h5><ul><li>使用<code>getBoundingClientRect()</code>方法获取目标组件的位置和宽高</li><li>tootips组件根据获取的位置和宽高进行窗口定位(<code>position: fixed</code>)</li><li>根据传入的属性设置tootips组件的样式</li><li>返回一个dom元素</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [renderContainer 构造html]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>options   [自定义参数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>type   [渲染类型 -&gt; text | html]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>target   [渲染字符串]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderContainer</span>(<span class=\"params\">$selector, tootipKey</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> type = utils.element.getData($selector, <span class=\"string\">'tootip-type'</span>),</span><br><span class=\"line\">      options = utils.element.getData($selector, <span class=\"string\">'tootip-options'</span>),</span><br><span class=\"line\">      trigger = utils.element.getData($selector, <span class=\"string\">'tootip-trigger'</span>),</span><br><span class=\"line\">      target = utils.element.getData($selector, <span class=\"string\">'tootip-target'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 提取属性</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> randomKey = <span class=\"string\">'_'</span> + <span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">36</span>).substr(<span class=\"number\">2</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> $wrapper = tootipKey ? utils.element.elementWrapper(<span class=\"string\">'div[tootip-key='</span>+tootipKey+<span class=\"string\">']'</span>) : <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> cssStyle = options.style || &#123;&#125;;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> styleSheet = options.css || <span class=\"string\">''</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> direction = options.direction || <span class=\"string\">'top'</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> triangleArray = [<span class=\"string\">'top'</span>, <span class=\"string\">'left'</span>, <span class=\"string\">'right'</span>,<span class=\"string\">'bottom'</span>];</span><br><span class=\"line\">   <span class=\"keyword\">var</span> triangleClass = <span class=\"string\">'triangle-'</span> +</span><br><span class=\"line\">     triangleArray[triangleArray.length - <span class=\"number\">1</span> - triangleArray.indexOf(direction)];</span><br><span class=\"line\">   <span class=\"keyword\">var</span> shadowClassMap = &#123;</span><br><span class=\"line\">     top: <span class=\"string\">'tootip-shadow-top-right'</span>,</span><br><span class=\"line\">     bottom: <span class=\"string\">'tootip-shadow-bottom-right'</span>,</span><br><span class=\"line\">     left: <span class=\"string\">'tootip-shadow-top-left'</span>,</span><br><span class=\"line\">     right: <span class=\"string\">'tootip-shadow-top-right'</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> rect = $selector.getBoundingClientRect();</span><br><span class=\"line\"></span><br><span class=\"line\">   utils.element.setCss($wrapper, <span class=\"string\">'border'</span>, <span class=\"string\">'solid 1px rgb(212, 212, 212)'</span>)</span><br><span class=\"line\">    .setCss($wrapper, <span class=\"string\">'position'</span>, <span class=\"string\">'fixed'</span>)</span><br><span class=\"line\">    .setCss($wrapper, <span class=\"string\">'left'</span>, utils.renderX1(rect, direction))</span><br><span class=\"line\">    .setCss($wrapper, <span class=\"string\">'top'</span>, utils.renderY1(rect, direction))</span><br><span class=\"line\">    .setAttr($wrapper, <span class=\"string\">'tootip-key'</span>, tootipKey || randomKey)</span><br><span class=\"line\">    .addClass($wrapper, triangleClass + <span class=\"string\">' abnormal-tips-container '</span> + shadowClassMap[direction] + <span class=\"string\">' '</span> + styleSheet);</span><br><span class=\"line\">    utils.element.setAttr($selector, <span class=\"string\">'tootip-key'</span>, tootipKey || randomKey);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 第一次创建dom结构</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!tootipKey &amp;&amp; trigger === <span class=\"string\">'mouseover'</span>) &#123;</span><br><span class=\"line\">     $wrapper.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       utils.actionDebounce(randomKey, hideTooTips, $selector);</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">     $wrapper.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       utils.actionDebounce(randomKey, showTootips, $selector);</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">Object</span>.keys(cssStyle).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">     utils.element.setCss($wrapper, attr, cssStyle[attr]);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   utils.element.html($wrapper, type === <span class=\"string\">'html'</span> ? target : (<span class=\"string\">'&lt;span&gt;'</span> + target +<span class=\"string\">'&lt;/span&gt;'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> $wrapper;</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure><h5 id=\"绑定事件监听器\">绑定事件监听器</h5><blockquote><p>对一个元素进行初始化后需要给tooltips组件绑定监听器(<code>click</code>或<code>mouse</code>事件)，让tootips组件能够响应鼠标的点击或是划过</p></blockquote><p>注意<code>utils.actionDebounce</code>方法运用了函数去抖的思想，防止在短时间内高频触发Tootip显示/隐藏时发生的调用混乱问题，多次调用时只响应最新的触发事件。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [eventListen 进行事件监听]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>trigger [触发事件监听类型]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventListen</span>(<span class=\"params\">$selector, _trigger, $context</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> trigger = (_trigger <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) ? _trigger : [_trigger];</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// click事件监听</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(trigger.includes(<span class=\"string\">'click'</span>)) &#123;</span><br><span class=\"line\">     ($context || $selector)</span><br><span class=\"line\">       .onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (!utils.element.getData($selector, <span class=\"string\">'isActivated'</span>)) &#123;</span><br><span class=\"line\">           utils.actionDebounce(utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>), showTootips, $selector);</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           utils.actionDebounce(utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>), hideTooTips, $selector);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 鼠标事件监听</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(trigger.includes(<span class=\"string\">'mouseover'</span>)) &#123;</span><br><span class=\"line\">     ($context || $selector)</span><br><span class=\"line\">       .onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         utils.actionDebounce(utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>), hideTooTips, $selector);</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">     ($context || $selector)</span><br><span class=\"line\">       .onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">         utils.actionDebounce(utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>), showTootips, $selector);</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><ul><li>实现showTootips方法<br>在tootips组件中可以自定义显示html内容或text内容，tootips组件被添加到页面之前，tootips组件的宽度和高度是不可获取的，所以在show方法中需要对tootips元素进行二次定位，同样使用<code>getBoundingClientRect()</code>方法获取tootips元素坐标和宽高。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [showTootips 操作页面属性显示一个元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>tootipKey [可能已经生成过一次tooptips组件了]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTootips</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (utils.element.getData($selector, <span class=\"string\">'isActivated'</span>)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> tootipKey = utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> $dom = renderContainer($selector, tootipKey);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!tootipKey) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">document</span>.body.appendChild($dom);</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    utils.element.removeClass($dom, <span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   utils.element.setData($selector, <span class=\"string\">'isActivated'</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> options = utils.element.getData($selector, <span class=\"string\">'tootip-options'</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> rect = $dom.getBoundingClientRect();</span><br><span class=\"line\"></span><br><span class=\"line\">   utils.element</span><br><span class=\"line\">     .setCss($dom, <span class=\"string\">'top'</span>, utils.renderY2(rect, options.direction))</span><br><span class=\"line\">     .setCss($dom, <span class=\"string\">'left'</span>, utils.renderX2(rect, options.direction));</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure><ul><li>实现hideTootips方法<br>hide方法的作用是将当前元素对应的tootips组件从页面移出，之前初始化的时候在目标元素和生成的tootips元素上设置了同一个<code>key</code>属性，现在可以根据<code>key</code>来移除每个目标元素对应的tootips元素。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [hideTooTips 操作页面属性隐藏一个元素]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[$Object]&#125;</span> </span>$selector [一个页面元素]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hideTooTips</span>(<span class=\"params\">$selector</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> key = utils.element.getAttr($selector, <span class=\"string\">'tootip-key'</span>);</span><br><span class=\"line\">   <span class=\"keyword\">var</span> $element = utils.element.elementWrapper(<span class=\"string\">'div[tootip-key='</span>+key+<span class=\"string\">']'</span>);</span><br><span class=\"line\">   utils.element.addClass($element, <span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">   utils.element.setData($selector, <span class=\"string\">'isActivated'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"> &#125;;</span><br></pre></td></tr></table></figure><h5 id=\"使用方式\">使用方式</h5><blockquote><p>设置tootips方向、显示内容字符串(可以是html字符串)、触发方式(click / mouseover)、自定义css属性、自定义样式表。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tootips.init((<span class=\"string\">'#t1'</span>), &#123;</span><br><span class=\"line\">  trigger: <span class=\"string\">'mouseover'</span>, <span class=\"comment\">// 触发方式</span></span><br><span class=\"line\">  type: <span class=\"string\">'html'</span>, <span class=\"comment\">// 内容显示类型</span></span><br><span class=\"line\">  value: <span class=\"string\">'&lt;h3&gt;header&lt;/h3&gt;&lt;p&gt;body&lt;/p&gt;'</span>, <span class=\"comment\">// 内容显示值</span></span><br><span class=\"line\">  direction: <span class=\"string\">'top'</span>, <span class=\"comment\">// 显示方向</span></span><br><span class=\"line\">  style: &#123; <span class=\"comment\">// tootips组件自定义样式</span></span><br><span class=\"line\">    <span class=\"string\">'font-size'</span>: <span class=\"string\">'1rem'</span>,</span><br><span class=\"line\">    <span class=\"string\">'color'</span>: <span class=\"string\">'red'</span>,</span><br><span class=\"line\">    <span class=\"string\">'min-width'</span>: <span class=\"string\">'5rem'</span>,</span><br><span class=\"line\">    <span class=\"string\">'padding'</span>: <span class=\"string\">'5px 10px'</span>,</span><br><span class=\"line\">    <span class=\"string\">'border-radius'</span>: <span class=\"string\">'5px'</span>,</span><br><span class=\"line\">    <span class=\"string\">'background-color'</span>: <span class=\"string\">'white'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  css: <span class=\"string\">''</span>, <span class=\"comment\">// tootips组件自定义样式表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"总结\">总结</h4><hr><ul><li>tootips组件的坐标完全使用javasript来获取和设置</li><li>tootips组件的定位类型为<code>position: fixed</code>，不受页面布局影响</li><li><code>getBoundingClientRect()</code>方法可以获取目标元素的坐标、宽高等数据</li><li>tootips组件支持传入自定义样式</li><li>tootips组件支持显示含有html标签的字符串和普通字符串</li><li>tootips组件支持设置触发方式(<code>click</code> / <code>mouseover</code>)</li></ul><h5 id=\"感谢阅读\">感谢阅读</h5>"},{"title":"proxychains终端代理","catalog":true,"toc_nav_num":true,"date":"2019-04-04T08:30:35.000Z","subtitle":"proxy linux","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-04-04T08:30:35.000Z","_content":"\n### proxychains安装  \n\n`sudo apt install proxychains`\n\n### 编辑proxychains配置  \n\n`vim /etc/proxychains.conf`\n\n### 将socks4 127.0.0.1 9095改为  \n\n`socks5 127.0.0.1 1080`\n\nps: 默认的socks4 127.0.0.1 9095是tor代理，而socks5 127.0.0.1 1080是shadowsocks的代理，proxychains.conf文件说明了代理配置格式,如下,这里根据自己使用的代理来配置就行了。  \n\n```bash\nProxyList format\n 94 #       type  ip  port  [user pass]\n 95 #       (values separated by 'tab' or 'blank')\n 96 #\n 97 #       only numeric ipv4 addresses are valid\n 98 #\n 99 #\n100 #        Examples:\n101 #\n102 #       socks5  192.168.67.78   1080    lamer   secret\n103 #       http    192.168.89.3    8080    justu   hidden\n104 #       socks4  192.168.1.49    1080\n105 #       http    192.168.39.93   8080\n```\n\n### 使用方法  \n在需要代理的命令前加上 proxychains ，如：\n```bash\nproxychains wget http://xxx.com/xxx.zip\nproxychains git clone https://xxxxxxxxx.git\n```\nnpm设置http代理：\n```bash\n# 假设本地代理端口为8002\nnpm config set proxy http://127.0.0.1:1081\nnpm config set https-proxy http://127.0.0.1:1081\n\n# 有用户密码的代理\nnpm config set proxy http://username:password@127.0.0.1:1081\nnpm confit set https-proxy http://username:password@127.0.0.1:1081\n```\nnpm设置socks5代理：\n```bash\n# 假设本地socks5代理端口为1081\n# 首先安装转换工具\nnpm install -g http-proxy-to-socks\n# 然后使用这个工具监听8002端口,支持http代理，然后所有8002的http代理数据都将转换成socks的代理数据发送到1081上\nhpts -s 127.0.0.1:1081 -p 8002\n# 最后设置npm代理为8080\nnpm config set proxy http://127.0.0.1:8002\nnpm config set https-proxy http://127.0.0.1:8002\n```\n\n查看删除代理\n```bash\nnpm config get\n  or\nnpm config list\n\nnpm config delete proxy\n  and\nnpm config delete https-proxy\n```","source":"_posts/2019-04-04-proxychains终端代理.md","raw":"---\ntitle: \"proxychains终端代理\"\ncatalog: true\ntoc_nav_num: true\ndate:   2019-04-04 16:30:35\nsubtitle: \"proxy linux\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- proxy\n- shadowsocks\ncategories:\n- Linux\nupdateDate: 2019-04-04 16:30:35\n---\n\n### proxychains安装  \n\n`sudo apt install proxychains`\n\n### 编辑proxychains配置  \n\n`vim /etc/proxychains.conf`\n\n### 将socks4 127.0.0.1 9095改为  \n\n`socks5 127.0.0.1 1080`\n\nps: 默认的socks4 127.0.0.1 9095是tor代理，而socks5 127.0.0.1 1080是shadowsocks的代理，proxychains.conf文件说明了代理配置格式,如下,这里根据自己使用的代理来配置就行了。  \n\n```bash\nProxyList format\n 94 #       type  ip  port  [user pass]\n 95 #       (values separated by 'tab' or 'blank')\n 96 #\n 97 #       only numeric ipv4 addresses are valid\n 98 #\n 99 #\n100 #        Examples:\n101 #\n102 #       socks5  192.168.67.78   1080    lamer   secret\n103 #       http    192.168.89.3    8080    justu   hidden\n104 #       socks4  192.168.1.49    1080\n105 #       http    192.168.39.93   8080\n```\n\n### 使用方法  \n在需要代理的命令前加上 proxychains ，如：\n```bash\nproxychains wget http://xxx.com/xxx.zip\nproxychains git clone https://xxxxxxxxx.git\n```\nnpm设置http代理：\n```bash\n# 假设本地代理端口为8002\nnpm config set proxy http://127.0.0.1:1081\nnpm config set https-proxy http://127.0.0.1:1081\n\n# 有用户密码的代理\nnpm config set proxy http://username:password@127.0.0.1:1081\nnpm confit set https-proxy http://username:password@127.0.0.1:1081\n```\nnpm设置socks5代理：\n```bash\n# 假设本地socks5代理端口为1081\n# 首先安装转换工具\nnpm install -g http-proxy-to-socks\n# 然后使用这个工具监听8002端口,支持http代理，然后所有8002的http代理数据都将转换成socks的代理数据发送到1081上\nhpts -s 127.0.0.1:1081 -p 8002\n# 最后设置npm代理为8080\nnpm config set proxy http://127.0.0.1:8002\nnpm config set https-proxy http://127.0.0.1:8002\n```\n\n查看删除代理\n```bash\nnpm config get\n  or\nnpm config list\n\nnpm config delete proxy\n  and\nnpm config delete https-proxy\n```","slug":"proxychains终端代理","published":1,"updated":"2020-12-06T10:52:13.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuqp000jkl95hpapgy3c","content":"<h3 id=\"proxychains安装\">proxychains安装</h3><p><code>sudo apt install proxychains</code></p><h3 id=\"编辑proxychains配置\">编辑proxychains配置</h3><p><code>vim /etc/proxychains.conf</code></p><h3 id=\"将socks4-127-0-0-1-9095改为\">将socks4 127.0.0.1 9095改为</h3><p><code>socks5 127.0.0.1 1080</code></p><p>ps: 默认的socks4 127.0.0.1 9095是tor代理，而socks5 127.0.0.1 1080是shadowsocks的代理，proxychains.conf文件说明了代理配置格式,如下,这里根据自己使用的代理来配置就行了。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProxyList format</span><br><span class=\"line\"> 94 <span class=\"comment\">#       type  ip  port  [user pass]</span></span><br><span class=\"line\"> 95 <span class=\"comment\">#       (values separated by 'tab' or 'blank')</span></span><br><span class=\"line\"> 96 <span class=\"comment\">#</span></span><br><span class=\"line\"> 97 <span class=\"comment\">#       only numeric ipv4 addresses are valid</span></span><br><span class=\"line\"> 98 <span class=\"comment\">#</span></span><br><span class=\"line\"> 99 <span class=\"comment\">#</span></span><br><span class=\"line\">100 <span class=\"comment\">#        Examples:</span></span><br><span class=\"line\">101 <span class=\"comment\">#</span></span><br><span class=\"line\">102 <span class=\"comment\">#       socks5  192.168.67.78   1080    lamer   secret</span></span><br><span class=\"line\">103 <span class=\"comment\">#       http    192.168.89.3    8080    justu   hidden</span></span><br><span class=\"line\">104 <span class=\"comment\">#       socks4  192.168.1.49    1080</span></span><br><span class=\"line\">105 <span class=\"comment\">#       http    192.168.39.93   8080</span></span><br></pre></td></tr></table></figure><h3 id=\"使用方法\">使用方法</h3><p>在需要代理的命令前加上 proxychains ，如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains wget http://xxx.com/xxx.zip</span><br><span class=\"line\">proxychains git <span class=\"built_in\">clone</span> https://xxxxxxxxx.git</span><br></pre></td></tr></table></figure><p>npm设置http代理：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设本地代理端口为8002</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:1081</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:1081</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有用户密码的代理</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://username:password@127.0.0.1:1081</span><br><span class=\"line\">npm confit <span class=\"built_in\">set</span> https-proxy http://username:password@127.0.0.1:1081</span><br></pre></td></tr></table></figure><p>npm设置socks5代理：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设本地socks5代理端口为1081</span></span><br><span class=\"line\"><span class=\"comment\"># 首先安装转换工具</span></span><br><span class=\"line\">npm install -g http-proxy-to-socks</span><br><span class=\"line\"><span class=\"comment\"># 然后使用这个工具监听8002端口,支持http代理，然后所有8002的http代理数据都将转换成socks的代理数据发送到1081上</span></span><br><span class=\"line\">hpts -s 127.0.0.1:1081 -p 8002</span><br><span class=\"line\"><span class=\"comment\"># 最后设置npm代理为8080</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:8002</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:8002</span><br></pre></td></tr></table></figure><p>查看删除代理</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get</span><br><span class=\"line\">  or</span><br><span class=\"line\">npm config list</span><br><span class=\"line\"></span><br><span class=\"line\">npm config delete proxy</span><br><span class=\"line\">  and</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"proxychains安装\">proxychains安装</h3><p><code>sudo apt install proxychains</code></p><h3 id=\"编辑proxychains配置\">编辑proxychains配置</h3><p><code>vim /etc/proxychains.conf</code></p><h3 id=\"将socks4-127-0-0-1-9095改为\">将socks4 127.0.0.1 9095改为</h3><p><code>socks5 127.0.0.1 1080</code></p><p>ps: 默认的socks4 127.0.0.1 9095是tor代理，而socks5 127.0.0.1 1080是shadowsocks的代理，proxychains.conf文件说明了代理配置格式,如下,这里根据自己使用的代理来配置就行了。</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProxyList format</span><br><span class=\"line\"> 94 <span class=\"comment\">#       type  ip  port  [user pass]</span></span><br><span class=\"line\"> 95 <span class=\"comment\">#       (values separated by 'tab' or 'blank')</span></span><br><span class=\"line\"> 96 <span class=\"comment\">#</span></span><br><span class=\"line\"> 97 <span class=\"comment\">#       only numeric ipv4 addresses are valid</span></span><br><span class=\"line\"> 98 <span class=\"comment\">#</span></span><br><span class=\"line\"> 99 <span class=\"comment\">#</span></span><br><span class=\"line\">100 <span class=\"comment\">#        Examples:</span></span><br><span class=\"line\">101 <span class=\"comment\">#</span></span><br><span class=\"line\">102 <span class=\"comment\">#       socks5  192.168.67.78   1080    lamer   secret</span></span><br><span class=\"line\">103 <span class=\"comment\">#       http    192.168.89.3    8080    justu   hidden</span></span><br><span class=\"line\">104 <span class=\"comment\">#       socks4  192.168.1.49    1080</span></span><br><span class=\"line\">105 <span class=\"comment\">#       http    192.168.39.93   8080</span></span><br></pre></td></tr></table></figure><h3 id=\"使用方法\">使用方法</h3><p>在需要代理的命令前加上 proxychains ，如：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxychains wget http://xxx.com/xxx.zip</span><br><span class=\"line\">proxychains git <span class=\"built_in\">clone</span> https://xxxxxxxxx.git</span><br></pre></td></tr></table></figure><p>npm设置http代理：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设本地代理端口为8002</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:1081</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:1081</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有用户密码的代理</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://username:password@127.0.0.1:1081</span><br><span class=\"line\">npm confit <span class=\"built_in\">set</span> https-proxy http://username:password@127.0.0.1:1081</span><br></pre></td></tr></table></figure><p>npm设置socks5代理：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 假设本地socks5代理端口为1081</span></span><br><span class=\"line\"><span class=\"comment\"># 首先安装转换工具</span></span><br><span class=\"line\">npm install -g http-proxy-to-socks</span><br><span class=\"line\"><span class=\"comment\"># 然后使用这个工具监听8002端口,支持http代理，然后所有8002的http代理数据都将转换成socks的代理数据发送到1081上</span></span><br><span class=\"line\">hpts -s 127.0.0.1:1081 -p 8002</span><br><span class=\"line\"><span class=\"comment\"># 最后设置npm代理为8080</span></span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> proxy http://127.0.0.1:8002</span><br><span class=\"line\">npm config <span class=\"built_in\">set</span> https-proxy http://127.0.0.1:8002</span><br></pre></td></tr></table></figure><p>查看删除代理</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config get</span><br><span class=\"line\">  or</span><br><span class=\"line\">npm config list</span><br><span class=\"line\"></span><br><span class=\"line\">npm config delete proxy</span><br><span class=\"line\">  and</span><br><span class=\"line\">npm config delete https-proxy</span><br></pre></td></tr></table></figure>"},{"title":"联想y7000安装ubuntu18.04显卡驱动解决方案","catalog":true,"toc_nav_num":true,"date":"2019-09-29T02:49:00.000Z","subtitle":"y7000 ubuntu18.04","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-09-29T02:49:00.000Z","_content":"\n\n![Desktop](Desktop3.png)\n![Desktop](Desktop2.png)\n![Desktop](Desktop.png)\n\n### 目录\n\n1. 笔记本配置和操作系统版本\n\n2. 安装Ubuntu18.04-3后出现的异常\n\n3. 解决方案\n\n### 笔记本配置\n\n* CPU : Intel® Core™ i5-8300H CPU @ 2.30GHz × 8\n\n* GPU: Nvidia GeForce GTX 1050 Ti/PCIe/SSE2 和 Intel 集显\n\n* 操作系统: Ubuntu 18.04.3 bionic\n\n* 内核版本: Linux 5.0.0-27-generic\n\n* 内存: 16G\n\n* 分区:  GPT磁盘分区 + UEFI引导方案 ，创建`efi`系统分区和`/`根分区\n\n### 安装Ubuntu18.04-3后出现的异常\n\n* 开机卡死或登录卡死\n\n* 登录后不能检测到无线网卡\n\n* 屏幕亮度不可调节\n\n* HDMI外接屏幕不可用\n\n### 解决方案\n\n卡死的原因基本都是显卡驱动的原因，集成显卡勉强能用，但是不支持外接屏幕和亮度调节，屏幕滚动的时候也会\n出现画面撕裂的情况，属于不能忍受的情况，当开机卡死的时候我们需要先强制让Ubuntu使用集成显卡，然后才能\n进入系统，进入系统之后再禁用系统自带的Nvidia驱动，然后安装新的推荐使用的驱动即可，具体操作流程如下：\n\n#### 1.  强制使用集显\n\n在开机grub界面，按e，编辑启动 选项\n修改参数`“quiet splash”`为`“quiet splash nomodeset”`，之后F10，重新启动正常进入Ubuntu系统\n进入系统后让这个设置一直有效的方法是：\n\n```sh\n$: sudo gedit /etc/default/grub\n```\n\n跟开机时一样的参数修改，完成后保存文件并关闭，输入以下指令使其生效：\n\n```sh\n$: sudo update-grub\n```\n\n#### 2. 重新安装Nvidia显卡驱动\n\n禁用ubuntu默认显卡(集显)驱动\n\n```sh\n$: sudo vi /etc/modprobe.d/blacklist.conf\n```\n\n在文件最末尾添加如下参数加入黑名单：\n\n```sh\nblacklist vga16fb\nblacklist nouveau\nblacklist rivafb\nblacklist rivatv\nblacklist nvidiafb\n```\n\n卸载干净所有安装过的nvidia驱动：\n\n```sh\n$: sudo apt-get remove  --purge nvidia-*\n```\n\n查看驱动状态，无输出则说明已经被屏蔽掉\n\n```sh\n$: lsmod | grep nouveau\n```\n\n添加驱动源：\n\n```sh\n$: sudo add-apt-repository ppa:graphics-drivers/ppa\n$: sudo apt-get update\n```\n\n查看合适驱动版本：\n\n```sh\nubuntu-drivers devices\n```\n\n这里推荐直接使用`nvidia-driver-390`或`nvidia-driver-430`驱动\n\n```sh\n$: sudo apt-get install nvidia-driver-430 nvidia-settings nvidia-prime\n```\n\n重启\n\n```sh\n$: sudo update-initramfs -u\n$: sudo reboot\n```\n\n重启时，在开机grub界面，按e，编辑启动 选项\n修改参数`“quiet splash nomodeset”`为`“quiet splash acpi_osi=linux”`，之后F10，重新启动正常进入Ubuntu系统\n\n开机后查看驱动安装状态：\n\n```sh\n$: sudo nvidia-smi\n```\n\n编辑grab文件执行上一步相同的参数修改，最后更新：\n\n```sh\n$: sudo gedit /etc/default/grub\n$: sudo update-grub\n```\n\n#### 3. 解决无线网络不能使用的问题\n\n原因： 联想自家的驱动和Ubuntu的驱动产生了冲突，禁用联想自带的驱动即可\n\n将联想驱动加入黑名单:\n\n```sh\n$: sudo gedit /etc/modprobe.d/blacklist.conf\n```\n\n在文件中添加：\n\n```sh\nblacklist ideapad_laptop\n```\n\n即时生效：\n\n```sh\n$: sudo modprobe -r ideapad_laptop\n```\n\n_关于Ubuntu主题美化和其它问题解决请移步：[Ubuntu 18.04 踩坑记录](https://www.jianshu.com/p/23b0d3015db8)_","source":"_posts/2019-09-29-联想y7000安装ubuntu18-04显卡驱动解决方案.md","raw":"---\ntitle: \"联想y7000安装ubuntu18.04显卡驱动解决方案\"\ncatalog: true\ntoc_nav_num: true\ndate: 2019-09-29 10:49:00\nsubtitle: \"y7000 ubuntu18.04\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- ubuntu18.04\ncategories:\n- Linux\nupdateDate: 2019-09-29 10:49:00\n---\n\n\n![Desktop](Desktop3.png)\n![Desktop](Desktop2.png)\n![Desktop](Desktop.png)\n\n### 目录\n\n1. 笔记本配置和操作系统版本\n\n2. 安装Ubuntu18.04-3后出现的异常\n\n3. 解决方案\n\n### 笔记本配置\n\n* CPU : Intel® Core™ i5-8300H CPU @ 2.30GHz × 8\n\n* GPU: Nvidia GeForce GTX 1050 Ti/PCIe/SSE2 和 Intel 集显\n\n* 操作系统: Ubuntu 18.04.3 bionic\n\n* 内核版本: Linux 5.0.0-27-generic\n\n* 内存: 16G\n\n* 分区:  GPT磁盘分区 + UEFI引导方案 ，创建`efi`系统分区和`/`根分区\n\n### 安装Ubuntu18.04-3后出现的异常\n\n* 开机卡死或登录卡死\n\n* 登录后不能检测到无线网卡\n\n* 屏幕亮度不可调节\n\n* HDMI外接屏幕不可用\n\n### 解决方案\n\n卡死的原因基本都是显卡驱动的原因，集成显卡勉强能用，但是不支持外接屏幕和亮度调节，屏幕滚动的时候也会\n出现画面撕裂的情况，属于不能忍受的情况，当开机卡死的时候我们需要先强制让Ubuntu使用集成显卡，然后才能\n进入系统，进入系统之后再禁用系统自带的Nvidia驱动，然后安装新的推荐使用的驱动即可，具体操作流程如下：\n\n#### 1.  强制使用集显\n\n在开机grub界面，按e，编辑启动 选项\n修改参数`“quiet splash”`为`“quiet splash nomodeset”`，之后F10，重新启动正常进入Ubuntu系统\n进入系统后让这个设置一直有效的方法是：\n\n```sh\n$: sudo gedit /etc/default/grub\n```\n\n跟开机时一样的参数修改，完成后保存文件并关闭，输入以下指令使其生效：\n\n```sh\n$: sudo update-grub\n```\n\n#### 2. 重新安装Nvidia显卡驱动\n\n禁用ubuntu默认显卡(集显)驱动\n\n```sh\n$: sudo vi /etc/modprobe.d/blacklist.conf\n```\n\n在文件最末尾添加如下参数加入黑名单：\n\n```sh\nblacklist vga16fb\nblacklist nouveau\nblacklist rivafb\nblacklist rivatv\nblacklist nvidiafb\n```\n\n卸载干净所有安装过的nvidia驱动：\n\n```sh\n$: sudo apt-get remove  --purge nvidia-*\n```\n\n查看驱动状态，无输出则说明已经被屏蔽掉\n\n```sh\n$: lsmod | grep nouveau\n```\n\n添加驱动源：\n\n```sh\n$: sudo add-apt-repository ppa:graphics-drivers/ppa\n$: sudo apt-get update\n```\n\n查看合适驱动版本：\n\n```sh\nubuntu-drivers devices\n```\n\n这里推荐直接使用`nvidia-driver-390`或`nvidia-driver-430`驱动\n\n```sh\n$: sudo apt-get install nvidia-driver-430 nvidia-settings nvidia-prime\n```\n\n重启\n\n```sh\n$: sudo update-initramfs -u\n$: sudo reboot\n```\n\n重启时，在开机grub界面，按e，编辑启动 选项\n修改参数`“quiet splash nomodeset”`为`“quiet splash acpi_osi=linux”`，之后F10，重新启动正常进入Ubuntu系统\n\n开机后查看驱动安装状态：\n\n```sh\n$: sudo nvidia-smi\n```\n\n编辑grab文件执行上一步相同的参数修改，最后更新：\n\n```sh\n$: sudo gedit /etc/default/grub\n$: sudo update-grub\n```\n\n#### 3. 解决无线网络不能使用的问题\n\n原因： 联想自家的驱动和Ubuntu的驱动产生了冲突，禁用联想自带的驱动即可\n\n将联想驱动加入黑名单:\n\n```sh\n$: sudo gedit /etc/modprobe.d/blacklist.conf\n```\n\n在文件中添加：\n\n```sh\nblacklist ideapad_laptop\n```\n\n即时生效：\n\n```sh\n$: sudo modprobe -r ideapad_laptop\n```\n\n_关于Ubuntu主题美化和其它问题解决请移步：[Ubuntu 18.04 踩坑记录](https://www.jianshu.com/p/23b0d3015db8)_","slug":"联想y7000安装ubuntu18-04显卡驱动解决方案","published":1,"updated":"2020-12-06T10:52:31.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuqs000lkl95eidcbk6t","content":"<p><img src=\"Desktop3.png\" alt=\"Desktop\"><br><img src=\"Desktop2.png\" alt=\"Desktop\"><br><img src=\"Desktop.png\" alt=\"Desktop\"></p><h3 id=\"目录\">目录</h3><ol><li><p>笔记本配置和操作系统版本</p></li><li><p>安装Ubuntu18.04-3后出现的异常</p></li><li><p>解决方案</p></li></ol><h3 id=\"笔记本配置\">笔记本配置</h3><ul><li><p>CPU : Intel® Core™ i5-8300H CPU @ 2.30GHz × 8</p></li><li><p>GPU: Nvidia GeForce GTX 1050 Ti/PCIe/SSE2 和 Intel 集显</p></li><li><p>操作系统: Ubuntu 18.04.3 bionic</p></li><li><p>内核版本: Linux 5.0.0-27-generic</p></li><li><p>内存: 16G</p></li><li><p>分区: GPT磁盘分区 + UEFI引导方案 ，创建<code>efi</code>系统分区和<code>/</code>根分区</p></li></ul><h3 id=\"安装Ubuntu18-04-3后出现的异常\">安装Ubuntu18.04-3后出现的异常</h3><ul><li><p>开机卡死或登录卡死</p></li><li><p>登录后不能检测到无线网卡</p></li><li><p>屏幕亮度不可调节</p></li><li><p>HDMI外接屏幕不可用</p></li></ul><h3 id=\"解决方案\">解决方案</h3><p>卡死的原因基本都是显卡驱动的原因，集成显卡勉强能用，但是不支持外接屏幕和亮度调节，屏幕滚动的时候也会<br>出现画面撕裂的情况，属于不能忍受的情况，当开机卡死的时候我们需要先强制让Ubuntu使用集成显卡，然后才能<br>进入系统，进入系统之后再禁用系统自带的Nvidia驱动，然后安装新的推荐使用的驱动即可，具体操作流程如下：</p><h4 id=\"1-强制使用集显\">1. 强制使用集显</h4><p>在开机grub界面，按e，编辑启动 选项<br>修改参数<code>“quiet splash”</code>为<code>“quiet splash nomodeset”</code>，之后F10，重新启动正常进入Ubuntu系统<br>进入系统后让这个设置一直有效的方法是：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure><p>跟开机时一样的参数修改，完成后保存文件并关闭，输入以下指令使其生效：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure><h4 id=\"2-重新安装Nvidia显卡驱动\">2. 重新安装Nvidia显卡驱动</h4><p>禁用ubuntu默认显卡(集显)驱动</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo vi /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>在文件最末尾添加如下参数加入黑名单：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist vga16fb</span><br><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">blacklist rivafb</span><br><span class=\"line\">blacklist rivatv</span><br><span class=\"line\">blacklist nvidiafb</span><br></pre></td></tr></table></figure><p>卸载干净所有安装过的nvidia驱动：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get remove  --purge nvidia-*</span><br></pre></td></tr></table></figure><p>查看驱动状态，无输出则说明已经被屏蔽掉</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: lsmod | grep nouveau</span><br></pre></td></tr></table></figure><p>添加驱动源：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class=\"line\">$: sudo apt-get update</span><br></pre></td></tr></table></figure><p>查看合适驱动版本：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>这里推荐直接使用<code>nvidia-driver-390</code>或<code>nvidia-driver-430</code>驱动</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get install nvidia-driver-430 nvidia-settings nvidia-prime</span><br></pre></td></tr></table></figure><p>重启</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-initramfs -u</span><br><span class=\"line\">$: sudo reboot</span><br></pre></td></tr></table></figure><p>重启时，在开机grub界面，按e，编辑启动 选项<br>修改参数<code>“quiet splash nomodeset”</code>为<code>“quiet splash acpi_osi=linux”</code>，之后F10，重新启动正常进入Ubuntu系统</p><p>开机后查看驱动安装状态：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo nvidia-smi</span><br></pre></td></tr></table></figure><p>编辑grab文件执行上一步相同的参数修改，最后更新：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/default/grub</span><br><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure><h4 id=\"3-解决无线网络不能使用的问题\">3. 解决无线网络不能使用的问题</h4><p>原因： 联想自家的驱动和Ubuntu的驱动产生了冲突，禁用联想自带的驱动即可</p><p>将联想驱动加入黑名单:</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>在文件中添加：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist ideapad_laptop</span><br></pre></td></tr></table></figure><p>即时生效：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure><p><em>关于Ubuntu主题美化和其它问题解决请移步：<a href=\"https://www.jianshu.com/p/23b0d3015db8\" target=\"_blank\" rel=\"noopener\">Ubuntu 18.04 踩坑记录</a></em></p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"Desktop3.png\" alt=\"Desktop\"><br><img src=\"Desktop2.png\" alt=\"Desktop\"><br><img src=\"Desktop.png\" alt=\"Desktop\"></p><h3 id=\"目录\">目录</h3><ol><li><p>笔记本配置和操作系统版本</p></li><li><p>安装Ubuntu18.04-3后出现的异常</p></li><li><p>解决方案</p></li></ol><h3 id=\"笔记本配置\">笔记本配置</h3><ul><li><p>CPU : Intel® Core™ i5-8300H CPU @ 2.30GHz × 8</p></li><li><p>GPU: Nvidia GeForce GTX 1050 Ti/PCIe/SSE2 和 Intel 集显</p></li><li><p>操作系统: Ubuntu 18.04.3 bionic</p></li><li><p>内核版本: Linux 5.0.0-27-generic</p></li><li><p>内存: 16G</p></li><li><p>分区: GPT磁盘分区 + UEFI引导方案 ，创建<code>efi</code>系统分区和<code>/</code>根分区</p></li></ul><h3 id=\"安装Ubuntu18-04-3后出现的异常\">安装Ubuntu18.04-3后出现的异常</h3><ul><li><p>开机卡死或登录卡死</p></li><li><p>登录后不能检测到无线网卡</p></li><li><p>屏幕亮度不可调节</p></li><li><p>HDMI外接屏幕不可用</p></li></ul><h3 id=\"解决方案\">解决方案</h3><p>卡死的原因基本都是显卡驱动的原因，集成显卡勉强能用，但是不支持外接屏幕和亮度调节，屏幕滚动的时候也会<br>出现画面撕裂的情况，属于不能忍受的情况，当开机卡死的时候我们需要先强制让Ubuntu使用集成显卡，然后才能<br>进入系统，进入系统之后再禁用系统自带的Nvidia驱动，然后安装新的推荐使用的驱动即可，具体操作流程如下：</p><h4 id=\"1-强制使用集显\">1. 强制使用集显</h4><p>在开机grub界面，按e，编辑启动 选项<br>修改参数<code>“quiet splash”</code>为<code>“quiet splash nomodeset”</code>，之后F10，重新启动正常进入Ubuntu系统<br>进入系统后让这个设置一直有效的方法是：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure><p>跟开机时一样的参数修改，完成后保存文件并关闭，输入以下指令使其生效：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure><h4 id=\"2-重新安装Nvidia显卡驱动\">2. 重新安装Nvidia显卡驱动</h4><p>禁用ubuntu默认显卡(集显)驱动</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo vi /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>在文件最末尾添加如下参数加入黑名单：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist vga16fb</span><br><span class=\"line\">blacklist nouveau</span><br><span class=\"line\">blacklist rivafb</span><br><span class=\"line\">blacklist rivatv</span><br><span class=\"line\">blacklist nvidiafb</span><br></pre></td></tr></table></figure><p>卸载干净所有安装过的nvidia驱动：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get remove  --purge nvidia-*</span><br></pre></td></tr></table></figure><p>查看驱动状态，无输出则说明已经被屏蔽掉</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: lsmod | grep nouveau</span><br></pre></td></tr></table></figure><p>添加驱动源：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class=\"line\">$: sudo apt-get update</span><br></pre></td></tr></table></figure><p>查看合适驱动版本：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu-drivers devices</span><br></pre></td></tr></table></figure><p>这里推荐直接使用<code>nvidia-driver-390</code>或<code>nvidia-driver-430</code>驱动</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get install nvidia-driver-430 nvidia-settings nvidia-prime</span><br></pre></td></tr></table></figure><p>重启</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-initramfs -u</span><br><span class=\"line\">$: sudo reboot</span><br></pre></td></tr></table></figure><p>重启时，在开机grub界面，按e，编辑启动 选项<br>修改参数<code>“quiet splash nomodeset”</code>为<code>“quiet splash acpi_osi=linux”</code>，之后F10，重新启动正常进入Ubuntu系统</p><p>开机后查看驱动安装状态：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo nvidia-smi</span><br></pre></td></tr></table></figure><p>编辑grab文件执行上一步相同的参数修改，最后更新：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/default/grub</span><br><span class=\"line\">$: sudo update-grub</span><br></pre></td></tr></table></figure><h4 id=\"3-解决无线网络不能使用的问题\">3. 解决无线网络不能使用的问题</h4><p>原因： 联想自家的驱动和Ubuntu的驱动产生了冲突，禁用联想自带的驱动即可</p><p>将联想驱动加入黑名单:</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /etc/modprobe.d/blacklist.conf</span><br></pre></td></tr></table></figure><p>在文件中添加：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blacklist ideapad_laptop</span><br></pre></td></tr></table></figure><p>即时生效：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure><p><em>关于Ubuntu主题美化和其它问题解决请移步：<a href=\"https://www.jianshu.com/p/23b0d3015db8\" target=\"_blank\" rel=\"noopener\">Ubuntu 18.04 踩坑记录</a></em></p>"},{"title":"polipo服务配置shadowsocks终端代理","catalog":true,"toc_nav_num":true,"date":"2019-10-01T08:30:35.000Z","subtitle":"shadowsocks polipo","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2018-10-01T08:30:35.000Z","_content":"\n在linux系统中，一般配置好shadowsocks之后，浏览器设置好代理，浏览器就可以翻墙。但是由于ss使用的是`socks5`协议，而大部分终端都只支持`http`和`https`等协议，终端是无法直接通过ss来翻墙。通过polipo这个轻量级的缓存web代理程序来转换，可实现终端翻墙。\n\n#### 安装shadowsocks[](http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85shadowsocks)\n\n通过pip可以非常简单地安装。需要安装ss需要的依赖。\n\n```\nsudo apt-get update\nsudo apt-get install python-pip\nsudo apt-get install python-setuptools m2crypto\n\npip install shadowsocks\n```\n\n#### 启动shadowsocks[](http://keliu.me/2018/12/08/ss/#%E5%90%AF%E5%8A%A8shadowsocks)\n\n使用`sslocal`命令来启动shadowsocks。\n\n一般在`/etc`目录下创建一个`shadowsocks.json`文件：\n\n```\nvi /etc/shadowsocks.json\n```\n\n保存如下形式的ss服务端信息：\n\n```\n{\n    \"server\":\"11.22.33.44\",\n    \"server_port\":6666,\n    \"local_port\":1080,\n    \"password\":\"123456\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\"\n}\n```\n\n启动ss。\n\n```\nsslocal -c /etc/shadowsocks.json\n```\n\n可以设置开机自动启动服务，还有浏览器代理的配置，此处也都暂时不讲。\n\n#### 安装配置polipo[](http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpolipo)\n\n安装：\n\n```\nsudo apt-get install polipo\n```\n\npolio的配置文件在`/etc/polipo/config`目录。打开，编辑保存如下信息：\n\n```\n# This file only needs to list configuration variables that deviate\n# from the default values.  See /usr/share/doc/polipo/examples/config.sample\n# and \"polipo -v\" for variables you can tweak and further information.\n\nlogSyslog = true\nlogFile = /var/log/polipo/polipo.log\n\nproxyAddress = \"0.0.0.0\"\n\nsocksParentProxy = \"127.0.0.1:1080\"\nsocksProxyType = socks5\nproxyPort = 8123\n\nchunkHighMark = 50331648\nobjectHighMark = 16384\n\nserverMaxSlots = 64\nserverSlots = 16\nserverSlots1 = 32\n```\n\n重新启动polipo服务：\n\n```\n/etc/init.d/polipo restart\n```\n\n#### 使用代理[](http://keliu.me/2018/12/08/ss/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86)\n\npolipo的默认端口号是 8123，**每次使用**代理前，**必须**进行如下操作：\n\n```\nexport http_proxy=http://127.0.0.1:8123\n```\n\n然后可以验证是否成功：\n\n```\ncurl www.google.com\n```\n\n**取消代理**：\n\n```\nunset http_proxy\n```\n\n如果想**持久化**运行，可以将` export http_proxy=http://127.0.0.1:8123`这个语句添加到` ~/.bashrc`文件内，并用`source ~/.bashrc`命令使之生效。\n","source":"_posts/2019-10-01-polipo服务配置shadowsocks终端代理.md","raw":"---\ntitle: \"polipo服务配置shadowsocks终端代理\"\ncatalog: true\ntoc_nav_num: true\ndate:   2019-10-01 16:30:35\nsubtitle: \"shadowsocks polipo\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- shadowsocks\n- proxy\ncategories:\n- Linux\nupdateDate: 2018-10-01 16:30:35\n---\n\n在linux系统中，一般配置好shadowsocks之后，浏览器设置好代理，浏览器就可以翻墙。但是由于ss使用的是`socks5`协议，而大部分终端都只支持`http`和`https`等协议，终端是无法直接通过ss来翻墙。通过polipo这个轻量级的缓存web代理程序来转换，可实现终端翻墙。\n\n#### 安装shadowsocks[](http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85shadowsocks)\n\n通过pip可以非常简单地安装。需要安装ss需要的依赖。\n\n```\nsudo apt-get update\nsudo apt-get install python-pip\nsudo apt-get install python-setuptools m2crypto\n\npip install shadowsocks\n```\n\n#### 启动shadowsocks[](http://keliu.me/2018/12/08/ss/#%E5%90%AF%E5%8A%A8shadowsocks)\n\n使用`sslocal`命令来启动shadowsocks。\n\n一般在`/etc`目录下创建一个`shadowsocks.json`文件：\n\n```\nvi /etc/shadowsocks.json\n```\n\n保存如下形式的ss服务端信息：\n\n```\n{\n    \"server\":\"11.22.33.44\",\n    \"server_port\":6666,\n    \"local_port\":1080,\n    \"password\":\"123456\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\"\n}\n```\n\n启动ss。\n\n```\nsslocal -c /etc/shadowsocks.json\n```\n\n可以设置开机自动启动服务，还有浏览器代理的配置，此处也都暂时不讲。\n\n#### 安装配置polipo[](http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpolipo)\n\n安装：\n\n```\nsudo apt-get install polipo\n```\n\npolio的配置文件在`/etc/polipo/config`目录。打开，编辑保存如下信息：\n\n```\n# This file only needs to list configuration variables that deviate\n# from the default values.  See /usr/share/doc/polipo/examples/config.sample\n# and \"polipo -v\" for variables you can tweak and further information.\n\nlogSyslog = true\nlogFile = /var/log/polipo/polipo.log\n\nproxyAddress = \"0.0.0.0\"\n\nsocksParentProxy = \"127.0.0.1:1080\"\nsocksProxyType = socks5\nproxyPort = 8123\n\nchunkHighMark = 50331648\nobjectHighMark = 16384\n\nserverMaxSlots = 64\nserverSlots = 16\nserverSlots1 = 32\n```\n\n重新启动polipo服务：\n\n```\n/etc/init.d/polipo restart\n```\n\n#### 使用代理[](http://keliu.me/2018/12/08/ss/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86)\n\npolipo的默认端口号是 8123，**每次使用**代理前，**必须**进行如下操作：\n\n```\nexport http_proxy=http://127.0.0.1:8123\n```\n\n然后可以验证是否成功：\n\n```\ncurl www.google.com\n```\n\n**取消代理**：\n\n```\nunset http_proxy\n```\n\n如果想**持久化**运行，可以将` export http_proxy=http://127.0.0.1:8123`这个语句添加到` ~/.bashrc`文件内，并用`source ~/.bashrc`命令使之生效。\n","slug":"polipo服务配置shadowsocks终端代理","published":1,"updated":"2020-12-06T10:52:40.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuqv000qkl9539vv99uo","content":"<p>在linux系统中，一般配置好shadowsocks之后，浏览器设置好代理，浏览器就可以翻墙。但是由于ss使用的是<code>socks5</code>协议，而大部分终端都只支持<code>http</code>和<code>https</code>等协议，终端是无法直接通过ss来翻墙。通过polipo这个轻量级的缓存web代理程序来转换，可实现终端翻墙。</p><h4 id=\"安装shadowsocks\">安装shadowsocks<a href=\"http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85shadowsocks\" target=\"_blank\" rel=\"noopener\"></a></h4><p>通过pip可以非常简单地安装。需要安装ss需要的依赖。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python-pip</span><br><span class=\"line\">sudo apt-get install python-setuptools m2crypto</span><br><span class=\"line\"></span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure><h4 id=\"启动shadowsocks\">启动shadowsocks<a href=\"http://keliu.me/2018/12/08/ss/#%E5%90%AF%E5%8A%A8shadowsocks\" target=\"_blank\" rel=\"noopener\"></a></h4><p>使用<code>sslocal</code>命令来启动shadowsocks。</p><p>一般在<code>/etc</code>目录下创建一个<code>shadowsocks.json</code>文件：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure><p>保存如下形式的ss服务端信息：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;11.22.33.44&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:6666,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;123456&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>启动ss。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sslocal -c &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure><p>可以设置开机自动启动服务，还有浏览器代理的配置，此处也都暂时不讲。</p><h4 id=\"安装配置polipo\">安装配置polipo<a href=\"http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpolipo\" target=\"_blank\" rel=\"noopener\"></a></h4><p>安装：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install polipo</span><br></pre></td></tr></table></figure><p>polio的配置文件在<code>/etc/polipo/config</code>目录。打开，编辑保存如下信息：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This file only needs to list configuration variables that deviate</span><br><span class=\"line\"># from the default values.  See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;polipo&#x2F;examples&#x2F;config.sample</span><br><span class=\"line\"># and &quot;polipo -v&quot; for variables you can tweak and further information.</span><br><span class=\"line\"></span><br><span class=\"line\">logSyslog &#x3D; true</span><br><span class=\"line\">logFile &#x3D; &#x2F;var&#x2F;log&#x2F;polipo&#x2F;polipo.log</span><br><span class=\"line\"></span><br><span class=\"line\">proxyAddress &#x3D; &quot;0.0.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">socksParentProxy &#x3D; &quot;127.0.0.1:1080&quot;</span><br><span class=\"line\">socksProxyType &#x3D; socks5</span><br><span class=\"line\">proxyPort &#x3D; 8123</span><br><span class=\"line\"></span><br><span class=\"line\">chunkHighMark &#x3D; 50331648</span><br><span class=\"line\">objectHighMark &#x3D; 16384</span><br><span class=\"line\"></span><br><span class=\"line\">serverMaxSlots &#x3D; 64</span><br><span class=\"line\">serverSlots &#x3D; 16</span><br><span class=\"line\">serverSlots1 &#x3D; 32</span><br></pre></td></tr></table></figure><p>重新启动polipo服务：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;init.d&#x2F;polipo restart</span><br></pre></td></tr></table></figure><h4 id=\"使用代理\">使用代理<a href=\"http://keliu.me/2018/12/08/ss/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86\" target=\"_blank\" rel=\"noopener\"></a></h4><p>polipo的默认端口号是 8123，<strong>每次使用</strong>代理前，<strong>必须</strong>进行如下操作：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8123</span><br></pre></td></tr></table></figure><p>然后可以验证是否成功：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl www.google.com</span><br></pre></td></tr></table></figure><p><strong>取消代理</strong>：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset http_proxy</span><br></pre></td></tr></table></figure><p>如果想<strong>持久化</strong>运行，可以将<code>export http_proxy=http://127.0.0.1:8123</code>这个语句添加到<code>~/.bashrc</code>文件内，并用<code>source ~/.bashrc</code>命令使之生效。</p>","site":{"data":{}},"excerpt":"","more":"<p>在linux系统中，一般配置好shadowsocks之后，浏览器设置好代理，浏览器就可以翻墙。但是由于ss使用的是<code>socks5</code>协议，而大部分终端都只支持<code>http</code>和<code>https</code>等协议，终端是无法直接通过ss来翻墙。通过polipo这个轻量级的缓存web代理程序来转换，可实现终端翻墙。</p><h4 id=\"安装shadowsocks\">安装shadowsocks<a href=\"http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85shadowsocks\" target=\"_blank\" rel=\"noopener\"></a></h4><p>通过pip可以非常简单地安装。需要安装ss需要的依赖。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python-pip</span><br><span class=\"line\">sudo apt-get install python-setuptools m2crypto</span><br><span class=\"line\"></span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure><h4 id=\"启动shadowsocks\">启动shadowsocks<a href=\"http://keliu.me/2018/12/08/ss/#%E5%90%AF%E5%8A%A8shadowsocks\" target=\"_blank\" rel=\"noopener\"></a></h4><p>使用<code>sslocal</code>命令来启动shadowsocks。</p><p>一般在<code>/etc</code>目录下创建一个<code>shadowsocks.json</code>文件：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure><p>保存如下形式的ss服务端信息：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;11.22.33.44&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:6666,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;123456&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>启动ss。</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sslocal -c &#x2F;etc&#x2F;shadowsocks.json</span><br></pre></td></tr></table></figure><p>可以设置开机自动启动服务，还有浏览器代理的配置，此处也都暂时不讲。</p><h4 id=\"安装配置polipo\">安装配置polipo<a href=\"http://keliu.me/2018/12/08/ss/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEpolipo\" target=\"_blank\" rel=\"noopener\"></a></h4><p>安装：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install polipo</span><br></pre></td></tr></table></figure><p>polio的配置文件在<code>/etc/polipo/config</code>目录。打开，编辑保存如下信息：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This file only needs to list configuration variables that deviate</span><br><span class=\"line\"># from the default values.  See &#x2F;usr&#x2F;share&#x2F;doc&#x2F;polipo&#x2F;examples&#x2F;config.sample</span><br><span class=\"line\"># and &quot;polipo -v&quot; for variables you can tweak and further information.</span><br><span class=\"line\"></span><br><span class=\"line\">logSyslog &#x3D; true</span><br><span class=\"line\">logFile &#x3D; &#x2F;var&#x2F;log&#x2F;polipo&#x2F;polipo.log</span><br><span class=\"line\"></span><br><span class=\"line\">proxyAddress &#x3D; &quot;0.0.0.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">socksParentProxy &#x3D; &quot;127.0.0.1:1080&quot;</span><br><span class=\"line\">socksProxyType &#x3D; socks5</span><br><span class=\"line\">proxyPort &#x3D; 8123</span><br><span class=\"line\"></span><br><span class=\"line\">chunkHighMark &#x3D; 50331648</span><br><span class=\"line\">objectHighMark &#x3D; 16384</span><br><span class=\"line\"></span><br><span class=\"line\">serverMaxSlots &#x3D; 64</span><br><span class=\"line\">serverSlots &#x3D; 16</span><br><span class=\"line\">serverSlots1 &#x3D; 32</span><br></pre></td></tr></table></figure><p>重新启动polipo服务：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;etc&#x2F;init.d&#x2F;polipo restart</span><br></pre></td></tr></table></figure><h4 id=\"使用代理\">使用代理<a href=\"http://keliu.me/2018/12/08/ss/#%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86\" target=\"_blank\" rel=\"noopener\"></a></h4><p>polipo的默认端口号是 8123，<strong>每次使用</strong>代理前，<strong>必须</strong>进行如下操作：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8123</span><br></pre></td></tr></table></figure><p>然后可以验证是否成功：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl www.google.com</span><br></pre></td></tr></table></figure><p><strong>取消代理</strong>：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unset http_proxy</span><br></pre></td></tr></table></figure><p>如果想<strong>持久化</strong>运行，可以将<code>export http_proxy=http://127.0.0.1:8123</code>这个语句添加到<code>~/.bashrc</code>文件内，并用<code>source ~/.bashrc</code>命令使之生效。</p>"},{"title":"Docker运行容器化的Tim和Wechat","catalog":true,"toc_nav_num":true,"date":"2019-11-14T11:16:00.000Z","subtitle":"docker linux-qq/wechat","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-11-14T11:16:00.000Z","top":null,"_content":"\n### Contents\n* 安装docker\n* 安装容器\n* 容器管理\n\n### 安装docker\n\n> \n> Docker Engine-Community 支持以下的 Ubuntu 版本：\n> \n> -   Xenial 16.04 (LTS)\n> -   Bionic 18.04 (LTS)\n> -   Cosmic 18.10\n> -   Disco 19.04\n> -   其他更新的版本……\n> \n> Docker Engine - Community 支持上 x86_64（或 amd64）armhf，arm64，s390x （IBM Z），和 ppc64le（IBM的Power）架构。\n> \n> * * *\n> \n> #### 卸载旧版本\n> \n> Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：\n> \n`$ sudo apt-get remove docker docker-engine docker.io containerd runc`\n> \n> 当前称为 Docker Engine-Community 软件包 docker-ce 。\n> \n> 安装 Docker Engine-Community，以下介绍两种方式。\n> \n> * * *\n> \n> #### 使用 Docker 仓库进行安装\n> \n> 在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker 。\n> \n> #### 设置仓库\n> \n> 更新 apt 包索引。\n> \n`$ sudo apt-get update`\n> \n> 安装 apt 依赖包，用于通过HTTPS来获取仓库:\n> \n`$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common`\n> \n> 添加 Docker 的官方 GPG 密钥：\n> \n`$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -`\n> \n> 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。\n> \n`$ sudo apt-key fingerprint 0EBFCD88`\n>      \n> pub   rsa4096 2017-02-22 \\[SCEA\\]  \n>       9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88  \n> uid           \\[ unknown\\] Docker Release (CE deb) <docker@docker.com>  \n> sub   rsa4096 2017-02-22 \\[S\\]  \n> \n> 使用以下指令设置稳定版仓库\n> \n`$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ ubuntu $(lsb_release -cs) stable\"`\n> \n> #### 安装 Docker Engine-Community\n> \n> 更新 apt 包索引。\n> \n`$ sudo apt-get update`\n> \n> 安装最新版本的 Docker Engine-Community 和 containerd ，或者转到下一步安装特定版本：\n> \n`$ sudo apt-get install docker-ce docker-ce-cli containerd.io`\n> \n> 要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：\n> \n`$ apt-cache madison docker-ce `\n>   \n>   docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   ...  \n> \n> 使用第二列中的版本字符串安装特定版本，例如 5:18.09.1~3-0~ubuntu-xenial。\n> \n`$ sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io`\n> \n> 测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功:\n> \n`$ sudo docker run hello-world`\n> #### 安装 docker-compose\n`$ sudo apt install docker-compose`\n> #### 切换docker源为国内的源\n`$ sudo gedit /etc/docker/daemon.json`\n>\n> 写入配置\n> ```\n>  {\n>    \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\n>  }\n> ```\n>\n\n### 安装容器\n* Tim => `sudo docker pull bestwu/qq`\n* wechat => `sudo docker pull bestwu/wechat`\n\n### 容器管理\n1. 获取audio的组ID  \n`getent group audio | cut -d: -f3`\n2. 容器启动文件  \n接下来创建一个yml文件，比如说这里创建 docker-tim.yml，添加如下内容：\n```yml\nversion: '2'\nservices:\n qq:\n   image: bestwu/qq:office    # 后面这个 office 改成 latest ， 登录的就是QQ，否则是Tim\n   container_name: qq\n   devices:\n     - /dev/snd #声音\n   volumes:\n     - /tmp/.X11-unix:/tmp/.X11-unix\n     - $HOME/TencentFiles:/TencentFiles\n   environment:\n     - DISPLAY=unix$DISPLAY\n     - XMODIFIERS=@im=ibus #中文输入\n     - QT_IM_MODULE=ibus\n     - GTK_IM_MODULE=ibus\n     - AUDIO_GID=29 # 可选 (29 parrotsec) 主机audio gid 解决声音设备访问权限问题\n     - GID=1000 # 可选 默认1000 主机当前用户 gid 解决挂载目录访问权限问题\n     - UID=1000 # 可选 默认1000 主机当前用户 uid 解决挂载目录访问权限问题\n```\n\n3. 容器启动命令  \n编写start-tim.sh：\n```yml\n#!/bin/sh\n# 密码更改为自己的\n# -d 指定为后台启动\necho \"yw020154\" | sudo docker-compose -f docker-tim.yml up -d\n```\n\n4. 容器的常用操作\n```sh\n# 启动/停止/重启\nsudo docker start/stop/restart qq\n# 终止容器进程\nsudo docker kill qq\n# 查看运行容器\nsudo docker ps\n```","source":"_posts/2019-11-14-Docker运行容器化的Tim和Wechat.md","raw":"---\ntitle: \"Docker运行容器化的Tim和Wechat\"\ncatalog: true\ntoc_nav_num: true\ndate:  2019-11-14 19:16:00\nsubtitle: \"docker linux-qq/wechat\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- linux\n- docker\n- desktop\ncategories:\n- Linux\nupdateDate: 2019-11-14 19:16:00\ntop: \n---\n\n### Contents\n* 安装docker\n* 安装容器\n* 容器管理\n\n### 安装docker\n\n> \n> Docker Engine-Community 支持以下的 Ubuntu 版本：\n> \n> -   Xenial 16.04 (LTS)\n> -   Bionic 18.04 (LTS)\n> -   Cosmic 18.10\n> -   Disco 19.04\n> -   其他更新的版本……\n> \n> Docker Engine - Community 支持上 x86_64（或 amd64）armhf，arm64，s390x （IBM Z），和 ppc64le（IBM的Power）架构。\n> \n> * * *\n> \n> #### 卸载旧版本\n> \n> Docker 的旧版本被称为 docker，docker.io 或 docker-engine 。如果已安装，请卸载它们：\n> \n`$ sudo apt-get remove docker docker-engine docker.io containerd runc`\n> \n> 当前称为 Docker Engine-Community 软件包 docker-ce 。\n> \n> 安装 Docker Engine-Community，以下介绍两种方式。\n> \n> * * *\n> \n> #### 使用 Docker 仓库进行安装\n> \n> 在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker 。\n> \n> #### 设置仓库\n> \n> 更新 apt 包索引。\n> \n`$ sudo apt-get update`\n> \n> 安装 apt 依赖包，用于通过HTTPS来获取仓库:\n> \n`$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common`\n> \n> 添加 Docker 的官方 GPG 密钥：\n> \n`$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -`\n> \n> 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。\n> \n`$ sudo apt-key fingerprint 0EBFCD88`\n>      \n> pub   rsa4096 2017-02-22 \\[SCEA\\]  \n>       9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88  \n> uid           \\[ unknown\\] Docker Release (CE deb) <docker@docker.com>  \n> sub   rsa4096 2017-02-22 \\[S\\]  \n> \n> 使用以下指令设置稳定版仓库\n> \n`$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ ubuntu $(lsb_release -cs) stable\"`\n> \n> #### 安装 Docker Engine-Community\n> \n> 更新 apt 包索引。\n> \n`$ sudo apt-get update`\n> \n> 安装最新版本的 Docker Engine-Community 和 containerd ，或者转到下一步安装特定版本：\n> \n`$ sudo apt-get install docker-ce docker-ce-cli containerd.io`\n> \n> 要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：\n> \n`$ apt-cache madison docker-ce `\n>   \n>   docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  \n>   ...  \n> \n> 使用第二列中的版本字符串安装特定版本，例如 5:18.09.1~3-0~ubuntu-xenial。\n> \n`$ sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io`\n> \n> 测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功:\n> \n`$ sudo docker run hello-world`\n> #### 安装 docker-compose\n`$ sudo apt install docker-compose`\n> #### 切换docker源为国内的源\n`$ sudo gedit /etc/docker/daemon.json`\n>\n> 写入配置\n> ```\n>  {\n>    \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn\"]\n>  }\n> ```\n>\n\n### 安装容器\n* Tim => `sudo docker pull bestwu/qq`\n* wechat => `sudo docker pull bestwu/wechat`\n\n### 容器管理\n1. 获取audio的组ID  \n`getent group audio | cut -d: -f3`\n2. 容器启动文件  \n接下来创建一个yml文件，比如说这里创建 docker-tim.yml，添加如下内容：\n```yml\nversion: '2'\nservices:\n qq:\n   image: bestwu/qq:office    # 后面这个 office 改成 latest ， 登录的就是QQ，否则是Tim\n   container_name: qq\n   devices:\n     - /dev/snd #声音\n   volumes:\n     - /tmp/.X11-unix:/tmp/.X11-unix\n     - $HOME/TencentFiles:/TencentFiles\n   environment:\n     - DISPLAY=unix$DISPLAY\n     - XMODIFIERS=@im=ibus #中文输入\n     - QT_IM_MODULE=ibus\n     - GTK_IM_MODULE=ibus\n     - AUDIO_GID=29 # 可选 (29 parrotsec) 主机audio gid 解决声音设备访问权限问题\n     - GID=1000 # 可选 默认1000 主机当前用户 gid 解决挂载目录访问权限问题\n     - UID=1000 # 可选 默认1000 主机当前用户 uid 解决挂载目录访问权限问题\n```\n\n3. 容器启动命令  \n编写start-tim.sh：\n```yml\n#!/bin/sh\n# 密码更改为自己的\n# -d 指定为后台启动\necho \"yw020154\" | sudo docker-compose -f docker-tim.yml up -d\n```\n\n4. 容器的常用操作\n```sh\n# 启动/停止/重启\nsudo docker start/stop/restart qq\n# 终止容器进程\nsudo docker kill qq\n# 查看运行容器\nsudo docker ps\n```","slug":"Docker运行容器化的Tim和Wechat","published":1,"updated":"2020-12-06T10:53:00.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuqx000tkl958i7x2ww6","content":"<h3 id=\"Contents\">Contents</h3><ul><li>安装docker</li><li>安装容器</li><li>容器管理</li></ul><h3 id=\"安装docker\">安装docker</h3><blockquote><p>Docker Engine-Community 支持以下的 Ubuntu 版本：</p><ul><li>Xenial 16.04 (LTS)</li><li>Bionic 18.04 (LTS)</li><li>Cosmic 18.10</li><li>Disco 19.04</li><li>其他更新的版本……</li></ul><p>Docker Engine - Community 支持上 x86_64（或 amd64）armhf，arm64，s390x （IBM Z），和 ppc64le（IBM的Power）架构。</p><hr><h4 id=\"卸载旧版本\">卸载旧版本</h4><p>Docker 的旧版本被称为 docker，<a href=\"http://docker.io\" target=\"_blank\" rel=\"noopener\">docker.io</a> 或 docker-engine 。如果已安装，请卸载它们：</p></blockquote><p><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc</code></p><blockquote><p>当前称为 Docker Engine-Community 软件包 docker-ce 。</p><p>安装 Docker Engine-Community，以下介绍两种方式。</p><hr><h4 id=\"使用-Docker-仓库进行安装\">使用 Docker 仓库进行安装</h4><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker 。</p><h4 id=\"设置仓库\">设置仓库</h4><p>更新 apt 包索引。</p></blockquote><p><code>$ sudo apt-get update</code></p><blockquote><p>安装 apt 依赖包，用于通过HTTPS来获取仓库:</p></blockquote><p><code>$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code></p><blockquote><p>添加 Docker 的官方 GPG 密钥：</p></blockquote><p><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></p><blockquote><p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p></blockquote><p><code>$ sudo apt-key fingerprint 0EBFCD88</code></p><blockquote><p>pub   rsa4096 2017-02-22 [SCEA]<br>      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88<br>uid           [ unknown] Docker Release (CE deb) <a href=\"mailto:docker@docker.com\">docker@docker.com</a><br>sub   rsa4096 2017-02-22 [S]</p><p>使用以下指令设置稳定版仓库</p></blockquote><p><code>$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ ubuntu $(lsb_release -cs) stable&quot;</code></p><blockquote><h4 id=\"安装-Docker-Engine-Community\">安装 Docker Engine-Community</h4><p>更新 apt 包索引。</p></blockquote><p><code>$ sudo apt-get update</code></p><blockquote><p>安装最新版本的 Docker Engine-Community 和 containerd ，或者转到下一步安装特定版本：</p></blockquote><p><code>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></p><blockquote><p>要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：</p></blockquote><p><code>$ apt-cache madison docker-ce</code></p><blockquote><p>docker-ce | 5:18.09.1~3-0~ubuntu-xenial | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.1~ce~3-0~ubuntu       | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.0~ce~3-0~ubuntu       | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  …</p><p>使用第二列中的版本字符串安装特定版本，例如 5:18.09.1~3-0~ubuntu-xenial。</p></blockquote><p><code>$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</code></p><blockquote><p>测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功:</p></blockquote><p><code>$ sudo docker run hello-world</code></p><blockquote><h4 id=\"安装-docker-compose\">安装 docker-compose</h4></blockquote><p><code>$ sudo apt install docker-compose</code></p><blockquote><h4 id=\"切换docker源为国内的源\">切换docker源为国内的源</h4></blockquote><p><code>$ sudo gedit /etc/docker/daemon.json</code></p><blockquote><p>写入配置</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id=\"安装容器\">安装容器</h3><ul><li>Tim =&gt; <code>sudo docker pull bestwu/qq</code></li><li>wechat =&gt; <code>sudo docker pull bestwu/wechat</code></li></ul><h3 id=\"容器管理\">容器管理</h3><ol><li>获取audio的组ID<br><code>getent group audio | cut -d: -f3</code></li><li>容器启动文件<br>接下来创建一个yml文件，比如说这里创建 docker-tim.yml，添加如下内容：</li></ol><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> <span class=\"attr\">qq:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">bestwu/qq:office</span>    <span class=\"comment\"># 后面这个 office 改成 latest ， 登录的就是QQ，否则是Tim</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">qq</span></span><br><span class=\"line\">   <span class=\"attr\">devices:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/dev/snd</span> <span class=\"comment\">#声音</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/tmp/.X11-unix:/tmp/.X11-unix</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">$HOME/TencentFiles:/TencentFiles</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">DISPLAY=unix$DISPLAY</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">XMODIFIERS=@im=ibus</span> <span class=\"comment\">#中文输入</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">QT_IM_MODULE=ibus</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">GTK_IM_MODULE=ibus</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">AUDIO_GID=29</span> <span class=\"comment\"># 可选 (29 parrotsec) 主机audio gid 解决声音设备访问权限问题</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">GID=1000</span> <span class=\"comment\"># 可选 默认1000 主机当前用户 gid 解决挂载目录访问权限问题</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">UID=1000</span> <span class=\"comment\"># 可选 默认1000 主机当前用户 uid 解决挂载目录访问权限问题</span></span><br></pre></td></tr></table></figure><ol start=\"3\"><li>容器启动命令<br><a href=\"http://xn--start-tim-zq3o4611b.sh\" target=\"_blank\" rel=\"noopener\">编写start-tim.sh</a>：</li></ol><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 密码更改为自己的</span></span><br><span class=\"line\"><span class=\"comment\"># -d 指定为后台启动</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">\"yw020154\"</span> <span class=\"string\">|</span> <span class=\"string\">sudo</span> <span class=\"string\">docker-compose</span> <span class=\"string\">-f</span> <span class=\"string\">docker-tim.yml</span> <span class=\"string\">up</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure><ol start=\"4\"><li>容器的常用操作</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动/停止/重启</span></span><br><span class=\"line\">sudo docker start/stop/restart qq</span><br><span class=\"line\"><span class=\"comment\"># 终止容器进程</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">kill</span> qq</span><br><span class=\"line\"><span class=\"comment\"># 查看运行容器</span></span><br><span class=\"line\">sudo docker ps</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Contents\">Contents</h3><ul><li>安装docker</li><li>安装容器</li><li>容器管理</li></ul><h3 id=\"安装docker\">安装docker</h3><blockquote><p>Docker Engine-Community 支持以下的 Ubuntu 版本：</p><ul><li>Xenial 16.04 (LTS)</li><li>Bionic 18.04 (LTS)</li><li>Cosmic 18.10</li><li>Disco 19.04</li><li>其他更新的版本……</li></ul><p>Docker Engine - Community 支持上 x86_64（或 amd64）armhf，arm64，s390x （IBM Z），和 ppc64le（IBM的Power）架构。</p><hr><h4 id=\"卸载旧版本\">卸载旧版本</h4><p>Docker 的旧版本被称为 docker，<a href=\"http://docker.io\" target=\"_blank\" rel=\"noopener\">docker.io</a> 或 docker-engine 。如果已安装，请卸载它们：</p></blockquote><p><code>$ sudo apt-get remove docker docker-engine docker.io containerd runc</code></p><blockquote><p>当前称为 Docker Engine-Community 软件包 docker-ce 。</p><p>安装 Docker Engine-Community，以下介绍两种方式。</p><hr><h4 id=\"使用-Docker-仓库进行安装\">使用 Docker 仓库进行安装</h4><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker 。</p><h4 id=\"设置仓库\">设置仓库</h4><p>更新 apt 包索引。</p></blockquote><p><code>$ sudo apt-get update</code></p><blockquote><p>安装 apt 依赖包，用于通过HTTPS来获取仓库:</p></blockquote><p><code>$ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code></p><blockquote><p>添加 Docker 的官方 GPG 密钥：</p></blockquote><p><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></p><blockquote><p>9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 通过搜索指纹的后8个字符，验证您现在是否拥有带有指纹的密钥。</p></blockquote><p><code>$ sudo apt-key fingerprint 0EBFCD88</code></p><blockquote><p>pub   rsa4096 2017-02-22 [SCEA]<br>      9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88<br>uid           [ unknown] Docker Release (CE deb) <a href=\"mailto:docker@docker.com\">docker@docker.com</a><br>sub   rsa4096 2017-02-22 [S]</p><p>使用以下指令设置稳定版仓库</p></blockquote><p><code>$ sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ ubuntu $(lsb_release -cs) stable&quot;</code></p><blockquote><h4 id=\"安装-Docker-Engine-Community\">安装 Docker Engine-Community</h4><p>更新 apt 包索引。</p></blockquote><p><code>$ sudo apt-get update</code></p><blockquote><p>安装最新版本的 Docker Engine-Community 和 containerd ，或者转到下一步安装特定版本：</p></blockquote><p><code>$ sudo apt-get install docker-ce docker-ce-cli containerd.io</code></p><blockquote><p>要安装特定版本的 Docker Engine-Community，请在仓库中列出可用版本，然后选择一种安装。列出您的仓库中可用的版本：</p></blockquote><p><code>$ apt-cache madison docker-ce</code></p><blockquote><p>docker-ce | 5:18.09.1~3-0~ubuntu-xenial | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.1~ce~3-0~ubuntu       | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  docker-ce | 18.06.0~ce~3-0~ubuntu       | <a href=\"https://download.docker.com/linux/ubuntu\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/ubuntu</a>  xenial/stable amd64 Packages<br>  …</p><p>使用第二列中的版本字符串安装特定版本，例如 5:18.09.1~3-0~ubuntu-xenial。</p></blockquote><p><code>$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io</code></p><blockquote><p>测试 Docker 是否安装成功，输入以下指令，打印出以下信息则安装成功:</p></blockquote><p><code>$ sudo docker run hello-world</code></p><blockquote><h4 id=\"安装-docker-compose\">安装 docker-compose</h4></blockquote><p><code>$ sudo apt install docker-compose</code></p><blockquote><h4 id=\"切换docker源为国内的源\">切换docker源为国内的源</h4></blockquote><p><code>$ sudo gedit /etc/docker/daemon.json</code></p><blockquote><p>写入配置</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;docker.mirrors.ustc.edu.cn&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id=\"安装容器\">安装容器</h3><ul><li>Tim =&gt; <code>sudo docker pull bestwu/qq</code></li><li>wechat =&gt; <code>sudo docker pull bestwu/wechat</code></li></ul><h3 id=\"容器管理\">容器管理</h3><ol><li>获取audio的组ID<br><code>getent group audio | cut -d: -f3</code></li><li>容器启动文件<br>接下来创建一个yml文件，比如说这里创建 docker-tim.yml，添加如下内容：</li></ol><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">'2'</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"> <span class=\"attr\">qq:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">bestwu/qq:office</span>    <span class=\"comment\"># 后面这个 office 改成 latest ， 登录的就是QQ，否则是Tim</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">qq</span></span><br><span class=\"line\">   <span class=\"attr\">devices:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/dev/snd</span> <span class=\"comment\">#声音</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">/tmp/.X11-unix:/tmp/.X11-unix</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">$HOME/TencentFiles:/TencentFiles</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">DISPLAY=unix$DISPLAY</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">XMODIFIERS=@im=ibus</span> <span class=\"comment\">#中文输入</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">QT_IM_MODULE=ibus</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">GTK_IM_MODULE=ibus</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">AUDIO_GID=29</span> <span class=\"comment\"># 可选 (29 parrotsec) 主机audio gid 解决声音设备访问权限问题</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">GID=1000</span> <span class=\"comment\"># 可选 默认1000 主机当前用户 gid 解决挂载目录访问权限问题</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">UID=1000</span> <span class=\"comment\"># 可选 默认1000 主机当前用户 uid 解决挂载目录访问权限问题</span></span><br></pre></td></tr></table></figure><ol start=\"3\"><li>容器启动命令<br><a href=\"http://xn--start-tim-zq3o4611b.sh\" target=\"_blank\" rel=\"noopener\">编写start-tim.sh</a>：</li></ol><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\"># 密码更改为自己的</span></span><br><span class=\"line\"><span class=\"comment\"># -d 指定为后台启动</span></span><br><span class=\"line\"><span class=\"string\">echo</span> <span class=\"string\">\"yw020154\"</span> <span class=\"string\">|</span> <span class=\"string\">sudo</span> <span class=\"string\">docker-compose</span> <span class=\"string\">-f</span> <span class=\"string\">docker-tim.yml</span> <span class=\"string\">up</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure><ol start=\"4\"><li>容器的常用操作</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动/停止/重启</span></span><br><span class=\"line\">sudo docker start/stop/restart qq</span><br><span class=\"line\"><span class=\"comment\"># 终止容器进程</span></span><br><span class=\"line\">sudo docker <span class=\"built_in\">kill</span> qq</span><br><span class=\"line\"><span class=\"comment\"># 查看运行容器</span></span><br><span class=\"line\">sudo docker ps</span><br></pre></td></tr></table></figure>"},{"title":"Electron+Mobx+React开发记录（一）","catalog":true,"toc_nav_num":true,"date":"2019-10-14T08:18:46.000Z","subtitle":"Electron Mobx React","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-10-14T08:18:46.000Z","_content":"\n![Hello World](Fly.jpg)\n\n### 目录\n1. 前言\n2. 开发环境搭建\n3. 引入Webpack4.0前端打包工具\n4. Electron代码结构和代码热更新\n5. 前端界面React + Mobx 代码结构和热更新\n6. Linux桌面客户端开发遇到的问题\n\n### 前言\n-----------\n最近桌面系统从Ubuntu18.04切换到了Manjaro Linux 17，之前听说Manjaro的软件丰富，仓库更新及时，很多常用软件都能一键安装(比如QQ，微信)，同时也支持主流的Linux桌面环境：Gnome、KDE、Cinnamon、Mate、Deepin等等，安装了Gnome版本的Manjaro之后发现果然还不错。系统安装好后配置比较繁琐，就想给Manjaro写一个GUI客户端工具用于安装常用软件和作为简单的系统管理工具 - [electronux](https://github.com/nojsja/electronux.git)\n作为一名正直的前端开发人员，理所应当地就准备使用Electron + Node.js + React + Mobx + Webpack + Shell 来进行开发啦 ~ 目前仍然在开发中，这篇文章用于记录自己的环境搭建过程、一些对Electron+React开发的理解以及谈谈自己遇到的一些Linux桌面软件开发时遇到的问题和解决办法。\n\n![clean_detail.png](mobx1.png)\n\n![clean_search.png](mobx2.png)\n\n![electron_pssword.png](mobx3.png)\n\n![info_total.png](mobx4.png)\n\n![install_detail.png](mobx5.png)\n\n![install_list.png](mobx6.png)\n\n![install_permission.png](mobx7.png)\n\n![startup_list.png](mobx8.png)\n\n### 开发环境搭建\n------------------------\n#### 代码目录结构\n```sh\nelectronux  \n|---- [dir ] app ( 主代码目录 )\n|----------- [dir ] app/configure ( 应用配置更新 )\n|----------- [dir ] app/runtime ( 运行数据文件 )\n|\n|----------- [dir ] app/services ( 后台服务存放目录 )\n|------------------------ [dir ] app/services/middleware ( 一些中间处理件 )\n|------------------------ [dir ] app/services/shell ( shell脚本存放目录 )\n|------------------------ [dir ] app/services/main-serv ( 主进程服务 )\n|------------------------ [dir ] app/services/render-serv ( 渲染进程服务 )\n|\n|----------- [dir ] app/stores ( 前端状态管理文件目录 )\n|----------- [dir ] app/styles  ( 公用样式表文件 )\n|----------- [dir ] app/utils  ( 公用工具函数 )\n|\n|----------- [dir ] app/views  ( UI界面代码 )\n|------------------------ [dir ] app/views/module1  ( 界面模块1 )\n|------------------------ [dir ] app/views/module2  ( 界面模块2)\n|------------------------ [dir ] app/views/module3  ( 界面模块3 )\n|\n|----------- [file] app/App.js  ( 前端应用入口文件 )\n|----------- [file] app/index.js ( 前端应用热加载文件 )\n|\n|---- [dir ] dist ( 前端代码编译打包文件存放目录 )\n|---- [dir ] resources ( 前端静态资源存放目录 )\n|\n|---- [file] .babelrc ( babel配置文件 )\n|---- [file] .editorconfig (编辑器编码规范文件)\n|---- [file] .eslintrc ( 代码格式检查配置文件 )\n|---- [file] .gitignore ( git忽略追踪配置文件 )\n|---- [file] electron-builder.json ( electron-builder打包配置文件 )\n|---- [file] index.html  ( 应用渲染入口页面 )\n|---- [file] index.js ( 应用主进程入口文件 )\n|---- [file] package.json (前端模块和框架配置文件)\n|---- [file] webpack.config.js (webpack开发环境配置文件)\n|---- [file] webpack.prod.config.js  ( webpack生产环境配置文件 )\n\n```\n\n#### 项目环境依赖配置文件\n```json\n{\n  \"name\": \"electronux\",\n  \"description\": \"linux manager-software powered by electron & react & Mobx \",\n  \"version\": \"1.0.0\",\n  \"author\": {\n    \"name\": \"nojsja\",\n    \"email\": \"yangwei020154@gmail.com\"\n  },\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",\n    \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",\n    \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron --inspect=5858 index'\",\n    \"start-production\": \"cross-env NODE_ENV=production electron --inspect=5858 index\",\n    \"build-all\": \"npm run dist && npm run build\",\n    \"dist\": \"cross-env NODE_ENV=production webpack --config webpack.prod.config.js\",\n    \"build\": \"electron-builder -l\"\n  },\n  \"keywords\": [\n    \"electron\",\n    \"react\",\n    \"mobx\",\n    \"react-router\",\n    \"webpack4\"\n  ],\n  \"license\": \"\",\n  \"nodemonConfig\": {\n    \"ignore\": [\n      \"resources/*\",\n      \"node_modules/*\",\n      \"dist/*\",\n      \"build/*\",\n      \"app/stores/*\",\n      \"app/styles/*\",\n      \"app/services/shell/*\",\n      \"app/configure/view.conf\",\n      \"app/views/*\",\n      \"app/App.js\",\n      \"app/main.js\",\n      \"app/index.js\",\n      \"electron-builder.yml\"\n    ],\n    \"delay\": \"1000\"\n  },\n  \"dependencies\": {\n    \"semantic-ui-css\": \"^2.4.0\",\n    \"semantic-ui-react\": \"^0.82.5\",\n    \"mobx\": \"^4.4.1\",\n    \"mobx-react\": \"^5.2.8\",\n    \"prop-types\": \"^15.6.2\",\n    \"react\": \"^16.5.1\",\n    \"react-dom\": \"^16.5.1\",\n    \"react-hot-loader\": \"^4.3.8\",\n    \"react-router\": \"^4.3.1\",\n    \"react-router-dom\": \"^4.3.1\",\n    \"history\": \"^4.7.2\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.5\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"clean-webpack-plugin\": \"^0.1.19\",\n    \"concurrently\": \"^3.6.1\",\n    \"cross-env\": \"^5.2.0\",\n    \"css-loader\": \"^0.28.11\",\n    \"electron\": \"^2.0.9\",\n    \"electron-builder\": \"^20.28.4\",\n    \"eslint\": \"^5.6.1\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.2\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n    \"file-loader\": \"^2.0.0\",\n    \"html-loader\": \"^0.5.5\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"node-sass\": \"^4.9.4\",\n    \"nodemon\": \"^1.18.4\",\n    \"sass-loader\": \"^7.1.0\",\n    \"source-map-support\": \"^0.5.9\",\n    \"style-loader\": \"^0.21.0\",\n    \"url-loader\": \"^1.1.2\",\n    \"webpack\": \"^4.19.0\",\n    \"webpack-cli\": \"^2.1.5\",\n    \"webpack-dev-server\": \"^3.1.8\"\n  }\n}\n\n```\n\n### 引入Webpack4.0前端打包工具\n---------------------------------------------\n\n#### webpack开发环境配置文件\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// 拆分样式文件\nconst extractSass = new ExtractTextPlugin({\n  filename: 'style.scss.css',\n});\n\nconst extractCss = new ExtractTextPlugin({\n  filename: 'style.css',\n});\n\nmodule.exports = {\n  devtool: 'source-map',\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './app/index',\n  ],\n  mode: 'development',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n  resolve: {\n    alias: {\n      resources: path.resolve(__dirname, 'resources'),\n      app: path.resolve(__dirname, 'app'),\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.html$/,\n        use: {\n          loader: 'html-loader',\n        },\n      },\n      {\n        test: /\\.(png|jpg|gif|svg|ico|woff|eot|ttf|woff2)$/,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[path][name].[ext]',\n            },\n          },\n        ],\n      },\n    ],\n  },\n\n  plugins: [\n    extractSass,\n    extractCss,\n    new webpack.HotModuleReplacementPlugin(),\n    new CleanWebpackPlugin(['dist']),\n    new webpack.NamedModulesPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n  ],\n\n  devServer: {\n    host: 'localhost',\n    port: 3000,\n    historyApiFallback: true,\n    hot: true,\n  },\n  target: 'electron-renderer',\n};\n\n```\n\n### Electron基本原理和代码热更新\n----------------------------------------------\n> Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。\n由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。\n在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。\n进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。\n在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n\n#### 创建主进程\n在index.js文件中我们引入electron和所有的自定义模块文件，并根据开发环境或是生产环境来进行主进程窗口加载，开发环境下使用`http协议`加载由webpack-dev-server启动的http服务，生产环境下使用`file协议`加载本地由webpack打包好的前端bundle.js文件，所以开发环境下`npm start`指令其实主要是执行了两步操作，一是启动webpack-dev-server，此时已经可以通过外部浏览器访问到localhost:3000的http服务，只不过我们实际是用electron之中的chromium浏览器来加载的，它与node.js主进程共享同一个chrome v8引擎，所以理论上，在页面加载后，你同样可以在渲染进程中使用node.js API，比如用使用fs模块访问文件系统。\n\n#### 主进程代码热更新\n我用了nodemon工具实现了主进程代码热更新，如果不用nodemon工具那么 `npm start-electron`命令实际是执行`cross-env NODE_ENV=development electron index`，就是简单的用electron启动主进程文件，使用nodemon之后`npm start-electron`实际上是执行`nodemon --exec 'cross-env NODE_ENV=development electron index'`，最后在package.json文件中增加一个nodemonConfig字段用于指定哪些文件需要纳入nodemon监听即可。\n\n=> package.json中定义的启动脚本：\n```json\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",\n    \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",\n    \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron index'\",\n    \"build\": \"npm run dist && npm run build-all\",\n    \"dist\": \"cross-env NODE_ENV=production webpack  --config webpack.production.config.js\",\n    \"build-all\": \"build -lmw\"\n  },\n```\n\n=> package.json中nodemonConfig字段\n```json\n\"nodemonConfig\": {\n    \"ignore\": [\n      \"resources/*\",\n      \"node_modules/*\",\n      \"dist/*\",\n      \"app/stores/*\",\n      \"app/styles/*\",\n      \"app/services/shell/*\",\n      \"app/configure/view.conf\",\n      \"app/views/*\",\n      \"app/App.js\",\n      \"app/main.js\",\n      \"app/index.js\"\n    ],\n    \"delay\": \"1000\"\n  },\n```\n\n=> 项目启动文件index.js：\n```js\n...\n// 根据运行环境加载窗口 //\nfunction loadWindow(window, env) {\n  if (env === 'development') {\n    // wait for webpack-dev-server start\n    setTimeout(() => {\n      window.loadURL(url.format({\n        pathname: 'localhost:3000',\n        protocol: 'http:',\n        slashes: true,\n      }));\n      // window.webContents.openDevTools();\n    }, 1e3);\n  } else {\n    window.loadURL(url.format({\n      pathname: path.join(path.resolve(__dirname, './dist'), 'index.html'),\n      protocol: 'file:',\n      slashes: true,\n    }));\n  }\n}\n\n/* ------------------- main window ------------------- */\n\nfunction createWindow() {\n  const { width, height } = getAppConf();\n  win = new BrowserWindow({\n    width,\n    height,\n    title: 'electronux',\n    autoHideMenuBar: true,\n  });\n\n  win.on('resize', () => {\n    const [_width, _height] = win.getContentSize();\n    viewConf.set({\n      width: _width,\n      height: _height,\n    });\n  });\n\n  loadWindow(win, nodeEnv);\n}\n\n/* ------------------- electron event ------------------- */\n\napp.on('ready', () => {\n  if (nodeEnv === 'development') {\n    sourceMapSupport.install();\n  }\n  createWindow();\n});\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('will-quit', () => {\n  viewConf.write().then(() => 0, (err) => {\n    console.error(err);\n    throw new Error('App quit: view-conf write error !');\n  });\n});\n\napp.on('activate', () => {\n  if (win === null) {\n    createWindow();\n  }\n});\n```\n\n### 前端界面React + Mobx 代码结构和热更新\n-------------------------------------------------------------\n\n#### 代码结构\n1. App.js前端入口文件\n入口文件基本是整个前端应用的关键点，我们使用`mobx-react`包提供的Provider组件加载整个应用，并把各个应用模块(按功能划分)的mobx store示例作为props属性传入Provider，在各个组建中使用修饰器`@inject`就能直接使用store实例了，页面层次比较多的话最好使用React Router进行路由管理，值得注意的是React Router V4版本跟之前版本的理念和使用方式有很大区别，可以去官网查阅相关文档[react-router4](https://reacttraining.com/react-router/web/guides/quick-start)\n\n```js\n/* ------------------- export global history ------------------- */\nexport const history = createHistory();\n\nconst stores = {\n  install: new InstallState(),\n  startup: new StartupState(),\n  info: new InfoState(),\n  clean: new CleanState(),\n  pub: new PublicState(),\n};\n\nfunction App() {\n  return (\n    <Provider {...stores}>\n      <Router history={history}>\n        <Route path=\"/\" component={HomePage} />\n      </Router>\n    </Provider>\n  );\n}\n\n/* ------------------- export provider ------------------- */\nexport default App;\n\n```\n\n2. mobx store 存储\n这是项目其中一个系统清理模块的mobx store，在store中被mobx监听的属性最好结构层次简单、只有单一的功能划分，不要把一个属性对象的嵌套写得太深。开发时我们把UI界面的数据抽象成store中的数据时可能会下意识地根据页面显示状态而把单个属性对象写得过于复杂，但其实页面显示状态只是逻辑的数据结构，我们在store中存储的时候应该尽量将这种逻辑数据结构`翻译`成扁平化的数据结构，然后再在各个属性对象之间建立映射关系。\n并且使用了mobx之后请尽量依赖mobx的数据引用监听自动更新特性，多写`computed`、`autorun`来自动生成数据，使用`action`修饰一些需要更改store属性的方法。\n\n```js\nclass Clean {\n  constructor() { }\n  /* ------------------- observable ------------------- */\n\n  // 所有检查项目 //\n  @observable items = {\n    appCache: false,\n    appLog: false,\n    trash: false,\n    packageCache: false,\n  };\n\n  // 主界面加载 //\n  @observable loadingMain = false;\n\n  // 清理路径 //\n  cleanPaths = {\n    appCache: [`/home/${this.userinfo.username}/.cache`],\n    appLog: ['/var/log/'],\n    trash: [`/home/${this.userinfo.username}/.local/share/Trash/files`],\n    packageCache: ['/var/cache/pacman/pkg'],\n  }\n\n  // 路径模块映射 //\n  @observable cleanPathMap = {\n    appCache: [], // '/var/log/pacman.log'\n    appLog: [],\n    trash: [],\n    packageCache: [],\n  }\n\n  // 清理内容 //\n  @observable cleanContents = observable.map({})\n\n  // 清理大小 //\n  cleanSizes = {\n    // '/var/log//pacman.log': '10kb',\n  }\n\n  // ---- 清理选项细节-数据对象逻辑树结构 ---- //\n  // @observable cleanDetails = {\n  //   appCache: {\n  //     url: [`/home/${this.userinfo.username}/.cache`], // 指定扫描路径多个\n  //     contents: { // 绝对路径\n  //       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': false,\n  //     },\n  //     size: {\n  //       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': '10kb',\n  //     },\n  //   },\n  //   appLog: {\n  //     url: ['/var/log/'],\n  //     contents: {\n  //       // '/var/log//pacman.log': false,\n  //     },\n  //     size: {\n  //       // '/var/log//pacman.log': '10kb',\n  //     },\n  //   }\n  // }\n\n  /* ------------------- static ------------------- */\n\n\n  /* ------------------- computed ------------------- */\n\n  // 获取所有被选中的detail item //\n  @computed get allCheckedDetail() {\n    const a = [];\n    this.cleanContents.forEach((v, k) => {\n      if (v) a.push(k);\n    });\n    return a;\n  }\n\n  // 清理路径详细信息 //\n  @computed get cleanDetail() {\n    const result = [];\n    Object.keys(this.cleanPathMap).forEach((item) => {\n      if (this.items[item]) {\n        const oneResult = {\n          label: item,\n          contents: [],\n        };\n        this.cleanPathMap[item].forEach((it) => {\n          oneResult.contents.push({\n            content: it,\n            size: this.cleanSizes[it] || 0,\n          });\n        });\n\n        result.push(oneResult);\n      }\n    });\n\n    return result;\n  }\n}\n\nexport default Clean;\n\n```\n\n3. 页面组件划分\n在views目录下创建的各个目录都是一个单独的组件目录，组件目录下有一个组件入口文件和css样式表文件以及其它子组件，入口文件载入css文件和子组件，使用`@inject`修饰器后各个组件都可以独立访问mobx store实例，不必在父和子组件之间通过props进行逐级参数传递，但是如果一个子组件依赖父组件来加工原始数据的话也可以使用props传递参数。\n使用了mobx之后，并不是说每个页面需要使用的数据都有必要纳入mobx store的管理，在我的代码中只是把`关键性数据`以及`关键性数据加工方法`存入了store中，每个组件拿到store传递下来的数据后一些页面状态可能需要依赖组件各自的数据处理函数进行数据二次加工，我觉得这样应该会减轻store实例的负载压力，非绝对中心化。比如在一个列表菜单组件中，这个组件的列表数据可以切换显示和隐藏，但是控制这个列表显示/隐藏的参数状态`visible`没有必要纳入store实例管理，相对的管理这个列表组件的store实例只是存储了列表数据的数组，以及一些必要的数据加工方法。\n\n4. 渲染进程和主进程ipc通信的问题\n页面的每个渲染进程(ipcRender)，虽然说可以直接使用node.js原生模块和api，但是不建议在渲染进程中过度使用原生模块，一是因为一些node.js原生模块并没有考虑到进程安全的问题，第二个原因是渲染进程应该专注处理页面交互和数据处理问题，划清代码的功能区域，把和系统交互的问题交由主进程(ipcMain)处理，把网络数据请求也交由各自的service服务，减少不必要的模块和数据耦合。渲染进程通过ipc通信向主进程发送处理请求，主进程和service负责原始数据的获取和网络数据的传输，最后主进程通过ipc通信向对应的渲染进程返回处理结果，service拿到的网络数据也通过回调事件发送给渲染进程。项目中我把mobx store作为和主进程通信的桥梁，mobx store向主进程发送信号，同时也在接收到主进程的ipc通信事件后再把主进程发回来的数据更新到各个observer。总之主进程和service服务负责系统交互、原始数据获取和传输，渲染进程mobx store负责响应信号和事件进行业务数据更新，各个view子组件只负责页面渲染和用户交互。\n\n\n#### 前端代码热更新\n1. webpack.config.js中启动webpack-dev-server的热更新功能\n\n```js\ndevServer: {\n    host: 'localhost',\n    port: 3000,\n    historyApiFallback: true,\n    hot: true,\n  },\n```\n2. 使用`react-hot-loader`的AppContainer组件\n\n```js\nimport { AppContainer } from 'react-hot-loader';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './styles/public.css';\n\nimport App from './App';\n\nrender(\n  <AppContainer>\n    <App />\n  </AppContainer>,\n  document.getElementById('root')\n);\n```\n### Linux桌面客户端开发遇到的问题\n-------------------------------------------------------\n#### 使用node.js子进程child_process执行shell脚本时无法取得系统root权限\n项目中有的脚本需要使用root权限，比如安装和卸载软件、扫描系统关键路径，node.js里执行shell脚本可以使用child_process模块(node.js子进程)，child_process有几个方法，`spawn`、`exec`、`execFile`、`fork`，它们都能创建子进程以执行指定文件或命令，具体的使用方法见[Node API](http://nodejs.cn/api/child_process.html#child_process_asynchronous_process_creation)，如果我们的脚本或指令需要使用root权限那可就麻烦了，桌面应用又不是终端，不可能用着用着让用户去终端输入密码吧，况且只是在开发环境下能看到终端输出，应用打包安装运行起来后就是一个独立的应用程序了，根本没法输入终端密码，仔细查阅了Electron官网API发现electron官方并没有集成一个什么系统权限调用窗口之类的组件。没办法了，这种情况下手动写出了两种方法：\n1. 调用获取系统权限的系统自带组件来执行自定义命令和脚本\n2. 封装一个弹窗组件来获取用户首次输入的密码，然后手动把密码记录到文件中，应用启动的时候从文件中读出密码，在使用child_process创建子进程的时候再监听子进程的输出事件和错误事件，然后把读取到的保存在内存中的密码以输入流(input stream)的形式发送给child_process创建的子进程，子进程读取到输入流传入的密码后就能继续执行了。  \n\n![electron_pssword.png](mobx9.png)\n\n![install_permission.png](mobx10.png)\n\n\n__具体代码见__：[github/nojsja/electronux/app/utils/sudo-prompt.js](/blogs/img/article/mobx10.png)  \n\n_感谢阅读，文章中出现的错误之处还请多指正~_  \n\n### 未完待续\n","source":"_posts/2019-10-14-Electron-Mobx-React开发记录（一）.md","raw":"---\ntitle: \"Electron+Mobx+React开发记录（一）\"\ncatalog: true\ntoc_nav_num: true\ndate:   2019-10-14 16:18:46\nsubtitle: \"Electron Mobx React\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- es6\n- react\n- mobx\n- electron\ncategories:\n- Mobx\n- Electron\nupdateDate: 2019-10-14 16:18:46\n---\n\n![Hello World](Fly.jpg)\n\n### 目录\n1. 前言\n2. 开发环境搭建\n3. 引入Webpack4.0前端打包工具\n4. Electron代码结构和代码热更新\n5. 前端界面React + Mobx 代码结构和热更新\n6. Linux桌面客户端开发遇到的问题\n\n### 前言\n-----------\n最近桌面系统从Ubuntu18.04切换到了Manjaro Linux 17，之前听说Manjaro的软件丰富，仓库更新及时，很多常用软件都能一键安装(比如QQ，微信)，同时也支持主流的Linux桌面环境：Gnome、KDE、Cinnamon、Mate、Deepin等等，安装了Gnome版本的Manjaro之后发现果然还不错。系统安装好后配置比较繁琐，就想给Manjaro写一个GUI客户端工具用于安装常用软件和作为简单的系统管理工具 - [electronux](https://github.com/nojsja/electronux.git)\n作为一名正直的前端开发人员，理所应当地就准备使用Electron + Node.js + React + Mobx + Webpack + Shell 来进行开发啦 ~ 目前仍然在开发中，这篇文章用于记录自己的环境搭建过程、一些对Electron+React开发的理解以及谈谈自己遇到的一些Linux桌面软件开发时遇到的问题和解决办法。\n\n![clean_detail.png](mobx1.png)\n\n![clean_search.png](mobx2.png)\n\n![electron_pssword.png](mobx3.png)\n\n![info_total.png](mobx4.png)\n\n![install_detail.png](mobx5.png)\n\n![install_list.png](mobx6.png)\n\n![install_permission.png](mobx7.png)\n\n![startup_list.png](mobx8.png)\n\n### 开发环境搭建\n------------------------\n#### 代码目录结构\n```sh\nelectronux  \n|---- [dir ] app ( 主代码目录 )\n|----------- [dir ] app/configure ( 应用配置更新 )\n|----------- [dir ] app/runtime ( 运行数据文件 )\n|\n|----------- [dir ] app/services ( 后台服务存放目录 )\n|------------------------ [dir ] app/services/middleware ( 一些中间处理件 )\n|------------------------ [dir ] app/services/shell ( shell脚本存放目录 )\n|------------------------ [dir ] app/services/main-serv ( 主进程服务 )\n|------------------------ [dir ] app/services/render-serv ( 渲染进程服务 )\n|\n|----------- [dir ] app/stores ( 前端状态管理文件目录 )\n|----------- [dir ] app/styles  ( 公用样式表文件 )\n|----------- [dir ] app/utils  ( 公用工具函数 )\n|\n|----------- [dir ] app/views  ( UI界面代码 )\n|------------------------ [dir ] app/views/module1  ( 界面模块1 )\n|------------------------ [dir ] app/views/module2  ( 界面模块2)\n|------------------------ [dir ] app/views/module3  ( 界面模块3 )\n|\n|----------- [file] app/App.js  ( 前端应用入口文件 )\n|----------- [file] app/index.js ( 前端应用热加载文件 )\n|\n|---- [dir ] dist ( 前端代码编译打包文件存放目录 )\n|---- [dir ] resources ( 前端静态资源存放目录 )\n|\n|---- [file] .babelrc ( babel配置文件 )\n|---- [file] .editorconfig (编辑器编码规范文件)\n|---- [file] .eslintrc ( 代码格式检查配置文件 )\n|---- [file] .gitignore ( git忽略追踪配置文件 )\n|---- [file] electron-builder.json ( electron-builder打包配置文件 )\n|---- [file] index.html  ( 应用渲染入口页面 )\n|---- [file] index.js ( 应用主进程入口文件 )\n|---- [file] package.json (前端模块和框架配置文件)\n|---- [file] webpack.config.js (webpack开发环境配置文件)\n|---- [file] webpack.prod.config.js  ( webpack生产环境配置文件 )\n\n```\n\n#### 项目环境依赖配置文件\n```json\n{\n  \"name\": \"electronux\",\n  \"description\": \"linux manager-software powered by electron & react & Mobx \",\n  \"version\": \"1.0.0\",\n  \"author\": {\n    \"name\": \"nojsja\",\n    \"email\": \"yangwei020154@gmail.com\"\n  },\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",\n    \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",\n    \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron --inspect=5858 index'\",\n    \"start-production\": \"cross-env NODE_ENV=production electron --inspect=5858 index\",\n    \"build-all\": \"npm run dist && npm run build\",\n    \"dist\": \"cross-env NODE_ENV=production webpack --config webpack.prod.config.js\",\n    \"build\": \"electron-builder -l\"\n  },\n  \"keywords\": [\n    \"electron\",\n    \"react\",\n    \"mobx\",\n    \"react-router\",\n    \"webpack4\"\n  ],\n  \"license\": \"\",\n  \"nodemonConfig\": {\n    \"ignore\": [\n      \"resources/*\",\n      \"node_modules/*\",\n      \"dist/*\",\n      \"build/*\",\n      \"app/stores/*\",\n      \"app/styles/*\",\n      \"app/services/shell/*\",\n      \"app/configure/view.conf\",\n      \"app/views/*\",\n      \"app/App.js\",\n      \"app/main.js\",\n      \"app/index.js\",\n      \"electron-builder.yml\"\n    ],\n    \"delay\": \"1000\"\n  },\n  \"dependencies\": {\n    \"semantic-ui-css\": \"^2.4.0\",\n    \"semantic-ui-react\": \"^0.82.5\",\n    \"mobx\": \"^4.4.1\",\n    \"mobx-react\": \"^5.2.8\",\n    \"prop-types\": \"^15.6.2\",\n    \"react\": \"^16.5.1\",\n    \"react-dom\": \"^16.5.1\",\n    \"react-hot-loader\": \"^4.3.8\",\n    \"react-router\": \"^4.3.1\",\n    \"react-router-dom\": \"^4.3.1\",\n    \"history\": \"^4.7.2\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^7.1.5\",\n    \"babel-plugin-transform-decorators-legacy\": \"^1.3.5\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"babel-preset-stage-0\": \"^6.24.1\",\n    \"clean-webpack-plugin\": \"^0.1.19\",\n    \"concurrently\": \"^3.6.1\",\n    \"cross-env\": \"^5.2.0\",\n    \"css-loader\": \"^0.28.11\",\n    \"electron\": \"^2.0.9\",\n    \"electron-builder\": \"^20.28.4\",\n    \"eslint\": \"^5.6.1\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-jsx-a11y\": \"^6.1.2\",\n    \"eslint-plugin-react\": \"^7.11.1\",\n    \"extract-text-webpack-plugin\": \"^4.0.0-beta.0\",\n    \"file-loader\": \"^2.0.0\",\n    \"html-loader\": \"^0.5.5\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"node-sass\": \"^4.9.4\",\n    \"nodemon\": \"^1.18.4\",\n    \"sass-loader\": \"^7.1.0\",\n    \"source-map-support\": \"^0.5.9\",\n    \"style-loader\": \"^0.21.0\",\n    \"url-loader\": \"^1.1.2\",\n    \"webpack\": \"^4.19.0\",\n    \"webpack-cli\": \"^2.1.5\",\n    \"webpack-dev-server\": \"^3.1.8\"\n  }\n}\n\n```\n\n### 引入Webpack4.0前端打包工具\n---------------------------------------------\n\n#### webpack开发环境配置文件\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// 拆分样式文件\nconst extractSass = new ExtractTextPlugin({\n  filename: 'style.scss.css',\n});\n\nconst extractCss = new ExtractTextPlugin({\n  filename: 'style.css',\n});\n\nmodule.exports = {\n  devtool: 'source-map',\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './app/index',\n  ],\n  mode: 'development',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n  resolve: {\n    alias: {\n      resources: path.resolve(__dirname, 'resources'),\n      app: path.resolve(__dirname, 'app'),\n    },\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.html$/,\n        use: {\n          loader: 'html-loader',\n        },\n      },\n      {\n        test: /\\.(png|jpg|gif|svg|ico|woff|eot|ttf|woff2)$/,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {\n              name: '[path][name].[ext]',\n            },\n          },\n        ],\n      },\n    ],\n  },\n\n  plugins: [\n    extractSass,\n    extractCss,\n    new webpack.HotModuleReplacementPlugin(),\n    new CleanWebpackPlugin(['dist']),\n    new webpack.NamedModulesPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n  ],\n\n  devServer: {\n    host: 'localhost',\n    port: 3000,\n    historyApiFallback: true,\n    hot: true,\n  },\n  target: 'electron-renderer',\n};\n\n```\n\n### Electron基本原理和代码热更新\n----------------------------------------------\n> Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。\n由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。\n在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。\n进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。\n在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n\n#### 创建主进程\n在index.js文件中我们引入electron和所有的自定义模块文件，并根据开发环境或是生产环境来进行主进程窗口加载，开发环境下使用`http协议`加载由webpack-dev-server启动的http服务，生产环境下使用`file协议`加载本地由webpack打包好的前端bundle.js文件，所以开发环境下`npm start`指令其实主要是执行了两步操作，一是启动webpack-dev-server，此时已经可以通过外部浏览器访问到localhost:3000的http服务，只不过我们实际是用electron之中的chromium浏览器来加载的，它与node.js主进程共享同一个chrome v8引擎，所以理论上，在页面加载后，你同样可以在渲染进程中使用node.js API，比如用使用fs模块访问文件系统。\n\n#### 主进程代码热更新\n我用了nodemon工具实现了主进程代码热更新，如果不用nodemon工具那么 `npm start-electron`命令实际是执行`cross-env NODE_ENV=development electron index`，就是简单的用electron启动主进程文件，使用nodemon之后`npm start-electron`实际上是执行`nodemon --exec 'cross-env NODE_ENV=development electron index'`，最后在package.json文件中增加一个nodemonConfig字段用于指定哪些文件需要纳入nodemon监听即可。\n\n=> package.json中定义的启动脚本：\n```json\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",\n    \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",\n    \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron index'\",\n    \"build\": \"npm run dist && npm run build-all\",\n    \"dist\": \"cross-env NODE_ENV=production webpack  --config webpack.production.config.js\",\n    \"build-all\": \"build -lmw\"\n  },\n```\n\n=> package.json中nodemonConfig字段\n```json\n\"nodemonConfig\": {\n    \"ignore\": [\n      \"resources/*\",\n      \"node_modules/*\",\n      \"dist/*\",\n      \"app/stores/*\",\n      \"app/styles/*\",\n      \"app/services/shell/*\",\n      \"app/configure/view.conf\",\n      \"app/views/*\",\n      \"app/App.js\",\n      \"app/main.js\",\n      \"app/index.js\"\n    ],\n    \"delay\": \"1000\"\n  },\n```\n\n=> 项目启动文件index.js：\n```js\n...\n// 根据运行环境加载窗口 //\nfunction loadWindow(window, env) {\n  if (env === 'development') {\n    // wait for webpack-dev-server start\n    setTimeout(() => {\n      window.loadURL(url.format({\n        pathname: 'localhost:3000',\n        protocol: 'http:',\n        slashes: true,\n      }));\n      // window.webContents.openDevTools();\n    }, 1e3);\n  } else {\n    window.loadURL(url.format({\n      pathname: path.join(path.resolve(__dirname, './dist'), 'index.html'),\n      protocol: 'file:',\n      slashes: true,\n    }));\n  }\n}\n\n/* ------------------- main window ------------------- */\n\nfunction createWindow() {\n  const { width, height } = getAppConf();\n  win = new BrowserWindow({\n    width,\n    height,\n    title: 'electronux',\n    autoHideMenuBar: true,\n  });\n\n  win.on('resize', () => {\n    const [_width, _height] = win.getContentSize();\n    viewConf.set({\n      width: _width,\n      height: _height,\n    });\n  });\n\n  loadWindow(win, nodeEnv);\n}\n\n/* ------------------- electron event ------------------- */\n\napp.on('ready', () => {\n  if (nodeEnv === 'development') {\n    sourceMapSupport.install();\n  }\n  createWindow();\n});\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('will-quit', () => {\n  viewConf.write().then(() => 0, (err) => {\n    console.error(err);\n    throw new Error('App quit: view-conf write error !');\n  });\n});\n\napp.on('activate', () => {\n  if (win === null) {\n    createWindow();\n  }\n});\n```\n\n### 前端界面React + Mobx 代码结构和热更新\n-------------------------------------------------------------\n\n#### 代码结构\n1. App.js前端入口文件\n入口文件基本是整个前端应用的关键点，我们使用`mobx-react`包提供的Provider组件加载整个应用，并把各个应用模块(按功能划分)的mobx store示例作为props属性传入Provider，在各个组建中使用修饰器`@inject`就能直接使用store实例了，页面层次比较多的话最好使用React Router进行路由管理，值得注意的是React Router V4版本跟之前版本的理念和使用方式有很大区别，可以去官网查阅相关文档[react-router4](https://reacttraining.com/react-router/web/guides/quick-start)\n\n```js\n/* ------------------- export global history ------------------- */\nexport const history = createHistory();\n\nconst stores = {\n  install: new InstallState(),\n  startup: new StartupState(),\n  info: new InfoState(),\n  clean: new CleanState(),\n  pub: new PublicState(),\n};\n\nfunction App() {\n  return (\n    <Provider {...stores}>\n      <Router history={history}>\n        <Route path=\"/\" component={HomePage} />\n      </Router>\n    </Provider>\n  );\n}\n\n/* ------------------- export provider ------------------- */\nexport default App;\n\n```\n\n2. mobx store 存储\n这是项目其中一个系统清理模块的mobx store，在store中被mobx监听的属性最好结构层次简单、只有单一的功能划分，不要把一个属性对象的嵌套写得太深。开发时我们把UI界面的数据抽象成store中的数据时可能会下意识地根据页面显示状态而把单个属性对象写得过于复杂，但其实页面显示状态只是逻辑的数据结构，我们在store中存储的时候应该尽量将这种逻辑数据结构`翻译`成扁平化的数据结构，然后再在各个属性对象之间建立映射关系。\n并且使用了mobx之后请尽量依赖mobx的数据引用监听自动更新特性，多写`computed`、`autorun`来自动生成数据，使用`action`修饰一些需要更改store属性的方法。\n\n```js\nclass Clean {\n  constructor() { }\n  /* ------------------- observable ------------------- */\n\n  // 所有检查项目 //\n  @observable items = {\n    appCache: false,\n    appLog: false,\n    trash: false,\n    packageCache: false,\n  };\n\n  // 主界面加载 //\n  @observable loadingMain = false;\n\n  // 清理路径 //\n  cleanPaths = {\n    appCache: [`/home/${this.userinfo.username}/.cache`],\n    appLog: ['/var/log/'],\n    trash: [`/home/${this.userinfo.username}/.local/share/Trash/files`],\n    packageCache: ['/var/cache/pacman/pkg'],\n  }\n\n  // 路径模块映射 //\n  @observable cleanPathMap = {\n    appCache: [], // '/var/log/pacman.log'\n    appLog: [],\n    trash: [],\n    packageCache: [],\n  }\n\n  // 清理内容 //\n  @observable cleanContents = observable.map({})\n\n  // 清理大小 //\n  cleanSizes = {\n    // '/var/log//pacman.log': '10kb',\n  }\n\n  // ---- 清理选项细节-数据对象逻辑树结构 ---- //\n  // @observable cleanDetails = {\n  //   appCache: {\n  //     url: [`/home/${this.userinfo.username}/.cache`], // 指定扫描路径多个\n  //     contents: { // 绝对路径\n  //       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': false,\n  //     },\n  //     size: {\n  //       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': '10kb',\n  //     },\n  //   },\n  //   appLog: {\n  //     url: ['/var/log/'],\n  //     contents: {\n  //       // '/var/log//pacman.log': false,\n  //     },\n  //     size: {\n  //       // '/var/log//pacman.log': '10kb',\n  //     },\n  //   }\n  // }\n\n  /* ------------------- static ------------------- */\n\n\n  /* ------------------- computed ------------------- */\n\n  // 获取所有被选中的detail item //\n  @computed get allCheckedDetail() {\n    const a = [];\n    this.cleanContents.forEach((v, k) => {\n      if (v) a.push(k);\n    });\n    return a;\n  }\n\n  // 清理路径详细信息 //\n  @computed get cleanDetail() {\n    const result = [];\n    Object.keys(this.cleanPathMap).forEach((item) => {\n      if (this.items[item]) {\n        const oneResult = {\n          label: item,\n          contents: [],\n        };\n        this.cleanPathMap[item].forEach((it) => {\n          oneResult.contents.push({\n            content: it,\n            size: this.cleanSizes[it] || 0,\n          });\n        });\n\n        result.push(oneResult);\n      }\n    });\n\n    return result;\n  }\n}\n\nexport default Clean;\n\n```\n\n3. 页面组件划分\n在views目录下创建的各个目录都是一个单独的组件目录，组件目录下有一个组件入口文件和css样式表文件以及其它子组件，入口文件载入css文件和子组件，使用`@inject`修饰器后各个组件都可以独立访问mobx store实例，不必在父和子组件之间通过props进行逐级参数传递，但是如果一个子组件依赖父组件来加工原始数据的话也可以使用props传递参数。\n使用了mobx之后，并不是说每个页面需要使用的数据都有必要纳入mobx store的管理，在我的代码中只是把`关键性数据`以及`关键性数据加工方法`存入了store中，每个组件拿到store传递下来的数据后一些页面状态可能需要依赖组件各自的数据处理函数进行数据二次加工，我觉得这样应该会减轻store实例的负载压力，非绝对中心化。比如在一个列表菜单组件中，这个组件的列表数据可以切换显示和隐藏，但是控制这个列表显示/隐藏的参数状态`visible`没有必要纳入store实例管理，相对的管理这个列表组件的store实例只是存储了列表数据的数组，以及一些必要的数据加工方法。\n\n4. 渲染进程和主进程ipc通信的问题\n页面的每个渲染进程(ipcRender)，虽然说可以直接使用node.js原生模块和api，但是不建议在渲染进程中过度使用原生模块，一是因为一些node.js原生模块并没有考虑到进程安全的问题，第二个原因是渲染进程应该专注处理页面交互和数据处理问题，划清代码的功能区域，把和系统交互的问题交由主进程(ipcMain)处理，把网络数据请求也交由各自的service服务，减少不必要的模块和数据耦合。渲染进程通过ipc通信向主进程发送处理请求，主进程和service负责原始数据的获取和网络数据的传输，最后主进程通过ipc通信向对应的渲染进程返回处理结果，service拿到的网络数据也通过回调事件发送给渲染进程。项目中我把mobx store作为和主进程通信的桥梁，mobx store向主进程发送信号，同时也在接收到主进程的ipc通信事件后再把主进程发回来的数据更新到各个observer。总之主进程和service服务负责系统交互、原始数据获取和传输，渲染进程mobx store负责响应信号和事件进行业务数据更新，各个view子组件只负责页面渲染和用户交互。\n\n\n#### 前端代码热更新\n1. webpack.config.js中启动webpack-dev-server的热更新功能\n\n```js\ndevServer: {\n    host: 'localhost',\n    port: 3000,\n    historyApiFallback: true,\n    hot: true,\n  },\n```\n2. 使用`react-hot-loader`的AppContainer组件\n\n```js\nimport { AppContainer } from 'react-hot-loader';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './styles/public.css';\n\nimport App from './App';\n\nrender(\n  <AppContainer>\n    <App />\n  </AppContainer>,\n  document.getElementById('root')\n);\n```\n### Linux桌面客户端开发遇到的问题\n-------------------------------------------------------\n#### 使用node.js子进程child_process执行shell脚本时无法取得系统root权限\n项目中有的脚本需要使用root权限，比如安装和卸载软件、扫描系统关键路径，node.js里执行shell脚本可以使用child_process模块(node.js子进程)，child_process有几个方法，`spawn`、`exec`、`execFile`、`fork`，它们都能创建子进程以执行指定文件或命令，具体的使用方法见[Node API](http://nodejs.cn/api/child_process.html#child_process_asynchronous_process_creation)，如果我们的脚本或指令需要使用root权限那可就麻烦了，桌面应用又不是终端，不可能用着用着让用户去终端输入密码吧，况且只是在开发环境下能看到终端输出，应用打包安装运行起来后就是一个独立的应用程序了，根本没法输入终端密码，仔细查阅了Electron官网API发现electron官方并没有集成一个什么系统权限调用窗口之类的组件。没办法了，这种情况下手动写出了两种方法：\n1. 调用获取系统权限的系统自带组件来执行自定义命令和脚本\n2. 封装一个弹窗组件来获取用户首次输入的密码，然后手动把密码记录到文件中，应用启动的时候从文件中读出密码，在使用child_process创建子进程的时候再监听子进程的输出事件和错误事件，然后把读取到的保存在内存中的密码以输入流(input stream)的形式发送给child_process创建的子进程，子进程读取到输入流传入的密码后就能继续执行了。  \n\n![electron_pssword.png](mobx9.png)\n\n![install_permission.png](mobx10.png)\n\n\n__具体代码见__：[github/nojsja/electronux/app/utils/sudo-prompt.js](/blogs/img/article/mobx10.png)  \n\n_感谢阅读，文章中出现的错误之处还请多指正~_  \n\n### 未完待续\n","slug":"Electron-Mobx-React开发记录（一）","published":1,"updated":"2020-12-06T10:52:49.984Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmur0000xkl9528g5d443","content":"<p><img src=\"Fly.jpg\" alt=\"Hello World\"></p><h3 id=\"目录\">目录</h3><ol><li>前言</li><li>开发环境搭建</li><li>引入Webpack4.0前端打包工具</li><li>Electron代码结构和代码热更新</li><li>前端界面React + Mobx 代码结构和热更新</li><li>Linux桌面客户端开发遇到的问题</li></ol><h3 id=\"前言\">前言</h3><hr><p>最近桌面系统从Ubuntu18.04切换到了Manjaro Linux 17，之前听说Manjaro的软件丰富，仓库更新及时，很多常用软件都能一键安装(比如QQ，微信)，同时也支持主流的Linux桌面环境：Gnome、KDE、Cinnamon、Mate、Deepin等等，安装了Gnome版本的Manjaro之后发现果然还不错。系统安装好后配置比较繁琐，就想给Manjaro写一个GUI客户端工具用于安装常用软件和作为简单的系统管理工具 - <a href=\"https://github.com/nojsja/electronux.git\" target=\"_blank\" rel=\"noopener\">electronux</a><br>作为一名正直的前端开发人员，理所应当地就准备使用Electron + Node.js + React + Mobx + Webpack + Shell 来进行开发啦 ~ 目前仍然在开发中，这篇文章用于记录自己的环境搭建过程、一些对Electron+React开发的理解以及谈谈自己遇到的一些Linux桌面软件开发时遇到的问题和解决办法。</p><p><img src=\"mobx1.png\" alt=\"clean_detail.png\"></p><p><img src=\"mobx2.png\" alt=\"clean_search.png\"></p><p><img src=\"mobx3.png\" alt=\"electron_pssword.png\"></p><p><img src=\"mobx4.png\" alt=\"info_total.png\"></p><p><img src=\"mobx5.png\" alt=\"install_detail.png\"></p><p><img src=\"mobx6.png\" alt=\"install_list.png\"></p><p><img src=\"mobx7.png\" alt=\"install_permission.png\"></p><p><img src=\"mobx8.png\" alt=\"startup_list.png\"></p><h3 id=\"开发环境搭建\">开发环境搭建</h3><hr><h4 id=\"代码目录结构\">代码目录结构</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electronux  </span><br><span class=\"line\">|---- [dir ] app ( 主代码目录 )</span><br><span class=\"line\">|----------- [dir ] app/configure ( 应用配置更新 )</span><br><span class=\"line\">|----------- [dir ] app/runtime ( 运行数据文件 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/services ( 后台服务存放目录 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/middleware ( 一些中间处理件 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/shell ( shell脚本存放目录 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/main-serv ( 主进程服务 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/render-serv ( 渲染进程服务 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/stores ( 前端状态管理文件目录 )</span><br><span class=\"line\">|----------- [dir ] app/styles  ( 公用样式表文件 )</span><br><span class=\"line\">|----------- [dir ] app/utils  ( 公用工具函数 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/views  ( UI界面代码 )</span><br><span class=\"line\">|------------------------ [dir ] app/views/module1  ( 界面模块1 )</span><br><span class=\"line\">|------------------------ [dir ] app/views/module2  ( 界面模块2)</span><br><span class=\"line\">|------------------------ [dir ] app/views/module3  ( 界面模块3 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [file] app/App.js  ( 前端应用入口文件 )</span><br><span class=\"line\">|----------- [file] app/index.js ( 前端应用热加载文件 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|---- [dir ] dist ( 前端代码编译打包文件存放目录 )</span><br><span class=\"line\">|---- [dir ] resources ( 前端静态资源存放目录 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|---- [file] .babelrc ( babel配置文件 )</span><br><span class=\"line\">|---- [file] .editorconfig (编辑器编码规范文件)</span><br><span class=\"line\">|---- [file] .eslintrc ( 代码格式检查配置文件 )</span><br><span class=\"line\">|---- [file] .gitignore ( git忽略追踪配置文件 )</span><br><span class=\"line\">|---- [file] electron-builder.json ( electron-builder打包配置文件 )</span><br><span class=\"line\">|---- [file] index.html  ( 应用渲染入口页面 )</span><br><span class=\"line\">|---- [file] index.js ( 应用主进程入口文件 )</span><br><span class=\"line\">|---- [file] package.json (前端模块和框架配置文件)</span><br><span class=\"line\">|---- [file] webpack.config.js (webpack开发环境配置文件)</span><br><span class=\"line\">|---- [file] webpack.prod.config.js  ( webpack生产环境配置文件 )</span><br></pre></td></tr></table></figure><h4 id=\"项目环境依赖配置文件\">项目环境依赖配置文件</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"linux manager-software powered by electron &amp; react &amp; Mobx \"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"nojsja\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"yangwei020154@gmail.com\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-dev\"</span>: <span class=\"string\">\"cross-env NODE_ENV=development webpack-dev-server\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-electron\"</span>: <span class=\"string\">\"nodemon --exec 'cross-env NODE_ENV=development electron --inspect=5858 index'\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-production\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production electron --inspect=5858 index\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build-all\"</span>: <span class=\"string\">\"npm run dist &amp;&amp; npm run build\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dist\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production webpack --config webpack.prod.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"electron-builder -l\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"electron\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mobx\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-router\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack4\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"nodemonConfig\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ignore\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"resources/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"node_modules/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"dist/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"build/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/stores/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/styles/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/services/shell/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/configure/view.conf\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/views/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/App.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/main.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/index.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"electron-builder.yml\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"delay\"</span>: <span class=\"string\">\"1000\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"semantic-ui-css\"</span>: <span class=\"string\">\"^2.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"semantic-ui-react\"</span>: <span class=\"string\">\"^0.82.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mobx\"</span>: <span class=\"string\">\"^4.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mobx-react\"</span>: <span class=\"string\">\"^5.2.8\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prop-types\"</span>: <span class=\"string\">\"^15.6.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^16.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^16.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-hot-loader\"</span>: <span class=\"string\">\"^4.3.8\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-router\"</span>: <span class=\"string\">\"^4.3.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-router-dom\"</span>: <span class=\"string\">\"^4.3.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"history\"</span>: <span class=\"string\">\"^4.7.2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-eslint\"</span>: <span class=\"string\">\"^10.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.7.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"clean-webpack-plugin\"</span>: <span class=\"string\">\"^0.1.19\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"concurrently\"</span>: <span class=\"string\">\"^3.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"cross-env\"</span>: <span class=\"string\">\"^5.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.11\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"electron\"</span>: <span class=\"string\">\"^2.0.9\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"electron-builder\"</span>: <span class=\"string\">\"^20.28.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint\"</span>: <span class=\"string\">\"^5.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-config-airbnb\"</span>: <span class=\"string\">\"^17.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-import\"</span>: <span class=\"string\">\"^2.14.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"string\">\"^6.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-react\"</span>: <span class=\"string\">\"^7.11.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extract-text-webpack-plugin\"</span>: <span class=\"string\">\"^4.0.0-beta.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"file-loader\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-loader\"</span>: <span class=\"string\">\"^0.5.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^3.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.9.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"nodemon\"</span>: <span class=\"string\">\"^1.18.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sass-loader\"</span>: <span class=\"string\">\"^7.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"source-map-support\"</span>: <span class=\"string\">\"^0.5.9\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.21.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url-loader\"</span>: <span class=\"string\">\"^1.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^4.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-cli\"</span>: <span class=\"string\">\"^2.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^3.1.8\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"引入Webpack4-0前端打包工具\">引入Webpack4.0前端打包工具</h3><hr><h4 id=\"webpack开发环境配置文件\">webpack开发环境配置文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.scss.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractCss = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    <span class=\"string\">'react-hot-loader/patch'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/only-dev-server'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./app/index'</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      resources: path.resolve(__dirname, <span class=\"string\">'resources'</span>),</span><br><span class=\"line\">      app: path.resolve(__dirname, <span class=\"string\">'app'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'html-loader'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg|ico|woff|eot|ttf|woff2)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[path][name].[ext]'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    extractSass,</span><br><span class=\"line\">    extractCss,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  target: <span class=\"string\">'electron-renderer'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"Electron基本原理和代码热更新\">Electron基本原理和代码热更新</h3><hr><blockquote><p>Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。<br>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。<br>在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。<br>进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。<br>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p></blockquote><h4 id=\"创建主进程\">创建主进程</h4><p>在index.js文件中我们引入electron和所有的自定义模块文件，并根据开发环境或是生产环境来进行主进程窗口加载，开发环境下使用<code>http协议</code>加载由webpack-dev-server启动的http服务，生产环境下使用<code>file协议</code>加载本地由webpack打包好的前端bundle.js文件，所以开发环境下<code>npm start</code>指令其实主要是执行了两步操作，一是启动webpack-dev-server，此时已经可以通过外部浏览器访问到localhost:3000的http服务，只不过我们实际是用electron之中的chromium浏览器来加载的，它与node.js主进程共享同一个chrome v8引擎，所以理论上，在页面加载后，你同样可以在渲染进程中使用node.js API，比如用使用fs模块访问文件系统。</p><h4 id=\"主进程代码热更新\">主进程代码热更新</h4><p>我用了nodemon工具实现了主进程代码热更新，如果不用nodemon工具那么 <code>npm start-electron</code>命令实际是执行<code>cross-env NODE_ENV=development electron index</code>，就是简单的用electron启动主进程文件，使用nodemon之后<code>npm start-electron</code>实际上是执行<code>nodemon --exec 'cross-env NODE_ENV=development electron index'</code>，最后在package.json文件中增加一个nodemonConfig字段用于指定哪些文件需要纳入nodemon监听即可。</p><p>=&gt; package.json中定义的启动脚本：</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",</span><br><span class=\"line\">  \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",</span><br><span class=\"line\">  \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron index'\",</span><br><span class=\"line\">  \"build\": \"npm run dist &amp;&amp; npm run build-all\",</span><br><span class=\"line\">  \"dist\": \"cross-env NODE_ENV=production webpack  --config webpack.production.config.js\",</span><br><span class=\"line\">  \"build-all\": \"build -lmw\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><p>=&gt; package.json中nodemonConfig字段</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"nodemonConfig\": &#123;</span><br><span class=\"line\">    \"ignore\": [</span><br><span class=\"line\">      \"resources/*\",</span><br><span class=\"line\">      \"node_modules/*\",</span><br><span class=\"line\">      \"dist/*\",</span><br><span class=\"line\">      \"app/stores/*\",</span><br><span class=\"line\">      \"app/styles/*\",</span><br><span class=\"line\">      \"app/services/shell/*\",</span><br><span class=\"line\">      \"app/configure/view.conf\",</span><br><span class=\"line\">      \"app/views/*\",</span><br><span class=\"line\">      \"app/App.js\",</span><br><span class=\"line\">      \"app/main.js\",</span><br><span class=\"line\">      <span class=\"string\">\"app/index.js\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"delay\": \"1000\"</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure><p>=&gt; 项目启动文件index.js：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 根据运行环境加载窗口 //</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadWindow</span>(<span class=\"params\">window, env</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// wait for webpack-dev-server start</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">        pathname: <span class=\"string\">'localhost:3000'</span>,</span><br><span class=\"line\">        protocol: <span class=\"string\">'http:'</span>,</span><br><span class=\"line\">        slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\">      <span class=\"comment\">// window.webContents.openDevTools();</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">      pathname: path.join(path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">      protocol: <span class=\"string\">'file:'</span>,</span><br><span class=\"line\">      slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- main window ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWindow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; width, height &#125; = getAppConf();</span><br><span class=\"line\">  win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">    width,</span><br><span class=\"line\">    height,</span><br><span class=\"line\">    title: <span class=\"string\">'electronux'</span>,</span><br><span class=\"line\">    autoHideMenuBar: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  win.on(<span class=\"string\">'resize'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [_width, _height] = win.getContentSize();</span><br><span class=\"line\">    viewConf.set(&#123;</span><br><span class=\"line\">      width: _width,</span><br><span class=\"line\">      height: _height,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  loadWindow(win, nodeEnv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- electron event ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'ready'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nodeEnv === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    sourceMapSupport.install();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  createWindow();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.platform !== <span class=\"string\">'darwin'</span>) &#123;</span><br><span class=\"line\">    app.quit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'will-quit'</span>, () =&gt; &#123;</span><br><span class=\"line\">  viewConf.write().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">0</span>, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'App quit: view-conf write error !'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'activate'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (win === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    createWindow();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\"前端界面React-Mobx-代码结构和热更新\">前端界面React + Mobx 代码结构和热更新</h3><hr><h4 id=\"代码结构\">代码结构</h4><ol><li>App.js前端入口文件<br>入口文件基本是整个前端应用的关键点，我们使用<code>mobx-react</code>包提供的Provider组件加载整个应用，并把各个应用模块(按功能划分)的mobx store示例作为props属性传入Provider，在各个组建中使用修饰器<code>@inject</code>就能直接使用store实例了，页面层次比较多的话最好使用React Router进行路由管理，值得注意的是React Router V4版本跟之前版本的理念和使用方式有很大区别，可以去官网查阅相关文档<a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener\">react-router4</a></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ------------------- export global history ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> history = createHistory();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stores = &#123;</span><br><span class=\"line\">  install: <span class=\"keyword\">new</span> InstallState(),</span><br><span class=\"line\">  startup: <span class=\"keyword\">new</span> StartupState(),</span><br><span class=\"line\">  info: <span class=\"keyword\">new</span> InfoState(),</span><br><span class=\"line\">  clean: <span class=\"keyword\">new</span> CleanState(),</span><br><span class=\"line\">  pub: <span class=\"keyword\">new</span> PublicState(),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Provider &#123;...stores&#125;&gt;</span><br><span class=\"line\">      &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- export provider ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>mobx store 存储<br>这是项目其中一个系统清理模块的mobx store，在store中被mobx监听的属性最好结构层次简单、只有单一的功能划分，不要把一个属性对象的嵌套写得太深。开发时我们把UI界面的数据抽象成store中的数据时可能会下意识地根据页面显示状态而把单个属性对象写得过于复杂，但其实页面显示状态只是逻辑的数据结构，我们在store中存储的时候应该尽量将这种逻辑数据结构<code>翻译</code>成扁平化的数据结构，然后再在各个属性对象之间建立映射关系。<br>并且使用了mobx之后请尽量依赖mobx的数据引用监听自动更新特性，多写<code>computed</code>、<code>autorun</code>来自动生成数据，使用<code>action</code>修饰一些需要更改store属性的方法。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123; &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- observable ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 所有检查项目 //</span></span><br><span class=\"line\">  @observable items = &#123;</span><br><span class=\"line\">    appCache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    appLog: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    trash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    packageCache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主界面加载 //</span></span><br><span class=\"line\">  @observable loadingMain = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理路径 //</span></span><br><span class=\"line\">  cleanPaths = &#123;</span><br><span class=\"line\">    appCache: [<span class=\"string\">`/home/<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.userinfo.username&#125;</span>/.cache`</span>],</span><br><span class=\"line\">    appLog: [<span class=\"string\">'/var/log/'</span>],</span><br><span class=\"line\">    trash: [<span class=\"string\">`/home/<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.userinfo.username&#125;</span>/.local/share/Trash/files`</span>],</span><br><span class=\"line\">    packageCache: [<span class=\"string\">'/var/cache/pacman/pkg'</span>],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 路径模块映射 //</span></span><br><span class=\"line\">  @observable cleanPathMap = &#123;</span><br><span class=\"line\">    appCache: [], <span class=\"comment\">// '/var/log/pacman.log'</span></span><br><span class=\"line\">    appLog: [],</span><br><span class=\"line\">    trash: [],</span><br><span class=\"line\">    packageCache: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理内容 //</span></span><br><span class=\"line\">  @observable cleanContents = observable.map(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理大小 //</span></span><br><span class=\"line\">  cleanSizes = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// '/var/log//pacman.log': '10kb',</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ---- 清理选项细节-数据对象逻辑树结构 ---- //</span></span><br><span class=\"line\">  <span class=\"comment\">// @observable cleanDetails = &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   appCache: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     url: [`/home/$&#123;this.userinfo.username&#125;/.cache`], // 指定扫描路径多个</span></span><br><span class=\"line\">  <span class=\"comment\">//     contents: &#123; // 绝对路径</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': false,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     size: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': '10kb',</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   appLog: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     url: ['/var/log/'],</span></span><br><span class=\"line\">  <span class=\"comment\">//     contents: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/log//pacman.log': false,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     size: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/log//pacman.log': '10kb',</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- static ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- computed ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取所有被选中的detail item //</span></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> allCheckedDetail() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cleanContents.forEach(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (v) a.push(k);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理路径详细信息 //</span></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> cleanDetail() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.cleanPathMap).forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.items[item]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oneResult = &#123;</span><br><span class=\"line\">          label: item,</span><br><span class=\"line\">          contents: [],</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cleanPathMap[item].forEach(<span class=\"function\">(<span class=\"params\">it</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          oneResult.contents.push(&#123;</span><br><span class=\"line\">            content: it,</span><br><span class=\"line\">            size: <span class=\"keyword\">this</span>.cleanSizes[it] || <span class=\"number\">0</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(oneResult);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Clean;</span><br></pre></td></tr></table></figure><ol start=\"3\"><li><p>页面组件划分<br>在views目录下创建的各个目录都是一个单独的组件目录，组件目录下有一个组件入口文件和css样式表文件以及其它子组件，入口文件载入css文件和子组件，使用<code>@inject</code>修饰器后各个组件都可以独立访问mobx store实例，不必在父和子组件之间通过props进行逐级参数传递，但是如果一个子组件依赖父组件来加工原始数据的话也可以使用props传递参数。<br>使用了mobx之后，并不是说每个页面需要使用的数据都有必要纳入mobx store的管理，在我的代码中只是把<code>关键性数据</code>以及<code>关键性数据加工方法</code>存入了store中，每个组件拿到store传递下来的数据后一些页面状态可能需要依赖组件各自的数据处理函数进行数据二次加工，我觉得这样应该会减轻store实例的负载压力，非绝对中心化。比如在一个列表菜单组件中，这个组件的列表数据可以切换显示和隐藏，但是控制这个列表显示/隐藏的参数状态<code>visible</code>没有必要纳入store实例管理，相对的管理这个列表组件的store实例只是存储了列表数据的数组，以及一些必要的数据加工方法。</p></li><li><p>渲染进程和主进程ipc通信的问题<br>页面的每个渲染进程(ipcRender)，虽然说可以直接使用node.js原生模块和api，但是不建议在渲染进程中过度使用原生模块，一是因为一些node.js原生模块并没有考虑到进程安全的问题，第二个原因是渲染进程应该专注处理页面交互和数据处理问题，划清代码的功能区域，把和系统交互的问题交由主进程(ipcMain)处理，把网络数据请求也交由各自的service服务，减少不必要的模块和数据耦合。渲染进程通过ipc通信向主进程发送处理请求，主进程和service负责原始数据的获取和网络数据的传输，最后主进程通过ipc通信向对应的渲染进程返回处理结果，service拿到的网络数据也通过回调事件发送给渲染进程。项目中我把mobx store作为和主进程通信的桥梁，mobx store向主进程发送信号，同时也在接收到主进程的ipc通信事件后再把主进程发回来的数据更新到各个observer。总之主进程和service服务负责系统交互、原始数据获取和传输，渲染进程mobx store负责响应信号和事件进行业务数据更新，各个view子组件只负责页面渲染和用户交互。</p></li></ol><h4 id=\"前端代码热更新\">前端代码热更新</h4><ol><li>webpack.config.js中启动webpack-dev-server的热更新功能</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>使用<code>react-hot-loader</code>的AppContainer组件</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-hot-loader'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'semantic-ui-css/semantic.min.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./styles/public.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;AppContainer&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/AppContainer&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure><h3 id=\"Linux桌面客户端开发遇到的问题\">Linux桌面客户端开发遇到的问题</h3><hr><h4 id=\"使用node-js子进程child-process执行shell脚本时无法取得系统root权限\">使用node.js子进程child_process执行shell脚本时无法取得系统root权限</h4><p>项目中有的脚本需要使用root权限，比如安装和卸载软件、扫描系统关键路径，node.js里执行shell脚本可以使用child_process模块(node.js子进程)，child_process有几个方法，<code>spawn</code>、<code>exec</code>、<code>execFile</code>、<code>fork</code>，它们都能创建子进程以执行指定文件或命令，具体的使用方法见<a href=\"http://nodejs.cn/api/child_process.html#child_process_asynchronous_process_creation\" target=\"_blank\" rel=\"noopener\">Node API</a>，如果我们的脚本或指令需要使用root权限那可就麻烦了，桌面应用又不是终端，不可能用着用着让用户去终端输入密码吧，况且只是在开发环境下能看到终端输出，应用打包安装运行起来后就是一个独立的应用程序了，根本没法输入终端密码，仔细查阅了Electron官网API发现electron官方并没有集成一个什么系统权限调用窗口之类的组件。没办法了，这种情况下手动写出了两种方法：</p><ol><li>调用获取系统权限的系统自带组件来执行自定义命令和脚本</li><li>封装一个弹窗组件来获取用户首次输入的密码，然后手动把密码记录到文件中，应用启动的时候从文件中读出密码，在使用child_process创建子进程的时候再监听子进程的输出事件和错误事件，然后把读取到的保存在内存中的密码以输入流(input stream)的形式发送给child_process创建的子进程，子进程读取到输入流传入的密码后就能继续执行了。</li></ol><p><img src=\"mobx9.png\" alt=\"electron_pssword.png\"></p><p><img src=\"mobx10.png\" alt=\"install_permission.png\"></p><p><strong>具体代码见</strong>：<a href=\"/blogs/img/article/mobx10.png\">github/nojsja/electronux/app/utils/sudo-prompt.js</a></p><p><em>感谢阅读，文章中出现的错误之处还请多指正~</em></p><h3 id=\"未完待续\">未完待续</h3>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"Fly.jpg\" alt=\"Hello World\"></p><h3 id=\"目录\">目录</h3><ol><li>前言</li><li>开发环境搭建</li><li>引入Webpack4.0前端打包工具</li><li>Electron代码结构和代码热更新</li><li>前端界面React + Mobx 代码结构和热更新</li><li>Linux桌面客户端开发遇到的问题</li></ol><h3 id=\"前言\">前言</h3><hr><p>最近桌面系统从Ubuntu18.04切换到了Manjaro Linux 17，之前听说Manjaro的软件丰富，仓库更新及时，很多常用软件都能一键安装(比如QQ，微信)，同时也支持主流的Linux桌面环境：Gnome、KDE、Cinnamon、Mate、Deepin等等，安装了Gnome版本的Manjaro之后发现果然还不错。系统安装好后配置比较繁琐，就想给Manjaro写一个GUI客户端工具用于安装常用软件和作为简单的系统管理工具 - <a href=\"https://github.com/nojsja/electronux.git\" target=\"_blank\" rel=\"noopener\">electronux</a><br>作为一名正直的前端开发人员，理所应当地就准备使用Electron + Node.js + React + Mobx + Webpack + Shell 来进行开发啦 ~ 目前仍然在开发中，这篇文章用于记录自己的环境搭建过程、一些对Electron+React开发的理解以及谈谈自己遇到的一些Linux桌面软件开发时遇到的问题和解决办法。</p><p><img src=\"mobx1.png\" alt=\"clean_detail.png\"></p><p><img src=\"mobx2.png\" alt=\"clean_search.png\"></p><p><img src=\"mobx3.png\" alt=\"electron_pssword.png\"></p><p><img src=\"mobx4.png\" alt=\"info_total.png\"></p><p><img src=\"mobx5.png\" alt=\"install_detail.png\"></p><p><img src=\"mobx6.png\" alt=\"install_list.png\"></p><p><img src=\"mobx7.png\" alt=\"install_permission.png\"></p><p><img src=\"mobx8.png\" alt=\"startup_list.png\"></p><h3 id=\"开发环境搭建\">开发环境搭建</h3><hr><h4 id=\"代码目录结构\">代码目录结构</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">electronux  </span><br><span class=\"line\">|---- [dir ] app ( 主代码目录 )</span><br><span class=\"line\">|----------- [dir ] app/configure ( 应用配置更新 )</span><br><span class=\"line\">|----------- [dir ] app/runtime ( 运行数据文件 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/services ( 后台服务存放目录 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/middleware ( 一些中间处理件 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/shell ( shell脚本存放目录 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/main-serv ( 主进程服务 )</span><br><span class=\"line\">|------------------------ [dir ] app/services/render-serv ( 渲染进程服务 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/stores ( 前端状态管理文件目录 )</span><br><span class=\"line\">|----------- [dir ] app/styles  ( 公用样式表文件 )</span><br><span class=\"line\">|----------- [dir ] app/utils  ( 公用工具函数 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [dir ] app/views  ( UI界面代码 )</span><br><span class=\"line\">|------------------------ [dir ] app/views/module1  ( 界面模块1 )</span><br><span class=\"line\">|------------------------ [dir ] app/views/module2  ( 界面模块2)</span><br><span class=\"line\">|------------------------ [dir ] app/views/module3  ( 界面模块3 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|----------- [file] app/App.js  ( 前端应用入口文件 )</span><br><span class=\"line\">|----------- [file] app/index.js ( 前端应用热加载文件 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|---- [dir ] dist ( 前端代码编译打包文件存放目录 )</span><br><span class=\"line\">|---- [dir ] resources ( 前端静态资源存放目录 )</span><br><span class=\"line\">|</span><br><span class=\"line\">|---- [file] .babelrc ( babel配置文件 )</span><br><span class=\"line\">|---- [file] .editorconfig (编辑器编码规范文件)</span><br><span class=\"line\">|---- [file] .eslintrc ( 代码格式检查配置文件 )</span><br><span class=\"line\">|---- [file] .gitignore ( git忽略追踪配置文件 )</span><br><span class=\"line\">|---- [file] electron-builder.json ( electron-builder打包配置文件 )</span><br><span class=\"line\">|---- [file] index.html  ( 应用渲染入口页面 )</span><br><span class=\"line\">|---- [file] index.js ( 应用主进程入口文件 )</span><br><span class=\"line\">|---- [file] package.json (前端模块和框架配置文件)</span><br><span class=\"line\">|---- [file] webpack.config.js (webpack开发环境配置文件)</span><br><span class=\"line\">|---- [file] webpack.prod.config.js  ( webpack生产环境配置文件 )</span><br></pre></td></tr></table></figure><h4 id=\"项目环境依赖配置文件\">项目环境依赖配置文件</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"linux manager-software powered by electron &amp; react &amp; Mobx \"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"nojsja\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"yangwei020154@gmail.com\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-dev\"</span>: <span class=\"string\">\"cross-env NODE_ENV=development webpack-dev-server\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-electron\"</span>: <span class=\"string\">\"nodemon --exec 'cross-env NODE_ENV=development electron --inspect=5858 index'\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"start-production\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production electron --inspect=5858 index\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build-all\"</span>: <span class=\"string\">\"npm run dist &amp;&amp; npm run build\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"dist\"</span>: <span class=\"string\">\"cross-env NODE_ENV=production webpack --config webpack.prod.config.js\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"build\"</span>: <span class=\"string\">\"electron-builder -l\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"keywords\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"electron\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mobx\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-router\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack4\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"nodemonConfig\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"ignore\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"resources/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"node_modules/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"dist/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"build/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/stores/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/styles/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/services/shell/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/configure/view.conf\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/views/*\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/App.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/main.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/index.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"electron-builder.yml\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"delay\"</span>: <span class=\"string\">\"1000\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"semantic-ui-css\"</span>: <span class=\"string\">\"^2.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"semantic-ui-react\"</span>: <span class=\"string\">\"^0.82.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mobx\"</span>: <span class=\"string\">\"^4.4.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"mobx-react\"</span>: <span class=\"string\">\"^5.2.8\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"prop-types\"</span>: <span class=\"string\">\"^15.6.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react\"</span>: <span class=\"string\">\"^16.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-dom\"</span>: <span class=\"string\">\"^16.5.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-hot-loader\"</span>: <span class=\"string\">\"^4.3.8\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-router\"</span>: <span class=\"string\">\"^4.3.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"react-router-dom\"</span>: <span class=\"string\">\"^4.3.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"history\"</span>: <span class=\"string\">\"^4.7.2\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"babel-core\"</span>: <span class=\"string\">\"^6.26.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-eslint\"</span>: <span class=\"string\">\"^10.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-loader\"</span>: <span class=\"string\">\"^7.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-plugin-transform-decorators-legacy\"</span>: <span class=\"string\">\"^1.3.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-env\"</span>: <span class=\"string\">\"^1.7.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-es2015\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-react\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"babel-preset-stage-0\"</span>: <span class=\"string\">\"^6.24.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"clean-webpack-plugin\"</span>: <span class=\"string\">\"^0.1.19\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"concurrently\"</span>: <span class=\"string\">\"^3.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"cross-env\"</span>: <span class=\"string\">\"^5.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"css-loader\"</span>: <span class=\"string\">\"^0.28.11\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"electron\"</span>: <span class=\"string\">\"^2.0.9\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"electron-builder\"</span>: <span class=\"string\">\"^20.28.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint\"</span>: <span class=\"string\">\"^5.6.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-config-airbnb\"</span>: <span class=\"string\">\"^17.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-import\"</span>: <span class=\"string\">\"^2.14.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-jsx-a11y\"</span>: <span class=\"string\">\"^6.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint-plugin-react\"</span>: <span class=\"string\">\"^7.11.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"extract-text-webpack-plugin\"</span>: <span class=\"string\">\"^4.0.0-beta.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"file-loader\"</span>: <span class=\"string\">\"^2.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-loader\"</span>: <span class=\"string\">\"^0.5.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^3.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"node-sass\"</span>: <span class=\"string\">\"^4.9.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"nodemon\"</span>: <span class=\"string\">\"^1.18.4\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sass-loader\"</span>: <span class=\"string\">\"^7.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"source-map-support\"</span>: <span class=\"string\">\"^0.5.9\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"style-loader\"</span>: <span class=\"string\">\"^0.21.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"url-loader\"</span>: <span class=\"string\">\"^1.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^4.19.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-cli\"</span>: <span class=\"string\">\"^2.1.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^3.1.8\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"引入Webpack4-0前端打包工具\">引入Webpack4.0前端打包工具</h3><hr><h4 id=\"webpack开发环境配置文件\">webpack开发环境配置文件</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.scss.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractCss = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    <span class=\"string\">'react-hot-loader/patch'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack-dev-server/client?http://localhost:3000'</span>,</span><br><span class=\"line\">    <span class=\"string\">'webpack/hot/only-dev-server'</span>,</span><br><span class=\"line\">    <span class=\"string\">'./app/index'</span>,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      resources: path.resolve(__dirname, <span class=\"string\">'resources'</span>),</span><br><span class=\"line\">      app: path.resolve(__dirname, <span class=\"string\">'app'</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.html$/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'html-loader'</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg|ico|woff|eot|ttf|woff2)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[path][name].[ext]'</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    extractSass,</span><br><span class=\"line\">    extractCss,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin([<span class=\"string\">'dist'</span>]),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class=\"line\">  ],</span><br><span class=\"line\"></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  target: <span class=\"string\">'electron-renderer'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"Electron基本原理和代码热更新\">Electron基本原理和代码热更新</h3><hr><blockquote><p>Electron 运行 package.json 的 main 脚本的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。<br>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。<br>在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。<br>进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。<br>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p></blockquote><h4 id=\"创建主进程\">创建主进程</h4><p>在index.js文件中我们引入electron和所有的自定义模块文件，并根据开发环境或是生产环境来进行主进程窗口加载，开发环境下使用<code>http协议</code>加载由webpack-dev-server启动的http服务，生产环境下使用<code>file协议</code>加载本地由webpack打包好的前端bundle.js文件，所以开发环境下<code>npm start</code>指令其实主要是执行了两步操作，一是启动webpack-dev-server，此时已经可以通过外部浏览器访问到localhost:3000的http服务，只不过我们实际是用electron之中的chromium浏览器来加载的，它与node.js主进程共享同一个chrome v8引擎，所以理论上，在页面加载后，你同样可以在渲染进程中使用node.js API，比如用使用fs模块访问文件系统。</p><h4 id=\"主进程代码热更新\">主进程代码热更新</h4><p>我用了nodemon工具实现了主进程代码热更新，如果不用nodemon工具那么 <code>npm start-electron</code>命令实际是执行<code>cross-env NODE_ENV=development electron index</code>，就是简单的用electron启动主进程文件，使用nodemon之后<code>npm start-electron</code>实际上是执行<code>nodemon --exec 'cross-env NODE_ENV=development electron index'</code>，最后在package.json文件中增加一个nodemonConfig字段用于指定哪些文件需要纳入nodemon监听即可。</p><p>=&gt; package.json中定义的启动脚本：</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"concurrently \\\"npm run start-dev\\\" \\\"npm run start-electron\\\"\",</span><br><span class=\"line\">  \"start-dev\": \"cross-env NODE_ENV=development webpack-dev-server\",</span><br><span class=\"line\">  \"start-electron\": \"nodemon --exec 'cross-env NODE_ENV=development electron index'\",</span><br><span class=\"line\">  \"build\": \"npm run dist &amp;&amp; npm run build-all\",</span><br><span class=\"line\">  \"dist\": \"cross-env NODE_ENV=production webpack  --config webpack.production.config.js\",</span><br><span class=\"line\">  \"build-all\": \"build -lmw\"</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure><p>=&gt; package.json中nodemonConfig字段</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"nodemonConfig\": &#123;</span><br><span class=\"line\">    \"ignore\": [</span><br><span class=\"line\">      \"resources/*\",</span><br><span class=\"line\">      \"node_modules/*\",</span><br><span class=\"line\">      \"dist/*\",</span><br><span class=\"line\">      \"app/stores/*\",</span><br><span class=\"line\">      \"app/styles/*\",</span><br><span class=\"line\">      \"app/services/shell/*\",</span><br><span class=\"line\">      \"app/configure/view.conf\",</span><br><span class=\"line\">      \"app/views/*\",</span><br><span class=\"line\">      \"app/App.js\",</span><br><span class=\"line\">      \"app/main.js\",</span><br><span class=\"line\">      <span class=\"string\">\"app/index.js\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"delay\": \"1000\"</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure><p>=&gt; 项目启动文件index.js：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 根据运行环境加载窗口 //</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadWindow</span>(<span class=\"params\">window, env</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (env === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// wait for webpack-dev-server start</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">        pathname: <span class=\"string\">'localhost:3000'</span>,</span><br><span class=\"line\">        protocol: <span class=\"string\">'http:'</span>,</span><br><span class=\"line\">        slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\">      <span class=\"comment\">// window.webContents.openDevTools();</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">      pathname: path.join(path.resolve(__dirname, <span class=\"string\">'./dist'</span>), <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">      protocol: <span class=\"string\">'file:'</span>,</span><br><span class=\"line\">      slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- main window ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWindow</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; width, height &#125; = getAppConf();</span><br><span class=\"line\">  win = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">    width,</span><br><span class=\"line\">    height,</span><br><span class=\"line\">    title: <span class=\"string\">'electronux'</span>,</span><br><span class=\"line\">    autoHideMenuBar: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  win.on(<span class=\"string\">'resize'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [_width, _height] = win.getContentSize();</span><br><span class=\"line\">    viewConf.set(&#123;</span><br><span class=\"line\">      width: _width,</span><br><span class=\"line\">      height: _height,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  loadWindow(win, nodeEnv);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- electron event ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'ready'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nodeEnv === <span class=\"string\">'development'</span>) &#123;</span><br><span class=\"line\">    sourceMapSupport.install();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  createWindow();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.platform !== <span class=\"string\">'darwin'</span>) &#123;</span><br><span class=\"line\">    app.quit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'will-quit'</span>, () =&gt; &#123;</span><br><span class=\"line\">  viewConf.write().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"number\">0</span>, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'App quit: view-conf write error !'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'activate'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (win === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    createWindow();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\"前端界面React-Mobx-代码结构和热更新\">前端界面React + Mobx 代码结构和热更新</h3><hr><h4 id=\"代码结构\">代码结构</h4><ol><li>App.js前端入口文件<br>入口文件基本是整个前端应用的关键点，我们使用<code>mobx-react</code>包提供的Provider组件加载整个应用，并把各个应用模块(按功能划分)的mobx store示例作为props属性传入Provider，在各个组建中使用修饰器<code>@inject</code>就能直接使用store实例了，页面层次比较多的话最好使用React Router进行路由管理，值得注意的是React Router V4版本跟之前版本的理念和使用方式有很大区别，可以去官网查阅相关文档<a href=\"https://reacttraining.com/react-router/web/guides/quick-start\" target=\"_blank\" rel=\"noopener\">react-router4</a></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ------------------- export global history ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> history = createHistory();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stores = &#123;</span><br><span class=\"line\">  install: <span class=\"keyword\">new</span> InstallState(),</span><br><span class=\"line\">  startup: <span class=\"keyword\">new</span> StartupState(),</span><br><span class=\"line\">  info: <span class=\"keyword\">new</span> InfoState(),</span><br><span class=\"line\">  clean: <span class=\"keyword\">new</span> CleanState(),</span><br><span class=\"line\">  pub: <span class=\"keyword\">new</span> PublicState(),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Provider &#123;...stores&#125;&gt;</span><br><span class=\"line\">      &lt;Router history=&#123;history&#125;&gt;</span><br><span class=\"line\">        &lt;Route path=<span class=\"string\">\"/\"</span> component=&#123;HomePage&#125; /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Router&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- export provider ------------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>mobx store 存储<br>这是项目其中一个系统清理模块的mobx store，在store中被mobx监听的属性最好结构层次简单、只有单一的功能划分，不要把一个属性对象的嵌套写得太深。开发时我们把UI界面的数据抽象成store中的数据时可能会下意识地根据页面显示状态而把单个属性对象写得过于复杂，但其实页面显示状态只是逻辑的数据结构，我们在store中存储的时候应该尽量将这种逻辑数据结构<code>翻译</code>成扁平化的数据结构，然后再在各个属性对象之间建立映射关系。<br>并且使用了mobx之后请尽量依赖mobx的数据引用监听自动更新特性，多写<code>computed</code>、<code>autorun</code>来自动生成数据，使用<code>action</code>修饰一些需要更改store属性的方法。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123; &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- observable ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 所有检查项目 //</span></span><br><span class=\"line\">  @observable items = &#123;</span><br><span class=\"line\">    appCache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    appLog: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    trash: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    packageCache: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 主界面加载 //</span></span><br><span class=\"line\">  @observable loadingMain = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理路径 //</span></span><br><span class=\"line\">  cleanPaths = &#123;</span><br><span class=\"line\">    appCache: [<span class=\"string\">`/home/<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.userinfo.username&#125;</span>/.cache`</span>],</span><br><span class=\"line\">    appLog: [<span class=\"string\">'/var/log/'</span>],</span><br><span class=\"line\">    trash: [<span class=\"string\">`/home/<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.userinfo.username&#125;</span>/.local/share/Trash/files`</span>],</span><br><span class=\"line\">    packageCache: [<span class=\"string\">'/var/cache/pacman/pkg'</span>],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 路径模块映射 //</span></span><br><span class=\"line\">  @observable cleanPathMap = &#123;</span><br><span class=\"line\">    appCache: [], <span class=\"comment\">// '/var/log/pacman.log'</span></span><br><span class=\"line\">    appLog: [],</span><br><span class=\"line\">    trash: [],</span><br><span class=\"line\">    packageCache: [],</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理内容 //</span></span><br><span class=\"line\">  @observable cleanContents = observable.map(&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理大小 //</span></span><br><span class=\"line\">  cleanSizes = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// '/var/log//pacman.log': '10kb',</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ---- 清理选项细节-数据对象逻辑树结构 ---- //</span></span><br><span class=\"line\">  <span class=\"comment\">// @observable cleanDetails = &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   appCache: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     url: [`/home/$&#123;this.userinfo.username&#125;/.cache`], // 指定扫描路径多个</span></span><br><span class=\"line\">  <span class=\"comment\">//     contents: &#123; // 绝对路径</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': false,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     size: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/cache/pacman/pkg/zsh-5.6.2-1-x86_64.pkg.tar.xz': '10kb',</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   appLog: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//     url: ['/var/log/'],</span></span><br><span class=\"line\">  <span class=\"comment\">//     contents: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/log//pacman.log': false,</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//     size: &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//       // '/var/log//pacman.log': '10kb',</span></span><br><span class=\"line\">  <span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\">  <span class=\"comment\">//   &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- static ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- computed ------------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取所有被选中的detail item //</span></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> allCheckedDetail() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cleanContents.forEach(<span class=\"function\">(<span class=\"params\">v, k</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (v) a.push(k);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清理路径详细信息 //</span></span><br><span class=\"line\">  @computed <span class=\"keyword\">get</span> cleanDetail() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = [];</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.cleanPathMap).forEach(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.items[item]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oneResult = &#123;</span><br><span class=\"line\">          label: item,</span><br><span class=\"line\">          contents: [],</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cleanPathMap[item].forEach(<span class=\"function\">(<span class=\"params\">it</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          oneResult.contents.push(&#123;</span><br><span class=\"line\">            content: it,</span><br><span class=\"line\">            size: <span class=\"keyword\">this</span>.cleanSizes[it] || <span class=\"number\">0</span>,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        result.push(oneResult);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Clean;</span><br></pre></td></tr></table></figure><ol start=\"3\"><li><p>页面组件划分<br>在views目录下创建的各个目录都是一个单独的组件目录，组件目录下有一个组件入口文件和css样式表文件以及其它子组件，入口文件载入css文件和子组件，使用<code>@inject</code>修饰器后各个组件都可以独立访问mobx store实例，不必在父和子组件之间通过props进行逐级参数传递，但是如果一个子组件依赖父组件来加工原始数据的话也可以使用props传递参数。<br>使用了mobx之后，并不是说每个页面需要使用的数据都有必要纳入mobx store的管理，在我的代码中只是把<code>关键性数据</code>以及<code>关键性数据加工方法</code>存入了store中，每个组件拿到store传递下来的数据后一些页面状态可能需要依赖组件各自的数据处理函数进行数据二次加工，我觉得这样应该会减轻store实例的负载压力，非绝对中心化。比如在一个列表菜单组件中，这个组件的列表数据可以切换显示和隐藏，但是控制这个列表显示/隐藏的参数状态<code>visible</code>没有必要纳入store实例管理，相对的管理这个列表组件的store实例只是存储了列表数据的数组，以及一些必要的数据加工方法。</p></li><li><p>渲染进程和主进程ipc通信的问题<br>页面的每个渲染进程(ipcRender)，虽然说可以直接使用node.js原生模块和api，但是不建议在渲染进程中过度使用原生模块，一是因为一些node.js原生模块并没有考虑到进程安全的问题，第二个原因是渲染进程应该专注处理页面交互和数据处理问题，划清代码的功能区域，把和系统交互的问题交由主进程(ipcMain)处理，把网络数据请求也交由各自的service服务，减少不必要的模块和数据耦合。渲染进程通过ipc通信向主进程发送处理请求，主进程和service负责原始数据的获取和网络数据的传输，最后主进程通过ipc通信向对应的渲染进程返回处理结果，service拿到的网络数据也通过回调事件发送给渲染进程。项目中我把mobx store作为和主进程通信的桥梁，mobx store向主进程发送信号，同时也在接收到主进程的ipc通信事件后再把主进程发回来的数据更新到各个observer。总之主进程和service服务负责系统交互、原始数据获取和传输，渲染进程mobx store负责响应信号和事件进行业务数据更新，各个view子组件只负责页面渲染和用户交互。</p></li></ol><h4 id=\"前端代码热更新\">前端代码热更新</h4><ol><li>webpack.config.js中启动webpack-dev-server的热更新功能</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">    host: <span class=\"string\">'localhost'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>使用<code>react-hot-loader</code>的AppContainer组件</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AppContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-hot-loader'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'semantic-ui-css/semantic.min.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./styles/public.css'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">render(</span><br><span class=\"line\">  &lt;AppContainer&gt;</span><br><span class=\"line\">    &lt;App /&gt;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/AppContainer&gt;,</span></span><br><span class=\"line\"><span class=\"regexp\">  document.getElementById('root')</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br></pre></td></tr></table></figure><h3 id=\"Linux桌面客户端开发遇到的问题\">Linux桌面客户端开发遇到的问题</h3><hr><h4 id=\"使用node-js子进程child-process执行shell脚本时无法取得系统root权限\">使用node.js子进程child_process执行shell脚本时无法取得系统root权限</h4><p>项目中有的脚本需要使用root权限，比如安装和卸载软件、扫描系统关键路径，node.js里执行shell脚本可以使用child_process模块(node.js子进程)，child_process有几个方法，<code>spawn</code>、<code>exec</code>、<code>execFile</code>、<code>fork</code>，它们都能创建子进程以执行指定文件或命令，具体的使用方法见<a href=\"http://nodejs.cn/api/child_process.html#child_process_asynchronous_process_creation\" target=\"_blank\" rel=\"noopener\">Node API</a>，如果我们的脚本或指令需要使用root权限那可就麻烦了，桌面应用又不是终端，不可能用着用着让用户去终端输入密码吧，况且只是在开发环境下能看到终端输出，应用打包安装运行起来后就是一个独立的应用程序了，根本没法输入终端密码，仔细查阅了Electron官网API发现electron官方并没有集成一个什么系统权限调用窗口之类的组件。没办法了，这种情况下手动写出了两种方法：</p><ol><li>调用获取系统权限的系统自带组件来执行自定义命令和脚本</li><li>封装一个弹窗组件来获取用户首次输入的密码，然后手动把密码记录到文件中，应用启动的时候从文件中读出密码，在使用child_process创建子进程的时候再监听子进程的输出事件和错误事件，然后把读取到的保存在内存中的密码以输入流(input stream)的形式发送给child_process创建的子进程，子进程读取到输入流传入的密码后就能继续执行了。</li></ol><p><img src=\"mobx9.png\" alt=\"electron_pssword.png\"></p><p><img src=\"mobx10.png\" alt=\"install_permission.png\"></p><p><strong>具体代码见</strong>：<a href=\"/blogs/img/article/mobx10.png\">github/nojsja/electronux/app/utils/sudo-prompt.js</a></p><p><em>感谢阅读，文章中出现的错误之处还请多指正~</em></p><h3 id=\"未完待续\">未完待续</h3>"},{"title":"Electron+Mobx+React开发记录（二）","catalog":true,"toc_nav_num":true,"date":"2019-10-26T12:43:00.000Z","subtitle":"Electron Mobx React","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-10-26T12:43:00.000Z","_content":"\n![Hello World](Fly.jpg)\n\n### 目录\n\n1. 前言\n2. webpack4图片打包的问题\n3. webpack4样式表打包分离\n4. 应用构建工具electron-builder配置\n5. 应用构建工具electron-builder的问题\n\n### 前言\n-------------\n[前一篇文章](www.jianshu.com/p/53d74df07e4c)主要记录了开发环境的搭建和一些开发时遇到的问题，这篇文章主要说说自己在coding work之后进行应用打包时遇到的问题(webpack打包和electron打包)，[项目地址](https://github.com/nojsja/electronux)。\n\n### webpack4图片打包的问题\n------------------------------------------\n\n#### jsx中声明的img:src不能被webpack识别和打包\n在jsx中使用图片时，如下：\n```html\n<div className=\"install-item-image\" onClick={() => {showTerminalInfo(item.label)}}>\n  <Dimmer active={loading} inverted>\n    <Loader size=\"tiny\">{ loadingLable }</Loader>\n  </Dimmer>\n  <img alt=\"error\" src={item.url} />\n</div>\n```\n这里img:src使用了一个变量，但无论是变量还是字符串，webpack在打包的时候都不能根据我们引用的资源路径在dist目录下生成正确的资源引用路径结构，所以只能在我们需要引用图片的地方，手动require引入，如下：\n```html\n...\nconst imgSrc = require('path/to/img');\n...\n<img src={imgSrc}>\n```\n那如果img:src真的是变量而且需要一次引入多个那怎么办，如果你说想用for循环引入可以不，这其实是不行的，因为webpack打包的时候是识别不了你for循环内定义的变量的。引入办法如下，可以用正则表达式对一个文件夹内的所有文件进行匹配引入，并且可以在项目任意位置引入：\n```\n// 匹配1：只匹配图片\nconst requireContext = require.context('resources/install', true, /^\\.\\/.*\\.(jpg|png)$/);\n// 匹配2：匹配所有文件\nconst requireContext = require.context('resources/install', true, /.*/);\nrequireContext.keys().map(requireContext);\n```\n\n#### 生产环境和开发环境的publicPath配置\n关于publicPath这里有一篇说得比较清楚的[文章](https://www.jianshu.com/p/cbe81be10d78)\n> output.path ： 硬盘上的路径，也就是你打算把文件打包到你的哪个目录，与发布时的路径完全无关。  \n\n> output.publicPath： 主要用来转换url中的相对路径的。如果你引用到包含url的资源，一定要配置output.publicPath，配置了此项，webpack在打包时才能根据配置动态修改uri中的相对值。比如果你将所有打包生成好的文件托管在服务器上，访问格式是`www.yourhost.com/dist/index.html`的话，那publicPath就需要指定为`/dist/`。\n\n* webpack-dev-server的publicPath默认是`/`，也就是在开发环境下webpack-dev-server在内存中生成的bundle.js文件路径是`/`，我们在浏览器中访问`localhost:3000/bundle.js`就能看见了，如果你在生产环境下的访问路径是`localhost:3000/dist/bundle.js`，就需要指定webpack-dev-server的publicPath为`/dist/`，这只是一个内存中虚拟的路径映射，目的是为了统一开发环境和生产环境的路径问题。\n\n* 开发环境下：\n```\nwebpack.config.js\n...\ndevtool: 'source-map',\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './app/index',\n  ],\n  mode: 'development',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n...\n```\n* 生产环境下：\n```\nwebpack.prod.config.js\n...\nentry: [\n    './app/index',\n  ],\n  mode: 'production',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n...\n```\n\n#### 统一生产环境和开发环境的资源引用路径\n可以在webpack.config文件中指定`resolve.alias`来将一个绝对路径重命名，然后在项目任意位置直接使用重命名路径就行了，不用在import的时候搞很多相对路径声明`../../../`，如下：\n* 声明：  \n```\nwebpack.config.js\n...\nresolve: {\n    alias: {\n      resources: path.resolve(__dirname, 'resources'),\n      app: path.resolve(__dirname, 'app'),\n    },\n  },\n...\n```\n* 使用：\n```html\n<img src=\"resources/install/albert.png\"}>\n```\n\n### webpack4样式表打包分离\n------------------------------------------\n#### css属性`backgroup-image: url(...)`的路径统一\n我们在webpack.config中指定`resolve.alias`之后，如果你要在css属性中引用那个绝对路径的别名的话，需要在img:url字符前多加一个`~`路径转换符号，来让webpack为你自动替换路径，如下：\n```css\n.router-left-background {\n  background-image: url(~resources/public/gohome.jpg); /* The image used */\n  background-color: #f6f6f6; /* Used if the image is unavailable */\n  background-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* cover size */\n}\n```\n#### 将样式表从bundle.js文件中分离\n如果项目比较大的话，直接将样式表压缩进bundle.js文件中会导致页面首页加载时间比较长，这里我们使用`extract-text-webpack-plugin`webpack插件分离样式表，然后在index.html引入样式表，这样页面加载的时候浏览器就会发送异步请求来同时加载bundle.js文件和css文件，极大地提高加载速度。\n* index.html\n\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>electronux</title>\n  <link rel=\"stylesheet\" href=\"style.scss.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <base href=\"./\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n* 开发环境下webpack插件`extract-text-webpack-plugin`配置\n这里的插件`publicPath`需要根据webpack-dev-server的`publicPath`配置(默认是`/`)，如果我们的样式表会加载外部文件(例如图片和字体文件)的话，那个实际资源请求路径就会根据这里的`publicPath`来计算得出。\n\n```js\nwebpack.config.js\n...\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// 拆分样式文件\nconst extractSass = new ExtractTextPlugin({\n  filename: 'style.scss.css',\n});\nconst extractCss = new ExtractTextPlugin({\n  filename: 'style.css',\n});\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: '/',\n        }),\n      },\n      ...\n    ],\n    ...\n  },\n\n  plugins: [\n    extractSass,\n    extractCss,\n    ...\n  ],\n...\n```\n\n* 生产环境下webpack插件`extract-text-webpack-plugin`配置\n生产环境下需要将`publicPath`设置为我们打包后生成的dist目录，不然css中引用的外部资源如图片等是不能生成到dist目录中的。\n\n```js\nwebpack.prod.config.js\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      ...\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: path.join(__dirname, 'dist/'),\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: path.join(__dirname, 'dist/'),\n        }),\n      },\n    ...\n```\n\n### 应用构建工具electron-builder配置\n----------------------------------------------------\n```json\n{\n  \"appId\": \"com.nojsja.electronux\",\n  \"copyright\": \"nojsja\",\n  \"productName\": \"electronux\",\n  \"asar\": false,\n  \"directories\": {\n    \"buildResources\": \"build-assets/\",\n    \"output\": \"build/\"\n  },\n  \"files\": [\"package.json\", \"index.js\", \"dist/\", \"app/\", \"node_modules/\"],\n  \"linux\": {\n    \"icon\": \"resources\",\n    \"category\": \"System\",\n    \"description\": \"A System Management Tool Build For Manjaro Linux 17\",\n    \"synopsis\": \"electronux\",\n    \"target\": [\"zip\"]\n  }\n}\n```\nelectron-builder打包主要解决两个问题，一是怎么打包前端界面代码目录`dist`下的资源(渲染进程代码)，二是怎么打包由根目录下的index.js文件引入的资源(主进程代码)。配置文件中`files`参数项配置的就是所有需要最终打包进我们应用的所有文件了。\n* package.json -- 整个应用程序的依赖配置文件\n* index.js -- 主进程入口文件\n* dist -- 渲染进程资源文件\n* app -- 运行时引用的源代码和资源目录\n* node_modules -- 运行时引用的第三方模块和资源目录\n\n配置说明详细见[官方文档](https://www.electron.build/configuration/configuration)\n\n### 应用构建工具electron-builder的问题\n-------------------------------------------------\n#### 国内墙导致打包工具依赖下载失败\n运行electron-builder的时候会首先下载各个打包依赖，但是如果直接下载是会失败的(下载源文件存在github)。但我这边终端是用polipo配置了http-proxy的，下载的时候还是很慢，最后仍会导致下载失败，这个真的比较头痛，我索性将git仓库clone到自己搭建的vps虚拟机上(日本节点)，然后在服务器上运行一次打包命令，再把`~/.cache/electron-builder`、`~/.cache/electron`这两个打包工具生成的目录直接下载到本地对应的目录下，最后在本地运行打包命令的时候就不会再去下载依赖了。\n\n#### 打包成AppImage后在运行时不能使用chmod更改文件权限的问题\n先来看一段Linux上常见的AppImage打包应用的定义：  \n> AppImage不把Linux应用程序安装在文件系统相应的目录中，相反，它没有进行实际的安装，AppImage文件只是个压缩文件，在它运行时候`挂载`，用AppImage打包的程序，一个程序就是一个文件。  \n\n在我的应用中需要执行一些shell脚本获取系统信息，但是这些脚本在第一次运行的时候是需要使用node.js中fs模块的`fs.chmod`方法对shell脚本进行赋予可执行权限的(chmod 755)，但是AppImage运行时是不允许动态更改文件属性的，所有挂载的Applmage文件都是只读的，无奈，我放弃了将应用打包成AppImage这种格式。\n为了便于测试可以直接打包成zip文件，解压后就能运行，如果要安装到不同的发行版的话还能打包成`pacman`、`deb`、`rpm`、`tar.gz`等文件。\n\n#### arar加密打包时造成绝对路径查找失败\nelectron-builder的打包参数中有一个参数是`asar: true/false`，如果指定了为true的话打包后的压缩包内的源代码是会被arar加密的，这个对一些不开源的代码来说还是很有必要，但在我这个应用中应用在运行的时候会动态加载一些自定义的模块文件，如果你加载的路径用的是绝对路径的话，这个加载过程就会失败，因为如果启用了arar的话，我们资源目录下所有的源代码都只是一个加密的压缩包，此时你是不能通过系统的绝对路径来找到我们要引入的那个模块代码路径的，当然如果你手动解压arar压缩包的话就能看到所有源代码的目录结构了。\n\n#### 外部引用资源(img:src / css:url)的相对路径和绝对路径\nhtml demo:\n```html\n<div className=\"install-item-image\" onClick={() => {showTerminalInfo(item.label)}}>\n  <Dimmer active={loading} inverted>\n    <Loader size=\"tiny\">{ loadingLable }</Loader>\n  </Dimmer>\n  <img alt=\"error\" src={item.url} />\n</div>\n```\ncss demo:\n```css\n.router-left-background {\n  background-image: url(~resources/public/gohome.jpg); /* The image used */\n  background-color: #f6f6f6; /* Used if the image is unavailable */\n  background-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* cover size */\n}\n```\n如果我们正确地通过webpack打包了前端界面的代码，在dist目录下生成了正确的资源目录结构，然后尝试使用`electron index.js`命令来模拟生产环境下应用的运行(使用file协议加载dist目录下的资源)，发现代码中所有的引用资源请求都会失败。这是因为electron在生产环境下是使用`file`协议来加载文件的，首先我们在在执行了`electron index.js`命令后，electron窗口会按照我们定义的路径结构去查找index.html文件，然后加载主窗口，这个过程没有问题，如下：  \n```js\nwindow.loadURL(url.format({\n  pathname: path.resolve(__dirname, 'dist', 'index.html'),\n  protocol: 'file:',\n  slashes: true,\n}));\n```\n然后在这个index.html中的css图片请求和react组件的图片请求就是问题之处了，因为我们没有指定当前工作目录，file协议加载文件时就会直接从系统根目录开始根据资源目录结构查找了，实际上，我们的所有资源都是在`dist`文件夹下的，而不是系统根目录`/`，解决办法是在我们的index.html文件里面指定一个base标签，指明当前工作目录就行了，如下：\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>electronux</title>\n  <link rel=\"stylesheet\" href=\"style.scss.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <base href=\"./\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n\n#### 使用node.js对shell脚本赋予可执行权限\nnode.js的fs模块可以为文件赋予可执行权限，并且`fs.chmod`命令不用额外申请权限，估计是如果当前用户可以以root权限运行文件的话，node会自动为你获取权限。  \n* 定义fsChmod模块递归为一个目录内的所有文件授予权限：\n\n```js\nconst fs = require('fs');\nconst path = require('path');\n\nfunction chmod(target, opstr) {\n  if (fs.statSync(target).isDirectory()) {\n    const files = fs.readdirSync(target);\n    if (files.length) {\n      files.forEach((file) => {\n        chmod(path.join(target, file), opstr);\n      });\n    }\n  } else {\n    fs.chmodSync(target, opstr);\n  }\n}\nfunction fsChmod(dir, opstr) {\n  chmod(dir, opstr);\n}\n\nmodule.exports = fsChmod;\n\n```\n\n* 在fsChmod同级目录下定义shell授权模块\n这样子的话会避开绝对路径查找的问题\n\n```js\nconst path = require('path');\nconst fsChmod = require('./fs-chmod');\nfunction fsChmodShell() {\n  fsChmod(path.join(__dirname, '../shell'), 0o711);\n}\nmodule.exports = fsChmodShell;\n```\n\n* 项目index.js中引入执行  \n__注意：__ 请尽量不要在项目文件中使用`__dirname`和`procoss.pwd()`來加载一个模块，例如`path.resolve(process.cwd(), 'path/to/file')`这样的绝对路径，而应该使用`app.getAppPath()`，相对应的获取运行时绝对路径命令更改为`path.resolve(app.getAppPath(), 'path/to/file')`(app是electron自带的属性)来获取运行时执行目录，`app.getAppPath()`一般是`package.json`所处的目录。因为在开发环境下我们的代码目录结构和electron-builder打包后生产环境下的的应用代码结构是不一样的，比如开发环境下，index.js文件位于项目根目录`/`下，shell文件夹(存放shell scripts)的路径是`/app/service/shell`，经过electron-builder打包后，index.js(实际上被编译成了一个可执行文件 )仍然位于根目录`/`下，但是shell文件夹位置却变成了`/resources/app/app/shell`，这样子如果在index.js文件中对shell文件夹进行绝对路径查询的话就会发生严重错误。electron-builder打包后的源代码会被放到资源目录`/resources/app`下，位于资源目录下的代码是可以进行运行时绝对路径查询(前提是没有开启`arar`源代码加密)和相对路径查询的。\n\n```js\nconst fsChmodShell = require('./app/services/middleware/fs-chmod-shell.js');\nfsChmodShell();\n```\n\n### 感谢阅读，如有错误，还请指正：- )\n","source":"_posts/2019-10-26-Electron-Mobx-React开发记录（二）.md","raw":"---\ntitle: \"Electron+Mobx+React开发记录（二）\"\ncatalog: true\ntoc_nav_num: true\ndate:   2019-10-26 20:43:00\nsubtitle: \"Electron Mobx React\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- es6\n- react\n- mobx\n- electron\ncategories:\n- Electron\nupdateDate: 2019-10-26 20:43:00\n---\n\n![Hello World](Fly.jpg)\n\n### 目录\n\n1. 前言\n2. webpack4图片打包的问题\n3. webpack4样式表打包分离\n4. 应用构建工具electron-builder配置\n5. 应用构建工具electron-builder的问题\n\n### 前言\n-------------\n[前一篇文章](www.jianshu.com/p/53d74df07e4c)主要记录了开发环境的搭建和一些开发时遇到的问题，这篇文章主要说说自己在coding work之后进行应用打包时遇到的问题(webpack打包和electron打包)，[项目地址](https://github.com/nojsja/electronux)。\n\n### webpack4图片打包的问题\n------------------------------------------\n\n#### jsx中声明的img:src不能被webpack识别和打包\n在jsx中使用图片时，如下：\n```html\n<div className=\"install-item-image\" onClick={() => {showTerminalInfo(item.label)}}>\n  <Dimmer active={loading} inverted>\n    <Loader size=\"tiny\">{ loadingLable }</Loader>\n  </Dimmer>\n  <img alt=\"error\" src={item.url} />\n</div>\n```\n这里img:src使用了一个变量，但无论是变量还是字符串，webpack在打包的时候都不能根据我们引用的资源路径在dist目录下生成正确的资源引用路径结构，所以只能在我们需要引用图片的地方，手动require引入，如下：\n```html\n...\nconst imgSrc = require('path/to/img');\n...\n<img src={imgSrc}>\n```\n那如果img:src真的是变量而且需要一次引入多个那怎么办，如果你说想用for循环引入可以不，这其实是不行的，因为webpack打包的时候是识别不了你for循环内定义的变量的。引入办法如下，可以用正则表达式对一个文件夹内的所有文件进行匹配引入，并且可以在项目任意位置引入：\n```\n// 匹配1：只匹配图片\nconst requireContext = require.context('resources/install', true, /^\\.\\/.*\\.(jpg|png)$/);\n// 匹配2：匹配所有文件\nconst requireContext = require.context('resources/install', true, /.*/);\nrequireContext.keys().map(requireContext);\n```\n\n#### 生产环境和开发环境的publicPath配置\n关于publicPath这里有一篇说得比较清楚的[文章](https://www.jianshu.com/p/cbe81be10d78)\n> output.path ： 硬盘上的路径，也就是你打算把文件打包到你的哪个目录，与发布时的路径完全无关。  \n\n> output.publicPath： 主要用来转换url中的相对路径的。如果你引用到包含url的资源，一定要配置output.publicPath，配置了此项，webpack在打包时才能根据配置动态修改uri中的相对值。比如果你将所有打包生成好的文件托管在服务器上，访问格式是`www.yourhost.com/dist/index.html`的话，那publicPath就需要指定为`/dist/`。\n\n* webpack-dev-server的publicPath默认是`/`，也就是在开发环境下webpack-dev-server在内存中生成的bundle.js文件路径是`/`，我们在浏览器中访问`localhost:3000/bundle.js`就能看见了，如果你在生产环境下的访问路径是`localhost:3000/dist/bundle.js`，就需要指定webpack-dev-server的publicPath为`/dist/`，这只是一个内存中虚拟的路径映射，目的是为了统一开发环境和生产环境的路径问题。\n\n* 开发环境下：\n```\nwebpack.config.js\n...\ndevtool: 'source-map',\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:3000',\n    'webpack/hot/only-dev-server',\n    './app/index',\n  ],\n  mode: 'development',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n...\n```\n* 生产环境下：\n```\nwebpack.prod.config.js\n...\nentry: [\n    './app/index',\n  ],\n  mode: 'production',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\n...\n```\n\n#### 统一生产环境和开发环境的资源引用路径\n可以在webpack.config文件中指定`resolve.alias`来将一个绝对路径重命名，然后在项目任意位置直接使用重命名路径就行了，不用在import的时候搞很多相对路径声明`../../../`，如下：\n* 声明：  \n```\nwebpack.config.js\n...\nresolve: {\n    alias: {\n      resources: path.resolve(__dirname, 'resources'),\n      app: path.resolve(__dirname, 'app'),\n    },\n  },\n...\n```\n* 使用：\n```html\n<img src=\"resources/install/albert.png\"}>\n```\n\n### webpack4样式表打包分离\n------------------------------------------\n#### css属性`backgroup-image: url(...)`的路径统一\n我们在webpack.config中指定`resolve.alias`之后，如果你要在css属性中引用那个绝对路径的别名的话，需要在img:url字符前多加一个`~`路径转换符号，来让webpack为你自动替换路径，如下：\n```css\n.router-left-background {\n  background-image: url(~resources/public/gohome.jpg); /* The image used */\n  background-color: #f6f6f6; /* Used if the image is unavailable */\n  background-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* cover size */\n}\n```\n#### 将样式表从bundle.js文件中分离\n如果项目比较大的话，直接将样式表压缩进bundle.js文件中会导致页面首页加载时间比较长，这里我们使用`extract-text-webpack-plugin`webpack插件分离样式表，然后在index.html引入样式表，这样页面加载的时候浏览器就会发送异步请求来同时加载bundle.js文件和css文件，极大地提高加载速度。\n* index.html\n\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>electronux</title>\n  <link rel=\"stylesheet\" href=\"style.scss.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <base href=\"./\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n* 开发环境下webpack插件`extract-text-webpack-plugin`配置\n这里的插件`publicPath`需要根据webpack-dev-server的`publicPath`配置(默认是`/`)，如果我们的样式表会加载外部文件(例如图片和字体文件)的话，那个实际资源请求路径就会根据这里的`publicPath`来计算得出。\n\n```js\nwebpack.config.js\n...\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\n// 拆分样式文件\nconst extractSass = new ExtractTextPlugin({\n  filename: 'style.scss.css',\n});\nconst extractCss = new ExtractTextPlugin({\n  filename: 'style.css',\n});\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['babel-loader'],\n      },\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: '/',\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: '/',\n        }),\n      },\n      ...\n    ],\n    ...\n  },\n\n  plugins: [\n    extractSass,\n    extractCss,\n    ...\n  ],\n...\n```\n\n* 生产环境下webpack插件`extract-text-webpack-plugin`配置\n生产环境下需要将`publicPath`设置为我们打包后生成的dist目录，不然css中引用的外部资源如图片等是不能生成到dist目录中的。\n\n```js\nwebpack.prod.config.js\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      ...\n      {\n        test: /\\.css$/,\n        use: extractCss.extract({\n          fallback: 'style-loader',\n          use: 'css-loader',\n          publicPath: path.join(__dirname, 'dist/'),\n        }),\n      },\n      {\n        test: /\\.scss$/,\n        use: extractSass.extract({\n          use: [{\n            loader: 'css-loader',\n          }, {\n            loader: 'sass-loader',\n          }],\n          fallback: 'style-loader', // 在开发环境使用 style-loader\n          publicPath: path.join(__dirname, 'dist/'),\n        }),\n      },\n    ...\n```\n\n### 应用构建工具electron-builder配置\n----------------------------------------------------\n```json\n{\n  \"appId\": \"com.nojsja.electronux\",\n  \"copyright\": \"nojsja\",\n  \"productName\": \"electronux\",\n  \"asar\": false,\n  \"directories\": {\n    \"buildResources\": \"build-assets/\",\n    \"output\": \"build/\"\n  },\n  \"files\": [\"package.json\", \"index.js\", \"dist/\", \"app/\", \"node_modules/\"],\n  \"linux\": {\n    \"icon\": \"resources\",\n    \"category\": \"System\",\n    \"description\": \"A System Management Tool Build For Manjaro Linux 17\",\n    \"synopsis\": \"electronux\",\n    \"target\": [\"zip\"]\n  }\n}\n```\nelectron-builder打包主要解决两个问题，一是怎么打包前端界面代码目录`dist`下的资源(渲染进程代码)，二是怎么打包由根目录下的index.js文件引入的资源(主进程代码)。配置文件中`files`参数项配置的就是所有需要最终打包进我们应用的所有文件了。\n* package.json -- 整个应用程序的依赖配置文件\n* index.js -- 主进程入口文件\n* dist -- 渲染进程资源文件\n* app -- 运行时引用的源代码和资源目录\n* node_modules -- 运行时引用的第三方模块和资源目录\n\n配置说明详细见[官方文档](https://www.electron.build/configuration/configuration)\n\n### 应用构建工具electron-builder的问题\n-------------------------------------------------\n#### 国内墙导致打包工具依赖下载失败\n运行electron-builder的时候会首先下载各个打包依赖，但是如果直接下载是会失败的(下载源文件存在github)。但我这边终端是用polipo配置了http-proxy的，下载的时候还是很慢，最后仍会导致下载失败，这个真的比较头痛，我索性将git仓库clone到自己搭建的vps虚拟机上(日本节点)，然后在服务器上运行一次打包命令，再把`~/.cache/electron-builder`、`~/.cache/electron`这两个打包工具生成的目录直接下载到本地对应的目录下，最后在本地运行打包命令的时候就不会再去下载依赖了。\n\n#### 打包成AppImage后在运行时不能使用chmod更改文件权限的问题\n先来看一段Linux上常见的AppImage打包应用的定义：  \n> AppImage不把Linux应用程序安装在文件系统相应的目录中，相反，它没有进行实际的安装，AppImage文件只是个压缩文件，在它运行时候`挂载`，用AppImage打包的程序，一个程序就是一个文件。  \n\n在我的应用中需要执行一些shell脚本获取系统信息，但是这些脚本在第一次运行的时候是需要使用node.js中fs模块的`fs.chmod`方法对shell脚本进行赋予可执行权限的(chmod 755)，但是AppImage运行时是不允许动态更改文件属性的，所有挂载的Applmage文件都是只读的，无奈，我放弃了将应用打包成AppImage这种格式。\n为了便于测试可以直接打包成zip文件，解压后就能运行，如果要安装到不同的发行版的话还能打包成`pacman`、`deb`、`rpm`、`tar.gz`等文件。\n\n#### arar加密打包时造成绝对路径查找失败\nelectron-builder的打包参数中有一个参数是`asar: true/false`，如果指定了为true的话打包后的压缩包内的源代码是会被arar加密的，这个对一些不开源的代码来说还是很有必要，但在我这个应用中应用在运行的时候会动态加载一些自定义的模块文件，如果你加载的路径用的是绝对路径的话，这个加载过程就会失败，因为如果启用了arar的话，我们资源目录下所有的源代码都只是一个加密的压缩包，此时你是不能通过系统的绝对路径来找到我们要引入的那个模块代码路径的，当然如果你手动解压arar压缩包的话就能看到所有源代码的目录结构了。\n\n#### 外部引用资源(img:src / css:url)的相对路径和绝对路径\nhtml demo:\n```html\n<div className=\"install-item-image\" onClick={() => {showTerminalInfo(item.label)}}>\n  <Dimmer active={loading} inverted>\n    <Loader size=\"tiny\">{ loadingLable }</Loader>\n  </Dimmer>\n  <img alt=\"error\" src={item.url} />\n</div>\n```\ncss demo:\n```css\n.router-left-background {\n  background-image: url(~resources/public/gohome.jpg); /* The image used */\n  background-color: #f6f6f6; /* Used if the image is unavailable */\n  background-position: center; /* Center the image */\n  background-repeat: no-repeat; /* Do not repeat the image */\n  background-size: cover; /* cover size */\n}\n```\n如果我们正确地通过webpack打包了前端界面的代码，在dist目录下生成了正确的资源目录结构，然后尝试使用`electron index.js`命令来模拟生产环境下应用的运行(使用file协议加载dist目录下的资源)，发现代码中所有的引用资源请求都会失败。这是因为electron在生产环境下是使用`file`协议来加载文件的，首先我们在在执行了`electron index.js`命令后，electron窗口会按照我们定义的路径结构去查找index.html文件，然后加载主窗口，这个过程没有问题，如下：  \n```js\nwindow.loadURL(url.format({\n  pathname: path.resolve(__dirname, 'dist', 'index.html'),\n  protocol: 'file:',\n  slashes: true,\n}));\n```\n然后在这个index.html中的css图片请求和react组件的图片请求就是问题之处了，因为我们没有指定当前工作目录，file协议加载文件时就会直接从系统根目录开始根据资源目录结构查找了，实际上，我们的所有资源都是在`dist`文件夹下的，而不是系统根目录`/`，解决办法是在我们的index.html文件里面指定一个base标签，指明当前工作目录就行了，如下：\n```html\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>electronux</title>\n  <link rel=\"stylesheet\" href=\"style.scss.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n  <base href=\"./\">\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script src=\"bundle.js\"></script>\n</body>\n</html>\n```\n\n#### 使用node.js对shell脚本赋予可执行权限\nnode.js的fs模块可以为文件赋予可执行权限，并且`fs.chmod`命令不用额外申请权限，估计是如果当前用户可以以root权限运行文件的话，node会自动为你获取权限。  \n* 定义fsChmod模块递归为一个目录内的所有文件授予权限：\n\n```js\nconst fs = require('fs');\nconst path = require('path');\n\nfunction chmod(target, opstr) {\n  if (fs.statSync(target).isDirectory()) {\n    const files = fs.readdirSync(target);\n    if (files.length) {\n      files.forEach((file) => {\n        chmod(path.join(target, file), opstr);\n      });\n    }\n  } else {\n    fs.chmodSync(target, opstr);\n  }\n}\nfunction fsChmod(dir, opstr) {\n  chmod(dir, opstr);\n}\n\nmodule.exports = fsChmod;\n\n```\n\n* 在fsChmod同级目录下定义shell授权模块\n这样子的话会避开绝对路径查找的问题\n\n```js\nconst path = require('path');\nconst fsChmod = require('./fs-chmod');\nfunction fsChmodShell() {\n  fsChmod(path.join(__dirname, '../shell'), 0o711);\n}\nmodule.exports = fsChmodShell;\n```\n\n* 项目index.js中引入执行  \n__注意：__ 请尽量不要在项目文件中使用`__dirname`和`procoss.pwd()`來加载一个模块，例如`path.resolve(process.cwd(), 'path/to/file')`这样的绝对路径，而应该使用`app.getAppPath()`，相对应的获取运行时绝对路径命令更改为`path.resolve(app.getAppPath(), 'path/to/file')`(app是electron自带的属性)来获取运行时执行目录，`app.getAppPath()`一般是`package.json`所处的目录。因为在开发环境下我们的代码目录结构和electron-builder打包后生产环境下的的应用代码结构是不一样的，比如开发环境下，index.js文件位于项目根目录`/`下，shell文件夹(存放shell scripts)的路径是`/app/service/shell`，经过electron-builder打包后，index.js(实际上被编译成了一个可执行文件 )仍然位于根目录`/`下，但是shell文件夹位置却变成了`/resources/app/app/shell`，这样子如果在index.js文件中对shell文件夹进行绝对路径查询的话就会发生严重错误。electron-builder打包后的源代码会被放到资源目录`/resources/app`下，位于资源目录下的代码是可以进行运行时绝对路径查询(前提是没有开启`arar`源代码加密)和相对路径查询的。\n\n```js\nconst fsChmodShell = require('./app/services/middleware/fs-chmod-shell.js');\nfsChmodShell();\n```\n\n### 感谢阅读，如有错误，还请指正：- )\n","slug":"Electron-Mobx-React开发记录（二）","published":1,"updated":"2020-12-06T10:52:55.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmur1000zkl95994o8chz","content":"<p><img src=\"Fly.jpg\" alt=\"Hello World\"></p><h3 id=\"目录\">目录</h3><ol><li>前言</li><li>webpack4图片打包的问题</li><li>webpack4样式表打包分离</li><li>应用构建工具electron-builder配置</li><li>应用构建工具electron-builder的问题</li></ol><h3 id=\"前言\">前言</h3><hr><p><a href=\"www.jianshu.com/p/53d74df07e4c\">前一篇文章</a>主要记录了开发环境的搭建和一些开发时遇到的问题，这篇文章主要说说自己在coding work之后进行应用打包时遇到的问题(webpack打包和electron打包)，<a href=\"https://github.com/nojsja/electronux\" target=\"_blank\" rel=\"noopener\">项目地址</a>。</p><h3 id=\"webpack4图片打包的问题\">webpack4图片打包的问题</h3><hr><h4 id=\"jsx中声明的img-src不能被webpack识别和打包\">jsx中声明的img:src不能被webpack识别和打包</h4><p>在jsx中使用图片时，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"install-item-image\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;showTerminalInfo(item.label)&#125;&#125;&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Dimmer</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;loading&#125;</span> <span class=\"attr\">inverted</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loader</span> <span class=\"attr\">size</span>=<span class=\"string\">\"tiny\"</span>&gt;</span>&#123; loadingLable &#125;<span class=\"tag\">&lt;/<span class=\"name\">Loader</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Dimmer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;item.url&#125;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里img:src使用了一个变量，但无论是变量还是字符串，webpack在打包的时候都不能根据我们引用的资源路径在dist目录下生成正确的资源引用路径结构，所以只能在我们需要引用图片的地方，手动require引入，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">const imgSrc = require('path/to/img');</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;imgSrc&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那如果img:src真的是变量而且需要一次引入多个那怎么办，如果你说想用for循环引入可以不，这其实是不行的，因为webpack打包的时候是识别不了你for循环内定义的变量的。引入办法如下，可以用正则表达式对一个文件夹内的所有文件进行匹配引入，并且可以在项目任意位置引入：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 匹配1：只匹配图片</span><br><span class=\"line\">const requireContext &#x3D; require.context(&#39;resources&#x2F;install&#39;, true, &#x2F;^\\.\\&#x2F;.*\\.(jpg|png)$&#x2F;);</span><br><span class=\"line\">&#x2F;&#x2F; 匹配2：匹配所有文件</span><br><span class=\"line\">const requireContext &#x3D; require.context(&#39;resources&#x2F;install&#39;, true, &#x2F;.*&#x2F;);</span><br><span class=\"line\">requireContext.keys().map(requireContext);</span><br></pre></td></tr></table></figure><h4 id=\"生产环境和开发环境的publicPath配置\">生产环境和开发环境的publicPath配置</h4><p>关于publicPath这里有一篇说得比较清楚的<a href=\"https://www.jianshu.com/p/cbe81be10d78\" target=\"_blank\" rel=\"noopener\">文章</a></p><blockquote><p>output.path ： 硬盘上的路径，也就是你打算把文件打包到你的哪个目录，与发布时的路径完全无关。</p></blockquote><blockquote><p>output.publicPath： 主要用来转换url中的相对路径的。如果你引用到包含url的资源，一定要配置output.publicPath，配置了此项，webpack在打包时才能根据配置动态修改uri中的相对值。比如果你将所有打包生成好的文件托管在服务器上，访问格式是<code>www.yourhost.com/dist/index.html</code>的话，那publicPath就需要指定为<code>/dist/</code>。</p></blockquote><ul><li><p>webpack-dev-server的publicPath默认是<code>/</code>，也就是在开发环境下webpack-dev-server在内存中生成的bundle.js文件路径是<code>/</code>，我们在浏览器中访问<code>localhost:3000/bundle.js</code>就能看见了，如果你在生产环境下的访问路径是<code>localhost:3000/dist/bundle.js</code>，就需要指定webpack-dev-server的publicPath为<code>/dist/</code>，这只是一个内存中虚拟的路径映射，目的是为了统一开发环境和生产环境的路径问题。</p></li><li><p>开发环境下：</p></li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">devtool: &#39;source-map&#39;,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    &#39;react-hot-loader&#x2F;patch&#39;,</span><br><span class=\"line\">    &#39;webpack-dev-server&#x2F;client?http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">    &#39;webpack&#x2F;hot&#x2F;only-dev-server&#39;,</span><br><span class=\"line\">    &#39;.&#x2F;app&#x2F;index&#39;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    publicPath: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li>生产环境下：</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.prod.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">entry: [</span><br><span class=\"line\">    &#39;.&#x2F;app&#x2F;index&#39;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: &#39;production&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    publicPath: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h4 id=\"统一生产环境和开发环境的资源引用路径\">统一生产环境和开发环境的资源引用路径</h4><p>可以在webpack.config文件中指定<code>resolve.alias</code>来将一个绝对路径重命名，然后在项目任意位置直接使用重命名路径就行了，不用在import的时候搞很多相对路径声明<code>../../../</code>，如下：</p><ul><li>声明：</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      resources: path.resolve(__dirname, &#39;resources&#39;),</span><br><span class=\"line\">      app: path.resolve(__dirname, &#39;app&#39;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/install/albert.png\"</span>&#125;&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"webpack4样式表打包分离\">webpack4样式表打包分离</h3><hr><h4 id=\"css属性backgroup-image-url-的路径统一\">css属性<code>backgroup-image: url(...)</code>的路径统一</h4><p>我们在webpack.config中指定<code>resolve.alias</code>之后，如果你要在css属性中引用那个绝对路径的别名的话，需要在img:url字符前多加一个<code>~</code>路径转换符号，来让webpack为你自动替换路径，如下：</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-left-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(~resources/public/gohome.jpg); <span class=\"comment\">/* The image used */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f6f6f6</span>; <span class=\"comment\">/* Used if the image is unavailable */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; <span class=\"comment\">/* Center the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">/* Do not repeat the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover; <span class=\"comment\">/* cover size */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"将样式表从bundle-js文件中分离\">将样式表从bundle.js文件中分离</h4><p>如果项目比较大的话，直接将样式表压缩进bundle.js文件中会导致页面首页加载时间比较长，这里我们使用<code>extract-text-webpack-plugin</code>webpack插件分离样式表，然后在index.html引入样式表，这样页面加载的时候浏览器就会发送异步请求来同时加载bundle.js文件和css文件，极大地提高加载速度。</p><ul><li>index.html</li></ul><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>electronux<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.scss.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开发环境下webpack插件<code>extract-text-webpack-plugin</code>配置<br>这里的插件<code>publicPath</code>需要根据webpack-dev-server的<code>publicPath</code>配置(默认是<code>/</code>)，如果我们的样式表会加载外部文件(例如图片和字体文件)的话，那个实际资源请求路径就会根据这里的<code>publicPath</code>来计算得出。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.scss.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> extractCss = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    extractSass,</span><br><span class=\"line\">    extractCss,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li>生产环境下webpack插件<code>extract-text-webpack-plugin</code>配置<br>生产环境下需要将<code>publicPath</code>设置为我们打包后生成的dist目录，不然css中引用的外部资源如图片等是不能生成到dist目录中的。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.prod.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: path.join(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: path.join(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure><h3 id=\"应用构建工具electron-builder配置\">应用构建工具electron-builder配置</h3><hr><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"appId\"</span>: <span class=\"string\">\"com.nojsja.electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"copyright\"</span>: <span class=\"string\">\"nojsja\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"productName\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"asar\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"directories\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"buildResources\"</span>: <span class=\"string\">\"build-assets/\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"output\"</span>: <span class=\"string\">\"build/\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"files\"</span>: [<span class=\"string\">\"package.json\"</span>, <span class=\"string\">\"index.js\"</span>, <span class=\"string\">\"dist/\"</span>, <span class=\"string\">\"app/\"</span>, <span class=\"string\">\"node_modules/\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"linux\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"resources\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"category\"</span>: <span class=\"string\">\"System\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A System Management Tool Build For Manjaro Linux 17\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"synopsis\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: [<span class=\"string\">\"zip\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>electron-builder打包主要解决两个问题，一是怎么打包前端界面代码目录<code>dist</code>下的资源(渲染进程代码)，二是怎么打包由根目录下的index.js文件引入的资源(主进程代码)。配置文件中<code>files</code>参数项配置的就是所有需要最终打包进我们应用的所有文件了。</p><ul><li>package.json – 整个应用程序的依赖配置文件</li><li>index.js – 主进程入口文件</li><li>dist – 渲染进程资源文件</li><li>app – 运行时引用的源代码和资源目录</li><li>node_modules – 运行时引用的第三方模块和资源目录</li></ul><p>配置说明详细见<a href=\"https://www.electron.build/configuration/configuration\" target=\"_blank\" rel=\"noopener\">官方文档</a></p><h3 id=\"应用构建工具electron-builder的问题\">应用构建工具electron-builder的问题</h3><hr><h4 id=\"国内墙导致打包工具依赖下载失败\">国内墙导致打包工具依赖下载失败</h4><p>运行electron-builder的时候会首先下载各个打包依赖，但是如果直接下载是会失败的(下载源文件存在github)。但我这边终端是用polipo配置了http-proxy的，下载的时候还是很慢，最后仍会导致下载失败，这个真的比较头痛，我索性将git仓库clone到自己搭建的vps虚拟机上(日本节点)，然后在服务器上运行一次打包命令，再把<code>~/.cache/electron-builder</code>、<code>~/.cache/electron</code>这两个打包工具生成的目录直接下载到本地对应的目录下，最后在本地运行打包命令的时候就不会再去下载依赖了。</p><h4 id=\"打包成AppImage后在运行时不能使用chmod更改文件权限的问题\">打包成AppImage后在运行时不能使用chmod更改文件权限的问题</h4><p>先来看一段Linux上常见的AppImage打包应用的定义：</p><blockquote><p>AppImage不把Linux应用程序安装在文件系统相应的目录中，相反，它没有进行实际的安装，AppImage文件只是个压缩文件，在它运行时候<code>挂载</code>，用AppImage打包的程序，一个程序就是一个文件。</p></blockquote><p>在我的应用中需要执行一些shell脚本获取系统信息，但是这些脚本在第一次运行的时候是需要使用node.js中fs模块的<code>fs.chmod</code>方法对shell脚本进行赋予可执行权限的(chmod 755)，但是AppImage运行时是不允许动态更改文件属性的，所有挂载的Applmage文件都是只读的，无奈，我放弃了将应用打包成AppImage这种格式。<br>为了便于测试可以直接打包成zip文件，解压后就能运行，如果要安装到不同的发行版的话还能打包成<code>pacman</code>、<code>deb</code>、<code>rpm</code>、<code>tar.gz</code>等文件。</p><h4 id=\"arar加密打包时造成绝对路径查找失败\">arar加密打包时造成绝对路径查找失败</h4><p>electron-builder的打包参数中有一个参数是<code>asar: true/false</code>，如果指定了为true的话打包后的压缩包内的源代码是会被arar加密的，这个对一些不开源的代码来说还是很有必要，但在我这个应用中应用在运行的时候会动态加载一些自定义的模块文件，如果你加载的路径用的是绝对路径的话，这个加载过程就会失败，因为如果启用了arar的话，我们资源目录下所有的源代码都只是一个加密的压缩包，此时你是不能通过系统的绝对路径来找到我们要引入的那个模块代码路径的，当然如果你手动解压arar压缩包的话就能看到所有源代码的目录结构了。</p><h4 id=\"外部引用资源-img-src-css-url-的相对路径和绝对路径\">外部引用资源(img:src / css:url)的相对路径和绝对路径</h4><p>html demo:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"install-item-image\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;showTerminalInfo(item.label)&#125;&#125;&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Dimmer</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;loading&#125;</span> <span class=\"attr\">inverted</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loader</span> <span class=\"attr\">size</span>=<span class=\"string\">\"tiny\"</span>&gt;</span>&#123; loadingLable &#125;<span class=\"tag\">&lt;/<span class=\"name\">Loader</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Dimmer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;item.url&#125;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css demo:</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-left-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(~resources/public/gohome.jpg); <span class=\"comment\">/* The image used */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f6f6f6</span>; <span class=\"comment\">/* Used if the image is unavailable */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; <span class=\"comment\">/* Center the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">/* Do not repeat the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover; <span class=\"comment\">/* cover size */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果我们正确地通过webpack打包了前端界面的代码，在dist目录下生成了正确的资源目录结构，然后尝试使用<code>electron index.js</code>命令来模拟生产环境下应用的运行(使用file协议加载dist目录下的资源)，发现代码中所有的引用资源请求都会失败。这是因为electron在生产环境下是使用<code>file</code>协议来加载文件的，首先我们在在执行了<code>electron index.js</code>命令后，electron窗口会按照我们定义的路径结构去查找index.html文件，然后加载主窗口，这个过程没有问题，如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">  pathname: path.resolve(__dirname, <span class=\"string\">'dist'</span>, <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">  protocol: <span class=\"string\">'file:'</span>,</span><br><span class=\"line\">  slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure><p>然后在这个index.html中的css图片请求和react组件的图片请求就是问题之处了，因为我们没有指定当前工作目录，file协议加载文件时就会直接从系统根目录开始根据资源目录结构查找了，实际上，我们的所有资源都是在<code>dist</code>文件夹下的，而不是系统根目录<code>/</code>，解决办法是在我们的index.html文件里面指定一个base标签，指明当前工作目录就行了，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>electronux<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.scss.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id=\"使用node-js对shell脚本赋予可执行权限\">使用node.js对shell脚本赋予可执行权限</h4><p>node.js的fs模块可以为文件赋予可执行权限，并且<code>fs.chmod</code>命令不用额外申请权限，估计是如果当前用户可以以root权限运行文件的话，node会自动为你获取权限。</p><ul><li>定义fsChmod模块递归为一个目录内的所有文件授予权限：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chmod</span>(<span class=\"params\">target, opstr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fs.statSync(target).isDirectory()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> files = fs.readdirSync(target);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.length) &#123;</span><br><span class=\"line\">      files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        chmod(path.join(target, file), opstr);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fs.chmodSync(target, opstr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsChmod</span>(<span class=\"params\">dir, opstr</span>) </span>&#123;</span><br><span class=\"line\">  chmod(dir, opstr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fsChmod;</span><br></pre></td></tr></table></figure><ul><li>在fsChmod同级目录下定义shell授权模块<br>这样子的话会避开绝对路径查找的问题</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fsChmod = <span class=\"built_in\">require</span>(<span class=\"string\">'./fs-chmod'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsChmodShell</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fsChmod(path.join(__dirname, <span class=\"string\">'../shell'</span>), <span class=\"number\">0o711</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fsChmodShell;</span><br></pre></td></tr></table></figure><ul><li>项目index.js中引入执行<br><strong>注意：</strong> 请尽量不要在项目文件中使用<code>__dirname</code>和<code>procoss.pwd()</code>來加载一个模块，例如<code>path.resolve(process.cwd(), 'path/to/file')</code>这样的绝对路径，而应该使用<code>app.getAppPath()</code>，相对应的获取运行时绝对路径命令更改为<code>path.resolve(app.getAppPath(), 'path/to/file')</code>(app是electron自带的属性)来获取运行时执行目录，<code>app.getAppPath()</code>一般是<code>package.json</code>所处的目录。因为在开发环境下我们的代码目录结构和electron-builder打包后生产环境下的的应用代码结构是不一样的，比如开发环境下，index.js文件位于项目根目录<code>/</code>下，shell文件夹(存放shell scripts)的路径是<code>/app/service/shell</code>，经过electron-builder打包后，index.js(实际上被编译成了一个可执行文件 )仍然位于根目录<code>/</code>下，但是shell文件夹位置却变成了<code>/resources/app/app/shell</code>，这样子如果在index.js文件中对shell文件夹进行绝对路径查询的话就会发生严重错误。electron-builder打包后的源代码会被放到资源目录<code>/resources/app</code>下，位于资源目录下的代码是可以进行运行时绝对路径查询(前提是没有开启<code>arar</code>源代码加密)和相对路径查询的。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fsChmodShell = <span class=\"built_in\">require</span>(<span class=\"string\">'./app/services/middleware/fs-chmod-shell.js'</span>);</span><br><span class=\"line\">fsChmodShell();</span><br></pre></td></tr></table></figure><h3 id=\"感谢阅读，如有错误，还请指正：\">感谢阅读，如有错误，还请指正：- )</h3>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"Fly.jpg\" alt=\"Hello World\"></p><h3 id=\"目录\">目录</h3><ol><li>前言</li><li>webpack4图片打包的问题</li><li>webpack4样式表打包分离</li><li>应用构建工具electron-builder配置</li><li>应用构建工具electron-builder的问题</li></ol><h3 id=\"前言\">前言</h3><hr><p><a href=\"www.jianshu.com/p/53d74df07e4c\">前一篇文章</a>主要记录了开发环境的搭建和一些开发时遇到的问题，这篇文章主要说说自己在coding work之后进行应用打包时遇到的问题(webpack打包和electron打包)，<a href=\"https://github.com/nojsja/electronux\" target=\"_blank\" rel=\"noopener\">项目地址</a>。</p><h3 id=\"webpack4图片打包的问题\">webpack4图片打包的问题</h3><hr><h4 id=\"jsx中声明的img-src不能被webpack识别和打包\">jsx中声明的img:src不能被webpack识别和打包</h4><p>在jsx中使用图片时，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"install-item-image\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;showTerminalInfo(item.label)&#125;&#125;&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Dimmer</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;loading&#125;</span> <span class=\"attr\">inverted</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loader</span> <span class=\"attr\">size</span>=<span class=\"string\">\"tiny\"</span>&gt;</span>&#123; loadingLable &#125;<span class=\"tag\">&lt;/<span class=\"name\">Loader</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Dimmer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;item.url&#125;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里img:src使用了一个变量，但无论是变量还是字符串，webpack在打包的时候都不能根据我们引用的资源路径在dist目录下生成正确的资源引用路径结构，所以只能在我们需要引用图片的地方，手动require引入，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">const imgSrc = require('path/to/img');</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;imgSrc&#125;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那如果img:src真的是变量而且需要一次引入多个那怎么办，如果你说想用for循环引入可以不，这其实是不行的，因为webpack打包的时候是识别不了你for循环内定义的变量的。引入办法如下，可以用正则表达式对一个文件夹内的所有文件进行匹配引入，并且可以在项目任意位置引入：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 匹配1：只匹配图片</span><br><span class=\"line\">const requireContext &#x3D; require.context(&#39;resources&#x2F;install&#39;, true, &#x2F;^\\.\\&#x2F;.*\\.(jpg|png)$&#x2F;);</span><br><span class=\"line\">&#x2F;&#x2F; 匹配2：匹配所有文件</span><br><span class=\"line\">const requireContext &#x3D; require.context(&#39;resources&#x2F;install&#39;, true, &#x2F;.*&#x2F;);</span><br><span class=\"line\">requireContext.keys().map(requireContext);</span><br></pre></td></tr></table></figure><h4 id=\"生产环境和开发环境的publicPath配置\">生产环境和开发环境的publicPath配置</h4><p>关于publicPath这里有一篇说得比较清楚的<a href=\"https://www.jianshu.com/p/cbe81be10d78\" target=\"_blank\" rel=\"noopener\">文章</a></p><blockquote><p>output.path ： 硬盘上的路径，也就是你打算把文件打包到你的哪个目录，与发布时的路径完全无关。</p></blockquote><blockquote><p>output.publicPath： 主要用来转换url中的相对路径的。如果你引用到包含url的资源，一定要配置output.publicPath，配置了此项，webpack在打包时才能根据配置动态修改uri中的相对值。比如果你将所有打包生成好的文件托管在服务器上，访问格式是<code>www.yourhost.com/dist/index.html</code>的话，那publicPath就需要指定为<code>/dist/</code>。</p></blockquote><ul><li><p>webpack-dev-server的publicPath默认是<code>/</code>，也就是在开发环境下webpack-dev-server在内存中生成的bundle.js文件路径是<code>/</code>，我们在浏览器中访问<code>localhost:3000/bundle.js</code>就能看见了，如果你在生产环境下的访问路径是<code>localhost:3000/dist/bundle.js</code>，就需要指定webpack-dev-server的publicPath为<code>/dist/</code>，这只是一个内存中虚拟的路径映射，目的是为了统一开发环境和生产环境的路径问题。</p></li><li><p>开发环境下：</p></li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">devtool: &#39;source-map&#39;,</span><br><span class=\"line\">  entry: [</span><br><span class=\"line\">    &#39;react-hot-loader&#x2F;patch&#39;,</span><br><span class=\"line\">    &#39;webpack-dev-server&#x2F;client?http:&#x2F;&#x2F;localhost:3000&#39;,</span><br><span class=\"line\">    &#39;webpack&#x2F;hot&#x2F;only-dev-server&#39;,</span><br><span class=\"line\">    &#39;.&#x2F;app&#x2F;index&#39;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: &#39;development&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    publicPath: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li>生产环境下：</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.prod.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">entry: [</span><br><span class=\"line\">    &#39;.&#x2F;app&#x2F;index&#39;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  mode: &#39;production&#39;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#39;bundle.js&#39;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#39;dist&#39;),</span><br><span class=\"line\">    publicPath: &#39;&#x2F;&#39;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h4 id=\"统一生产环境和开发环境的资源引用路径\">统一生产环境和开发环境的资源引用路径</h4><p>可以在webpack.config文件中指定<code>resolve.alias</code>来将一个绝对路径重命名，然后在项目任意位置直接使用重命名路径就行了，不用在import的时候搞很多相对路径声明<code>../../../</code>，如下：</p><ul><li>声明：</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      resources: path.resolve(__dirname, &#39;resources&#39;),</span><br><span class=\"line\">      app: path.resolve(__dirname, &#39;app&#39;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"resources/install/albert.png\"</span>&#125;&gt;</span></span><br></pre></td></tr></table></figure><h3 id=\"webpack4样式表打包分离\">webpack4样式表打包分离</h3><hr><h4 id=\"css属性backgroup-image-url-的路径统一\">css属性<code>backgroup-image: url(...)</code>的路径统一</h4><p>我们在webpack.config中指定<code>resolve.alias</code>之后，如果你要在css属性中引用那个绝对路径的别名的话，需要在img:url字符前多加一个<code>~</code>路径转换符号，来让webpack为你自动替换路径，如下：</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-left-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(~resources/public/gohome.jpg); <span class=\"comment\">/* The image used */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f6f6f6</span>; <span class=\"comment\">/* Used if the image is unavailable */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; <span class=\"comment\">/* Center the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">/* Do not repeat the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover; <span class=\"comment\">/* cover size */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"将样式表从bundle-js文件中分离\">将样式表从bundle.js文件中分离</h4><p>如果项目比较大的话，直接将样式表压缩进bundle.js文件中会导致页面首页加载时间比较长，这里我们使用<code>extract-text-webpack-plugin</code>webpack插件分离样式表，然后在index.html引入样式表，这样页面加载的时候浏览器就会发送异步请求来同时加载bundle.js文件和css文件，极大地提高加载速度。</p><ul><li>index.html</li></ul><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>electronux<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.scss.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>开发环境下webpack插件<code>extract-text-webpack-plugin</code>配置<br>这里的插件<code>publicPath</code>需要根据webpack-dev-server的<code>publicPath</code>配置(默认是<code>/</code>)，如果我们的样式表会加载外部文件(例如图片和字体文件)的话，那个实际资源请求路径就会根据这里的<code>publicPath</code>来计算得出。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ExtractTextPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'extract-text-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拆分样式文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> extractSass = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.scss.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> extractCss = <span class=\"keyword\">new</span> ExtractTextPlugin(&#123;</span><br><span class=\"line\">  filename: <span class=\"string\">'style.css'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'babel-loader'</span>],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    extractSass,</span><br><span class=\"line\">    extractCss,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><ul><li>生产环境下webpack插件<code>extract-text-webpack-plugin</code>配置<br>生产环境下需要将<code>publicPath</code>设置为我们打包后生成的dist目录，不然css中引用的外部资源如图片等是不能生成到dist目录中的。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack.prod.config.js</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: extractCss.extract(&#123;</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          use: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          publicPath: path.join(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">        use: extractSass.extract(&#123;</span><br><span class=\"line\">          use: [&#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">          &#125;, &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">'sass-loader'</span>,</span><br><span class=\"line\">          &#125;],</span><br><span class=\"line\">          fallback: <span class=\"string\">'style-loader'</span>, <span class=\"comment\">// 在开发环境使用 style-loader</span></span><br><span class=\"line\">          publicPath: path.join(__dirname, <span class=\"string\">'dist/'</span>),</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure><h3 id=\"应用构建工具electron-builder配置\">应用构建工具electron-builder配置</h3><hr><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"appId\"</span>: <span class=\"string\">\"com.nojsja.electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"copyright\"</span>: <span class=\"string\">\"nojsja\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"productName\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"asar\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"directories\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"buildResources\"</span>: <span class=\"string\">\"build-assets/\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"output\"</span>: <span class=\"string\">\"build/\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"files\"</span>: [<span class=\"string\">\"package.json\"</span>, <span class=\"string\">\"index.js\"</span>, <span class=\"string\">\"dist/\"</span>, <span class=\"string\">\"app/\"</span>, <span class=\"string\">\"node_modules/\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"linux\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"resources\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"category\"</span>: <span class=\"string\">\"System\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"A System Management Tool Build For Manjaro Linux 17\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"synopsis\"</span>: <span class=\"string\">\"electronux\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"target\"</span>: [<span class=\"string\">\"zip\"</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>electron-builder打包主要解决两个问题，一是怎么打包前端界面代码目录<code>dist</code>下的资源(渲染进程代码)，二是怎么打包由根目录下的index.js文件引入的资源(主进程代码)。配置文件中<code>files</code>参数项配置的就是所有需要最终打包进我们应用的所有文件了。</p><ul><li>package.json – 整个应用程序的依赖配置文件</li><li>index.js – 主进程入口文件</li><li>dist – 渲染进程资源文件</li><li>app – 运行时引用的源代码和资源目录</li><li>node_modules – 运行时引用的第三方模块和资源目录</li></ul><p>配置说明详细见<a href=\"https://www.electron.build/configuration/configuration\" target=\"_blank\" rel=\"noopener\">官方文档</a></p><h3 id=\"应用构建工具electron-builder的问题\">应用构建工具electron-builder的问题</h3><hr><h4 id=\"国内墙导致打包工具依赖下载失败\">国内墙导致打包工具依赖下载失败</h4><p>运行electron-builder的时候会首先下载各个打包依赖，但是如果直接下载是会失败的(下载源文件存在github)。但我这边终端是用polipo配置了http-proxy的，下载的时候还是很慢，最后仍会导致下载失败，这个真的比较头痛，我索性将git仓库clone到自己搭建的vps虚拟机上(日本节点)，然后在服务器上运行一次打包命令，再把<code>~/.cache/electron-builder</code>、<code>~/.cache/electron</code>这两个打包工具生成的目录直接下载到本地对应的目录下，最后在本地运行打包命令的时候就不会再去下载依赖了。</p><h4 id=\"打包成AppImage后在运行时不能使用chmod更改文件权限的问题\">打包成AppImage后在运行时不能使用chmod更改文件权限的问题</h4><p>先来看一段Linux上常见的AppImage打包应用的定义：</p><blockquote><p>AppImage不把Linux应用程序安装在文件系统相应的目录中，相反，它没有进行实际的安装，AppImage文件只是个压缩文件，在它运行时候<code>挂载</code>，用AppImage打包的程序，一个程序就是一个文件。</p></blockquote><p>在我的应用中需要执行一些shell脚本获取系统信息，但是这些脚本在第一次运行的时候是需要使用node.js中fs模块的<code>fs.chmod</code>方法对shell脚本进行赋予可执行权限的(chmod 755)，但是AppImage运行时是不允许动态更改文件属性的，所有挂载的Applmage文件都是只读的，无奈，我放弃了将应用打包成AppImage这种格式。<br>为了便于测试可以直接打包成zip文件，解压后就能运行，如果要安装到不同的发行版的话还能打包成<code>pacman</code>、<code>deb</code>、<code>rpm</code>、<code>tar.gz</code>等文件。</p><h4 id=\"arar加密打包时造成绝对路径查找失败\">arar加密打包时造成绝对路径查找失败</h4><p>electron-builder的打包参数中有一个参数是<code>asar: true/false</code>，如果指定了为true的话打包后的压缩包内的源代码是会被arar加密的，这个对一些不开源的代码来说还是很有必要，但在我这个应用中应用在运行的时候会动态加载一些自定义的模块文件，如果你加载的路径用的是绝对路径的话，这个加载过程就会失败，因为如果启用了arar的话，我们资源目录下所有的源代码都只是一个加密的压缩包，此时你是不能通过系统的绝对路径来找到我们要引入的那个模块代码路径的，当然如果你手动解压arar压缩包的话就能看到所有源代码的目录结构了。</p><h4 id=\"外部引用资源-img-src-css-url-的相对路径和绝对路径\">外部引用资源(img:src / css:url)的相对路径和绝对路径</h4><p>html demo:</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"install-item-image\"</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;showTerminalInfo(item.label)&#125;&#125;&gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Dimmer</span> <span class=\"attr\">active</span>=<span class=\"string\">&#123;loading&#125;</span> <span class=\"attr\">inverted</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Loader</span> <span class=\"attr\">size</span>=<span class=\"string\">\"tiny\"</span>&gt;</span>&#123; loadingLable &#125;<span class=\"tag\">&lt;/<span class=\"name\">Loader</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Dimmer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"error\"</span> <span class=\"attr\">src</span>=<span class=\"string\">&#123;item.url&#125;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css demo:</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.router-left-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(~resources/public/gohome.jpg); <span class=\"comment\">/* The image used */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f6f6f6</span>; <span class=\"comment\">/* Used if the image is unavailable */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: center; <span class=\"comment\">/* Center the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat; <span class=\"comment\">/* Do not repeat the image */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: cover; <span class=\"comment\">/* cover size */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>如果我们正确地通过webpack打包了前端界面的代码，在dist目录下生成了正确的资源目录结构，然后尝试使用<code>electron index.js</code>命令来模拟生产环境下应用的运行(使用file协议加载dist目录下的资源)，发现代码中所有的引用资源请求都会失败。这是因为electron在生产环境下是使用<code>file</code>协议来加载文件的，首先我们在在执行了<code>electron index.js</code>命令后，electron窗口会按照我们定义的路径结构去查找index.html文件，然后加载主窗口，这个过程没有问题，如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.loadURL(url.format(&#123;</span><br><span class=\"line\">  pathname: path.resolve(__dirname, <span class=\"string\">'dist'</span>, <span class=\"string\">'index.html'</span>),</span><br><span class=\"line\">  protocol: <span class=\"string\">'file:'</span>,</span><br><span class=\"line\">  slashes: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure><p>然后在这个index.html中的css图片请求和react组件的图片请求就是问题之处了，因为我们没有指定当前工作目录，file协议加载文件时就会直接从系统根目录开始根据资源目录结构查找了，实际上，我们的所有资源都是在<code>dist</code>文件夹下的，而不是系统根目录<code>/</code>，解决办法是在我们的index.html文件里面指定一个base标签，指明当前工作目录就行了，如下：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>electronux<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.scss.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"style.css\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">base</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"bundle.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id=\"使用node-js对shell脚本赋予可执行权限\">使用node.js对shell脚本赋予可执行权限</h4><p>node.js的fs模块可以为文件赋予可执行权限，并且<code>fs.chmod</code>命令不用额外申请权限，估计是如果当前用户可以以root权限运行文件的话，node会自动为你获取权限。</p><ul><li>定义fsChmod模块递归为一个目录内的所有文件授予权限：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chmod</span>(<span class=\"params\">target, opstr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fs.statSync(target).isDirectory()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> files = fs.readdirSync(target);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (files.length) &#123;</span><br><span class=\"line\">      files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        chmod(path.join(target, file), opstr);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fs.chmodSync(target, opstr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsChmod</span>(<span class=\"params\">dir, opstr</span>) </span>&#123;</span><br><span class=\"line\">  chmod(dir, opstr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fsChmod;</span><br></pre></td></tr></table></figure><ul><li>在fsChmod同级目录下定义shell授权模块<br>这样子的话会避开绝对路径查找的问题</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fsChmod = <span class=\"built_in\">require</span>(<span class=\"string\">'./fs-chmod'</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fsChmodShell</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  fsChmod(path.join(__dirname, <span class=\"string\">'../shell'</span>), <span class=\"number\">0o711</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = fsChmodShell;</span><br></pre></td></tr></table></figure><ul><li>项目index.js中引入执行<br><strong>注意：</strong> 请尽量不要在项目文件中使用<code>__dirname</code>和<code>procoss.pwd()</code>來加载一个模块，例如<code>path.resolve(process.cwd(), 'path/to/file')</code>这样的绝对路径，而应该使用<code>app.getAppPath()</code>，相对应的获取运行时绝对路径命令更改为<code>path.resolve(app.getAppPath(), 'path/to/file')</code>(app是electron自带的属性)来获取运行时执行目录，<code>app.getAppPath()</code>一般是<code>package.json</code>所处的目录。因为在开发环境下我们的代码目录结构和electron-builder打包后生产环境下的的应用代码结构是不一样的，比如开发环境下，index.js文件位于项目根目录<code>/</code>下，shell文件夹(存放shell scripts)的路径是<code>/app/service/shell</code>，经过electron-builder打包后，index.js(实际上被编译成了一个可执行文件 )仍然位于根目录<code>/</code>下，但是shell文件夹位置却变成了<code>/resources/app/app/shell</code>，这样子如果在index.js文件中对shell文件夹进行绝对路径查询的话就会发生严重错误。electron-builder打包后的源代码会被放到资源目录<code>/resources/app</code>下，位于资源目录下的代码是可以进行运行时绝对路径查询(前提是没有开启<code>arar</code>源代码加密)和相对路径查询的。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fsChmodShell = <span class=\"built_in\">require</span>(<span class=\"string\">'./app/services/middleware/fs-chmod-shell.js'</span>);</span><br><span class=\"line\">fsChmodShell();</span><br></pre></td></tr></table></figure><h3 id=\"感谢阅读，如有错误，还请指正：\">感谢阅读，如有错误，还请指正：- )</h3>"},{"title":"基于s3对象存储多文件分片上传的Javascript实现（一）","catalog":true,"toc_nav_num":true,"date":"2020-03-07T08:18:00.000Z","subtitle":"aws s3 javascript","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-03-07T08:18:00.000Z","_content":"\n### 目录\n\n1. 概述\n\n2. 浏览器文件操作限制\n\n3. 前端多文件分片上传的原理和实现\n\n### 预览\n\n![upload](upload.png)\n\n### 概述\n\nAmazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。  \n本文主要针对兼容aws-s3接口的第三方存储服务，在不使用官方sdk的情况下直接使用Restful接口进行存储桶多文件分片上传，主要包含浏览器端的多文件分片上传逻辑的Javascript代码实现。\n\n### 浏览器文件操作限制\n\n* HTML5新特性`input[type=file]`支持调用浏览器文件访问窗口来获取文件数据，实际上JS代码使用此特性访问本地文件系统后拿到的是一个指向文件的引用地址，且如果页面刷新了那么这个地址不可复用，JS代码并没有实际操作文件本身。前端上传数据时根据这个指向文件的地址把文件的一小块分片数据载入到内存并通过Ajax请求发送到中间件进行处理。\n* 浏览器JS代码没有文件系统操作权限，不能任意存储和读取文件，因此不支持刷新浏览器后上传进度断点恢复，刷新之后断点恢复的前提是能拿到文件数据，但是JS代码没权限访问之前拿到的文件引用地址，并且存储之前上传过的文件分片数据这一做法也不合理。 \n* 相对于文件上传，文件下载则完全不可控，由于文件操作权限，所以整个下载文件操作都是由浏览器自带的的下载任务管理器控制的，没有浏览器接口能拿到这些下载任务进度，所以下载任务进度也是不能获取的。\n\n### 前端多文件分片上传的原理和实现\n\n_完整Github[源码](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload)_\n\n> 使用了React16/Webpack4/Mobx状态管理库\n\n* 支持批量文件分割并行上传\n* 多文件操作：暂停/恢复/终止/续传/重传\n* 自定义上传任务数目、单个分片大小\n\n#### 运行流程图\n\n![upload](shards_upload.jpg)\n\n#### 主要流程\n\n1. cacheFile  \n前端通过input组件拿到所有文件地址并缓存起来。\n```js\n /**\n   * [cacheFile 缓存即将注册的文件]\n   */\n  @action\n  cacheFile = (files, bucket) => {\n    const symbolArr = this.filesCache.map(file => this.getSymbol(file));\n    const filtedFiles = [];\n    let uploadingFileFound = false;\n    files.forEach((file) => {\n      if (!symbolArr.includes(this.getSymbol(file))) {\n        if (this.findIsUploading(this.getSymbol(file), bucket)) {\n          uploadingFileFound = true;\n          filtedFiles.push(file.name);\n        } else {\n          this.filesCache.push(file);\n          symbolArr.push(this.getSymbol(file));\n        }\n      }\n    });\n    if (!files.length) openNotification('warning', null, this.lang.lang.noFilCanBeUploaded);\n    if (uploadingFileFound) openNotification('warning', null, this.lang.lang.uploadingFileReuploadTips + filtedFiles.join(', '));\n  }\n```\n\n2. registry  \n根据上一步拿到的文件地址数组创建多个Mobx observable对象跟踪每个上传对象的基本识别信息，包括文件名、文件大小、类型、分片信息(分片大小和总分片数)、上传状态信息：uninitial(未初始化)/pending(准备)/uploading(上传中)/pause(暂停)/error(错误)/break(上传完成)、上传开始时间、上传完成时间，为了便于访问这些Mobx observable对象，建立一个weakMap存储file对象和observable对象的弱映射关系。\n```js\n/**\n   * [registry 注册上传文件信息]\n   * @param {[Object]} file [文件对象]\n   * @param {[String]} uploadId [文件上传进程id]\n   * @param {[Object]} state [文件初始化状态]\n   */\n  @action registry = (files, region, prefix) => {\n    let fileObj = null;\n    this.loading = true;\n    files.forEach((file) => {\n      if (this.files.includes(file)) {\n        return;\n      }\n      this.files.push(file);\n      fileObj = {\n        name: file.webkitRelativePath || file.name,\n        prefix: prefix || '',\n        size: file.size,\n        type: file.type || mapMimeType((file.webkitRelativePath || file.name).split('.').pop()).type,\n        state: 'uninitial',\n        creationTime: '',\n        completionTime: '',\n        index: 0,\n        file,\n        initialized: false,\n        partEtags: [],\n        region,\n        blockSize: this.blockSize,\n        total: Math.ceil(file.size / this.blockSize),\n        activePoint: new Date(),\n        speed: '0 MB/S',\n        id: encodeURIComponent(new Date() + file.name + file.type + file.size),\n      };\n      const obj = observable(fileObj);\n      this.taskType.uninitial.push(obj);\n      this.taskType.series.push(obj);\n      if (!this.fileStorage.get(region)) {\n        this.fileStorage.set(region, [obj]);\n      } else {\n        this.fileStorage.get(region).push(obj);\n      }\n      // this.fileStorageMap.set(file, obj);\n    });\n    this.loading = false;\n  }\n}\n```\n\n3. startTasks  \n获取文件队列中可用于上传的文件对象，根据文件状态对其做初始化或切割文件上传的操作，同时实时修改对应的Mobx observable上传对象的元数据标识，包括当前上传文件的分片索引(单个文件上传进度=分片索引/总分片数目)、已上传完成的分片etag信息(由服务器返回，可用于完成分片上传时校验已上传的所有分片数据是否匹配)、当前上传对象4的上传状态(uninitial/pending/uploading/pause/eror/break)、当前上传对象的上传速度(速度=单个分片大小/单个分片上传所用时间)。\n```js\n/**\n   * [startTasks 开启上传任务队列]\n   * @param  {[String]} region [桶名]\n   */\n  startTasks = (region) => {\n    // 根据空闲任务类型和空闲任务并发限制开启空闲任务\n    // let storageObject;\n    this.refreshTasks(region);\n    if (this.isUploadListEmpty(region)) return;\n\n    const maxLength = this.multiTaskCount - this.taskType.uploading.length;\n    const taskSeries = [];\n    for (let i = 0; i < (maxLength) && this.taskType.series[i]; i += 1) {\n      // const file = this.taskType.series.shift();\n      const storageObject = this.taskType.series[i];\n      if (storageObject.state === 'uploading') continue; // 上传中\n      if (storageObject.state === 'pause') continue;\n      taskSeries.push(storageObject);\n    }\n\n    let index;\n    taskSeries.forEach((storageObject) => {\n      index = this.taskType.series.indexOf(storageObject);\n      index !== -1 && this.taskType.series.splice(index, 1);\n      if (this.taskType.uninitial.includes(storageObject)) {\n        this.initRequest(storageObject).then(({ err, init }) => {\n          if (!err && init) {\n            this.upload(storageObject);\n          }\n        });\n      } else {\n        this.upload(storageObject);\n      }\n    });\n  }\n\n```\n\n4. refreshTasks  \n根据当前设置的并行上传任务数目和正在上传的任务数目及时从文件预备上传队列提取文件放入上传可调用文件队列。\n```js\n/* 刷新任务列表 */\n  @action\n  refreshTasks = (region) => {\n    // 统计空闲任务\n    const storageObject = this.fileStorage.get(region);\n    if (!storageObject) return;\n\n    if (this.taskType.series.length >= this.multiTaskCount) return;\n\n    for (let i = 0; i < storageObject.length; i += 1) {\n      if (this.taskType.series.length === this.multiTaskCount) break;\n      if (\n        storageObject[i].index !== storageObject[i].total\n        &&\n        (storageObject[i].state === 'pending' || storageObject[i].state === 'uninitial')\n        &&\n        !this.taskType.series.includes(storageObject[i])\n      ) {\n        this.taskType.series.push(storageObject[i]);\n      }\n    }\n  }\n```\n\n5. upload & update  \n根据当前文件对象的上传分片索引对文件进行切割并更新索引，然后把切割下来的数据通过Ajax请求发送给中间件处理，中间件发送到后台后返回得到的当前分片的etag信息，前端拿到etag信息并存储到当前上传对象分片etag信息数组里面。\n```js\n/**\n   * [upload 分割文件发起上传请求]\n   * @param  {[Object]} file    [description]\n   * @param  {[Object]} _params [...]\n   * @param  {[String]}   _params.bucket [bucket name]\n   * @param  {[String]}   _params.object [object name]\n   * @param  {[String]}   _params.uploadId [upload id]\n   */\n  @action\n  upload = (storageObject) => {\n    let params = {\n      bucket: storageObject.region,\n      object: storageObject.name,\n      prefix: storageObject.prefix,\n      uploadId: storageObject.uploadId,\n    };\n    let single = false; // 不分片\n    /* 异常状态退出 */\n    if (!this.isValidUploadingTask(storageObject)) return;\n\n    if (storageObject.state === 'pending') {\n      this.taskType.pending.splice(this.taskType.pending.indexOf(storageObject), 1);\n      this.taskType.uploading.push(storageObject);\n      storageObject.state = 'uploading';\n    }\n\n    const num = storageObject.index;\n\n    if (num === 0 && storageObject.size <= storageObject.blockSize) {\n      // 不用分片的情况\n      single = true;\n    } else if (num === storageObject.total) {\n      // 所有分片都已经发出\n      return;\n    }\n    const nextSize = Math.min((num + 1) * storageObject.blockSize, storageObject.size);\n    const fileData = storageObject.file.slice(num * storageObject.blockSize, nextSize);\n    params = Object.assign(params, {\n      partNumber: num + 1,\n    });\n    storageObject.activePoint = new Date();\n\n    this.uploadRequest({ params, data: fileData, single }).then((rsp) => {\n      if (rsp.code !== 200) {\n        openNotification('error', null, (rsp.result.data ? rsp.result.data.Code : this.lang.lang.uploadError));\n        this.markError(storageObject);\n        this.startTasks(params.bucket);\n        return;\n      }\n      const { completed, etags } = this.update({\n        region: params.bucket,\n        etag: rsp.result.etag,\n        size: fileData.size,\n        id: storageObject.id,\n        index: params.partNumber,\n      });\n      if (completed) {\n        (single ?\n          () => {\n            this.complete(storageObject, params.bucket);\n          } :\n          (partEtags) => {\n            this.completeRequest({\n              bucket: params.bucket,\n              uploadId: params.uploadId,\n              object: params.object,\n              prefix: params.prefix,\n              partEtags,\n            }, storageObject);\n          })(etags);\n      } else {\n        this.upload(storageObject);\n      }\n    }).catch((error) => {\n      this.markError(storageObject);\n      this.startTasks(params.bucket);\n      console.log(`${params.bucket}_${params.object} upload error: ${error}`);\n    });\n    storageObject.index += 1;\n  }\n\n```\n\n7. complete  \n当最后一个分片上传请求完成返回后，我们就拿到了服务端返回的这个文件的所有分片etag信息，前端需要校验当前上传对象etag数组的长度是否匹配，数组内每个etag元素的索引和etag值是否匹配，校验完成后发送最后一个请求到后端进行校验和组装分片，最终完成一个文件的分片上传过程。\n```js\n/**\n   * [completeRequest 完成所有分片数据上传]\n   * @param  {[Object]} _params [...]\n   * @param  {[String]}   _params.bucket [bucket name]\n   * @param  {[String]}   _params.object [object name]\n   * @param  {[String]}   _params.uploadId [upload id]\n   * @param  {[String]}   _params.partEtags [upload id]\n   * @param  {[Object]} file [文件对象]\n   */\n  @action completeRequest = (params, file) => {\n    postDataPro(\n      {\n        ...{\n          ...params,\n          ...{\n            object: params.prefix + params.object,\n          },\n        },\n        partEtags: {\n          CompleteMultipartUpload: {\n            Part: params.partEtags.map(info => ({\n              PartNumber: info.number,\n              ETag: info.etag,\n            })),\n          },\n        },\n      },\n      objectResourceApi.object.completeFragmentUpload\n    ).then((data) => {\n      this.complete(file, params.bucket);\n    }).catch((error) => {\n      this.startTasks(params.bucket);\n      this.markError(file);\n    });\n  }\n\n  /**\n   * [complete 完成上传]\n   * @param {[Object]} file [文件对象]\n   * @param {[String]} bucket [桶名]\n   */\n  @action\n  complete = (storageObject) => {\n    const index = this.taskType.uploading.indexOf(storageObject);\n    this.taskType.uploading.splice(index, 1);\n    this.taskType.break.push(storageObject);\n    storageObject.completionTime = (new Date().toTimeString()).split(' ')[0];\n    storageObject.state = 'break';\n    storageObject.speed = '';\n    storageObject.index = storageObject.total;\n\n    this.startTasks(storageObject.region);\n  };\n\n```\n\n#### 其它操作\n\n1. 暂停文件上传  \n将上传对象的状态从uploading置为pause，然后把该对象对应的文件从可调用上传文件队列移除。\n\n2. 开始暂停的上传任务  \n将上传对象的状态从pause置为pending，然后把该对象对应的文件放入可调用上传文件队列，等待下一次刷新文件上传任务队列。\n\n3. 续传上传错误的任务\n将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，保持文件的已上传分片索引记录，等待下一次刷新文件上传任务队列，直接调用上传函数进行切割并上传。\n\n4. 重传上传错误的任务\n将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，并将文件已上传分片索引记录置为初始状态，等待下一次刷新文件上传任务队列，从文件初始位置重新开始切割文件并上传。\n\n#### 一些关键代码\n\n1. 一个分片上传完成后将后台返回的etag信息更新到本地的上传对象属性，并判断此文件是否上传完成。\n```js\n/**\n   * [update 更新本地上传记录]\n   * @param {[String]} region [桶名]\n   * @param {[String]} etag [分片标志]\n   */\n  @action\n  update = ({\n    region, etag, size, id, index,\n  }) => {\n    const target = this.fileStorage.get(region);\n    for (let i = 0; i < target.length; i += 1) {\n      if (target[i].id === id) {\n        target[i].speed = `${(size / 1024 / 1024 / (((new Date() - target[i].activePoint) / 1000))).toFixed(2)} MB/S`;\n        if (target[i].speed === '0.00 MB/S') {\n          target[i].speed = `${formatSizeStr(size)}/S`;\n        }\n        target[i].partEtags = target[i].partEtags.filter(etagItem => etagItem.number !== index);\n        target[i].partEtags.push({\n          number: index,\n          etag,\n        });\n        // 最后一个分片恰好又暂停的情况\n        if (index === target[i].total) {\n          if (target[i].state === 'pause') {\n            index -= 1;\n          }\n        }\n        // 判断上传是否完成\n        if (target[i].total === 0 || target[i].partEtags.toJS().length === target[i].total) {\n          return {\n            completed: true,\n            etags: target[i].partEtags,\n          };\n        }\n        return {\n          completed: false,\n        };\n      }\n    }\n  }\n```\n\n2. 在Node.js中间件使用ak/sk预签名算法调用 s3 restful 原生接口  \n之前预研的时候尝试根据aws s3-version4签名文档里面请求预签名算法在使用Node.js中间件进行实现，结果很容易出现签名的signature不一致报错的情况，所以最后在Node.js中间件采用了一个npm库[aws4](https://github.com/mhart/aws4)，用里面的签名方法对前端传过来的`ak/sk`进行url预签名，这里给出中间件`Request`方法的编写逻辑：\n```js\n\n/**\n  * templateStrTranform [模板字符串转换，s3接口中可能存在一些动态url参数，比如bucket名和object名，此方法动态替换相关的字符串]\n  * params1: {bucket: testBucket, uid: testUid, bucketId: testID}\n  * params2: /admin/bucket?format=json&bucket={bucket}&uid={uid}&bucket-id={bucketId}\n  * return: /admin/bucket?format=json&bucket=testBucket&uid=testUid&bucket-id=testID\n  * \n  * @author nojsja\n  * @param  {[Object]} varObj [替换变量对象]\n  * @param {[String]} templateStr [模板字符串]\n  * @return {[String]} result [模板字符串]\n  */\nexports.templateStrTransform = (varObj, templateStr) => {\n  if (typeof varObj !== 'object' || !templateStr) return templateStr;\n  for (const attr in varObj) {\n    if (varObj.hasOwnProperty(attr) && (!Number(attr) && Number(attr) !== 0 )) {\n      templateStr = templateStr.replace(new RegExp(`{${attr}}`, 'g'), varObj[attr]);\n    }\n  }\n  return templateStr;\n};\n\n /**\n  * api对象实例：\n    listFragmentUpload: {\n      url: '/{bucket}/{object}?uploadId={uploadId}', // 包含动态模板字符串\n      method: 'get',\n      port: '7480',\n      type: 'xml', // 表明需要将接口返回数据进行xml -> json转换\n      reqType: 'xml', // 表明提交参数是xml格式，需要进行 json -> xml转换\n    }\n  *\n */\ncommonApiConfig = (headers, api, data) => {\n  if (isEnvDev && !isEnvMock) {\n    return {\n      url: `http://10.0.9.149:${api.port}${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://10.0.9.149:${api.port}`,\n      hostname: `http://10.0.9.149`,\n      ip: '10.0.9.149',\n    };\n  } else if(isEnvDev && isEnvMock) {\n    return {\n      url: `http://10.0.7.15/mock/63${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://10.0.9.154:${api.port}`,\n      hostname: `http://10.0.9.154`,\n      ip: '10.0.9.154',\n    };\n  } else {\n    return {\n      url: `http://127.0.0.1:${api.port}${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://127.0.0.1:${api.port}`,\n      hostname: `http://127.0.0.1`,\n      ip: `127.0.0.1`,\n    };\n  }\n\n}\n\n/**\n  * aws4RequestSign [调用asw4的sign方法签名一个url]\n  * @param  {[Object]} req [Express.js框架路由函数的req对象]\n  * @param  {[String]} path [调用的s3服务的接口url]\n  * @param  {[Object]} api [自定义的api对象]\n  * @param  {[Buffer|String]} data [请求body携带的参数]\n  */\n\n/**\n * Tips: 这里aws4.sign方法依赖node process 中的ak/sk env设置\n *  但是也可以使用sign方法的第二个options参数直接传入ak/sk进行显式调用，具体请查看此框架的npm文档\n*/\naws4RequestSign = (req, path, api, data) => {\n  const aws4 = require('aws4');\n  var opts = {\n    host: `${(commonApiConfig(req.headers, api, data)).host}`,\n    path,\n    url: (commonApiConfig(req.headers, api, data)).hostname,\n    signQuery: true,\n    service: process.env.AWS_SERVICE,\n    region: process.env.AWS_REGION,\n    method: api.method.toUpperCase(),\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: req.body,\n    data: '',\n  }\n  // assumes AWS credentials are available in process.env\n  aws4.sign(opts)\n\n  return opts;\n}\n\n/**\n  * commonRequestAuth [签名并调用一个url]\n  * @param  {[Object]} req [Express.js框架路由函数的req对象]\n  * @param  {[String]} path [调用的s3服务的接口url]\n  * @param  {[Object]} api [自定义的api对象]\n  * @param  {[Buffer|String]} data [请求body携带的参数]\n  */\nconst commonRequestAuth = (params, api, req, data) => {\n  const iAxios = axios.create();\n  iAxios.defaults.timeout = params['$no_timeout$'] ? 0 : 30e3;\n  // 使用params对象转换存在动态变量的url  \n  const parsedUrl = templateStrTransform(params, api.url);\n  // aws env set\n  awsEnvRegistry({\n    key: req.cookies.access_key,\n    secret: req.cookies.secret_key,\n  });\n  // 签署请求头\n  const postData = jsonToXml(data, api.reqType);\n  const awsOpts = exports.aws4RequestSign(req, parsedUrl, api, params);\n\n  return new Promise((resolve, reject) => {\n    iAxios.request({\n      baseURL: awsOpts.host,\n      url: awsOpts.path,\n      method: awsOpts.method,\n      headers: getContentType(awsOpts.headers, api.reqType, postData, params._headers),\n      data: postData,\n      responseType: api.resType,\n    }).then((response) => {\n\n      // 设置header返回\n      if (api.type === 'header') return resolve({\n        result: response.headers,\n        code: 200,\n      });\n      \n      // 转换xml\n      if (api.type === 'xml') {\n        try {\n          xmlToJson(response.data, api.type, (data) => {\n            resolve({\n              result: data,\n              code: 200,\n              // data: jsonArrayToString(data),\n              headers: response.headers,\n            });\n          });\n        } catch (error) {\n          resolve({\n            code: 500,\n            result: global.lang.xml_parse_error,\n          });\n        }\n      }\n\n      resolve({\n        result: response.data,\n        code: 200,\n      });\n    }).catch((error) => {\n      console.log(error.response.data);\n      xmlToJson(error.response.data, 'xml', (data) => {\n        resolve({\n          code: 600,\n          result: { headers: error.config, data: data.Error ? data.Error : error.response.data}\n        })\n      })\n    });\n  });\n};\n```\n\n3. 在web端使用ak/sk预签名算法调用 s3 restful 原生接口  \n如果项目需要从web端直连后端s3服务调用接口的话，上面的签名方法就不能用了，其实很多时候直连可以带来更好的性能，比如文件上传/下载等等，不用在中间件做文件转存，其他的接口调用直连的话也不用中间层做request转发了。这里推荐一个能够进行s3请求预签名的axios插件[aws4-axios](https://github.com/jamesmbourne/aws4-axios)，用法如下：\n```js\nimport axios from \"axios\";\nimport { aws4Interceptor } from \"aws4-axios\";\n\nconst client = axios.create();\n\nconst interceptor = aws4Interceptor({\n  region: \"eu-west-2\",\n  service: \"execute-api\"\n}, {\n  accessKeyId: '',\n  secretAccessKey: ''\n});\n\nclient.interceptors.request.use(interceptor);\n\n// Requests made using Axios will now be signed\nclient.get(\"https://example.com/foo\").then(res => {\n  // ...\n});\n\n```\n","source":"_posts/2020-03-07-基于s3对象存储多文件分片上传的Javascript实现（一）.md","raw":"---\ntitle: \"基于s3对象存储多文件分片上传的Javascript实现（一）\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-03-07 16:18:00\nsubtitle: \"aws s3 javascript\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- upload\n- aws\n- s3\ncategories:\n- Javascript\nupdateDate: 2020-03-07 16:18:00\n---\n\n### 目录\n\n1. 概述\n\n2. 浏览器文件操作限制\n\n3. 前端多文件分片上传的原理和实现\n\n### 预览\n\n![upload](upload.png)\n\n### 概述\n\nAmazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。  \n本文主要针对兼容aws-s3接口的第三方存储服务，在不使用官方sdk的情况下直接使用Restful接口进行存储桶多文件分片上传，主要包含浏览器端的多文件分片上传逻辑的Javascript代码实现。\n\n### 浏览器文件操作限制\n\n* HTML5新特性`input[type=file]`支持调用浏览器文件访问窗口来获取文件数据，实际上JS代码使用此特性访问本地文件系统后拿到的是一个指向文件的引用地址，且如果页面刷新了那么这个地址不可复用，JS代码并没有实际操作文件本身。前端上传数据时根据这个指向文件的地址把文件的一小块分片数据载入到内存并通过Ajax请求发送到中间件进行处理。\n* 浏览器JS代码没有文件系统操作权限，不能任意存储和读取文件，因此不支持刷新浏览器后上传进度断点恢复，刷新之后断点恢复的前提是能拿到文件数据，但是JS代码没权限访问之前拿到的文件引用地址，并且存储之前上传过的文件分片数据这一做法也不合理。 \n* 相对于文件上传，文件下载则完全不可控，由于文件操作权限，所以整个下载文件操作都是由浏览器自带的的下载任务管理器控制的，没有浏览器接口能拿到这些下载任务进度，所以下载任务进度也是不能获取的。\n\n### 前端多文件分片上传的原理和实现\n\n_完整Github[源码](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload)_\n\n> 使用了React16/Webpack4/Mobx状态管理库\n\n* 支持批量文件分割并行上传\n* 多文件操作：暂停/恢复/终止/续传/重传\n* 自定义上传任务数目、单个分片大小\n\n#### 运行流程图\n\n![upload](shards_upload.jpg)\n\n#### 主要流程\n\n1. cacheFile  \n前端通过input组件拿到所有文件地址并缓存起来。\n```js\n /**\n   * [cacheFile 缓存即将注册的文件]\n   */\n  @action\n  cacheFile = (files, bucket) => {\n    const symbolArr = this.filesCache.map(file => this.getSymbol(file));\n    const filtedFiles = [];\n    let uploadingFileFound = false;\n    files.forEach((file) => {\n      if (!symbolArr.includes(this.getSymbol(file))) {\n        if (this.findIsUploading(this.getSymbol(file), bucket)) {\n          uploadingFileFound = true;\n          filtedFiles.push(file.name);\n        } else {\n          this.filesCache.push(file);\n          symbolArr.push(this.getSymbol(file));\n        }\n      }\n    });\n    if (!files.length) openNotification('warning', null, this.lang.lang.noFilCanBeUploaded);\n    if (uploadingFileFound) openNotification('warning', null, this.lang.lang.uploadingFileReuploadTips + filtedFiles.join(', '));\n  }\n```\n\n2. registry  \n根据上一步拿到的文件地址数组创建多个Mobx observable对象跟踪每个上传对象的基本识别信息，包括文件名、文件大小、类型、分片信息(分片大小和总分片数)、上传状态信息：uninitial(未初始化)/pending(准备)/uploading(上传中)/pause(暂停)/error(错误)/break(上传完成)、上传开始时间、上传完成时间，为了便于访问这些Mobx observable对象，建立一个weakMap存储file对象和observable对象的弱映射关系。\n```js\n/**\n   * [registry 注册上传文件信息]\n   * @param {[Object]} file [文件对象]\n   * @param {[String]} uploadId [文件上传进程id]\n   * @param {[Object]} state [文件初始化状态]\n   */\n  @action registry = (files, region, prefix) => {\n    let fileObj = null;\n    this.loading = true;\n    files.forEach((file) => {\n      if (this.files.includes(file)) {\n        return;\n      }\n      this.files.push(file);\n      fileObj = {\n        name: file.webkitRelativePath || file.name,\n        prefix: prefix || '',\n        size: file.size,\n        type: file.type || mapMimeType((file.webkitRelativePath || file.name).split('.').pop()).type,\n        state: 'uninitial',\n        creationTime: '',\n        completionTime: '',\n        index: 0,\n        file,\n        initialized: false,\n        partEtags: [],\n        region,\n        blockSize: this.blockSize,\n        total: Math.ceil(file.size / this.blockSize),\n        activePoint: new Date(),\n        speed: '0 MB/S',\n        id: encodeURIComponent(new Date() + file.name + file.type + file.size),\n      };\n      const obj = observable(fileObj);\n      this.taskType.uninitial.push(obj);\n      this.taskType.series.push(obj);\n      if (!this.fileStorage.get(region)) {\n        this.fileStorage.set(region, [obj]);\n      } else {\n        this.fileStorage.get(region).push(obj);\n      }\n      // this.fileStorageMap.set(file, obj);\n    });\n    this.loading = false;\n  }\n}\n```\n\n3. startTasks  \n获取文件队列中可用于上传的文件对象，根据文件状态对其做初始化或切割文件上传的操作，同时实时修改对应的Mobx observable上传对象的元数据标识，包括当前上传文件的分片索引(单个文件上传进度=分片索引/总分片数目)、已上传完成的分片etag信息(由服务器返回，可用于完成分片上传时校验已上传的所有分片数据是否匹配)、当前上传对象4的上传状态(uninitial/pending/uploading/pause/eror/break)、当前上传对象的上传速度(速度=单个分片大小/单个分片上传所用时间)。\n```js\n/**\n   * [startTasks 开启上传任务队列]\n   * @param  {[String]} region [桶名]\n   */\n  startTasks = (region) => {\n    // 根据空闲任务类型和空闲任务并发限制开启空闲任务\n    // let storageObject;\n    this.refreshTasks(region);\n    if (this.isUploadListEmpty(region)) return;\n\n    const maxLength = this.multiTaskCount - this.taskType.uploading.length;\n    const taskSeries = [];\n    for (let i = 0; i < (maxLength) && this.taskType.series[i]; i += 1) {\n      // const file = this.taskType.series.shift();\n      const storageObject = this.taskType.series[i];\n      if (storageObject.state === 'uploading') continue; // 上传中\n      if (storageObject.state === 'pause') continue;\n      taskSeries.push(storageObject);\n    }\n\n    let index;\n    taskSeries.forEach((storageObject) => {\n      index = this.taskType.series.indexOf(storageObject);\n      index !== -1 && this.taskType.series.splice(index, 1);\n      if (this.taskType.uninitial.includes(storageObject)) {\n        this.initRequest(storageObject).then(({ err, init }) => {\n          if (!err && init) {\n            this.upload(storageObject);\n          }\n        });\n      } else {\n        this.upload(storageObject);\n      }\n    });\n  }\n\n```\n\n4. refreshTasks  \n根据当前设置的并行上传任务数目和正在上传的任务数目及时从文件预备上传队列提取文件放入上传可调用文件队列。\n```js\n/* 刷新任务列表 */\n  @action\n  refreshTasks = (region) => {\n    // 统计空闲任务\n    const storageObject = this.fileStorage.get(region);\n    if (!storageObject) return;\n\n    if (this.taskType.series.length >= this.multiTaskCount) return;\n\n    for (let i = 0; i < storageObject.length; i += 1) {\n      if (this.taskType.series.length === this.multiTaskCount) break;\n      if (\n        storageObject[i].index !== storageObject[i].total\n        &&\n        (storageObject[i].state === 'pending' || storageObject[i].state === 'uninitial')\n        &&\n        !this.taskType.series.includes(storageObject[i])\n      ) {\n        this.taskType.series.push(storageObject[i]);\n      }\n    }\n  }\n```\n\n5. upload & update  \n根据当前文件对象的上传分片索引对文件进行切割并更新索引，然后把切割下来的数据通过Ajax请求发送给中间件处理，中间件发送到后台后返回得到的当前分片的etag信息，前端拿到etag信息并存储到当前上传对象分片etag信息数组里面。\n```js\n/**\n   * [upload 分割文件发起上传请求]\n   * @param  {[Object]} file    [description]\n   * @param  {[Object]} _params [...]\n   * @param  {[String]}   _params.bucket [bucket name]\n   * @param  {[String]}   _params.object [object name]\n   * @param  {[String]}   _params.uploadId [upload id]\n   */\n  @action\n  upload = (storageObject) => {\n    let params = {\n      bucket: storageObject.region,\n      object: storageObject.name,\n      prefix: storageObject.prefix,\n      uploadId: storageObject.uploadId,\n    };\n    let single = false; // 不分片\n    /* 异常状态退出 */\n    if (!this.isValidUploadingTask(storageObject)) return;\n\n    if (storageObject.state === 'pending') {\n      this.taskType.pending.splice(this.taskType.pending.indexOf(storageObject), 1);\n      this.taskType.uploading.push(storageObject);\n      storageObject.state = 'uploading';\n    }\n\n    const num = storageObject.index;\n\n    if (num === 0 && storageObject.size <= storageObject.blockSize) {\n      // 不用分片的情况\n      single = true;\n    } else if (num === storageObject.total) {\n      // 所有分片都已经发出\n      return;\n    }\n    const nextSize = Math.min((num + 1) * storageObject.blockSize, storageObject.size);\n    const fileData = storageObject.file.slice(num * storageObject.blockSize, nextSize);\n    params = Object.assign(params, {\n      partNumber: num + 1,\n    });\n    storageObject.activePoint = new Date();\n\n    this.uploadRequest({ params, data: fileData, single }).then((rsp) => {\n      if (rsp.code !== 200) {\n        openNotification('error', null, (rsp.result.data ? rsp.result.data.Code : this.lang.lang.uploadError));\n        this.markError(storageObject);\n        this.startTasks(params.bucket);\n        return;\n      }\n      const { completed, etags } = this.update({\n        region: params.bucket,\n        etag: rsp.result.etag,\n        size: fileData.size,\n        id: storageObject.id,\n        index: params.partNumber,\n      });\n      if (completed) {\n        (single ?\n          () => {\n            this.complete(storageObject, params.bucket);\n          } :\n          (partEtags) => {\n            this.completeRequest({\n              bucket: params.bucket,\n              uploadId: params.uploadId,\n              object: params.object,\n              prefix: params.prefix,\n              partEtags,\n            }, storageObject);\n          })(etags);\n      } else {\n        this.upload(storageObject);\n      }\n    }).catch((error) => {\n      this.markError(storageObject);\n      this.startTasks(params.bucket);\n      console.log(`${params.bucket}_${params.object} upload error: ${error}`);\n    });\n    storageObject.index += 1;\n  }\n\n```\n\n7. complete  \n当最后一个分片上传请求完成返回后，我们就拿到了服务端返回的这个文件的所有分片etag信息，前端需要校验当前上传对象etag数组的长度是否匹配，数组内每个etag元素的索引和etag值是否匹配，校验完成后发送最后一个请求到后端进行校验和组装分片，最终完成一个文件的分片上传过程。\n```js\n/**\n   * [completeRequest 完成所有分片数据上传]\n   * @param  {[Object]} _params [...]\n   * @param  {[String]}   _params.bucket [bucket name]\n   * @param  {[String]}   _params.object [object name]\n   * @param  {[String]}   _params.uploadId [upload id]\n   * @param  {[String]}   _params.partEtags [upload id]\n   * @param  {[Object]} file [文件对象]\n   */\n  @action completeRequest = (params, file) => {\n    postDataPro(\n      {\n        ...{\n          ...params,\n          ...{\n            object: params.prefix + params.object,\n          },\n        },\n        partEtags: {\n          CompleteMultipartUpload: {\n            Part: params.partEtags.map(info => ({\n              PartNumber: info.number,\n              ETag: info.etag,\n            })),\n          },\n        },\n      },\n      objectResourceApi.object.completeFragmentUpload\n    ).then((data) => {\n      this.complete(file, params.bucket);\n    }).catch((error) => {\n      this.startTasks(params.bucket);\n      this.markError(file);\n    });\n  }\n\n  /**\n   * [complete 完成上传]\n   * @param {[Object]} file [文件对象]\n   * @param {[String]} bucket [桶名]\n   */\n  @action\n  complete = (storageObject) => {\n    const index = this.taskType.uploading.indexOf(storageObject);\n    this.taskType.uploading.splice(index, 1);\n    this.taskType.break.push(storageObject);\n    storageObject.completionTime = (new Date().toTimeString()).split(' ')[0];\n    storageObject.state = 'break';\n    storageObject.speed = '';\n    storageObject.index = storageObject.total;\n\n    this.startTasks(storageObject.region);\n  };\n\n```\n\n#### 其它操作\n\n1. 暂停文件上传  \n将上传对象的状态从uploading置为pause，然后把该对象对应的文件从可调用上传文件队列移除。\n\n2. 开始暂停的上传任务  \n将上传对象的状态从pause置为pending，然后把该对象对应的文件放入可调用上传文件队列，等待下一次刷新文件上传任务队列。\n\n3. 续传上传错误的任务\n将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，保持文件的已上传分片索引记录，等待下一次刷新文件上传任务队列，直接调用上传函数进行切割并上传。\n\n4. 重传上传错误的任务\n将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，并将文件已上传分片索引记录置为初始状态，等待下一次刷新文件上传任务队列，从文件初始位置重新开始切割文件并上传。\n\n#### 一些关键代码\n\n1. 一个分片上传完成后将后台返回的etag信息更新到本地的上传对象属性，并判断此文件是否上传完成。\n```js\n/**\n   * [update 更新本地上传记录]\n   * @param {[String]} region [桶名]\n   * @param {[String]} etag [分片标志]\n   */\n  @action\n  update = ({\n    region, etag, size, id, index,\n  }) => {\n    const target = this.fileStorage.get(region);\n    for (let i = 0; i < target.length; i += 1) {\n      if (target[i].id === id) {\n        target[i].speed = `${(size / 1024 / 1024 / (((new Date() - target[i].activePoint) / 1000))).toFixed(2)} MB/S`;\n        if (target[i].speed === '0.00 MB/S') {\n          target[i].speed = `${formatSizeStr(size)}/S`;\n        }\n        target[i].partEtags = target[i].partEtags.filter(etagItem => etagItem.number !== index);\n        target[i].partEtags.push({\n          number: index,\n          etag,\n        });\n        // 最后一个分片恰好又暂停的情况\n        if (index === target[i].total) {\n          if (target[i].state === 'pause') {\n            index -= 1;\n          }\n        }\n        // 判断上传是否完成\n        if (target[i].total === 0 || target[i].partEtags.toJS().length === target[i].total) {\n          return {\n            completed: true,\n            etags: target[i].partEtags,\n          };\n        }\n        return {\n          completed: false,\n        };\n      }\n    }\n  }\n```\n\n2. 在Node.js中间件使用ak/sk预签名算法调用 s3 restful 原生接口  \n之前预研的时候尝试根据aws s3-version4签名文档里面请求预签名算法在使用Node.js中间件进行实现，结果很容易出现签名的signature不一致报错的情况，所以最后在Node.js中间件采用了一个npm库[aws4](https://github.com/mhart/aws4)，用里面的签名方法对前端传过来的`ak/sk`进行url预签名，这里给出中间件`Request`方法的编写逻辑：\n```js\n\n/**\n  * templateStrTranform [模板字符串转换，s3接口中可能存在一些动态url参数，比如bucket名和object名，此方法动态替换相关的字符串]\n  * params1: {bucket: testBucket, uid: testUid, bucketId: testID}\n  * params2: /admin/bucket?format=json&bucket={bucket}&uid={uid}&bucket-id={bucketId}\n  * return: /admin/bucket?format=json&bucket=testBucket&uid=testUid&bucket-id=testID\n  * \n  * @author nojsja\n  * @param  {[Object]} varObj [替换变量对象]\n  * @param {[String]} templateStr [模板字符串]\n  * @return {[String]} result [模板字符串]\n  */\nexports.templateStrTransform = (varObj, templateStr) => {\n  if (typeof varObj !== 'object' || !templateStr) return templateStr;\n  for (const attr in varObj) {\n    if (varObj.hasOwnProperty(attr) && (!Number(attr) && Number(attr) !== 0 )) {\n      templateStr = templateStr.replace(new RegExp(`{${attr}}`, 'g'), varObj[attr]);\n    }\n  }\n  return templateStr;\n};\n\n /**\n  * api对象实例：\n    listFragmentUpload: {\n      url: '/{bucket}/{object}?uploadId={uploadId}', // 包含动态模板字符串\n      method: 'get',\n      port: '7480',\n      type: 'xml', // 表明需要将接口返回数据进行xml -> json转换\n      reqType: 'xml', // 表明提交参数是xml格式，需要进行 json -> xml转换\n    }\n  *\n */\ncommonApiConfig = (headers, api, data) => {\n  if (isEnvDev && !isEnvMock) {\n    return {\n      url: `http://10.0.9.149:${api.port}${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://10.0.9.149:${api.port}`,\n      hostname: `http://10.0.9.149`,\n      ip: '10.0.9.149',\n    };\n  } else if(isEnvDev && isEnvMock) {\n    return {\n      url: `http://10.0.7.15/mock/63${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://10.0.9.154:${api.port}`,\n      hostname: `http://10.0.9.154`,\n      ip: '10.0.9.154',\n    };\n  } else {\n    return {\n      url: `http://127.0.0.1:${api.port}${templateStrTransform(data, api.url)}`,\n      data: paramsObjectParse(data, api.url),\n      host: `http://127.0.0.1:${api.port}`,\n      hostname: `http://127.0.0.1`,\n      ip: `127.0.0.1`,\n    };\n  }\n\n}\n\n/**\n  * aws4RequestSign [调用asw4的sign方法签名一个url]\n  * @param  {[Object]} req [Express.js框架路由函数的req对象]\n  * @param  {[String]} path [调用的s3服务的接口url]\n  * @param  {[Object]} api [自定义的api对象]\n  * @param  {[Buffer|String]} data [请求body携带的参数]\n  */\n\n/**\n * Tips: 这里aws4.sign方法依赖node process 中的ak/sk env设置\n *  但是也可以使用sign方法的第二个options参数直接传入ak/sk进行显式调用，具体请查看此框架的npm文档\n*/\naws4RequestSign = (req, path, api, data) => {\n  const aws4 = require('aws4');\n  var opts = {\n    host: `${(commonApiConfig(req.headers, api, data)).host}`,\n    path,\n    url: (commonApiConfig(req.headers, api, data)).hostname,\n    signQuery: true,\n    service: process.env.AWS_SERVICE,\n    region: process.env.AWS_REGION,\n    method: api.method.toUpperCase(),\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: req.body,\n    data: '',\n  }\n  // assumes AWS credentials are available in process.env\n  aws4.sign(opts)\n\n  return opts;\n}\n\n/**\n  * commonRequestAuth [签名并调用一个url]\n  * @param  {[Object]} req [Express.js框架路由函数的req对象]\n  * @param  {[String]} path [调用的s3服务的接口url]\n  * @param  {[Object]} api [自定义的api对象]\n  * @param  {[Buffer|String]} data [请求body携带的参数]\n  */\nconst commonRequestAuth = (params, api, req, data) => {\n  const iAxios = axios.create();\n  iAxios.defaults.timeout = params['$no_timeout$'] ? 0 : 30e3;\n  // 使用params对象转换存在动态变量的url  \n  const parsedUrl = templateStrTransform(params, api.url);\n  // aws env set\n  awsEnvRegistry({\n    key: req.cookies.access_key,\n    secret: req.cookies.secret_key,\n  });\n  // 签署请求头\n  const postData = jsonToXml(data, api.reqType);\n  const awsOpts = exports.aws4RequestSign(req, parsedUrl, api, params);\n\n  return new Promise((resolve, reject) => {\n    iAxios.request({\n      baseURL: awsOpts.host,\n      url: awsOpts.path,\n      method: awsOpts.method,\n      headers: getContentType(awsOpts.headers, api.reqType, postData, params._headers),\n      data: postData,\n      responseType: api.resType,\n    }).then((response) => {\n\n      // 设置header返回\n      if (api.type === 'header') return resolve({\n        result: response.headers,\n        code: 200,\n      });\n      \n      // 转换xml\n      if (api.type === 'xml') {\n        try {\n          xmlToJson(response.data, api.type, (data) => {\n            resolve({\n              result: data,\n              code: 200,\n              // data: jsonArrayToString(data),\n              headers: response.headers,\n            });\n          });\n        } catch (error) {\n          resolve({\n            code: 500,\n            result: global.lang.xml_parse_error,\n          });\n        }\n      }\n\n      resolve({\n        result: response.data,\n        code: 200,\n      });\n    }).catch((error) => {\n      console.log(error.response.data);\n      xmlToJson(error.response.data, 'xml', (data) => {\n        resolve({\n          code: 600,\n          result: { headers: error.config, data: data.Error ? data.Error : error.response.data}\n        })\n      })\n    });\n  });\n};\n```\n\n3. 在web端使用ak/sk预签名算法调用 s3 restful 原生接口  \n如果项目需要从web端直连后端s3服务调用接口的话，上面的签名方法就不能用了，其实很多时候直连可以带来更好的性能，比如文件上传/下载等等，不用在中间件做文件转存，其他的接口调用直连的话也不用中间层做request转发了。这里推荐一个能够进行s3请求预签名的axios插件[aws4-axios](https://github.com/jamesmbourne/aws4-axios)，用法如下：\n```js\nimport axios from \"axios\";\nimport { aws4Interceptor } from \"aws4-axios\";\n\nconst client = axios.create();\n\nconst interceptor = aws4Interceptor({\n  region: \"eu-west-2\",\n  service: \"execute-api\"\n}, {\n  accessKeyId: '',\n  secretAccessKey: ''\n});\n\nclient.interceptors.request.use(interceptor);\n\n// Requests made using Axios will now be signed\nclient.get(\"https://example.com/foo\").then(res => {\n  // ...\n});\n\n```\n","slug":"基于s3对象存储多文件分片上传的Javascript实现（一）","published":1,"updated":"2020-12-06T10:53:09.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmur40012kl95cb25hjs4","content":"<h3 id=\"目录\">目录</h3><ol><li><p>概述</p></li><li><p>浏览器文件操作限制</p></li><li><p>前端多文件分片上传的原理和实现</p></li></ol><h3 id=\"预览\">预览</h3><p><img src=\"upload.png\" alt=\"upload\"></p><h3 id=\"概述\">概述</h3><p>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。<br>本文主要针对兼容aws-s3接口的第三方存储服务，在不使用官方sdk的情况下直接使用Restful接口进行存储桶多文件分片上传，主要包含浏览器端的多文件分片上传逻辑的Javascript代码实现。</p><h3 id=\"浏览器文件操作限制\">浏览器文件操作限制</h3><ul><li>HTML5新特性<code>input[type=file]</code>支持调用浏览器文件访问窗口来获取文件数据，实际上JS代码使用此特性访问本地文件系统后拿到的是一个指向文件的引用地址，且如果页面刷新了那么这个地址不可复用，JS代码并没有实际操作文件本身。前端上传数据时根据这个指向文件的地址把文件的一小块分片数据载入到内存并通过Ajax请求发送到中间件进行处理。</li><li>浏览器JS代码没有文件系统操作权限，不能任意存储和读取文件，因此不支持刷新浏览器后上传进度断点恢复，刷新之后断点恢复的前提是能拿到文件数据，但是JS代码没权限访问之前拿到的文件引用地址，并且存储之前上传过的文件分片数据这一做法也不合理。</li><li>相对于文件上传，文件下载则完全不可控，由于文件操作权限，所以整个下载文件操作都是由浏览器自带的的下载任务管理器控制的，没有浏览器接口能拿到这些下载任务进度，所以下载任务进度也是不能获取的。</li></ul><h3 id=\"前端多文件分片上传的原理和实现\">前端多文件分片上传的原理和实现</h3><p><em>完整Github<a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">源码</a></em></p><blockquote><p>使用了React16/Webpack4/Mobx状态管理库</p></blockquote><ul><li>支持批量文件分割并行上传</li><li>多文件操作：暂停/恢复/终止/续传/重传</li><li>自定义上传任务数目、单个分片大小</li></ul><h4 id=\"运行流程图\">运行流程图</h4><p><img src=\"shards_upload.jpg\" alt=\"upload\"></p><h4 id=\"主要流程\">主要流程</h4><ol><li>cacheFile<br>前端通过input组件拿到所有文件地址并缓存起来。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [cacheFile 缓存即将注册的文件]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> @action</span><br><span class=\"line\"> cacheFile = <span class=\"function\">(<span class=\"params\">files, bucket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> symbolArr = <span class=\"keyword\">this</span>.filesCache.map(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> <span class=\"keyword\">this</span>.getSymbol(file));</span><br><span class=\"line\">   <span class=\"keyword\">const</span> filtedFiles = [];</span><br><span class=\"line\">   <span class=\"keyword\">let</span> uploadingFileFound = <span class=\"literal\">false</span>;</span><br><span class=\"line\">   files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!symbolArr.includes(<span class=\"keyword\">this</span>.getSymbol(file))) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.findIsUploading(<span class=\"keyword\">this</span>.getSymbol(file), bucket)) &#123;</span><br><span class=\"line\">         uploadingFileFound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">         filtedFiles.push(file.name);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.filesCache.push(file);</span><br><span class=\"line\">         symbolArr.push(<span class=\"keyword\">this</span>.getSymbol(file));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!files.length) openNotification(<span class=\"string\">'warning'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.noFilCanBeUploaded);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (uploadingFileFound) openNotification(<span class=\"string\">'warning'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.uploadingFileReuploadTips + filtedFiles.join(<span class=\"string\">', '</span>));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>registry<br>根据上一步拿到的文件地址数组创建多个Mobx observable对象跟踪每个上传对象的基本识别信息，包括文件名、文件大小、类型、分片信息(分片大小和总分片数)、上传状态信息：uninitial(未初始化)/pending(准备)/uploading(上传中)/pause(暂停)/error(错误)/break(上传完成)、上传开始时间、上传完成时间，为了便于访问这些Mobx observable对象，建立一个weakMap存储file对象和observable对象的弱映射关系。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [registry 注册上传文件信息]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [文件上传进程id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>state [文件初始化状态]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action registry = <span class=\"function\">(<span class=\"params\">files, region, prefix</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.files.includes(file)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.files.push(file);</span><br><span class=\"line\">      fileObj = &#123;</span><br><span class=\"line\">        name: file.webkitRelativePath || file.name,</span><br><span class=\"line\">        prefix: prefix || <span class=\"string\">''</span>,</span><br><span class=\"line\">        size: file.size,</span><br><span class=\"line\">        type: file.type || mapMimeType((file.webkitRelativePath || file.name).split(<span class=\"string\">'.'</span>).pop()).type,</span><br><span class=\"line\">        state: <span class=\"string\">'uninitial'</span>,</span><br><span class=\"line\">        creationTime: <span class=\"string\">''</span>,</span><br><span class=\"line\">        completionTime: <span class=\"string\">''</span>,</span><br><span class=\"line\">        index: <span class=\"number\">0</span>,</span><br><span class=\"line\">        file,</span><br><span class=\"line\">        initialized: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        partEtags: [],</span><br><span class=\"line\">        region,</span><br><span class=\"line\">        blockSize: <span class=\"keyword\">this</span>.blockSize,</span><br><span class=\"line\">        total: <span class=\"built_in\">Math</span>.ceil(file.size / <span class=\"keyword\">this</span>.blockSize),</span><br><span class=\"line\">        activePoint: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">        speed: <span class=\"string\">'0 MB/S'</span>,</span><br><span class=\"line\">        id: <span class=\"built_in\">encodeURIComponent</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() + file.name + file.type + file.size),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> obj = observable(fileObj);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.uninitial.push(obj);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.series.push(obj);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.fileStorage.get(region)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileStorage.set(region, [obj]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileStorage.get(region).push(obj);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// this.fileStorageMap.set(file, obj);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>startTasks<br>获取文件队列中可用于上传的文件对象，根据文件状态对其做初始化或切割文件上传的操作，同时实时修改对应的Mobx observable上传对象的元数据标识，包括当前上传文件的分片索引(单个文件上传进度=分片索引/总分片数目)、已上传完成的分片etag信息(由服务器返回，可用于完成分片上传时校验已上传的所有分片数据是否匹配)、当前上传对象4的上传状态(uninitial/pending/uploading/pause/eror/break)、当前上传对象的上传速度(速度=单个分片大小/单个分片上传所用时间)。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [startTasks 开启上传任务队列]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>region [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  startTasks = <span class=\"function\">(<span class=\"params\">region</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据空闲任务类型和空闲任务并发限制开启空闲任务</span></span><br><span class=\"line\">    <span class=\"comment\">// let storageObject;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refreshTasks(region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isUploadListEmpty(region)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxLength = <span class=\"keyword\">this</span>.multiTaskCount - <span class=\"keyword\">this</span>.taskType.uploading.length;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> taskSeries = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; (maxLength) &amp;&amp; <span class=\"keyword\">this</span>.taskType.series[i]; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// const file = this.taskType.series.shift();</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> storageObject = <span class=\"keyword\">this</span>.taskType.series[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'uploading'</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 上传中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'pause'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      taskSeries.push(storageObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> index;</span><br><span class=\"line\">    taskSeries.forEach(<span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      index = <span class=\"keyword\">this</span>.taskType.series.indexOf(storageObject);</span><br><span class=\"line\">      index !== <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.taskType.series.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.uninitial.includes(storageObject)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initRequest(storageObject).then(<span class=\"function\">(<span class=\"params\">&#123; err, init &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!err &amp;&amp; init) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>refreshTasks<br>根据当前设置的并行上传任务数目和正在上传的任务数目及时从文件预备上传队列提取文件放入上传可调用文件队列。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 刷新任务列表 */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  refreshTasks = <span class=\"function\">(<span class=\"params\">region</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 统计空闲任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> storageObject = <span class=\"keyword\">this</span>.fileStorage.get(region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!storageObject) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.series.length &gt;= <span class=\"keyword\">this</span>.multiTaskCount) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; storageObject.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.series.length === <span class=\"keyword\">this</span>.multiTaskCount) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        storageObject[i].index !== storageObject[i].total</span><br><span class=\"line\">        &amp;&amp;</span><br><span class=\"line\">        (storageObject[i].state === <span class=\"string\">'pending'</span> || storageObject[i].state === <span class=\"string\">'uninitial'</span>)</span><br><span class=\"line\">        &amp;&amp;</span><br><span class=\"line\">        !<span class=\"keyword\">this</span>.taskType.series.includes(storageObject[i])</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.taskType.series.push(storageObject[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"5\"><li>upload &amp; update<br>根据当前文件对象的上传分片索引对文件进行切割并更新索引，然后把切割下来的数据通过Ajax请求发送给中间件处理，中间件发送到后台后返回得到的当前分片的etag信息，前端拿到etag信息并存储到当前上传对象分片etag信息数组里面。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [upload 分割文件发起上传请求]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file    [description]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>_params [...]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.bucket [bucket name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.object [object name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.uploadId [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  upload = <span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">      bucket: storageObject.region,</span><br><span class=\"line\">      object: storageObject.name,</span><br><span class=\"line\">      prefix: storageObject.prefix,</span><br><span class=\"line\">      uploadId: storageObject.uploadId,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> single = <span class=\"literal\">false</span>; <span class=\"comment\">// 不分片</span></span><br><span class=\"line\">    <span class=\"comment\">/* 异常状态退出 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isValidUploadingTask(storageObject)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.pending.splice(<span class=\"keyword\">this</span>.taskType.pending.indexOf(storageObject), <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.uploading.push(storageObject);</span><br><span class=\"line\">      storageObject.state = <span class=\"string\">'uploading'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = storageObject.index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"number\">0</span> &amp;&amp; storageObject.size &lt;= storageObject.blockSize) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不用分片的情况</span></span><br><span class=\"line\">      single = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === storageObject.total) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 所有分片都已经发出</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextSize = <span class=\"built_in\">Math</span>.min((num + <span class=\"number\">1</span>) * storageObject.blockSize, storageObject.size);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileData = storageObject.file.slice(num * storageObject.blockSize, nextSize);</span><br><span class=\"line\">    params = <span class=\"built_in\">Object</span>.assign(params, &#123;</span><br><span class=\"line\">      partNumber: num + <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    storageObject.activePoint = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.uploadRequest(&#123; params, <span class=\"attr\">data</span>: fileData, single &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rsp.code !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        openNotification(<span class=\"string\">'error'</span>, <span class=\"literal\">null</span>, (rsp.result.data ? rsp.result.data.Code : <span class=\"keyword\">this</span>.lang.lang.uploadError));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.markError(storageObject);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; completed, etags &#125; = <span class=\"keyword\">this</span>.update(&#123;</span><br><span class=\"line\">        region: params.bucket,</span><br><span class=\"line\">        etag: rsp.result.etag,</span><br><span class=\"line\">        size: fileData.size,</span><br><span class=\"line\">        id: storageObject.id,</span><br><span class=\"line\">        index: params.partNumber,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (completed) &#123;</span><br><span class=\"line\">        (single ?</span><br><span class=\"line\">          () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.complete(storageObject, params.bucket);</span><br><span class=\"line\">          &#125; :</span><br><span class=\"line\">          (partEtags) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.completeRequest(&#123;</span><br><span class=\"line\">              bucket: params.bucket,</span><br><span class=\"line\">              uploadId: params.uploadId,</span><br><span class=\"line\">              object: params.object,</span><br><span class=\"line\">              prefix: params.prefix,</span><br><span class=\"line\">              partEtags,</span><br><span class=\"line\">            &#125;, storageObject);</span><br><span class=\"line\">          &#125;)(etags);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.markError(storageObject);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;params.bucket&#125;</span>_<span class=\"subst\">$&#123;params.object&#125;</span> upload error: <span class=\"subst\">$&#123;error&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    storageObject.index += <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"7\"><li>complete<br>当最后一个分片上传请求完成返回后，我们就拿到了服务端返回的这个文件的所有分片etag信息，前端需要校验当前上传对象etag数组的长度是否匹配，数组内每个etag元素的索引和etag值是否匹配，校验完成后发送最后一个请求到后端进行校验和组装分片，最终完成一个文件的分片上传过程。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [completeRequest 完成所有分片数据上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>_params [...]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.bucket [bucket name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.object [object name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.uploadId [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.partEtags [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action completeRequest = <span class=\"function\">(<span class=\"params\">params, file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    postDataPro(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ...&#123;</span><br><span class=\"line\">          ...params,</span><br><span class=\"line\">          ...&#123;</span><br><span class=\"line\">            object: params.prefix + params.object,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        partEtags: &#123;</span><br><span class=\"line\">          CompleteMultipartUpload: &#123;</span><br><span class=\"line\">            Part: params.partEtags.map(<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> (&#123;</span><br><span class=\"line\">              PartNumber: info.number,</span><br><span class=\"line\">              ETag: info.etag,</span><br><span class=\"line\">            &#125;)),</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      objectResourceApi.object.completeFragmentUpload</span><br><span class=\"line\">    ).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.complete(file, params.bucket);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.markError(file);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [complete 完成上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>bucket [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  complete = <span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.taskType.uploading.indexOf(storageObject);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taskType.uploading.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taskType.break.push(storageObject);</span><br><span class=\"line\">    storageObject.completionTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString()).split(<span class=\"string\">' '</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    storageObject.state = <span class=\"string\">'break'</span>;</span><br><span class=\"line\">    storageObject.speed = <span class=\"string\">''</span>;</span><br><span class=\"line\">    storageObject.index = storageObject.total;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startTasks(storageObject.region);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure><h4 id=\"其它操作\">其它操作</h4><ol><li><p>暂停文件上传<br>将上传对象的状态从uploading置为pause，然后把该对象对应的文件从可调用上传文件队列移除。</p></li><li><p>开始暂停的上传任务<br>将上传对象的状态从pause置为pending，然后把该对象对应的文件放入可调用上传文件队列，等待下一次刷新文件上传任务队列。</p></li><li><p>续传上传错误的任务<br>将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，保持文件的已上传分片索引记录，等待下一次刷新文件上传任务队列，直接调用上传函数进行切割并上传。</p></li><li><p>重传上传错误的任务<br>将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，并将文件已上传分片索引记录置为初始状态，等待下一次刷新文件上传任务队列，从文件初始位置重新开始切割文件并上传。</p></li></ol><h4 id=\"一些关键代码\">一些关键代码</h4><ol><li>一个分片上传完成后将后台返回的etag信息更新到本地的上传对象属性，并判断此文件是否上传完成。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [update 更新本地上传记录]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>region [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>etag [分片标志]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  update = (&#123;</span><br><span class=\"line\">    region, etag, size, id, index,</span><br><span class=\"line\">  &#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = <span class=\"keyword\">this</span>.fileStorage.get(region);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; target.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target[i].id === id) &#123;</span><br><span class=\"line\">        target[i].speed = <span class=\"string\">`<span class=\"subst\">$&#123;(size <span class=\"regexp\">/ 1024 /</span> <span class=\"number\">1024</span> <span class=\"regexp\">/ (((new Date() - target[i].activePoint) /</span> <span class=\"number\">1000</span>))).toFixed(<span class=\"number\">2</span>)&#125;</span> MB/S`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target[i].speed === <span class=\"string\">'0.00 MB/S'</span>) &#123;</span><br><span class=\"line\">          target[i].speed = <span class=\"string\">`<span class=\"subst\">$&#123;formatSizeStr(size)&#125;</span>/S`</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        target[i].partEtags = target[i].partEtags.filter(<span class=\"function\"><span class=\"params\">etagItem</span> =&gt;</span> etagItem.number !== index);</span><br><span class=\"line\">        target[i].partEtags.push(&#123;</span><br><span class=\"line\">          number: index,</span><br><span class=\"line\">          etag,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 最后一个分片恰好又暂停的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === target[i].total) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (target[i].state === <span class=\"string\">'pause'</span>) &#123;</span><br><span class=\"line\">            index -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断上传是否完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target[i].total === <span class=\"number\">0</span> || target[i].partEtags.toJS().length === target[i].total) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            completed: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            etags: target[i].partEtags,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          completed: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>在Node.js中间件使用ak/sk预签名算法调用 s3 restful 原生接口<br>之前预研的时候尝试根据aws s3-version4签名文档里面请求预签名算法在使用Node.js中间件进行实现，结果很容易出现签名的signature不一致报错的情况，所以最后在Node.js中间件采用了一个npm库<a href=\"https://github.com/mhart/aws4\" target=\"_blank\" rel=\"noopener\">aws4</a>，用里面的签名方法对前端传过来的<code>ak/sk</code>进行url预签名，这里给出中间件<code>Request</code>方法的编写逻辑：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * templateStrTranform [模板字符串转换，s3接口中可能存在一些动态url参数，比如bucket名和object名，此方法动态替换相关的字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * params1: &#123;bucket: testBucket, uid: testUid, bucketId: testID&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * params2: /admin/bucket?format=json&amp;bucket=&#123;bucket&#125;&amp;uid=&#123;uid&#125;&amp;bucket-id=&#123;bucketId&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * return: /admin/bucket?format=json&amp;bucket=testBucket&amp;uid=testUid&amp;bucket-id=testID</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>varObj [替换变量对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>templateStr [模板字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return <span class=\"type\">&#123;[String]&#125;</span> </span>result [模板字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.templateStrTransform = <span class=\"function\">(<span class=\"params\">varObj, templateStr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> varObj !== <span class=\"string\">'object'</span> || !templateStr) <span class=\"keyword\">return</span> templateStr;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> attr <span class=\"keyword\">in</span> varObj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (varObj.hasOwnProperty(attr) &amp;&amp; (!<span class=\"built_in\">Number</span>(attr) &amp;&amp; <span class=\"built_in\">Number</span>(attr) !== <span class=\"number\">0</span> )) &#123;</span><br><span class=\"line\">      templateStr = templateStr.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`&#123;<span class=\"subst\">$&#123;attr&#125;</span>&#125;`</span>, <span class=\"string\">'g'</span>), varObj[attr]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> templateStr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * api对象实例：</span></span><br><span class=\"line\"><span class=\"comment\">    listFragmentUpload: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      url: '/&#123;bucket&#125;/&#123;object&#125;?uploadId=&#123;uploadId&#125;', // 包含动态模板字符串</span></span><br><span class=\"line\"><span class=\"comment\">      method: 'get',</span></span><br><span class=\"line\"><span class=\"comment\">      port: '7480',</span></span><br><span class=\"line\"><span class=\"comment\">      type: 'xml', // 表明需要将接口返回数据进行xml -&gt; json转换</span></span><br><span class=\"line\"><span class=\"comment\">      reqType: 'xml', // 表明提交参数是xml格式，需要进行 json -&gt; xml转换</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">commonApiConfig = <span class=\"function\">(<span class=\"params\">headers, api, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isEnvDev &amp;&amp; !isEnvMock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://10.0.9.149:<span class=\"subst\">$&#123;api.port&#125;</span><span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://10.0.9.149:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://10.0.9.149`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">'10.0.9.149'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isEnvDev &amp;&amp; isEnvMock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://10.0.7.15/mock/63<span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://10.0.9.154:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://10.0.9.154`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">'10.0.9.154'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://127.0.0.1:<span class=\"subst\">$&#123;api.port&#125;</span><span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://127.0.0.1:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://127.0.0.1`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">`127.0.0.1`</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * aws4RequestSign [调用asw4的sign方法签名一个url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [Express.js框架路由函数的req对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [调用的s3服务的接口url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>api [自定义的api对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Buffer|String]&#125;</span> </span>data [请求body携带的参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Tips: 这里aws4.sign方法依赖node process 中的ak/sk env设置</span></span><br><span class=\"line\"><span class=\"comment\"> *  但是也可以使用sign方法的第二个options参数直接传入ak/sk进行显式调用，具体请查看此框架的npm文档</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">aws4RequestSign = <span class=\"function\">(<span class=\"params\">req, path, api, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> aws4 = <span class=\"built_in\">require</span>(<span class=\"string\">'aws4'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = &#123;</span><br><span class=\"line\">    host: <span class=\"string\">`<span class=\"subst\">$&#123;(commonApiConfig(req.headers, api, data)).host&#125;</span>`</span>,</span><br><span class=\"line\">    path,</span><br><span class=\"line\">    url: (commonApiConfig(req.headers, api, data)).hostname,</span><br><span class=\"line\">    signQuery: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    service: process.env.AWS_SERVICE,</span><br><span class=\"line\">    region: process.env.AWS_REGION,</span><br><span class=\"line\">    method: api.method.toUpperCase(),</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    body: req.body,</span><br><span class=\"line\">    data: <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// assumes AWS credentials are available in process.env</span></span><br><span class=\"line\">  aws4.sign(opts)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> opts;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * commonRequestAuth [签名并调用一个url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [Express.js框架路由函数的req对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [调用的s3服务的接口url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>api [自定义的api对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Buffer|String]&#125;</span> </span>data [请求body携带的参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonRequestAuth = <span class=\"function\">(<span class=\"params\">params, api, req, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">  iAxios.defaults.timeout = params[<span class=\"string\">'$no_timeout$'</span>] ? <span class=\"number\">0</span> : <span class=\"number\">30e3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用params对象转换存在动态变量的url  </span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parsedUrl = templateStrTransform(params, api.url);</span><br><span class=\"line\">  <span class=\"comment\">// aws env set</span></span><br><span class=\"line\">  awsEnvRegistry(&#123;</span><br><span class=\"line\">    key: req.cookies.access_key,</span><br><span class=\"line\">    secret: req.cookies.secret_key,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 签署请求头</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> postData = jsonToXml(data, api.reqType);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> awsOpts = exports.aws4RequestSign(req, parsedUrl, api, params);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iAxios.request(&#123;</span><br><span class=\"line\">      baseURL: awsOpts.host,</span><br><span class=\"line\">      url: awsOpts.path,</span><br><span class=\"line\">      method: awsOpts.method,</span><br><span class=\"line\">      headers: getContentType(awsOpts.headers, api.reqType, postData, params._headers),</span><br><span class=\"line\">      data: postData,</span><br><span class=\"line\">      responseType: api.resType,</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 设置header返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (api.type === <span class=\"string\">'header'</span>) <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">        result: response.headers,</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 转换xml</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (api.type === <span class=\"string\">'xml'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          xmlToJson(response.data, api.type, (data) =&gt; &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              result: data,</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              <span class=\"comment\">// data: jsonArrayToString(data),</span></span><br><span class=\"line\">              headers: response.headers,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">500</span>,</span><br><span class=\"line\">            result: global.lang.xml_parse_error,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        result: response.data,</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      xmlToJson(error.response.data, <span class=\"string\">'xml'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: &#123; <span class=\"attr\">headers</span>: error.config, <span class=\"attr\">data</span>: data.Error ? data.Error : error.response.data&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>在web端使用ak/sk预签名算法调用 s3 restful 原生接口<br>如果项目需要从web端直连后端s3服务调用接口的话，上面的签名方法就不能用了，其实很多时候直连可以带来更好的性能，比如文件上传/下载等等，不用在中间件做文件转存，其他的接口调用直连的话也不用中间层做request转发了。这里推荐一个能够进行s3请求预签名的axios插件<a href=\"https://github.com/jamesmbourne/aws4-axios\" target=\"_blank\" rel=\"noopener\">aws4-axios</a>，用法如下：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; aws4Interceptor &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"aws4-axios\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> client = axios.create();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> interceptor = aws4Interceptor(&#123;</span><br><span class=\"line\">  region: <span class=\"string\">\"eu-west-2\"</span>,</span><br><span class=\"line\">  service: <span class=\"string\">\"execute-api\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  accessKeyId: <span class=\"string\">''</span>,</span><br><span class=\"line\">  secretAccessKey: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.interceptors.request.use(interceptor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Requests made using Axios will now be signed</span></span><br><span class=\"line\">client.get(<span class=\"string\">\"https://example.com/foo\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录\">目录</h3><ol><li><p>概述</p></li><li><p>浏览器文件操作限制</p></li><li><p>前端多文件分片上传的原理和实现</p></li></ol><h3 id=\"预览\">预览</h3><p><img src=\"upload.png\" alt=\"upload\"></p><h3 id=\"概述\">概述</h3><p>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。<br>本文主要针对兼容aws-s3接口的第三方存储服务，在不使用官方sdk的情况下直接使用Restful接口进行存储桶多文件分片上传，主要包含浏览器端的多文件分片上传逻辑的Javascript代码实现。</p><h3 id=\"浏览器文件操作限制\">浏览器文件操作限制</h3><ul><li>HTML5新特性<code>input[type=file]</code>支持调用浏览器文件访问窗口来获取文件数据，实际上JS代码使用此特性访问本地文件系统后拿到的是一个指向文件的引用地址，且如果页面刷新了那么这个地址不可复用，JS代码并没有实际操作文件本身。前端上传数据时根据这个指向文件的地址把文件的一小块分片数据载入到内存并通过Ajax请求发送到中间件进行处理。</li><li>浏览器JS代码没有文件系统操作权限，不能任意存储和读取文件，因此不支持刷新浏览器后上传进度断点恢复，刷新之后断点恢复的前提是能拿到文件数据，但是JS代码没权限访问之前拿到的文件引用地址，并且存储之前上传过的文件分片数据这一做法也不合理。</li><li>相对于文件上传，文件下载则完全不可控，由于文件操作权限，所以整个下载文件操作都是由浏览器自带的的下载任务管理器控制的，没有浏览器接口能拿到这些下载任务进度，所以下载任务进度也是不能获取的。</li></ul><h3 id=\"前端多文件分片上传的原理和实现\">前端多文件分片上传的原理和实现</h3><p><em>完整Github<a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">源码</a></em></p><blockquote><p>使用了React16/Webpack4/Mobx状态管理库</p></blockquote><ul><li>支持批量文件分割并行上传</li><li>多文件操作：暂停/恢复/终止/续传/重传</li><li>自定义上传任务数目、单个分片大小</li></ul><h4 id=\"运行流程图\">运行流程图</h4><p><img src=\"shards_upload.jpg\" alt=\"upload\"></p><h4 id=\"主要流程\">主要流程</h4><ol><li>cacheFile<br>前端通过input组件拿到所有文件地址并缓存起来。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * [cacheFile 缓存即将注册的文件]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> @action</span><br><span class=\"line\"> cacheFile = <span class=\"function\">(<span class=\"params\">files, bucket</span>) =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> symbolArr = <span class=\"keyword\">this</span>.filesCache.map(<span class=\"function\"><span class=\"params\">file</span> =&gt;</span> <span class=\"keyword\">this</span>.getSymbol(file));</span><br><span class=\"line\">   <span class=\"keyword\">const</span> filtedFiles = [];</span><br><span class=\"line\">   <span class=\"keyword\">let</span> uploadingFileFound = <span class=\"literal\">false</span>;</span><br><span class=\"line\">   files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!symbolArr.includes(<span class=\"keyword\">this</span>.getSymbol(file))) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.findIsUploading(<span class=\"keyword\">this</span>.getSymbol(file), bucket)) &#123;</span><br><span class=\"line\">         uploadingFileFound = <span class=\"literal\">true</span>;</span><br><span class=\"line\">         filtedFiles.push(file.name);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.filesCache.push(file);</span><br><span class=\"line\">         symbolArr.push(<span class=\"keyword\">this</span>.getSymbol(file));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!files.length) openNotification(<span class=\"string\">'warning'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.noFilCanBeUploaded);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (uploadingFileFound) openNotification(<span class=\"string\">'warning'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.uploadingFileReuploadTips + filtedFiles.join(<span class=\"string\">', '</span>));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>registry<br>根据上一步拿到的文件地址数组创建多个Mobx observable对象跟踪每个上传对象的基本识别信息，包括文件名、文件大小、类型、分片信息(分片大小和总分片数)、上传状态信息：uninitial(未初始化)/pending(准备)/uploading(上传中)/pause(暂停)/error(错误)/break(上传完成)、上传开始时间、上传完成时间，为了便于访问这些Mobx observable对象，建立一个weakMap存储file对象和observable对象的弱映射关系。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [registry 注册上传文件信息]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [文件上传进程id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>state [文件初始化状态]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action registry = <span class=\"function\">(<span class=\"params\">files, region, prefix</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileObj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.files.includes(file)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.files.push(file);</span><br><span class=\"line\">      fileObj = &#123;</span><br><span class=\"line\">        name: file.webkitRelativePath || file.name,</span><br><span class=\"line\">        prefix: prefix || <span class=\"string\">''</span>,</span><br><span class=\"line\">        size: file.size,</span><br><span class=\"line\">        type: file.type || mapMimeType((file.webkitRelativePath || file.name).split(<span class=\"string\">'.'</span>).pop()).type,</span><br><span class=\"line\">        state: <span class=\"string\">'uninitial'</span>,</span><br><span class=\"line\">        creationTime: <span class=\"string\">''</span>,</span><br><span class=\"line\">        completionTime: <span class=\"string\">''</span>,</span><br><span class=\"line\">        index: <span class=\"number\">0</span>,</span><br><span class=\"line\">        file,</span><br><span class=\"line\">        initialized: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        partEtags: [],</span><br><span class=\"line\">        region,</span><br><span class=\"line\">        blockSize: <span class=\"keyword\">this</span>.blockSize,</span><br><span class=\"line\">        total: <span class=\"built_in\">Math</span>.ceil(file.size / <span class=\"keyword\">this</span>.blockSize),</span><br><span class=\"line\">        activePoint: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">        speed: <span class=\"string\">'0 MB/S'</span>,</span><br><span class=\"line\">        id: <span class=\"built_in\">encodeURIComponent</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() + file.name + file.type + file.size),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> obj = observable(fileObj);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.uninitial.push(obj);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.series.push(obj);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.fileStorage.get(region)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileStorage.set(region, [obj]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileStorage.get(region).push(obj);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// this.fileStorageMap.set(file, obj);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.loading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>startTasks<br>获取文件队列中可用于上传的文件对象，根据文件状态对其做初始化或切割文件上传的操作，同时实时修改对应的Mobx observable上传对象的元数据标识，包括当前上传文件的分片索引(单个文件上传进度=分片索引/总分片数目)、已上传完成的分片etag信息(由服务器返回，可用于完成分片上传时校验已上传的所有分片数据是否匹配)、当前上传对象4的上传状态(uninitial/pending/uploading/pause/eror/break)、当前上传对象的上传速度(速度=单个分片大小/单个分片上传所用时间)。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [startTasks 开启上传任务队列]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>region [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  startTasks = <span class=\"function\">(<span class=\"params\">region</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据空闲任务类型和空闲任务并发限制开启空闲任务</span></span><br><span class=\"line\">    <span class=\"comment\">// let storageObject;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refreshTasks(region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.isUploadListEmpty(region)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> maxLength = <span class=\"keyword\">this</span>.multiTaskCount - <span class=\"keyword\">this</span>.taskType.uploading.length;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> taskSeries = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; (maxLength) &amp;&amp; <span class=\"keyword\">this</span>.taskType.series[i]; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// const file = this.taskType.series.shift();</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> storageObject = <span class=\"keyword\">this</span>.taskType.series[i];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'uploading'</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 上传中</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'pause'</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      taskSeries.push(storageObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> index;</span><br><span class=\"line\">    taskSeries.forEach(<span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      index = <span class=\"keyword\">this</span>.taskType.series.indexOf(storageObject);</span><br><span class=\"line\">      index !== <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.taskType.series.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.uninitial.includes(storageObject)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initRequest(storageObject).then(<span class=\"function\">(<span class=\"params\">&#123; err, init &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!err &amp;&amp; init) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>refreshTasks<br>根据当前设置的并行上传任务数目和正在上传的任务数目及时从文件预备上传队列提取文件放入上传可调用文件队列。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 刷新任务列表 */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  refreshTasks = <span class=\"function\">(<span class=\"params\">region</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 统计空闲任务</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> storageObject = <span class=\"keyword\">this</span>.fileStorage.get(region);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!storageObject) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.series.length &gt;= <span class=\"keyword\">this</span>.multiTaskCount) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; storageObject.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.taskType.series.length === <span class=\"keyword\">this</span>.multiTaskCount) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        storageObject[i].index !== storageObject[i].total</span><br><span class=\"line\">        &amp;&amp;</span><br><span class=\"line\">        (storageObject[i].state === <span class=\"string\">'pending'</span> || storageObject[i].state === <span class=\"string\">'uninitial'</span>)</span><br><span class=\"line\">        &amp;&amp;</span><br><span class=\"line\">        !<span class=\"keyword\">this</span>.taskType.series.includes(storageObject[i])</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.taskType.series.push(storageObject[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"5\"><li>upload &amp; update<br>根据当前文件对象的上传分片索引对文件进行切割并更新索引，然后把切割下来的数据通过Ajax请求发送给中间件处理，中间件发送到后台后返回得到的当前分片的etag信息，前端拿到etag信息并存储到当前上传对象分片etag信息数组里面。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [upload 分割文件发起上传请求]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file    [description]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>_params [...]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.bucket [bucket name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.object [object name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.uploadId [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  upload = <span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> params = &#123;</span><br><span class=\"line\">      bucket: storageObject.region,</span><br><span class=\"line\">      object: storageObject.name,</span><br><span class=\"line\">      prefix: storageObject.prefix,</span><br><span class=\"line\">      uploadId: storageObject.uploadId,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> single = <span class=\"literal\">false</span>; <span class=\"comment\">// 不分片</span></span><br><span class=\"line\">    <span class=\"comment\">/* 异常状态退出 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.isValidUploadingTask(storageObject)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (storageObject.state === <span class=\"string\">'pending'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.pending.splice(<span class=\"keyword\">this</span>.taskType.pending.indexOf(storageObject), <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.taskType.uploading.push(storageObject);</span><br><span class=\"line\">      storageObject.state = <span class=\"string\">'uploading'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = storageObject.index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"number\">0</span> &amp;&amp; storageObject.size &lt;= storageObject.blockSize) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 不用分片的情况</span></span><br><span class=\"line\">      single = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num === storageObject.total) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 所有分片都已经发出</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextSize = <span class=\"built_in\">Math</span>.min((num + <span class=\"number\">1</span>) * storageObject.blockSize, storageObject.size);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileData = storageObject.file.slice(num * storageObject.blockSize, nextSize);</span><br><span class=\"line\">    params = <span class=\"built_in\">Object</span>.assign(params, &#123;</span><br><span class=\"line\">      partNumber: num + <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    storageObject.activePoint = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.uploadRequest(&#123; params, <span class=\"attr\">data</span>: fileData, single &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rsp.code !== <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        openNotification(<span class=\"string\">'error'</span>, <span class=\"literal\">null</span>, (rsp.result.data ? rsp.result.data.Code : <span class=\"keyword\">this</span>.lang.lang.uploadError));</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.markError(storageObject);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; completed, etags &#125; = <span class=\"keyword\">this</span>.update(&#123;</span><br><span class=\"line\">        region: params.bucket,</span><br><span class=\"line\">        etag: rsp.result.etag,</span><br><span class=\"line\">        size: fileData.size,</span><br><span class=\"line\">        id: storageObject.id,</span><br><span class=\"line\">        index: params.partNumber,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (completed) &#123;</span><br><span class=\"line\">        (single ?</span><br><span class=\"line\">          () =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.complete(storageObject, params.bucket);</span><br><span class=\"line\">          &#125; :</span><br><span class=\"line\">          (partEtags) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.completeRequest(&#123;</span><br><span class=\"line\">              bucket: params.bucket,</span><br><span class=\"line\">              uploadId: params.uploadId,</span><br><span class=\"line\">              object: params.object,</span><br><span class=\"line\">              prefix: params.prefix,</span><br><span class=\"line\">              partEtags,</span><br><span class=\"line\">            &#125;, storageObject);</span><br><span class=\"line\">          &#125;)(etags);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.upload(storageObject);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.markError(storageObject);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;params.bucket&#125;</span>_<span class=\"subst\">$&#123;params.object&#125;</span> upload error: <span class=\"subst\">$&#123;error&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    storageObject.index += <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"7\"><li>complete<br>当最后一个分片上传请求完成返回后，我们就拿到了服务端返回的这个文件的所有分片etag信息，前端需要校验当前上传对象etag数组的长度是否匹配，数组内每个etag元素的索引和etag值是否匹配，校验完成后发送最后一个请求到后端进行校验和组装分片，最终完成一个文件的分片上传过程。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [completeRequest 完成所有分片数据上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>_params [...]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.bucket [bucket name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.object [object name]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.uploadId [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span>   </span>_params.partEtags [upload id]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action completeRequest = <span class=\"function\">(<span class=\"params\">params, file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    postDataPro(</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ...&#123;</span><br><span class=\"line\">          ...params,</span><br><span class=\"line\">          ...&#123;</span><br><span class=\"line\">            object: params.prefix + params.object,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        partEtags: &#123;</span><br><span class=\"line\">          CompleteMultipartUpload: &#123;</span><br><span class=\"line\">            Part: params.partEtags.map(<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> (&#123;</span><br><span class=\"line\">              PartNumber: info.number,</span><br><span class=\"line\">              ETag: info.etag,</span><br><span class=\"line\">            &#125;)),</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      objectResourceApi.object.completeFragmentUpload</span><br><span class=\"line\">    ).then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.complete(file, params.bucket);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.startTasks(params.bucket);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.markError(file);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [complete 完成上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>bucket [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  complete = <span class=\"function\">(<span class=\"params\">storageObject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = <span class=\"keyword\">this</span>.taskType.uploading.indexOf(storageObject);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taskType.uploading.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taskType.break.push(storageObject);</span><br><span class=\"line\">    storageObject.completionTime = (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toTimeString()).split(<span class=\"string\">' '</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    storageObject.state = <span class=\"string\">'break'</span>;</span><br><span class=\"line\">    storageObject.speed = <span class=\"string\">''</span>;</span><br><span class=\"line\">    storageObject.index = storageObject.total;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startTasks(storageObject.region);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure><h4 id=\"其它操作\">其它操作</h4><ol><li><p>暂停文件上传<br>将上传对象的状态从uploading置为pause，然后把该对象对应的文件从可调用上传文件队列移除。</p></li><li><p>开始暂停的上传任务<br>将上传对象的状态从pause置为pending，然后把该对象对应的文件放入可调用上传文件队列，等待下一次刷新文件上传任务队列。</p></li><li><p>续传上传错误的任务<br>将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，保持文件的已上传分片索引记录，等待下一次刷新文件上传任务队列，直接调用上传函数进行切割并上传。</p></li><li><p>重传上传错误的任务<br>将上传对象的状态从error置为pending，然后把该对象对应的文件放入可调用上传文件队列，并将文件已上传分片索引记录置为初始状态，等待下一次刷新文件上传任务队列，从文件初始位置重新开始切割文件并上传。</p></li></ol><h4 id=\"一些关键代码\">一些关键代码</h4><ol><li>一个分片上传完成后将后台返回的etag信息更新到本地的上传对象属性，并判断此文件是否上传完成。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [update 更新本地上传记录]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>region [桶名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>etag [分片标志]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  @action</span><br><span class=\"line\">  update = (&#123;</span><br><span class=\"line\">    region, etag, size, id, index,</span><br><span class=\"line\">  &#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> target = <span class=\"keyword\">this</span>.fileStorage.get(region);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; target.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target[i].id === id) &#123;</span><br><span class=\"line\">        target[i].speed = <span class=\"string\">`<span class=\"subst\">$&#123;(size <span class=\"regexp\">/ 1024 /</span> <span class=\"number\">1024</span> <span class=\"regexp\">/ (((new Date() - target[i].activePoint) /</span> <span class=\"number\">1000</span>))).toFixed(<span class=\"number\">2</span>)&#125;</span> MB/S`</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target[i].speed === <span class=\"string\">'0.00 MB/S'</span>) &#123;</span><br><span class=\"line\">          target[i].speed = <span class=\"string\">`<span class=\"subst\">$&#123;formatSizeStr(size)&#125;</span>/S`</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        target[i].partEtags = target[i].partEtags.filter(<span class=\"function\"><span class=\"params\">etagItem</span> =&gt;</span> etagItem.number !== index);</span><br><span class=\"line\">        target[i].partEtags.push(&#123;</span><br><span class=\"line\">          number: index,</span><br><span class=\"line\">          etag,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 最后一个分片恰好又暂停的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index === target[i].total) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (target[i].state === <span class=\"string\">'pause'</span>) &#123;</span><br><span class=\"line\">            index -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 判断上传是否完成</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target[i].total === <span class=\"number\">0</span> || target[i].partEtags.toJS().length === target[i].total) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            completed: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            etags: target[i].partEtags,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          completed: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>在Node.js中间件使用ak/sk预签名算法调用 s3 restful 原生接口<br>之前预研的时候尝试根据aws s3-version4签名文档里面请求预签名算法在使用Node.js中间件进行实现，结果很容易出现签名的signature不一致报错的情况，所以最后在Node.js中间件采用了一个npm库<a href=\"https://github.com/mhart/aws4\" target=\"_blank\" rel=\"noopener\">aws4</a>，用里面的签名方法对前端传过来的<code>ak/sk</code>进行url预签名，这里给出中间件<code>Request</code>方法的编写逻辑：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * templateStrTranform [模板字符串转换，s3接口中可能存在一些动态url参数，比如bucket名和object名，此方法动态替换相关的字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * params1: &#123;bucket: testBucket, uid: testUid, bucketId: testID&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * params2: /admin/bucket?format=json&amp;bucket=&#123;bucket&#125;&amp;uid=&#123;uid&#125;&amp;bucket-id=&#123;bucketId&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * return: /admin/bucket?format=json&amp;bucket=testBucket&amp;uid=testUid&amp;bucket-id=testID</span></span><br><span class=\"line\"><span class=\"comment\">  * </span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>varObj [替换变量对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span> </span>templateStr [模板字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return <span class=\"type\">&#123;[String]&#125;</span> </span>result [模板字符串]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.templateStrTransform = <span class=\"function\">(<span class=\"params\">varObj, templateStr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> varObj !== <span class=\"string\">'object'</span> || !templateStr) <span class=\"keyword\">return</span> templateStr;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> attr <span class=\"keyword\">in</span> varObj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (varObj.hasOwnProperty(attr) &amp;&amp; (!<span class=\"built_in\">Number</span>(attr) &amp;&amp; <span class=\"built_in\">Number</span>(attr) !== <span class=\"number\">0</span> )) &#123;</span><br><span class=\"line\">      templateStr = templateStr.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">`&#123;<span class=\"subst\">$&#123;attr&#125;</span>&#125;`</span>, <span class=\"string\">'g'</span>), varObj[attr]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> templateStr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * api对象实例：</span></span><br><span class=\"line\"><span class=\"comment\">    listFragmentUpload: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      url: '/&#123;bucket&#125;/&#123;object&#125;?uploadId=&#123;uploadId&#125;', // 包含动态模板字符串</span></span><br><span class=\"line\"><span class=\"comment\">      method: 'get',</span></span><br><span class=\"line\"><span class=\"comment\">      port: '7480',</span></span><br><span class=\"line\"><span class=\"comment\">      type: 'xml', // 表明需要将接口返回数据进行xml -&gt; json转换</span></span><br><span class=\"line\"><span class=\"comment\">      reqType: 'xml', // 表明提交参数是xml格式，需要进行 json -&gt; xml转换</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">commonApiConfig = <span class=\"function\">(<span class=\"params\">headers, api, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isEnvDev &amp;&amp; !isEnvMock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://10.0.9.149:<span class=\"subst\">$&#123;api.port&#125;</span><span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://10.0.9.149:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://10.0.9.149`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">'10.0.9.149'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isEnvDev &amp;&amp; isEnvMock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://10.0.7.15/mock/63<span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://10.0.9.154:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://10.0.9.154`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">'10.0.9.154'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      url: <span class=\"string\">`http://127.0.0.1:<span class=\"subst\">$&#123;api.port&#125;</span><span class=\"subst\">$&#123;templateStrTransform(data, api.url)&#125;</span>`</span>,</span><br><span class=\"line\">      data: paramsObjectParse(data, api.url),</span><br><span class=\"line\">      host: <span class=\"string\">`http://127.0.0.1:<span class=\"subst\">$&#123;api.port&#125;</span>`</span>,</span><br><span class=\"line\">      hostname: <span class=\"string\">`http://127.0.0.1`</span>,</span><br><span class=\"line\">      ip: <span class=\"string\">`127.0.0.1`</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * aws4RequestSign [调用asw4的sign方法签名一个url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [Express.js框架路由函数的req对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [调用的s3服务的接口url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>api [自定义的api对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Buffer|String]&#125;</span> </span>data [请求body携带的参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Tips: 这里aws4.sign方法依赖node process 中的ak/sk env设置</span></span><br><span class=\"line\"><span class=\"comment\"> *  但是也可以使用sign方法的第二个options参数直接传入ak/sk进行显式调用，具体请查看此框架的npm文档</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">aws4RequestSign = <span class=\"function\">(<span class=\"params\">req, path, api, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> aws4 = <span class=\"built_in\">require</span>(<span class=\"string\">'aws4'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = &#123;</span><br><span class=\"line\">    host: <span class=\"string\">`<span class=\"subst\">$&#123;(commonApiConfig(req.headers, api, data)).host&#125;</span>`</span>,</span><br><span class=\"line\">    path,</span><br><span class=\"line\">    url: (commonApiConfig(req.headers, api, data)).hostname,</span><br><span class=\"line\">    signQuery: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    service: process.env.AWS_SERVICE,</span><br><span class=\"line\">    region: process.env.AWS_REGION,</span><br><span class=\"line\">    method: api.method.toUpperCase(),</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    body: req.body,</span><br><span class=\"line\">    data: <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// assumes AWS credentials are available in process.env</span></span><br><span class=\"line\">  aws4.sign(opts)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> opts;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * commonRequestAuth [签名并调用一个url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [Express.js框架路由函数的req对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>path [调用的s3服务的接口url]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>api [自定义的api对象]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Buffer|String]&#125;</span> </span>data [请求body携带的参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> commonRequestAuth = <span class=\"function\">(<span class=\"params\">params, api, req, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">  iAxios.defaults.timeout = params[<span class=\"string\">'$no_timeout$'</span>] ? <span class=\"number\">0</span> : <span class=\"number\">30e3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 使用params对象转换存在动态变量的url  </span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> parsedUrl = templateStrTransform(params, api.url);</span><br><span class=\"line\">  <span class=\"comment\">// aws env set</span></span><br><span class=\"line\">  awsEnvRegistry(&#123;</span><br><span class=\"line\">    key: req.cookies.access_key,</span><br><span class=\"line\">    secret: req.cookies.secret_key,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 签署请求头</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> postData = jsonToXml(data, api.reqType);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> awsOpts = exports.aws4RequestSign(req, parsedUrl, api, params);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    iAxios.request(&#123;</span><br><span class=\"line\">      baseURL: awsOpts.host,</span><br><span class=\"line\">      url: awsOpts.path,</span><br><span class=\"line\">      method: awsOpts.method,</span><br><span class=\"line\">      headers: getContentType(awsOpts.headers, api.reqType, postData, params._headers),</span><br><span class=\"line\">      data: postData,</span><br><span class=\"line\">      responseType: api.resType,</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 设置header返回</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (api.type === <span class=\"string\">'header'</span>) <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">        result: response.headers,</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 转换xml</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (api.type === <span class=\"string\">'xml'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          xmlToJson(response.data, api.type, (data) =&gt; &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              result: data,</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              <span class=\"comment\">// data: jsonArrayToString(data),</span></span><br><span class=\"line\">              headers: response.headers,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">500</span>,</span><br><span class=\"line\">            result: global.lang.xml_parse_error,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      resolve(&#123;</span><br><span class=\"line\">        result: response.data,</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(error.response.data);</span><br><span class=\"line\">      xmlToJson(error.response.data, <span class=\"string\">'xml'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: &#123; <span class=\"attr\">headers</span>: error.config, <span class=\"attr\">data</span>: data.Error ? data.Error : error.response.data&#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>在web端使用ak/sk预签名算法调用 s3 restful 原生接口<br>如果项目需要从web端直连后端s3服务调用接口的话，上面的签名方法就不能用了，其实很多时候直连可以带来更好的性能，比如文件上传/下载等等，不用在中间件做文件转存，其他的接口调用直连的话也不用中间层做request转发了。这里推荐一个能够进行s3请求预签名的axios插件<a href=\"https://github.com/jamesmbourne/aws4-axios\" target=\"_blank\" rel=\"noopener\">aws4-axios</a>，用法如下：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; aws4Interceptor &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"aws4-axios\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> client = axios.create();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> interceptor = aws4Interceptor(&#123;</span><br><span class=\"line\">  region: <span class=\"string\">\"eu-west-2\"</span>,</span><br><span class=\"line\">  service: <span class=\"string\">\"execute-api\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">  accessKeyId: <span class=\"string\">''</span>,</span><br><span class=\"line\">  secretAccessKey: <span class=\"string\">''</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.interceptors.request.use(interceptor);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Requests made using Axios will now be signed</span></span><br><span class=\"line\">client.get(<span class=\"string\">\"https://example.com/foo\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"echarts图表-树形图开发记录","catalog":true,"toc_nav_num":true,"date":"2020-03-22T10:24:00.000Z","subtitle":"Echarts Tree","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-03-22T10:24:00.000Z","_content":"\n### 目录\n\n1. 前言\n\n2. 树形图功能需求以及遇到的问题分析\n\n3. 问题I：V4版本label自定义效果设置不生效\n\n4. 问题II：tree图使用自定义图片加载显示不完全\n\n5. 问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\n\n### 前言\n\n-------------\nEcharts树形图Tree可以用来展示树形数据结构各节点的层级关系，比如一个使用情况就是文件系统存在多个快照，每一级快照基于上一级生成，存在父级和子级关系对应关系，且Root根只有一个，即文件系统本身，完全适用于树形图的使用场景。\n\n![snapshot](snapshot.png)\n\n### 树形图功能需求以及遇到的问题分析\n\n-------------------------------\n\n1. 文件系统快照每一层级的节点支持单个选中，很多操作都是基于某一个快照节点的，比\n如快照的恢复、删除、设置，考虑选中效果的区别使用label自定义富文本样式实现，但是会遇到渲染的时侯echarts一些自己的状态更新和我们我们自定义的选中状态的更新冲突问题，且V4版本echarts tree的富文本配置后也并未生效。\n\n![snapshot_select](snapshot_select.png)\n\n2. 文件系统快照每一层级的节点标识(Symbol)可能不同，需要支持使用自定义图片，echarts的symbol是直接支持使用img-src和base64 img-str的，但是会遇到图片在某些时候不能完全被渲染(图片像是被设置了半透明)或直接完全不能被渲染出来的问题。\n\n![tree-1](tree-1.png)\n![tree-2](tree-2.png)\n![tree-3](tree-3.png)\n\n\n### 问题I：V4版本label自定义效果设置不生效\n\n-------------------------------\n\nseries-tree.label.formatter\n>标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \\n 换行。\n\n#### 字符串模板的使用  \n\n1. 模板变量有：  \n* {a}：系列名。\n* {b}：数据名。\n* {c}：数据值。\n* {d}：百分比。\n* {@xxx}：数据中名为'xxx'的维度的值，如{@product}表示名为'product'` 的维度的值。\n* {@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n2. 示例：  \nformatter: '{b}: {d}'\n\n3. 回调函数格式：  \n(params: Object|Array) => string，\n参数 params 是 formatter 需要的单个数据集，格式如下：\n```js\n{\n    componentType: 'series',\n    // 系列类型\n    seriesType: string,\n    // 系列在传入的 option.series 中的 index\n    seriesIndex: number,\n    // 系列名称\n    seriesName: string,\n    // 数据名，类目名\n    name: string,\n    // 数据在传入的 data 数组中的 index\n    dataIndex: number,\n    // 传入的原始数据项\n    data: Object,\n    // 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\n    value: number|Array|Object,\n    // 坐标轴 encode 映射信息，\n    // key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n    // value 必然为数组，不会为 null/undefied，表示 dimension index 。\n    // 其内容如：\n    // {\n    //     x: [2] // dimension index 为 2 的数据映射到 x 轴\n    //     y: [0] // dimension index 为 0 的数据映射到 y 轴\n    // }\n    encode: Object,\n    // 维度名列表\n    dimensionNames: Array<String>,\n    // 数据的维度 index，如 0 或 1 或 2 ...\n    // 仅在雷达图中使用。\n    dimensionIndex: number,\n    // 数据图形的颜色\n    color: string,\n}\n```\n\n#### 字符串模板不生效问题1\n直接将formatter自定义函数和富文本标识配置在`series[0].label`下，结果以上配置都无效，正确方法是在`series[0].label.normal`下配置富文本标识声明，而formatter需要定义在数据集data的各个数据项中，`normal`表示常规效果，与之对应的`emphasis`是鼠标划过高亮效果。\n![tree-4](tree-4.png)\n\nseries-tree.label.rich支持的所有CSS属性：\n```js\n{\n  color , fontStyle , fontWeight , fontFamily , fontSize , align , verticalAlign , lineHeight , backgroundColor , borderColor , borderWidth , borderRadius , padding , shadowColor , shadowBlur , shadowOffsetX , shadowOffsetY , width , height , textBorderColor , textBorderWidth , textShadowColor , textShadowBlur , textShadowOffsetX , textShadowOffsetY\n} \n```\n\nseries-tree.data.label中配置label.formatter：\n\n```js\nconst rawTreeData = {\n          name: 'snapshotA',\n          selected: false, // 自定义选择控制属性selected\n          collapsed: false, // 覆盖组件自带的collapsed效果\n          label: {\n            // * 直接引用上层定义的formatter即可，复用函数对象\n            formatter: this.echartsInitData.series[0].label.normal.formatter,\n          },\n          children: [\n            ...\n          ],\n}\n```\n\n![tree-5](tree-5.png)\n\n### 问题II：tree图使用自定义图片加载显示不完全\n\n-------------------------------\n\n#### 解决方案1(无效)：使用对象深比较函数避免多次渲染\n> 使用此方法在React生命周期componentDidUpdate里判断options是否发生改变，从而避免了echarts组件多次render的情况，但验证后发现避免了一些组件卡顿的情况，但也存在自定义tree 节点图片加载不完全的情况，此解决方案无效。\n\n1. Js对象深比较函数deepComparison定义\n\n```js\n/**\n * [deepComparison 深比较]\n * @param  {[any]} data [any]\n * @return {[Boolean]}      [是否相同]\n */\nexport function deepComparison(data1, data2) {\n  const { hasOwnProperty } = Object.prototype;\n  // 获取变量类型\n  const getType = (d) => {\n    if (typeof d === 'object') {\n      if (!(d instanceof Object)) {\n        return 'null';\n      }\n      if (d instanceof Date) {\n        return 'date';\n      }\n      if (d instanceof RegExp) {\n        return 'regexp';\n      }\n      // object / array //\n      return 'object';\n    }\n    if (d !== d) return 'nan';\n    return (typeof d).toLowerCase();\n  };\n  // 基本类型比较\n  const is = (d1, d2, type) => {\n    if (type === 'nan') return true;\n    if (type === 'date' || type === 'regexp') return d1.toString() === d2.toString();\n    return (d1 === d2);\n  };\n  // 递归比较\n  const compare = (d1, d2) => {\n    const type1 = getType(d1);\n    const type2 = getType(d2);\n    if (type1 !== type2) {\n      return false;\n    }\n    if (type1 === 'object') {\n      const keys1 = Object.keys(d1).filter(k => hasOwnProperty.call(d1, k));\n      const keys2 = Object.keys(d2).filter(k => hasOwnProperty.call(d2, k));\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      for (let i = 0; i < keys1.length; i += 1) {\n        if (\n          !keys2.includes(keys1[i]) ||\n          !compare(d1[keys1[i]], d2[keys1[i]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return is(d1, d2, type1);\n  };\n\n  return compare(data1, data2);\n}\n```\n\n2.深度比较函数使用\n\n```js\n  componentDidUpdate() {\n    console.log('update');\n    const { treeData } = this.props;\n    const rawTreeData = toJS(treeData);\n    if (!deepComparison(this.echartsTreeData, rawTreeData)) {\n      console.log('change');\n      this.echartsTreeData = rawTreeData;\n      const optionData = this.echartsElement.getOption();\n      optionData.series[0].data = [rawTreeData];\n      console.log(optionData);\n      // this.echartsElement.clear();\n      this.echartsElement.setOption(optionData, true);\n    }\n  }\n```\n\n#### 解决方案2(无效)：使用base64字符串替换img url\n>由于方案1无效，判断可能是由于图片异步加载引起的渲染问题，对小图片尝试直接使用base64硬编码在代码里，结果发现仍然无效。\n\n![tree-6](tree-6.png)\n\n#### 解决方案3(有效)：禁用动画加载\n>由解决方案2可知，问题原因排除img异步加载的问题，问题定位到echarts组件自身的渲bug，通过多次设置setOption方法的参数，发现设置动画取消可以避免由于echarts图自身的渲染过程引起的图片加载不全问题。\n\n```js\nconst chartOption = {\n  animation: true, // 解决渲染不全的问题\n  tooltip: {\n    trigger: 'item',\n    triggerOn: 'mousemove',\n  },\n  series: [\n    ...\n  ],\n};\n```\n\n#### 解决方案4(有效)：组件渲染完成后重新手动渲染\n>echarts初始化后的组件可以挂载钩子函数和监听一些浏览器事件，其中有一个事件名为finished，表示echarts图表本次渲染完成。既然我们之前的最后一次渲染导致图片未完全加载，那么可以在最后这次渲染完成之后再读取echarts组件自带的options然后重新渲染一次，即可解决问题，需要注意的是，finished事件可能在短时间内被调用数次，在监听时注意使用函数防抖的思想让短时间内的多次finished事件回调只执行一次。\n\n1. 函数防抖声明  \n函数节流和函数防抖在浏览器渲染优化方面还是用得挺多：\n```js\n/**\n   * @param  {Function} fn         [回调函数]\n   * @param  {[Time]}   delayTime  [延迟时间(ms)]\n   * @param  {Boolean}  isImediate [是否需要立即调用]\n   * @param  {[type]}   args       [回调函数传入参数]\n  */\nexport function fnDebounce() {\n  const fnObject = {};\n  let timer;\n\n  return (fn, delayTime, isImediate, args) => {\n    // 设置定时器方法\n    const setTimer = () => {\n      timer = setTimeout(() => {\n        fn(args);\n        // 清除定时器\n        clearTimeout(timer);\n        delete (fnObject[fn]);\n      }, delayTime);\n\n      fnObject[fn] = {\n        delayTime,\n        timer,\n      };\n    };\n    // 立即调用\n    if (!delayTime || isImediate) return fn(args);\n    // 判断函数是否已经在调用中\n    if (fnObject[fn]) {\n      clearTimeout(timer);\n      setTimer(fn, delayTime, args);\n    } else {\n      setTimer(fn, delayTime, args);\n    }\n  };\n}\n```\n\n2. finished事件监听和函数防抖的应用  \n其实在此基础上还能做的优化就是在组件第一次加载自定义symbol图片后就将`finished`事件监听取消掉，减少渲染次数。\n```js\nclass FsPageSnapShotBody extends Component {\n  echartsElement= null\n  echartsTreeData = null;\n\n  // 初始化事件防抖\n  fnDebounce = fnDebounce();\n\n  pendingEventsTrigger = (nodeName) => {\n    const optionData = this.echartsElement.getOption();\n    this.echartsElement.setOption(optionData, true);\n  };\n\n  componentDidMount() {\n    const { snapshot } = this.props;\n    this.echartsElement = echarts.init(this.refs.fsSnapShot);\n    this.echartsElement.setOption(snapshot.echartsInitData);\n    // finished事件监听\n    this.echartsElement.on('finished', (params) => {\n      // 延迟时间设置为200ms\n      this.fnDebounce(this.pendingEventsTrigger, 200, false, null);\n    });\n    window.addEventListener('resize', this.resizeCharts);\n  }\n  componentDidUpdate() {\n    ...\n  }\n  resizeCharts = () => {\n    this.echartsElement.resize();\n  }\n  componentWillUnmount() {\n    echarts.dispose(this.echartsElement);\n    window.removeEventListener('resize', this.resizeCharts);\n  }\n  onClickChart = (e) => {\n    ...\n  }\n  onDoubleClickChart = (e) => {\n    ...\n  }\n  render() {\n    ...\n  }\n}\n```\n\n\n### 问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\n\n-------------------------------\n节点选中效果原理是监听echarts的`dblclick`双击事件，双击后改变`options.series[0].data`数据项里的`selected`属性配置，然后label.formatter根据此属性能够应用富文本类名里声明的高亮或普通文本的类名。值得注意的是echarts渲染时自身已经对过长层级的tree数据做了渲染优化，导致过深层级的展开/折叠状态不被控制，每次重新渲染后会导致已经折叠的树层级展开或是已经展开的树层级折叠，非常影响用户操作，因此需要把树层级数据每一层的折叠纳入强制属性控制状态，即在`options.series[0].data`中额外声明`collapsed:[Boolean]`参数，同时禁用tree自带的折叠/展开控制。\n\n#### 冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\n如果直接通过dblclick双击事件触发函数设置某个节点选中状态的属性`selected:true`，那么表现为：`selected`状态不常驻，变成了类似`mouseover`的鼠标划过状态触发；\n1. 动画延迟更新属性声明  \n```js\n/* Tree的外层数据 */\nechartsInitData= {\n    tooltip: {\n      trigger: 'item',\n      triggerOn: 'mousemove',\n    },\n    series: [\n      {\n        {...},\n        leaves: {...},\n        expandAndCollapse: false,\n        animationDuration: 100,\n        animationDelayUpdate: 300, // 动画延迟更新\n        animationDurationUpdate: 400,\n      },\n    ],\n  }\n```\n\n2. 冲突效果表现\n\n![tree-bug1](tree-bug1.gif)\n\n#### 冲突2：鼠标的悬浮操作导致选中效果无效\n按照上述表现，我尝试在触发函数更新tree节点选中状态之前设置一个延迟，延迟时间大于tree组件的动画延迟更新设置时间(上面设置为了`300ms`)，结果发现：如果在双击tree节点的时候鼠标一直放在节点上的话，鼠标移开后，表现和上面一样，如果双击了tree节点之后马上把鼠标从该节点移开的话则选中状态正常(太不容易了！)，推测是我们触发echarts组件更新的时候，echarts自身的组件状态管理和我们自定义的组件更新函数(以上表现为设置tree节点数据的`selected`属性触发label.formatter的渲染效果变化)两者冲突。\n\n1. 设置`selected`属性更改函数的延迟时间  \n```js\n/* React组件自定义方法-选中一个元素 */\nonDoubleClickChart = (e) => {\n    const { name } = e.data;\n    this.selectedNodeName = name;\n    setTimeout(() => {\n      this.props.snapshot.chooseSnapShot(name);\n    }, 400);\n  }\n```\n\n2. 冲突效果表现\n![tree-bug2](tree-bug2.gif)\n\n#### 解决方法\n方法同于上面提到的`finished事件监听和函数防抖的应用`，在echarts组件最终渲染完成后增加一次额外渲染解决问题，但是也仍然会有`selected`状态稍稍延迟更新和`selected`状态闪烁一次的问题，不妨碍使用，但是应该有更优的解决办法尚待实现。\n\n1. 代码概览  \n```js\nclass FsPageSnapShotBody extends Component {\n  echartsElement= null\n  echartsTreeData = null;\n  selectedNodeName = null;\n\n  // 初始化事件防抖\n  dblclickFnDebounce = fnDebounce();\n\n  pendingEventsTrigger = (nodeName) => {\n    const optionData = this.echartsElement.getOption();\n    this.echartsElement.setOption(optionData, true);\n  };\n\n  componentDidMount() {\n    const { snapshot } = this.props;\n    this.echartsElement = echarts.init(this.refs.fsSnapShot);\n    this.echartsElement.setOption(snapshot.echartsInitData);\n    this.echartsElement.on('dblclick', this.onDoubleClickChart);\n    this.echartsElement.on('click', this.onClickChart);\n    // finished事件监听\n    this.echartsElement.on('finished', (params) => {\n      if (this.selectedNodeName) {\n        // 防抖延迟时间设置为200ms\n        this.dblclickFnDebounce(this.pendingEventsTrigger, 200, false, this.selectedNodeName);\n      }\n    });\n\n    snapshot.getSnapShotRequest();\n    window.addEventListener('resize', this.resizeCharts);\n  }\n  componentDidUpdate() {\n    ...\n  }\n  resizeCharts = () => {\n    this.echartsElement.resize();\n  }\n  componentWillUnmount() {\n    echarts.dispose(this.echartsElement);\n    window.removeEventListener('resize', this.resizeCharts);\n  }\n  onClickChart = (e) => {\n    ...\n  }\n  onDoubleClickChart = (e) => {\n    ...\n  }\n  render() {\n    ...\n  }\n}\n```\n\n2. 效果演示\n![tree-bug-fix](tree-bug-fix.gif)","source":"_posts/2020-03-22-echarts图表-树形图开发记录.md","raw":"---\ntitle: \"echarts图表-树形图开发记录\"\ncatalog: true\ntoc_nav_num: true\ndate:   2020-03-22 18:24:00\nsubtitle: \"Echarts Tree\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- echarts\n- react\ncategories:\n- Echarts\nupdateDate: 2020-03-22 18:24:00\n---\n\n### 目录\n\n1. 前言\n\n2. 树形图功能需求以及遇到的问题分析\n\n3. 问题I：V4版本label自定义效果设置不生效\n\n4. 问题II：tree图使用自定义图片加载显示不完全\n\n5. 问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\n\n### 前言\n\n-------------\nEcharts树形图Tree可以用来展示树形数据结构各节点的层级关系，比如一个使用情况就是文件系统存在多个快照，每一级快照基于上一级生成，存在父级和子级关系对应关系，且Root根只有一个，即文件系统本身，完全适用于树形图的使用场景。\n\n![snapshot](snapshot.png)\n\n### 树形图功能需求以及遇到的问题分析\n\n-------------------------------\n\n1. 文件系统快照每一层级的节点支持单个选中，很多操作都是基于某一个快照节点的，比\n如快照的恢复、删除、设置，考虑选中效果的区别使用label自定义富文本样式实现，但是会遇到渲染的时侯echarts一些自己的状态更新和我们我们自定义的选中状态的更新冲突问题，且V4版本echarts tree的富文本配置后也并未生效。\n\n![snapshot_select](snapshot_select.png)\n\n2. 文件系统快照每一层级的节点标识(Symbol)可能不同，需要支持使用自定义图片，echarts的symbol是直接支持使用img-src和base64 img-str的，但是会遇到图片在某些时候不能完全被渲染(图片像是被设置了半透明)或直接完全不能被渲染出来的问题。\n\n![tree-1](tree-1.png)\n![tree-2](tree-2.png)\n![tree-3](tree-3.png)\n\n\n### 问题I：V4版本label自定义效果设置不生效\n\n-------------------------------\n\nseries-tree.label.formatter\n>标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \\n 换行。\n\n#### 字符串模板的使用  \n\n1. 模板变量有：  \n* {a}：系列名。\n* {b}：数据名。\n* {c}：数据值。\n* {d}：百分比。\n* {@xxx}：数据中名为'xxx'的维度的值，如{@product}表示名为'product'` 的维度的值。\n* {@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。\n\n2. 示例：  \nformatter: '{b}: {d}'\n\n3. 回调函数格式：  \n(params: Object|Array) => string，\n参数 params 是 formatter 需要的单个数据集，格式如下：\n```js\n{\n    componentType: 'series',\n    // 系列类型\n    seriesType: string,\n    // 系列在传入的 option.series 中的 index\n    seriesIndex: number,\n    // 系列名称\n    seriesName: string,\n    // 数据名，类目名\n    name: string,\n    // 数据在传入的 data 数组中的 index\n    dataIndex: number,\n    // 传入的原始数据项\n    data: Object,\n    // 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）\n    value: number|Array|Object,\n    // 坐标轴 encode 映射信息，\n    // key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）\n    // value 必然为数组，不会为 null/undefied，表示 dimension index 。\n    // 其内容如：\n    // {\n    //     x: [2] // dimension index 为 2 的数据映射到 x 轴\n    //     y: [0] // dimension index 为 0 的数据映射到 y 轴\n    // }\n    encode: Object,\n    // 维度名列表\n    dimensionNames: Array<String>,\n    // 数据的维度 index，如 0 或 1 或 2 ...\n    // 仅在雷达图中使用。\n    dimensionIndex: number,\n    // 数据图形的颜色\n    color: string,\n}\n```\n\n#### 字符串模板不生效问题1\n直接将formatter自定义函数和富文本标识配置在`series[0].label`下，结果以上配置都无效，正确方法是在`series[0].label.normal`下配置富文本标识声明，而formatter需要定义在数据集data的各个数据项中，`normal`表示常规效果，与之对应的`emphasis`是鼠标划过高亮效果。\n![tree-4](tree-4.png)\n\nseries-tree.label.rich支持的所有CSS属性：\n```js\n{\n  color , fontStyle , fontWeight , fontFamily , fontSize , align , verticalAlign , lineHeight , backgroundColor , borderColor , borderWidth , borderRadius , padding , shadowColor , shadowBlur , shadowOffsetX , shadowOffsetY , width , height , textBorderColor , textBorderWidth , textShadowColor , textShadowBlur , textShadowOffsetX , textShadowOffsetY\n} \n```\n\nseries-tree.data.label中配置label.formatter：\n\n```js\nconst rawTreeData = {\n          name: 'snapshotA',\n          selected: false, // 自定义选择控制属性selected\n          collapsed: false, // 覆盖组件自带的collapsed效果\n          label: {\n            // * 直接引用上层定义的formatter即可，复用函数对象\n            formatter: this.echartsInitData.series[0].label.normal.formatter,\n          },\n          children: [\n            ...\n          ],\n}\n```\n\n![tree-5](tree-5.png)\n\n### 问题II：tree图使用自定义图片加载显示不完全\n\n-------------------------------\n\n#### 解决方案1(无效)：使用对象深比较函数避免多次渲染\n> 使用此方法在React生命周期componentDidUpdate里判断options是否发生改变，从而避免了echarts组件多次render的情况，但验证后发现避免了一些组件卡顿的情况，但也存在自定义tree 节点图片加载不完全的情况，此解决方案无效。\n\n1. Js对象深比较函数deepComparison定义\n\n```js\n/**\n * [deepComparison 深比较]\n * @param  {[any]} data [any]\n * @return {[Boolean]}      [是否相同]\n */\nexport function deepComparison(data1, data2) {\n  const { hasOwnProperty } = Object.prototype;\n  // 获取变量类型\n  const getType = (d) => {\n    if (typeof d === 'object') {\n      if (!(d instanceof Object)) {\n        return 'null';\n      }\n      if (d instanceof Date) {\n        return 'date';\n      }\n      if (d instanceof RegExp) {\n        return 'regexp';\n      }\n      // object / array //\n      return 'object';\n    }\n    if (d !== d) return 'nan';\n    return (typeof d).toLowerCase();\n  };\n  // 基本类型比较\n  const is = (d1, d2, type) => {\n    if (type === 'nan') return true;\n    if (type === 'date' || type === 'regexp') return d1.toString() === d2.toString();\n    return (d1 === d2);\n  };\n  // 递归比较\n  const compare = (d1, d2) => {\n    const type1 = getType(d1);\n    const type2 = getType(d2);\n    if (type1 !== type2) {\n      return false;\n    }\n    if (type1 === 'object') {\n      const keys1 = Object.keys(d1).filter(k => hasOwnProperty.call(d1, k));\n      const keys2 = Object.keys(d2).filter(k => hasOwnProperty.call(d2, k));\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      for (let i = 0; i < keys1.length; i += 1) {\n        if (\n          !keys2.includes(keys1[i]) ||\n          !compare(d1[keys1[i]], d2[keys1[i]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return is(d1, d2, type1);\n  };\n\n  return compare(data1, data2);\n}\n```\n\n2.深度比较函数使用\n\n```js\n  componentDidUpdate() {\n    console.log('update');\n    const { treeData } = this.props;\n    const rawTreeData = toJS(treeData);\n    if (!deepComparison(this.echartsTreeData, rawTreeData)) {\n      console.log('change');\n      this.echartsTreeData = rawTreeData;\n      const optionData = this.echartsElement.getOption();\n      optionData.series[0].data = [rawTreeData];\n      console.log(optionData);\n      // this.echartsElement.clear();\n      this.echartsElement.setOption(optionData, true);\n    }\n  }\n```\n\n#### 解决方案2(无效)：使用base64字符串替换img url\n>由于方案1无效，判断可能是由于图片异步加载引起的渲染问题，对小图片尝试直接使用base64硬编码在代码里，结果发现仍然无效。\n\n![tree-6](tree-6.png)\n\n#### 解决方案3(有效)：禁用动画加载\n>由解决方案2可知，问题原因排除img异步加载的问题，问题定位到echarts组件自身的渲bug，通过多次设置setOption方法的参数，发现设置动画取消可以避免由于echarts图自身的渲染过程引起的图片加载不全问题。\n\n```js\nconst chartOption = {\n  animation: true, // 解决渲染不全的问题\n  tooltip: {\n    trigger: 'item',\n    triggerOn: 'mousemove',\n  },\n  series: [\n    ...\n  ],\n};\n```\n\n#### 解决方案4(有效)：组件渲染完成后重新手动渲染\n>echarts初始化后的组件可以挂载钩子函数和监听一些浏览器事件，其中有一个事件名为finished，表示echarts图表本次渲染完成。既然我们之前的最后一次渲染导致图片未完全加载，那么可以在最后这次渲染完成之后再读取echarts组件自带的options然后重新渲染一次，即可解决问题，需要注意的是，finished事件可能在短时间内被调用数次，在监听时注意使用函数防抖的思想让短时间内的多次finished事件回调只执行一次。\n\n1. 函数防抖声明  \n函数节流和函数防抖在浏览器渲染优化方面还是用得挺多：\n```js\n/**\n   * @param  {Function} fn         [回调函数]\n   * @param  {[Time]}   delayTime  [延迟时间(ms)]\n   * @param  {Boolean}  isImediate [是否需要立即调用]\n   * @param  {[type]}   args       [回调函数传入参数]\n  */\nexport function fnDebounce() {\n  const fnObject = {};\n  let timer;\n\n  return (fn, delayTime, isImediate, args) => {\n    // 设置定时器方法\n    const setTimer = () => {\n      timer = setTimeout(() => {\n        fn(args);\n        // 清除定时器\n        clearTimeout(timer);\n        delete (fnObject[fn]);\n      }, delayTime);\n\n      fnObject[fn] = {\n        delayTime,\n        timer,\n      };\n    };\n    // 立即调用\n    if (!delayTime || isImediate) return fn(args);\n    // 判断函数是否已经在调用中\n    if (fnObject[fn]) {\n      clearTimeout(timer);\n      setTimer(fn, delayTime, args);\n    } else {\n      setTimer(fn, delayTime, args);\n    }\n  };\n}\n```\n\n2. finished事件监听和函数防抖的应用  \n其实在此基础上还能做的优化就是在组件第一次加载自定义symbol图片后就将`finished`事件监听取消掉，减少渲染次数。\n```js\nclass FsPageSnapShotBody extends Component {\n  echartsElement= null\n  echartsTreeData = null;\n\n  // 初始化事件防抖\n  fnDebounce = fnDebounce();\n\n  pendingEventsTrigger = (nodeName) => {\n    const optionData = this.echartsElement.getOption();\n    this.echartsElement.setOption(optionData, true);\n  };\n\n  componentDidMount() {\n    const { snapshot } = this.props;\n    this.echartsElement = echarts.init(this.refs.fsSnapShot);\n    this.echartsElement.setOption(snapshot.echartsInitData);\n    // finished事件监听\n    this.echartsElement.on('finished', (params) => {\n      // 延迟时间设置为200ms\n      this.fnDebounce(this.pendingEventsTrigger, 200, false, null);\n    });\n    window.addEventListener('resize', this.resizeCharts);\n  }\n  componentDidUpdate() {\n    ...\n  }\n  resizeCharts = () => {\n    this.echartsElement.resize();\n  }\n  componentWillUnmount() {\n    echarts.dispose(this.echartsElement);\n    window.removeEventListener('resize', this.resizeCharts);\n  }\n  onClickChart = (e) => {\n    ...\n  }\n  onDoubleClickChart = (e) => {\n    ...\n  }\n  render() {\n    ...\n  }\n}\n```\n\n\n### 问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\n\n-------------------------------\n节点选中效果原理是监听echarts的`dblclick`双击事件，双击后改变`options.series[0].data`数据项里的`selected`属性配置，然后label.formatter根据此属性能够应用富文本类名里声明的高亮或普通文本的类名。值得注意的是echarts渲染时自身已经对过长层级的tree数据做了渲染优化，导致过深层级的展开/折叠状态不被控制，每次重新渲染后会导致已经折叠的树层级展开或是已经展开的树层级折叠，非常影响用户操作，因此需要把树层级数据每一层的折叠纳入强制属性控制状态，即在`options.series[0].data`中额外声明`collapsed:[Boolean]`参数，同时禁用tree自带的折叠/展开控制。\n\n#### 冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\n如果直接通过dblclick双击事件触发函数设置某个节点选中状态的属性`selected:true`，那么表现为：`selected`状态不常驻，变成了类似`mouseover`的鼠标划过状态触发；\n1. 动画延迟更新属性声明  \n```js\n/* Tree的外层数据 */\nechartsInitData= {\n    tooltip: {\n      trigger: 'item',\n      triggerOn: 'mousemove',\n    },\n    series: [\n      {\n        {...},\n        leaves: {...},\n        expandAndCollapse: false,\n        animationDuration: 100,\n        animationDelayUpdate: 300, // 动画延迟更新\n        animationDurationUpdate: 400,\n      },\n    ],\n  }\n```\n\n2. 冲突效果表现\n\n![tree-bug1](tree-bug1.gif)\n\n#### 冲突2：鼠标的悬浮操作导致选中效果无效\n按照上述表现，我尝试在触发函数更新tree节点选中状态之前设置一个延迟，延迟时间大于tree组件的动画延迟更新设置时间(上面设置为了`300ms`)，结果发现：如果在双击tree节点的时候鼠标一直放在节点上的话，鼠标移开后，表现和上面一样，如果双击了tree节点之后马上把鼠标从该节点移开的话则选中状态正常(太不容易了！)，推测是我们触发echarts组件更新的时候，echarts自身的组件状态管理和我们自定义的组件更新函数(以上表现为设置tree节点数据的`selected`属性触发label.formatter的渲染效果变化)两者冲突。\n\n1. 设置`selected`属性更改函数的延迟时间  \n```js\n/* React组件自定义方法-选中一个元素 */\nonDoubleClickChart = (e) => {\n    const { name } = e.data;\n    this.selectedNodeName = name;\n    setTimeout(() => {\n      this.props.snapshot.chooseSnapShot(name);\n    }, 400);\n  }\n```\n\n2. 冲突效果表现\n![tree-bug2](tree-bug2.gif)\n\n#### 解决方法\n方法同于上面提到的`finished事件监听和函数防抖的应用`，在echarts组件最终渲染完成后增加一次额外渲染解决问题，但是也仍然会有`selected`状态稍稍延迟更新和`selected`状态闪烁一次的问题，不妨碍使用，但是应该有更优的解决办法尚待实现。\n\n1. 代码概览  \n```js\nclass FsPageSnapShotBody extends Component {\n  echartsElement= null\n  echartsTreeData = null;\n  selectedNodeName = null;\n\n  // 初始化事件防抖\n  dblclickFnDebounce = fnDebounce();\n\n  pendingEventsTrigger = (nodeName) => {\n    const optionData = this.echartsElement.getOption();\n    this.echartsElement.setOption(optionData, true);\n  };\n\n  componentDidMount() {\n    const { snapshot } = this.props;\n    this.echartsElement = echarts.init(this.refs.fsSnapShot);\n    this.echartsElement.setOption(snapshot.echartsInitData);\n    this.echartsElement.on('dblclick', this.onDoubleClickChart);\n    this.echartsElement.on('click', this.onClickChart);\n    // finished事件监听\n    this.echartsElement.on('finished', (params) => {\n      if (this.selectedNodeName) {\n        // 防抖延迟时间设置为200ms\n        this.dblclickFnDebounce(this.pendingEventsTrigger, 200, false, this.selectedNodeName);\n      }\n    });\n\n    snapshot.getSnapShotRequest();\n    window.addEventListener('resize', this.resizeCharts);\n  }\n  componentDidUpdate() {\n    ...\n  }\n  resizeCharts = () => {\n    this.echartsElement.resize();\n  }\n  componentWillUnmount() {\n    echarts.dispose(this.echartsElement);\n    window.removeEventListener('resize', this.resizeCharts);\n  }\n  onClickChart = (e) => {\n    ...\n  }\n  onDoubleClickChart = (e) => {\n    ...\n  }\n  render() {\n    ...\n  }\n}\n```\n\n2. 效果演示\n![tree-bug-fix](tree-bug-fix.gif)","slug":"echarts图表-树形图开发记录","published":1,"updated":"2020-12-06T10:53:15.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmur50014kl95g0a81vdk","content":"<h3 id=\"目录\">目录</h3><ol><li><p>前言</p></li><li><p>树形图功能需求以及遇到的问题分析</p></li><li><p>问题I：V4版本label自定义效果设置不生效</p></li><li><p>问题II：tree图使用自定义图片加载显示不完全</p></li><li><p>问题III：tree图自定义节点选中效果和组件自带渲染效果冲突</p></li></ol><h3 id=\"前言\">前言</h3><hr><p>Echarts树形图Tree可以用来展示树形数据结构各节点的层级关系，比如一个使用情况就是文件系统存在多个快照，每一级快照基于上一级生成，存在父级和子级关系对应关系，且Root根只有一个，即文件系统本身，完全适用于树形图的使用场景。</p><p><img src=\"snapshot.png\" alt=\"snapshot\"></p><h3 id=\"树形图功能需求以及遇到的问题分析\">树形图功能需求以及遇到的问题分析</h3><hr><ol><li>文件系统快照每一层级的节点支持单个选中，很多操作都是基于某一个快照节点的，比<br>如快照的恢复、删除、设置，考虑选中效果的区别使用label自定义富文本样式实现，但是会遇到渲染的时侯echarts一些自己的状态更新和我们我们自定义的选中状态的更新冲突问题，且V4版本echarts tree的富文本配置后也并未生效。</li></ol><p><img src=\"snapshot_select.png\" alt=\"snapshot_select\"></p><ol start=\"2\"><li>文件系统快照每一层级的节点标识(Symbol)可能不同，需要支持使用自定义图片，echarts的symbol是直接支持使用img-src和base64 img-str的，但是会遇到图片在某些时候不能完全被渲染(图片像是被设置了半透明)或直接完全不能被渲染出来的问题。</li></ol><p><img src=\"tree-1.png\" alt=\"tree-1\"><br><img src=\"tree-2.png\" alt=\"tree-2\"><br><img src=\"tree-3.png\" alt=\"tree-3\"></p><h3 id=\"问题I：V4版本label自定义效果设置不生效\">问题I：V4版本label自定义效果设置不生效</h3><hr><p>series-tree.label.formatter</p><blockquote><p>标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \\n 换行。</p></blockquote><h4 id=\"字符串模板的使用\">字符串模板的使用</h4><ol><li>模板变量有：</li></ol><ul><li>{a}：系列名。</li><li>{b}：数据名。</li><li>{c}：数据值。</li><li>{d}：百分比。</li><li>{@xxx}：数据中名为’xxx’的维度的值，如{@product}表示名为’product’` 的维度的值。</li><li>{@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。</li></ul><ol start=\"2\"><li><p>示例：<br>formatter: ‘{b}: {d}’</p></li><li><p>回调函数格式：<br>(params: Object|Array) =&gt; string，<br>参数 params 是 formatter 需要的单个数据集，格式如下：</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    componentType: <span class=\"string\">'series'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 系列类型</span></span><br><span class=\"line\">    seriesType: string,</span><br><span class=\"line\">    <span class=\"comment\">// 系列在传入的 option.series 中的 index</span></span><br><span class=\"line\">    seriesIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 系列名称</span></span><br><span class=\"line\">    seriesName: string,</span><br><span class=\"line\">    <span class=\"comment\">// 数据名，类目名</span></span><br><span class=\"line\">    name: string,</span><br><span class=\"line\">    <span class=\"comment\">// 数据在传入的 data 数组中的 index</span></span><br><span class=\"line\">    dataIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 传入的原始数据项</span></span><br><span class=\"line\">    data: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）</span></span><br><span class=\"line\">    value: number|<span class=\"built_in\">Array</span>|<span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 坐标轴 encode 映射信息，</span></span><br><span class=\"line\">    <span class=\"comment\">// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）</span></span><br><span class=\"line\">    <span class=\"comment\">// value 必然为数组，不会为 null/undefied，表示 dimension index 。</span></span><br><span class=\"line\">    <span class=\"comment\">// 其内容如：</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     x: [2] // dimension index 为 2 的数据映射到 x 轴</span></span><br><span class=\"line\">    <span class=\"comment\">//     y: [0] // dimension index 为 0 的数据映射到 y 轴</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    encode: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 维度名列表</span></span><br><span class=\"line\">    dimensionNames: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">String</span>&gt;,</span><br><span class=\"line\">    <span class=\"comment\">// 数据的维度 index，如 0 或 1 或 2 ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 仅在雷达图中使用。</span></span><br><span class=\"line\">    dimensionIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 数据图形的颜色</span></span><br><span class=\"line\">    color: string,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"字符串模板不生效问题1\">字符串模板不生效问题1</h4><p>直接将formatter自定义函数和富文本标识配置在<code>series[0].label</code>下，结果以上配置都无效，正确方法是在<code>series[0].label.normal</code>下配置富文本标识声明，而formatter需要定义在数据集data的各个数据项中，<code>normal</code>表示常规效果，与之对应的<code>emphasis</code>是鼠标划过高亮效果。<br><img src=\"tree-4.png\" alt=\"tree-4\"></p><p>series-tree.label.rich支持的所有CSS属性：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  color , fontStyle , fontWeight , fontFamily , fontSize , align , verticalAlign , lineHeight , backgroundColor , borderColor , borderWidth , borderRadius , padding , shadowColor , shadowBlur , shadowOffsetX , shadowOffsetY , width , height , textBorderColor , textBorderWidth , textShadowColor , textShadowBlur , textShadowOffsetX , textShadowOffsetY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>series-tree.data.label中配置label.formatter：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rawTreeData = &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'snapshotA'</span>,</span><br><span class=\"line\">          selected: <span class=\"literal\">false</span>, <span class=\"comment\">// 自定义选择控制属性selected</span></span><br><span class=\"line\">          collapsed: <span class=\"literal\">false</span>, <span class=\"comment\">// 覆盖组件自带的collapsed效果</span></span><br><span class=\"line\">          label: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// * 直接引用上层定义的formatter即可，复用函数对象</span></span><br><span class=\"line\">            formatter: <span class=\"keyword\">this</span>.echartsInitData.series[<span class=\"number\">0</span>].label.normal.formatter,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            ...</span><br><span class=\"line\">          ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><img src=\"tree-5.png\" alt=\"tree-5\"></p><h3 id=\"问题II：tree图使用自定义图片加载显示不完全\">问题II：tree图使用自定义图片加载显示不完全</h3><hr><h4 id=\"解决方案1-无效-：使用对象深比较函数避免多次渲染\">解决方案1(无效)：使用对象深比较函数避免多次渲染</h4><blockquote><p>使用此方法在React生命周期componentDidUpdate里判断options是否发生改变，从而避免了echarts组件多次render的情况，但验证后发现避免了一些组件卡顿的情况，但也存在自定义tree 节点图片加载不完全的情况，此解决方案无效。</p></blockquote><ol><li>Js对象深比较函数deepComparison定义</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [deepComparison 深比较]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[any]&#125;</span> </span>data [any]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[Boolean]&#125;</span>      </span>[是否相同]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepComparison</span>(<span class=\"params\">data1, data2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 获取变量类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getType = <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> d === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'null'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'date'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'regexp'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// object / array //</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'object'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d !== d) <span class=\"keyword\">return</span> <span class=\"string\">'nan'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> d).toLowerCase();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 基本类型比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> is = <span class=\"function\">(<span class=\"params\">d1, d2, type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'nan'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'date'</span> || type === <span class=\"string\">'regexp'</span>) <span class=\"keyword\">return</span> d1.toString() === d2.toString();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (d1 === d2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 递归比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compare = <span class=\"function\">(<span class=\"params\">d1, d2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type1 = getType(d1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type2 = getType(d2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 !== type2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys1 = <span class=\"built_in\">Object</span>.keys(d1).filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> hasOwnProperty.call(d1, k));</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys2 = <span class=\"built_in\">Object</span>.keys(d2).filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> hasOwnProperty.call(d2, k));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (keys1.length !== keys2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys1.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          !keys2.includes(keys1[i]) ||</span><br><span class=\"line\">          !compare(d1[keys1[i]], d2[keys1[i]])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> is(d1, d2, type1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> compare(data1, data2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>2.深度比较函数使用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidUpdate() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'update'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rawTreeData = toJS(treeData);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!deepComparison(<span class=\"keyword\">this</span>.echartsTreeData, rawTreeData)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'change'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsTreeData = rawTreeData;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    optionData.series[<span class=\"number\">0</span>].data = [rawTreeData];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(optionData);</span><br><span class=\"line\">    <span class=\"comment\">// this.echartsElement.clear();</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"解决方案2-无效-：使用base64字符串替换img-url\">解决方案2(无效)：使用base64字符串替换img url</h4><blockquote><p>由于方案1无效，判断可能是由于图片异步加载引起的渲染问题，对小图片尝试直接使用base64硬编码在代码里，结果发现仍然无效。</p></blockquote><p><img src=\"tree-6.png\" alt=\"tree-6\"></p><h4 id=\"解决方案3-有效-：禁用动画加载\">解决方案3(有效)：禁用动画加载</h4><blockquote><p>由解决方案2可知，问题原因排除img异步加载的问题，问题定位到echarts组件自身的渲bug，通过多次设置setOption方法的参数，发现设置动画取消可以避免由于echarts图自身的渲染过程引起的图片加载不全问题。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chartOption = &#123;</span><br><span class=\"line\">  animation: <span class=\"literal\">true</span>, <span class=\"comment\">// 解决渲染不全的问题</span></span><br><span class=\"line\">  tooltip: &#123;</span><br><span class=\"line\">    trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">    triggerOn: <span class=\"string\">'mousemove'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"解决方案4-有效-：组件渲染完成后重新手动渲染\">解决方案4(有效)：组件渲染完成后重新手动渲染</h4><blockquote><p>echarts初始化后的组件可以挂载钩子函数和监听一些浏览器事件，其中有一个事件名为finished，表示echarts图表本次渲染完成。既然我们之前的最后一次渲染导致图片未完全加载，那么可以在最后这次渲染完成之后再读取echarts组件自带的options然后重新渲染一次，即可解决问题，需要注意的是，finished事件可能在短时间内被调用数次，在监听时注意使用函数防抖的思想让短时间内的多次finished事件回调只执行一次。</p></blockquote><ol><li>函数防抖声明<br>函数节流和函数防抖在浏览器渲染优化方面还是用得挺多：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;Function&#125;</span> </span>fn         [回调函数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Time]&#125;</span>   </span>delayTime  [延迟时间(ms)]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;Boolean&#125;</span>  </span>isImediate [是否需要立即调用]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span>   </span>args       [回调函数传入参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnDebounce</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fnObject = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">fn, delayTime, isImediate, args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置定时器方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> setTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn(args);</span><br><span class=\"line\">        <span class=\"comment\">// 清除定时器</span></span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> (fnObject[fn]);</span><br><span class=\"line\">      &#125;, delayTime);</span><br><span class=\"line\"></span><br><span class=\"line\">      fnObject[fn] = &#123;</span><br><span class=\"line\">        delayTime,</span><br><span class=\"line\">        timer,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 立即调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!delayTime || isImediate) <span class=\"keyword\">return</span> fn(args);</span><br><span class=\"line\">    <span class=\"comment\">// 判断函数是否已经在调用中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fnObject[fn]) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">      setTimer(fn, delayTime, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      setTimer(fn, delayTime, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>finished事件监听和函数防抖的应用<br>其实在此基础上还能做的优化就是在组件第一次加载自定义symbol图片后就将<code>finished</code>事件监听取消掉，减少渲染次数。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FsPageSnapShotBody</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  echartsElement= <span class=\"literal\">null</span></span><br><span class=\"line\">  echartsTreeData = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化事件防抖</span></span><br><span class=\"line\">  fnDebounce = fnDebounce();</span><br><span class=\"line\"></span><br><span class=\"line\">  pendingEventsTrigger = <span class=\"function\">(<span class=\"params\">nodeName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; snapshot &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.fsSnapShot);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(snapshot.echartsInitData);</span><br><span class=\"line\">    <span class=\"comment\">// finished事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'finished'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 延迟时间设置为200ms</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fnDebounce(<span class=\"keyword\">this</span>.pendingEventsTrigger, <span class=\"number\">200</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeCharts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    echarts.dispose(<span class=\"keyword\">this</span>.echartsElement);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\">问题III：tree图自定义节点选中效果和组件自带渲染效果冲突</h3><hr><p>节点选中效果原理是监听echarts的<code>dblclick</code>双击事件，双击后改变<code>options.series[0].data</code>数据项里的<code>selected</code>属性配置，然后label.formatter根据此属性能够应用富文本类名里声明的高亮或普通文本的类名。值得注意的是echarts渲染时自身已经对过长层级的tree数据做了渲染优化，导致过深层级的展开/折叠状态不被控制，每次重新渲染后会导致已经折叠的树层级展开或是已经展开的树层级折叠，非常影响用户操作，因此需要把树层级数据每一层的折叠纳入强制属性控制状态，即在<code>options.series[0].data</code>中额外声明<code>collapsed:[Boolean]</code>参数，同时禁用tree自带的折叠/展开控制。</p><h4 id=\"冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\">冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效</h4><p>如果直接通过dblclick双击事件触发函数设置某个节点选中状态的属性<code>selected:true</code>，那么表现为：<code>selected</code>状态不常驻，变成了类似<code>mouseover</code>的鼠标划过状态触发；</p><ol><li>动画延迟更新属性声明</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Tree的外层数据 */</span></span><br><span class=\"line\">echartsInitData= &#123;</span><br><span class=\"line\">    tooltip: &#123;</span><br><span class=\"line\">      trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">      triggerOn: <span class=\"string\">'mousemove'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    series: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &#123;...&#125;,</span><br><span class=\"line\">        leaves: &#123;...&#125;,</span><br><span class=\"line\">        expandAndCollapse: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        animationDuration: <span class=\"number\">100</span>,</span><br><span class=\"line\">        animationDelayUpdate: <span class=\"number\">300</span>, <span class=\"comment\">// 动画延迟更新</span></span><br><span class=\"line\">        animationDurationUpdate: <span class=\"number\">400</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>冲突效果表现</li></ol><p><img src=\"tree-bug1.gif\" alt=\"tree-bug1\"></p><h4 id=\"冲突2：鼠标的悬浮操作导致选中效果无效\">冲突2：鼠标的悬浮操作导致选中效果无效</h4><p>按照上述表现，我尝试在触发函数更新tree节点选中状态之前设置一个延迟，延迟时间大于tree组件的动画延迟更新设置时间(上面设置为了<code>300ms</code>)，结果发现：如果在双击tree节点的时候鼠标一直放在节点上的话，鼠标移开后，表现和上面一样，如果双击了tree节点之后马上把鼠标从该节点移开的话则选中状态正常(太不容易了！)，推测是我们触发echarts组件更新的时候，echarts自身的组件状态管理和我们自定义的组件更新函数(以上表现为设置tree节点数据的<code>selected</code>属性触发label.formatter的渲染效果变化)两者冲突。</p><ol><li>设置<code>selected</code>属性更改函数的延迟时间</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* React组件自定义方法-选中一个元素 */</span></span><br><span class=\"line\">onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = e.data;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selectedNodeName = name;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.snapshot.chooseSnapShot(name);</span><br><span class=\"line\">    &#125;, <span class=\"number\">400</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>冲突效果表现<br><img src=\"tree-bug2.gif\" alt=\"tree-bug2\"></li></ol><h4 id=\"解决方法\">解决方法</h4><p>方法同于上面提到的<code>finished事件监听和函数防抖的应用</code>，在echarts组件最终渲染完成后增加一次额外渲染解决问题，但是也仍然会有<code>selected</code>状态稍稍延迟更新和<code>selected</code>状态闪烁一次的问题，不妨碍使用，但是应该有更优的解决办法尚待实现。</p><ol><li>代码概览</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FsPageSnapShotBody</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  echartsElement= <span class=\"literal\">null</span></span><br><span class=\"line\">  echartsTreeData = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  selectedNodeName = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化事件防抖</span></span><br><span class=\"line\">  dblclickFnDebounce = fnDebounce();</span><br><span class=\"line\"></span><br><span class=\"line\">  pendingEventsTrigger = <span class=\"function\">(<span class=\"params\">nodeName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; snapshot &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.fsSnapShot);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(snapshot.echartsInitData);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'dblclick'</span>, <span class=\"keyword\">this</span>.onDoubleClickChart);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.onClickChart);</span><br><span class=\"line\">    <span class=\"comment\">// finished事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'finished'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.selectedNodeName) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 防抖延迟时间设置为200ms</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dblclickFnDebounce(<span class=\"keyword\">this</span>.pendingEventsTrigger, <span class=\"number\">200</span>, <span class=\"literal\">false</span>, <span class=\"keyword\">this</span>.selectedNodeName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    snapshot.getSnapShotRequest();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeCharts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    echarts.dispose(<span class=\"keyword\">this</span>.echartsElement);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>效果演示<br><img src=\"tree-bug-fix.gif\" alt=\"tree-bug-fix\"></li></ol>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录\">目录</h3><ol><li><p>前言</p></li><li><p>树形图功能需求以及遇到的问题分析</p></li><li><p>问题I：V4版本label自定义效果设置不生效</p></li><li><p>问题II：tree图使用自定义图片加载显示不完全</p></li><li><p>问题III：tree图自定义节点选中效果和组件自带渲染效果冲突</p></li></ol><h3 id=\"前言\">前言</h3><hr><p>Echarts树形图Tree可以用来展示树形数据结构各节点的层级关系，比如一个使用情况就是文件系统存在多个快照，每一级快照基于上一级生成，存在父级和子级关系对应关系，且Root根只有一个，即文件系统本身，完全适用于树形图的使用场景。</p><p><img src=\"snapshot.png\" alt=\"snapshot\"></p><h3 id=\"树形图功能需求以及遇到的问题分析\">树形图功能需求以及遇到的问题分析</h3><hr><ol><li>文件系统快照每一层级的节点支持单个选中，很多操作都是基于某一个快照节点的，比<br>如快照的恢复、删除、设置，考虑选中效果的区别使用label自定义富文本样式实现，但是会遇到渲染的时侯echarts一些自己的状态更新和我们我们自定义的选中状态的更新冲突问题，且V4版本echarts tree的富文本配置后也并未生效。</li></ol><p><img src=\"snapshot_select.png\" alt=\"snapshot_select\"></p><ol start=\"2\"><li>文件系统快照每一层级的节点标识(Symbol)可能不同，需要支持使用自定义图片，echarts的symbol是直接支持使用img-src和base64 img-str的，但是会遇到图片在某些时候不能完全被渲染(图片像是被设置了半透明)或直接完全不能被渲染出来的问题。</li></ol><p><img src=\"tree-1.png\" alt=\"tree-1\"><br><img src=\"tree-2.png\" alt=\"tree-2\"><br><img src=\"tree-3.png\" alt=\"tree-3\"></p><h3 id=\"问题I：V4版本label自定义效果设置不生效\">问题I：V4版本label自定义效果设置不生效</h3><hr><p>series-tree.label.formatter</p><blockquote><p>标签内容格式器，支持字符串模板和回调函数两种形式，字符串模板与回调函数返回的字符串均支持用 \\n 换行。</p></blockquote><h4 id=\"字符串模板的使用\">字符串模板的使用</h4><ol><li>模板变量有：</li></ol><ul><li>{a}：系列名。</li><li>{b}：数据名。</li><li>{c}：数据值。</li><li>{d}：百分比。</li><li>{@xxx}：数据中名为’xxx’的维度的值，如{@product}表示名为’product’` 的维度的值。</li><li>{@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。</li></ul><ol start=\"2\"><li><p>示例：<br>formatter: ‘{b}: {d}’</p></li><li><p>回调函数格式：<br>(params: Object|Array) =&gt; string，<br>参数 params 是 formatter 需要的单个数据集，格式如下：</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    componentType: <span class=\"string\">'series'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 系列类型</span></span><br><span class=\"line\">    seriesType: string,</span><br><span class=\"line\">    <span class=\"comment\">// 系列在传入的 option.series 中的 index</span></span><br><span class=\"line\">    seriesIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 系列名称</span></span><br><span class=\"line\">    seriesName: string,</span><br><span class=\"line\">    <span class=\"comment\">// 数据名，类目名</span></span><br><span class=\"line\">    name: string,</span><br><span class=\"line\">    <span class=\"comment\">// 数据在传入的 data 数组中的 index</span></span><br><span class=\"line\">    dataIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 传入的原始数据项</span></span><br><span class=\"line\">    data: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 传入的数据值。在多数系列下它和 data 相同。在一些系列下是 data 中的分量（如 map、radar 中）</span></span><br><span class=\"line\">    value: number|<span class=\"built_in\">Array</span>|<span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 坐标轴 encode 映射信息，</span></span><br><span class=\"line\">    <span class=\"comment\">// key 为坐标轴（如 'x' 'y' 'radius' 'angle' 等）</span></span><br><span class=\"line\">    <span class=\"comment\">// value 必然为数组，不会为 null/undefied，表示 dimension index 。</span></span><br><span class=\"line\">    <span class=\"comment\">// 其内容如：</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     x: [2] // dimension index 为 2 的数据映射到 x 轴</span></span><br><span class=\"line\">    <span class=\"comment\">//     y: [0] // dimension index 为 0 的数据映射到 y 轴</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    encode: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 维度名列表</span></span><br><span class=\"line\">    dimensionNames: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">String</span>&gt;,</span><br><span class=\"line\">    <span class=\"comment\">// 数据的维度 index，如 0 或 1 或 2 ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 仅在雷达图中使用。</span></span><br><span class=\"line\">    dimensionIndex: number,</span><br><span class=\"line\">    <span class=\"comment\">// 数据图形的颜色</span></span><br><span class=\"line\">    color: string,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"字符串模板不生效问题1\">字符串模板不生效问题1</h4><p>直接将formatter自定义函数和富文本标识配置在<code>series[0].label</code>下，结果以上配置都无效，正确方法是在<code>series[0].label.normal</code>下配置富文本标识声明，而formatter需要定义在数据集data的各个数据项中，<code>normal</code>表示常规效果，与之对应的<code>emphasis</code>是鼠标划过高亮效果。<br><img src=\"tree-4.png\" alt=\"tree-4\"></p><p>series-tree.label.rich支持的所有CSS属性：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  color , fontStyle , fontWeight , fontFamily , fontSize , align , verticalAlign , lineHeight , backgroundColor , borderColor , borderWidth , borderRadius , padding , shadowColor , shadowBlur , shadowOffsetX , shadowOffsetY , width , height , textBorderColor , textBorderWidth , textShadowColor , textShadowBlur , textShadowOffsetX , textShadowOffsetY</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>series-tree.data.label中配置label.formatter：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rawTreeData = &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'snapshotA'</span>,</span><br><span class=\"line\">          selected: <span class=\"literal\">false</span>, <span class=\"comment\">// 自定义选择控制属性selected</span></span><br><span class=\"line\">          collapsed: <span class=\"literal\">false</span>, <span class=\"comment\">// 覆盖组件自带的collapsed效果</span></span><br><span class=\"line\">          label: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// * 直接引用上层定义的formatter即可，复用函数对象</span></span><br><span class=\"line\">            formatter: <span class=\"keyword\">this</span>.echartsInitData.series[<span class=\"number\">0</span>].label.normal.formatter,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          children: [</span><br><span class=\"line\">            ...</span><br><span class=\"line\">          ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><img src=\"tree-5.png\" alt=\"tree-5\"></p><h3 id=\"问题II：tree图使用自定义图片加载显示不完全\">问题II：tree图使用自定义图片加载显示不完全</h3><hr><h4 id=\"解决方案1-无效-：使用对象深比较函数避免多次渲染\">解决方案1(无效)：使用对象深比较函数避免多次渲染</h4><blockquote><p>使用此方法在React生命周期componentDidUpdate里判断options是否发生改变，从而避免了echarts组件多次render的情况，但验证后发现避免了一些组件卡顿的情况，但也存在自定义tree 节点图片加载不完全的情况，此解决方案无效。</p></blockquote><ol><li>Js对象深比较函数deepComparison定义</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [deepComparison 深比较]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[any]&#125;</span> </span>data [any]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[Boolean]&#125;</span>      </span>[是否相同]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepComparison</span>(<span class=\"params\">data1, data2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">  <span class=\"comment\">// 获取变量类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getType = <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> d === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'null'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'date'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'regexp'</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// object / array //</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'object'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d !== d) <span class=\"keyword\">return</span> <span class=\"string\">'nan'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> d).toLowerCase();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 基本类型比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> is = <span class=\"function\">(<span class=\"params\">d1, d2, type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'nan'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'date'</span> || type === <span class=\"string\">'regexp'</span>) <span class=\"keyword\">return</span> d1.toString() === d2.toString();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (d1 === d2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 递归比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compare = <span class=\"function\">(<span class=\"params\">d1, d2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type1 = getType(d1);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type2 = getType(d2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 !== type2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys1 = <span class=\"built_in\">Object</span>.keys(d1).filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> hasOwnProperty.call(d1, k));</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys2 = <span class=\"built_in\">Object</span>.keys(d2).filter(<span class=\"function\"><span class=\"params\">k</span> =&gt;</span> hasOwnProperty.call(d2, k));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (keys1.length !== keys2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys1.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          !keys2.includes(keys1[i]) ||</span><br><span class=\"line\">          !compare(d1[keys1[i]], d2[keys1[i]])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> is(d1, d2, type1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> compare(data1, data2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>2.深度比较函数使用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidUpdate() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'update'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> rawTreeData = toJS(treeData);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!deepComparison(<span class=\"keyword\">this</span>.echartsTreeData, rawTreeData)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'change'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsTreeData = rawTreeData;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    optionData.series[<span class=\"number\">0</span>].data = [rawTreeData];</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(optionData);</span><br><span class=\"line\">    <span class=\"comment\">// this.echartsElement.clear();</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"解决方案2-无效-：使用base64字符串替换img-url\">解决方案2(无效)：使用base64字符串替换img url</h4><blockquote><p>由于方案1无效，判断可能是由于图片异步加载引起的渲染问题，对小图片尝试直接使用base64硬编码在代码里，结果发现仍然无效。</p></blockquote><p><img src=\"tree-6.png\" alt=\"tree-6\"></p><h4 id=\"解决方案3-有效-：禁用动画加载\">解决方案3(有效)：禁用动画加载</h4><blockquote><p>由解决方案2可知，问题原因排除img异步加载的问题，问题定位到echarts组件自身的渲bug，通过多次设置setOption方法的参数，发现设置动画取消可以避免由于echarts图自身的渲染过程引起的图片加载不全问题。</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chartOption = &#123;</span><br><span class=\"line\">  animation: <span class=\"literal\">true</span>, <span class=\"comment\">// 解决渲染不全的问题</span></span><br><span class=\"line\">  tooltip: &#123;</span><br><span class=\"line\">    trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">    triggerOn: <span class=\"string\">'mousemove'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"解决方案4-有效-：组件渲染完成后重新手动渲染\">解决方案4(有效)：组件渲染完成后重新手动渲染</h4><blockquote><p>echarts初始化后的组件可以挂载钩子函数和监听一些浏览器事件，其中有一个事件名为finished，表示echarts图表本次渲染完成。既然我们之前的最后一次渲染导致图片未完全加载，那么可以在最后这次渲染完成之后再读取echarts组件自带的options然后重新渲染一次，即可解决问题，需要注意的是，finished事件可能在短时间内被调用数次，在监听时注意使用函数防抖的思想让短时间内的多次finished事件回调只执行一次。</p></blockquote><ol><li>函数防抖声明<br>函数节流和函数防抖在浏览器渲染优化方面还是用得挺多：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;Function&#125;</span> </span>fn         [回调函数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Time]&#125;</span>   </span>delayTime  [延迟时间(ms)]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;Boolean&#125;</span>  </span>isImediate [是否需要立即调用]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span>   </span>args       [回调函数传入参数]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnDebounce</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fnObject = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">fn, delayTime, isImediate, args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置定时器方法</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> setTimer = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn(args);</span><br><span class=\"line\">        <span class=\"comment\">// 清除定时器</span></span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> (fnObject[fn]);</span><br><span class=\"line\">      &#125;, delayTime);</span><br><span class=\"line\"></span><br><span class=\"line\">      fnObject[fn] = &#123;</span><br><span class=\"line\">        delayTime,</span><br><span class=\"line\">        timer,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 立即调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!delayTime || isImediate) <span class=\"keyword\">return</span> fn(args);</span><br><span class=\"line\">    <span class=\"comment\">// 判断函数是否已经在调用中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fnObject[fn]) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">      setTimer(fn, delayTime, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      setTimer(fn, delayTime, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>finished事件监听和函数防抖的应用<br>其实在此基础上还能做的优化就是在组件第一次加载自定义symbol图片后就将<code>finished</code>事件监听取消掉，减少渲染次数。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FsPageSnapShotBody</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  echartsElement= <span class=\"literal\">null</span></span><br><span class=\"line\">  echartsTreeData = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化事件防抖</span></span><br><span class=\"line\">  fnDebounce = fnDebounce();</span><br><span class=\"line\"></span><br><span class=\"line\">  pendingEventsTrigger = <span class=\"function\">(<span class=\"params\">nodeName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; snapshot &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.fsSnapShot);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(snapshot.echartsInitData);</span><br><span class=\"line\">    <span class=\"comment\">// finished事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'finished'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 延迟时间设置为200ms</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fnDebounce(<span class=\"keyword\">this</span>.pendingEventsTrigger, <span class=\"number\">200</span>, <span class=\"literal\">false</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeCharts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    echarts.dispose(<span class=\"keyword\">this</span>.echartsElement);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"问题III：tree图自定义节点选中效果和组件自带渲染效果冲突\">问题III：tree图自定义节点选中效果和组件自带渲染效果冲突</h3><hr><p>节点选中效果原理是监听echarts的<code>dblclick</code>双击事件，双击后改变<code>options.series[0].data</code>数据项里的<code>selected</code>属性配置，然后label.formatter根据此属性能够应用富文本类名里声明的高亮或普通文本的类名。值得注意的是echarts渲染时自身已经对过长层级的tree数据做了渲染优化，导致过深层级的展开/折叠状态不被控制，每次重新渲染后会导致已经折叠的树层级展开或是已经展开的树层级折叠，非常影响用户操作，因此需要把树层级数据每一层的折叠纳入强制属性控制状态，即在<code>options.series[0].data</code>中额外声明<code>collapsed:[Boolean]</code>参数，同时禁用tree自带的折叠/展开控制。</p><h4 id=\"冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效\">冲突1：在设置了echarts渲染动画延迟更新的情况下节点选中效果无效</h4><p>如果直接通过dblclick双击事件触发函数设置某个节点选中状态的属性<code>selected:true</code>，那么表现为：<code>selected</code>状态不常驻，变成了类似<code>mouseover</code>的鼠标划过状态触发；</p><ol><li>动画延迟更新属性声明</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Tree的外层数据 */</span></span><br><span class=\"line\">echartsInitData= &#123;</span><br><span class=\"line\">    tooltip: &#123;</span><br><span class=\"line\">      trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">      triggerOn: <span class=\"string\">'mousemove'</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    series: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        &#123;...&#125;,</span><br><span class=\"line\">        leaves: &#123;...&#125;,</span><br><span class=\"line\">        expandAndCollapse: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        animationDuration: <span class=\"number\">100</span>,</span><br><span class=\"line\">        animationDelayUpdate: <span class=\"number\">300</span>, <span class=\"comment\">// 动画延迟更新</span></span><br><span class=\"line\">        animationDurationUpdate: <span class=\"number\">400</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>冲突效果表现</li></ol><p><img src=\"tree-bug1.gif\" alt=\"tree-bug1\"></p><h4 id=\"冲突2：鼠标的悬浮操作导致选中效果无效\">冲突2：鼠标的悬浮操作导致选中效果无效</h4><p>按照上述表现，我尝试在触发函数更新tree节点选中状态之前设置一个延迟，延迟时间大于tree组件的动画延迟更新设置时间(上面设置为了<code>300ms</code>)，结果发现：如果在双击tree节点的时候鼠标一直放在节点上的话，鼠标移开后，表现和上面一样，如果双击了tree节点之后马上把鼠标从该节点移开的话则选中状态正常(太不容易了！)，推测是我们触发echarts组件更新的时候，echarts自身的组件状态管理和我们自定义的组件更新函数(以上表现为设置tree节点数据的<code>selected</code>属性触发label.formatter的渲染效果变化)两者冲突。</p><ol><li>设置<code>selected</code>属性更改函数的延迟时间</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* React组件自定义方法-选中一个元素 */</span></span><br><span class=\"line\">onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = e.data;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selectedNodeName = name;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.snapshot.chooseSnapShot(name);</span><br><span class=\"line\">    &#125;, <span class=\"number\">400</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>冲突效果表现<br><img src=\"tree-bug2.gif\" alt=\"tree-bug2\"></li></ol><h4 id=\"解决方法\">解决方法</h4><p>方法同于上面提到的<code>finished事件监听和函数防抖的应用</code>，在echarts组件最终渲染完成后增加一次额外渲染解决问题，但是也仍然会有<code>selected</code>状态稍稍延迟更新和<code>selected</code>状态闪烁一次的问题，不妨碍使用，但是应该有更优的解决办法尚待实现。</p><ol><li>代码概览</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FsPageSnapShotBody</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  echartsElement= <span class=\"literal\">null</span></span><br><span class=\"line\">  echartsTreeData = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  selectedNodeName = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化事件防抖</span></span><br><span class=\"line\">  dblclickFnDebounce = fnDebounce();</span><br><span class=\"line\"></span><br><span class=\"line\">  pendingEventsTrigger = <span class=\"function\">(<span class=\"params\">nodeName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; snapshot &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.fsSnapShot);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.setOption(snapshot.echartsInitData);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'dblclick'</span>, <span class=\"keyword\">this</span>.onDoubleClickChart);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'click'</span>, <span class=\"keyword\">this</span>.onClickChart);</span><br><span class=\"line\">    <span class=\"comment\">// finished事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.on(<span class=\"string\">'finished'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.selectedNodeName) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 防抖延迟时间设置为200ms</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dblclickFnDebounce(<span class=\"keyword\">this</span>.pendingEventsTrigger, <span class=\"number\">200</span>, <span class=\"literal\">false</span>, <span class=\"keyword\">this</span>.selectedNodeName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    snapshot.getSnapShotRequest();</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  resizeCharts = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.echartsElement.resize();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    echarts.dispose(<span class=\"keyword\">this</span>.echartsElement);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeCharts);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onDoubleClickChart = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>效果演示<br><img src=\"tree-bug-fix.gif\" alt=\"tree-bug-fix\"></li></ol>"},{"title":"Ubuntu18踩坑记录","catalog":true,"toc_nav_num":true,"date":"2019-06-12T08:30:35.000Z","subtitle":"ubuntu18.04 linux","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2019-06-12T08:30:35.000Z","_content":"\n![welcome / home](Ubuntu18.04-1.jpg)\n\n#### 目录\n__________\n\n* Wine应用启动后出现WineSystemTray 托盘的问题\n* 中文环境下将Home目录下的文件夹切换为英文名\n* Ubuntu系发行版安装deepin wine QQ\n* 续：安装QQ/微信\n* Ubuntu 18.04开机启动特别慢的问题\n* 终端oh-my-zsh配置\n* 终端终结者Terminator配置\n* 禁用内核更新\n* 终端常用等宽字体\n* crossover18破解\n* vim插件配置\n* Ubuntu18.04 定制Mac主题\n* Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\n* Ubuntu18.04 关于定制plymouth主题来更换开机动画\n* Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\n* Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\n* Ubuntu18.04 解决一些软件依赖不满足问题的问题\n* Ubuntu18.04 安装cinnamon桌面启动器\n* Linux分区过小导致后期容量不足解决方法\n* Shadowsocks-Qt5安装的问题\n* 使用polipo开启终端代理(需要先开启shadowsocks代理)\n* 将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\n* 自定义shadowsocks服务开机自启动脚本\n* Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\n* Atom编辑器内存占用过大的问题\n* Grub2 主题安装\n* Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\n* Ubuntu18.04 WPS 提示字体缺失的解决方法\n* Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\n* Ubuntu18.04 更新Gnome版本\n* Win10 + Ubuntu18.04 双系统时间显示不对\n* Ubuntu18.04 安装系统时说明(双硬盘)\n* Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\n* Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\n* Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\n* Ubuntu18.04 一直提示 “检测到系统程序出现问题”\n* Ubuntu20.04 使用系统播放器打开视频提示“安装h.264编码软件”\n* Ubuntu18.04 Gnome-Shell 插件\n* Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\n* Ubuntu18.04 主题\n* chrome实用插件整理\n* 实用程序和命令\n* 实用网站推荐\n\n#### Wine应用启动后出现WineSystemTray托盘的问题\n____________________________________________\n\n![wine_tray.png](Ubuntu18.04-2.png)\n\n![tray.png](Ubuntu18.04-3.png)\n1. 操作系统Linux Mint18.3\n右键点击面板(状态栏)，选择 - 向面板添加小程序，选择小程序 - 系统托盘，点击+号添加，之后Wine安装的应用和其它应用的图标就被系统托盘管理了。\n\n2. 操作系统Ubuntu 18.04\n安装gnome-shell插件 [TopIcons](https://extensions.gnome.org/extension/495/topicons/), 要想从浏览器上安装这个TopIcons需要先安装浏览器gnome交互插件chrome-gnome-shell (`sudo apt install chrome-gnome-shell` )，使用deepin QQ的时候可能需要重新启动TopIcons才能显示顶部QQ图标，如果遇到图标无故隐藏的问题那么可以再安装插件[Dash to Panel](https://extensions.gnome.org/extension/1160/dash-to-panel/)解决。\n\n#### 中文环境下将Home目录下的文件夹切换为英文名\n-------------------------------------------------------------------------\n\n1.  设置英文语言环境\n```sh\n$: export LANG=en_US(恢复-> zh_CN)\n```\n2. 更新目录\n```sh\n$: xdg-user-dirs-gtk-update\n```\n3. 弹出提示框点击 [确认]\n4. 重启后会再次弹出提示框是否将英文文件夹改回中文，选择 [不再提示] 并 [取消] 修改\n\n#### Ubuntu系发行版安装deepin wine QQ\n__________________________________\n\n1. 安装deepin-wine环境：上[https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu](https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu)页面下载zip包（或用git方式克隆），也可以[百度网盘](https://pan.baidu.com/s/120C5aHuqtyxQyn_fGTxHKg)下载，解压到本地文件夹，在文件夹中打开终端，输入`sudo sh ./install.sh`一键安装，如果你安装了这些依赖，在第二步的时候仍然报依赖错误，那就手动解压deb包，把那些依赖声明删除就行了(解压deb的方法下文中有提到)。\n\n2. 安装deepin.com应用容器：在[http://mirrors.aliyun.com/deepin/pool/non-free/d/](http://mirrors.aliyun.com/deepin/pool/non-free/d/)中下载想要的容器，点击deb安装即可，以下为推荐容器:\n*   QQ：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/)\n*   TIM：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/)\n*   QQ轻聊版：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/)\n*   微信：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/)\n*   Foxmail：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/)\n*   百度网盘：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/)\n*  360压缩：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/\n*  迅雷急速版:  https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg\n* Ubuntu系发行版包括Ubuntu、LinuxMint、ZorinOS等。\n\n#### 续：安装QQ/微信\n______________________\n\n1.linux上的微信大部分都是网页版微信封装的: [electronic-wechat](https://github.com/geeeeeeeeek/electronic-wechat)、[weweChat](https://github.com/trazyn/weweChat)，网页版功能简单，每次登录都要扫码。而且现在腾讯好像开始禁用了微信网页版的登陆，如果发现不能登录网页版就只能使用crossover来安装windows版的微信。\n\n2.￥140可以买个CrossOver18正版，一次激活，永久使用，然后愉快地安装QQ8.9，喜欢TIM的也能用TIM， 不过目前这个基于crossover的QQ有些bug，也不能记住密码。使用crossover18安装微信，安装包直接下载windows版本的就行，然后使用crossover创建windowsXP 64位容器，在容器中安装微信即可，不过可能安装时会出现`\"WeChatWin.dll 缺失问题\"`报错信息，需要执行下面命令安装额外的环境：\n```sh\n$: apt-get install libldap-2.4-2:i386\n```\n\n3.使用docker安装[Tim](https://hub.docker.com/r/bestwu/qq) 和 [wechat](https://hub.docker.com/r/bestwu/wechat)，[docker环境安装教程](https://www.runoob.com/docker/ubuntu-docker-install.html)\n\n4.wine环境下(crossover/deepin)安装好微信后如果发现不能输入文字(其实可以输入和发送，只是文字透明的)，可以使用这个文件[riched20.dll](https://pan.baidu.com/s/1-ScZvkmR9oZPdiFurdKQdA)(提取密码：rofj)替换掉微信所在容器下的C盘的`/windows/system32/riched20.dll`，容器路径一般在：`~/.cxoffice/[你的容器名]/drive_c/`。\n\n5.wine环境下(crossover/deepin)如果运行微信时发现界面有一个黑框不能关闭，只需要在聊天输入框中键入中文“不”然后再删除即可让黑框消失(原因:微信会根据你输入的字作为关键字在你现有表情中找符合的表情并显示出来提示你可用,但并没有很好的兼容这个功能变成一个黑框了，所以手动消除黑框的办法只有打关键字然后删除)。\n\n6.wine环境下(crossover/deepin)如果运行微信的时候不能发送图片，尝试安装 `sudo apt install libjpeg62:i386`，临时解决办法是把图片文件拖动到`收藏`，然后从收藏转发即可。\n\n7.wine环境下(crossover/deepin)如果运行QQ发现收到的图片一直加载不出来(刚登录开始可以，过一会就不行了)，那么可以在QQ登录界面设置一下网络代理(http/socks)，注意本地代理情况下代理地址不能使用localhost/127.0.0.1此类的IP，使用0.0.0.0是可以的。\n\n8.wine环境下如果发现微信/企业微信窗口边缘有阴影穿透情况时，点击任意一个联系人聊天界面，将窗口最大化后再恢复正常状态，窗口异常边框阴影便会消失。\n\n#### Ubuntu 18.04开机启动特别慢的问题\n_________________________________\n\n=> 禁用不必要的开机服务：\n```sh\n# 列出程序开机占用时间排行\nsystemd-analyze blame\n# 禁用plymouth\nsudo systemctl mask plymouth-start.service\nsudo systemctl mask plymouth-read-write.service\n```\n#### 终端oh-my-zsh配置\n_________________________________\n\n1. 主题\n* gnzh(已使用))\n* ys \n* avit\n* af-magic\n2. 插件\n* git => 自带git状态插件\n* svn => svn状态插件\n* colored-man-pages => man帮助信息高亮\n* zsh-syntax-highlighting => 命令高亮和错误提示\n* z => 自动记录路径快捷跳转\n* zsh-autosuggestions => 根据输入记录自动建议可选输入命令\n\n#### 终端终结者Terminator配置\n---------------------------\n\n特性：浅色调、字体舒适、无滚动条、自定义快捷键和配色、自动设置窗口布局\n\n注意：可以配合`设置->设备->键盘->添加自定义快捷键`这样自定义快捷键来启动终端，\n比如设置`Ctrl+Alt+T`为`terminator --geometry=93x32+450+300`，geometry为窗口的布局配置。\n\n覆盖文件`~/.config/terminator/config`内容：\n\n```bash\n  [global_config]\n  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler\n  suppress_multiple_term_dialog = True\n  title_hide_sizetext = True\n[keybindings]\n  prev_tab = <Alt>1\n  reset_clear = <Primary><Shift>g\n  clear = <Primary>l\n  switch_to_tab_1 = <Alt>1\n  switch_to_tab_2 = <Alt>2\n  switch_to_tab_3 = <Alt>3\n  switch_to_tab_4 = <Alt>4\n  switch_to_tab_5 = <Alt>5\n  toggle_scrollbar = None\n  toggle_zoom = <Primary><Shift>x\n[layouts]\n  [[default]]\n    [[[child1]]]\n      parent = window0\n      profile = default\n      type = Terminal\n    [[[window0]]]\n      parent = \"\"\n      size = 925, 570\n      type = Window\n[plugins]\n  [[CustomCommandsMenu]]\n    [[[清屏]]]\n      command = clear\n      enabled = True\n      name = 清屏\n      position = 0\n[profiles]\n  [[default]]\n    allow_bold = False\n    background_color = \"#fbfbfb\"\n    background_darkness = 0.93\n    background_type = transparent\n    copy_on_selection = True\n    cursor_color = \"#aaaaaa\"\n    cursor_shape = ibeam\n    font = Ubuntu Light 12\n    foreground_color = \"#49494a\"\n    palette = \"#2e3436:#ee6a6a:#38690a:#b3adb0:#3465a4:#75507b:#06989a:#d3d7cf:#979b93:#fe5f5f:#7fd42c:#b7afb1:#729fcf:#ad7fa8:#34e2e2:#eeeeec\"\n    scroll_on_keystroke = False\n    scrollbar_position = hidden\n    show_titlebar = False\n```\n\n#### 禁用内核更新\n------------------------\n\n```sh\n# 查看已安装内核\n$: dpkg --get-selections |grep linux-image\n# 查看正在使用的内核\n$: uname -a\n# 删除旧内核\n$: sudo apt-get remove\n$: linux-image-x.xx.x-xx-generic\n$: sudo apt-get remove  \n$: linux-image-extra-x.xx.x-xx-generic  \n# 或用这个命令移除\n$: sudo dpkg --purge linux-image-x.x.x-xx-generic\n# 禁止更新内核，需时间来验证\n$: sudo apt-mark hold linux-image-x.xx.x-xx-generic\n$: sudo apt-mark hold linux-image-extra-x.xx.x-xx-generic\n# 如果需要恢复原来的设定的话即允许更新内核，执行如下命令即可：\n$: sudo apt-mark unhold linux-image-x.xx.x-xx-generic\n$: sudo apt-mark unhold linux-image-extra-x.xx.x-xx-generic\n```\n\n#### 终端常用等宽字体\n-----------------------------\n* AR PL UKai CN 12\n* Bitstream Vera Sans Mono 10\n* Courier 10 Pitch 11\n* DejaVu Sans Mono 10\n* FreeMono 11\n* Nimbus Mono L 12\n* TlwgMono 11 \n\n#### crossover18破解\n----------------------------\n\n下载 [CrossoverPatch](https://pan.baidu.com/s/1BnT-cAKf-SBp-6J4CQoo-g ) `密码: ffp0`，解压后替换文件：\n```sh\n#  备份原文件\n$: cp ~/cxoffice/lib/wine/winewrapper.exe.so ~/cxoffice/lib/wine/winewrapper.exe.so-bak\n# 替换文件\n$: cp CrossoverPatch/winewrapper.exe.so ~/cxoffice/lib/wine\n```\n\n#### vim插件配置\n______________\n\n1. [Vundle](https://github.com/VundleVim/Vundle.vim) => 插件管理器，编辑.vimrc，然后执行命令`vim +PluginInstall`即可安装  \n2. [vim-airline](https://github.com/vim-airline/vim-airline) => 底部状态栏  \n3. [其他配置](https://juejin.im/post/5a38c37f6fb9a0450909a151)\n\n#### Ubuntu18.04 定制Mac主题\n__________________________\n\n![overview.png](Ubuntu18.04-5.png)\n\n![desktop.png](Ubuntu18.04-6.png)\n\n\n1. 安装gnome-tweak-tool 和 chrome-gnome-shell 插件 (`sudo aptitude install [name]`)\n2. 安装GTK3主题 => [X-Arc-Collection](https://www.gnome-look.org/p/1167049/)\n3. 使用tweak载入应用程序主题 => tweak -- 外观 -- 应用程序 -- 选择X-Arc-Collection\n4. 安装gnome-shell 主题 => [macOS High Sierra](https://www.gnome-look.org/p/1167049/)\n5. 安装gnome-shell 插件 => [User Themes](https://extensions.gnome.org/extension/19/user-themes/) ( 之后重启Gnome => [Alt + F2] & [输入 r] & [点击 Enter] )\n6. 使用tweak载入shell主题 => tweak -- 外观 -- shell -- 选择Sierra shell主题\n7.  下载Mac图标主题 [la-capitaine-icon-theme](https://github.com/keeferrourke/la-capitaine-icon-theme/releases) 或 [McMojave-circle](https://www.pling.com/p/1305429/)\n8. 图标文件夹移动到 ~/.icons目录下(没有则新建目录)\n9. 使用tweak载入icon主题 => tweak -- 外观 -- 图标 -- 选择对应的图标主题\n10. 安装gnome-shell插件 => Dash to dock (将原生dock转变为可定制的浮动dock)\n11. 定制firefox主题 => [Majave-gtk-theme](https://github.com/vinceliuice/Mojave-gtk-theme)\n\n#### Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\n--------------------------------------------------------------------------------------------\n![lockscreen.png](Ubuntu18.04-7.png)\n\n![loginscreen.png](Ubuntu18.04-8.png)\n\n1. 安装脚本 => [github / nojsja / login-manager-config-ubuntu](https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/login-manager-config-ubuntu)  \n2. 说明=> 脚本通过更改/usr/share/gnome-shell/theme/ubuntu.css文件中声明的样式来修改系统登录页面按钮布局和背景图片的地址，使用ImageMagick包的`convert -blur`命令制作了毛玻璃效果的登录背景图片，最后还生成了一个SetAsWallpaper脚本，可以在文件夹中的图片文件上右键点击选择运行这个脚本(它会自动把目标图片更改成桌面壁纸和毛玻璃效果化的登录背景图)，最后锁屏壁纸需要用户手动安装`gnome-tweak-tool`进行更改。  \n3. 之前我想通过更改`/usr/share/gnome-shell/theme/gdm3.css`文件来修改样式，可是发现ubuntu18.04下总会有这样那样的问题。\n4. 注意=> 不要贸然尝试更改系统主题的CSS样式文件，如果修改的文件有语法错误或是其它原因，很可能会造成系统开机后无法登入图形界面(出现这种情况可以插入U盘登录PE系统然后挂载原系统的硬盘，最后将错误文件改回即可)。\n\n#### Ubuntu18.04 关于定制plymouth主题来更换开机动画\n-----------------------------------------------------------------------------\n\n>其实我不建议去改开机动画，一个原因是ubuntu自己的开机动画就挺美观简洁的，第二个原因是这个东西如果改出问题了卡在开机画面到时候恢复起来比较麻烦，如果执意想去折腾的话，可以去[gnome-look](https://www.gnome-look.org/browse/cat/108/)看看，这里提供一个苹果主题[darwin](https://pan.baidu.com/s/1qv3GZ_BE-jj2HIpiI2X7yQ)，密码: `rc6u`。\n1. 解压下载的plymouth主题到 `/usr/share/plymouth/themes`\n\n2. 执行安装\n```sh\n$: sudo update-alternatives --install /usr/share/plymouth/themes/ default.plymouth default.plymouth /usr/share/plymouth/themes/[THEME]/[THEME].plymouth 100\n```\n\n3. 更新配置，需要手动选择plymouth编号\n```sh\n$: sudo update-alternatives --config default.plymouth\n$: sudo update-initramfs -u\n```\n\n4. 手动更改错误路径参数\n```sh\n$: sudo gedit /usr/share/plymouth/themes/default.plymouth\n```\n替换`ImageDir`和`ScriptFile`为正确的plymouth文件存放路径，替换后：\n```sh\nImageDir=/usr/share/plymouth/themes/[THEME]\nScriptFile=/usr/share/plymouth/themes/[THEME]/[THEME].script\n```\n\n\n#### Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\n---------------------------------------------------------------------------------------------\n\n>解决方法是去tweak设置里关闭[Dash to dock]的开关，别担心，关闭后，[Dash to dock]仍然正常工作，但是再也不会同时出现两个dock栏的尴尬情况了。  \n\n![dock-noise.png](Ubuntu18.04-9.png)\n\n![dock-single.png](Ubuntu18.04-10.png)\n\n\n\n#### Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\n________________________________________________________\n\n![dock-tweak.png](Ubuntu18.04-11.png)\n\n1. 打开 软件与更新\n2. 选择那个源点击编辑\n3. 更改 发行版 信息 (请在网页上查看这个源的仓库文件内的dists目录下有哪些发行版)\n\n#### Ubuntu18.04 解决一些软件依赖不满足问题的问题\n____________________________________________\n\n=> 以Ubuntu18.04安装16.04版本网易云音乐为例\n```ssh\n# gdebi安装包\n$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb\n$: Dependency is not satisfiable: libqt5libqgtk2\n# Ubuntu18.04报出依赖问题，原因是libqt5libqgtk2已经被新的库qt5-style-plugins替代，\n# 软件源里找不到这个库，当然我们也能手动安装libqt5libqgtk2，但是很可能会就此引出新的依赖问题\n```\n=> 方法：解压安装包修改依赖项并重新打包\n=> 步骤：\n1. deb包同级目录下创建文件夹\n```ssh\n$: mkdir netease-cloud-music\n```\n2. 解压安装包到这个文件夹中\n```ssh\n$: dpkg -X netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb netease-cloud-music\n```\n3. 解压控制信息\n ```ssh\n$: dpkg -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb neteas-cloud-music/DEBIAN/\n```\n4. 修改依赖文件(把libqt5libqgtk2修改为qt5-style-plugins)\n```ssh\n# vim编辑文件\n$: vim neteas-cloud-music/DEBIAN/control\n# 使用vim正则对libqt5libqgtk2进行搜索替换\n:1,$s/libqt5libqgtk2/qt5-style-plugins/g\n# 或是手动查找Depends那一行中声明的libqt5libqgtk2进行替换替换即可\n```\n5. 生成新的安装包\n```ssh\n$: dpkg-deb -b neteas-cloud-music\n$: mv neteas-cloud-music.deb netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n```\n6. 安装\n```ssh\n# 使用gdebi或dpkg进行安装即可\n$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n$: sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n```\n\n#### Ubuntu18.04 安装Cinnamon桌面启动器\n-------------------------------------\n\n>cinnamon桌面也是基于gtk的，所以gonome下的一些gtk主题和icon主题也能直接使用，切换桌面后可以在设置界面直接切换主题。deepin桌面也能安装，美观度很好，但是卡死问题比较严重，不太推荐，Cinnamon相较而言安装后bug较少，可以正常使用。\n\n已知问题：\n* Cinnamon桌面通知API可能有更改，常见的wine/crossover应用程序不能正常调用通知接口，QQ/Wehcat无法在通知栏提示消息，不太方便\n* 输入法ibus不支持，无法正常使用，可以使用fcitx拼音和基于fcitx框架的sogou拼音\n* 默认没有集成蓝牙管理器，需要安装`blueman`进行蓝牙管理\n* 锁屏界面可能会非常卡顿\n* Cinnamon面板(等同gnome任务栏)默认安装了`系统托盘`，可以解决wine应用程序托盘菜单变成小窗口的bug，在面板通知区域正常显示\n* Cinnamon桌面动画性能也很低效，建议强制使用独立显卡\n\n安装步骤：\n1. 添加仓库Key\n```bash\n$: sudo add-apt-repository ppa:embrosyn/cinnamon  \n$: sudo apt update && sudo apt install cinnamon\n```\n2. 安装完成了注销后可以在登录界面点击设置按钮选择进入某个桌面环境\n3. 卸载cinnamon\n```bash\n$: sudo apt-get install ppa-purge\n$: sudo ppa-purge ppa:embrosyn/cinnamon\n```\n\n\n#### Linux分区过小导致后期容量不足解决方法\n------------------------------------\n\n=> 之前安装ubuntu 18.04的时候/var 分区只给了 1.5G，结果现在不够用了\n\n* 方法1\n```sh\n$: sudo apt-get clean\n$: sudo apt-get autoremove\n```\n如果仍然空间不足，使用方法2。\n* 方法2\n建立目录软链接解决(软链接和硬链接了解一下)：\n```sh\n# 以/var目录为例 将占用过大的文件夹移出\n$: mv /var/lib /opt\n# 建立opt下的lib内目录的软链接到var目录\n$: sudo ln -s /opt/lib /var\n```\n* 方法3\n如果/var没有单独分区，则系统默认共享使用/home目录，若此时提示/var空间不足，则说明/home空间不足，这种情况，建议重新安装系统，重新规划分区结构。一般来说，/var目录2G-4G为好，或者不分区，共享/home。\n\n#### Shadowsocks-Qt5安装的问题\n________________________\n\n> shadowsocks的GUI版本，用Qt写的，还行，不过我喜欢用sslocal命令脚本来连接服务器，开机自启动，很方便。顺带写个安装流程，不过会遇到我上面提到的 __软件源提示没有Release文件的问题__，可以通过上面的方法解决，这里需要将shadowdocks-Qt5发行版信息更改为`artful`，改为其它发行版可能会遇到依赖问题，遇到依赖问题多尝试几个，还有两行配置文件都要改额。  \n\n\\> sudo add-apt-repository ppa:hzwhuang/ss-qt5  \n\\> sudo apt update  \n\\> sudo apt-get install shadowsocks-qt5  \n\n#### 使用polipo开启终端代理(需要先开启shadowsocks代理)\n________________________________________________\n\n* 安装脚本(适合于bash和zsh终端) => [github / nojsja / polipo-install-config.sh\"](https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/shadowsocks-terminal)\n* 使用方式  \n\\> 说明：' hp ' == ' http_proxy=http://localhost:8123 ' for any command  \n\\> 说明：' gp ' == 'http.proxy=localhost:8123' for git proxy config  \n\\> 使用1：`hp curl ip.gs`\n\\> 使用2：`git clone https://android.googlesource.com/tools/repo --config $gp`\n* 如果polipo启动报错的话(通过`systemctl status polipo`查看)，可能是你的垃圾清理软件删除了polipo的日志文件夹，你可以手动更改polipo配置文件(`/etc/polipo/config`)禁用日至记录功能\n\n#### 将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\n_______________________________________________________\n\n>很多软件只有解压版，虽然可以解压后发送快捷方式到桌面，但是没有图标，应用列表也看不了。\n\n=> 安装脚本(测试环境ubuntu18.04) => [github / nojsja / makeIconLink](https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/application)\n=> 使用方式\n* 安装之前：请先将需要作为图标的icon图片(比例1:1比较适合，分辨率最好大于64px % 64px)放入目标文件夹内\n* 查看说明：\n```sh\n$: bash makeIconLink --help\n```\n* 安装指令：\n```sh\n$: bash makeIconLink --dir /path/to/[exec-file] --target [exec-file-name] --icon [icon-file-name]\n```\n* 卸载指令：\n```sh\n$: bash makeIconLink --uninstall [exec-file-name]\n```\n\n#### 自定义shadowsocks服务开机自启动脚本\n-------------------------------------------------------------\n\n> 使用systemd来管理shadowsocks服务，开机自启动，不用打开shadowsocks-qt5软件，FQ了无痕 ~\n\n=> 我的服务脚本：[startup.sh](https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/startup.sh)、[shadowsocks](https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/shadowsocks)  \n=> 步骤：\n\n* 编写shadowsocks service脚本文件，比如shadow.service\n\n```sh\n[Unit]\n# 描述\nDescription=Shadowsocks Service\n\n[Service]\nType=oneshot\n# 服务 start/stop 执行脚本(具体执行路径根据自己的目录更改)\nExecStart=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh start\nExecStop=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh stop\nRemainAfterExit=yes\n\n[Install]\n# 一些简单的依赖信息\nWantedBy=multi-user.target\n```\n\n* 将服务配置文件放到`/etc/systemd/system`下  \n\\> sudo cp shadow.service /etc/systemd/system\n* 设置服务自启动  \n\\> systemctl enable shadow\n* 服务开启和关闭  \n\\> systemctl start shadow  \n\\> systemctl stop shadow\n\n#### Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\n________________________\n\n=> 先来一个shadowsocks全局pac代理的步骤：\n```sh\n# pip需要先安装\n$: sudo apt-get install python-pip python-dev build-essential\n$: sudo pip install --upgrade pip\n$: sudo pip install --upgrade virtualenv\n# 安装pac自动生成程序\n$: sudo pip install genpac\n# 生成pac文件\n$: mkdir ~/shadowsocks\n$: cd shadowsocks\n# proxy配置中的地址和端口具体要看你的shadowsocks连接配置\n$: genpac --proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" -o autoproxy.pac --gfwlist-url=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"\n```\n以上操作会在~/shadowsocks目录下生成autoproxy.pac配置文件，到系统设置 -> 网络 -> 网络代理 -> 自动 -> 填入file:///path/to/autoproxy.pac(上面我们生成的pac文件路径)，如果要新增被代理网站的话就自己编辑pac文件，在里面的域名列表里面再添加新的域名就好了。\n=> 再写一个脚本[genpac-command](https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/shadowsocks/genpac)，可以用来添加用户过滤规则(user-rules.txt) 和在线更新autoproxy.pac代理文件\n```sh\n# # 在脚本目录下执行\n# 显示帮助信息\n$: bash genpac-command --help\n# 在线更新\n$: bash genpac-command --update-online\n# 从本地user-rules.txt文件读取更新\n$: bash genpac-command --update-local\n# 添加自定义规则\n$: bash genpac-command --add-rules opendesktop.org\n# 添加多个自定义规则\n$: bash genpac-command --add-rules opendesktop.org atom.io\n# 删除自定义规则\n$: bash genpac-command --del-rules opendesktop.org\n# 删除多个自定义规则\n$: bash genpac-command --del-rules opendesktop.org atom.io\n```\n=> __不过我遇到了代理pac文件配置好后，firefox和google浏览器仍然不能FQ的情况，仔细排查原因，我发现因为之前我不是用的pac全局代理，是通过浏览器的SwitchOmega插件来手动代理的，这个插件会接管浏览器的网络代理权限，我们需要到浏览器设置里面把网络代理设置为系统代理，以火狐浏览器为例：__\n\n#### Atom编辑器内存占用过大的问题\n______________________________\n\n>Atom、Vscode、Sublime、Bracks都用过，Atom用着最爽，可定制化程度最高。但是有时候用着Atom电脑呼呼作响，查看系统占用，Atom内存占用达到过4、5个G，我的天！其实Atom出现内存泄漏的问题都不是Atom本身的问题，一定是你安装的哪个插件导致了内存泄漏，查看占用信息后定位到atom的插件，然后把它禁用就可以了，比如之前导致我出现这个问题的插件就是：ide-typescript，禁用之后现在基本一个Atom进程只占用200~400Mb左右，取决于你安装的其它插件。还有Atom要经常手动更新啊，仓库里面更新不了的，直接去Atom git仓库下载release正式版本，基本上一个大版本就要更新一次。\n\n#### Grub2 主题安装\n_________________\n\n![source.png](Ubuntu18.04-12.png)\n>Grub2就是引导操作系统启动的东西，开机的时候如果是多系统，就会显示多系统的启动菜单，如图，这个启动菜单可以自定义主题。\n\n1. 解压下载的主题文件 => [Vimix](https://pan.baidu.com/s/1ioMub2JmHlIzHJbS2_2gRQ)，得到Vimix文件夹(这里提供我用的一个主题，也可以自已去下载其它主题)\n2. 在/boot/grub里创建GRUB2主题目录themes\n\\> sudo mkdir -p /boot/grub/themes\n3. 将下载的Vimix文件夹整体复制到/boot/grub/themes文件夹下\n\\> sudo cp -r Vimix /boot/grub/themes\n4. 修改/etc/default/grub配置文件\n\\> sudo gedit /etc/default/grub\n在文件最后添加：GRUB_THEME=\"/boot/grub/themes/Vimix/theme.txt\" 并保存\n5. 更新GRUB\n\\> sudo update-grub\n6. 重启即生效(如果重启卡住请强制关机后再启动)\n\n#### Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\n_________________________________________________________\n\n![firefox_proxy.png](Ubuntu18.04-13.png)\n\n1. [sourceforge](http://sourceforge.net/projects/corefonts/files/the%20fonts/final/)下载如图所示11个exe文件并放入一个文件夹，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer\n2. 运行字体配置程序\n\\> sudo dpkg-reconfigure ttf-mscorefonts-installer\n3. 在配置窗口中输入刚才保存exe的路径确定即可，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer\n\n#### Ubuntu18.04 WPS 提示字体缺失的解决方法\n---------------------------------------\n\n下载缺失的字体文件[fonts](https://pan.baidu.com/s/10MushHhTXwfRIFkKGmwD7Q) (密码: 4jpo)，然后复制到Linux系统中的/usr/share/fonts文件夹中，再使用系统命令更新字体设置：\n```sh\n# 生成字体的索引信息\n$: sudo mkfontscale\n$: sudo mkfontdir\n# 更新字体缓存\n$: sudo fc-cache\n```\n\n#### Ubuntu18.04 WPS 提示字体缺失的解决方法\n---------------------------------------\n\n```sh\n# 安装对应显卡驱动的32bit版本\n$: sudo apt-get install libnvidia-gl-440:i386\n```\n\n#### Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\n------------------------------------------------------\n\n* 安装`xfce4-clipman`，每次使用深度截图时保证它开启\n```sh\n$: sudo apt install xfce4-clipman\n```\n* 也可以使用更高级的截图编辑管理软件`shutter`替代\n\n#### Ubuntu18.04 更新Gnome版本\n---------------------------------------\n\n```sh\n# Upgrade\n#If you were using the gnome3-team/gnome3-staging PPA, run the following before upgrading:\n$: sudo ppa-purge ppa:gnome3-team/gnome3-staging\n$: sudo ppa-purge ppa:gnome3-team/gnome3\n$: sudo apt install ubuntu-gnome-desktop^\n# The included GUI update manager will offer you the latest release of Ubuntu GNOME. Access this via the terminal:\n$: update-manager -c\n# Alternatively, run the following command:\n$: sudo do-release-upgrade\n```\n\n#### Win10 + Ubuntu18.04 双系统时间显示不对\n______________________________________\n\n>Ubuntu和Windows默认的时间管理方式不同，所以双系统发生时间错乱是正常的。Ubuntu默认时间是把BIOS时间当成GMT+0时间，也就是世界标准时，而我国在东八区(GMT+8)，所以如果你的Ubuntu位置是中国的话你系统显示的时间就是BIOS时间+8小时。假如现在是早上8点，那么你Ubuntu会显示8点，这时BIOS中的时间是0点。而当你切换到Windows系统时就会发生时间错乱，因为Windows会认为BIOS时间就是你的本地时间，结果就是Windows显示时间为0点……而假如你在Windows下同步时间，恢复显示为8点，这时BIOS时间也会被Windows改写成8点，再次进入Ubuntu时显示时间又变成了8+8=16点。\n\n1. 先在Ubuntu下更新一下时间\n\\> sudo apt-get install ntpdate\n\\> sudo ntpdate time.windows.com\n2. 将时间更新到硬件上\n\\> sudo hwclock --localtime --systohc\n3. 关闭linux重新进入windows系统，发现时间正常了\n\n#### Ubuntu18.04 安装系统时说明(双硬盘)\n______________________________________________\n\n> 主要分为 [ _GPT磁盘分区+UEFI引导方案_ ] 和 [ _传统MBR磁盘分区 + LEGANCY引导方案_ ]\n1. 方案一(兼容方案 gpt+uefi / mbr+legancy)\n使用UEFI模式安装Ubuntu18.04时可以选择用 兼容bios启动方式 来安装系统(同时兼容传统启动方式和UEFI启动方式)，即不分配\"/boot \"分区，分配一个大小为1GB左右的\"保留bios启动区域\"(UEFI模式会自动挂载/boot和/boot/efi)，其它分区至少还需要一个根分区\"/\"，8G内存的情况下最好还是分配8G的swap交换分区，另外除了\"保留bios启动区域\"为主分区，其它分区均为逻辑分区，最后一步很重要 -- 格式化每个分区，要不然安装很可能会出错！[参考](https://blog.csdn.net/jesse_mx/article/details/61425361\n)\n2. 方案二(gpt+uefi 已使用方案)\n创建\"efi系统分区\"，同时不需要划分\"/boot\"分区(boot引导是grub由引导的，而efi显然是UEFI引导的)，其余至少还需要划分\"/\"根分区，除了根分区所有分区都为逻辑分区，最后选择\"安装启动引导器的设备\"为刚才创建的\"efit系统分区\"。\n3. 方案三(传统mbr+legancy方案)\n传统的legancy + mbr的安装，至少划分\"/boot\"分区(主分区) 和 \"/\"根分区，其余的分区按需划分，最后选择\"安装启动引导器的设备\"为创建的\"/boot\"挂载点。\n\n#### Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\n_________________________________________________\n\n* 使用root权限命令行后台启动并且屏蔽输出\n\\> sudo netease-cloud-music > /dev/null 2>&1  &\n* 规避session-manager引起的bug\n\\> alias netease='unset SESSION_MANAGER && netease-cloud-music'\n\\> netease > /dev/null &\n* 别用那个鸡肋的客户端了，有bug也不更新，上这个酷酷的第三方客户端[ieaseMusic](https://github.com/trazyn/ieaseMusic)\n* 这里还有个别人做的针对ubuntu18.04的[重新构建版本](https://github.com/innoob/netease-cloud-music)，可以正常使用，也没有重复登录的bug\n\n\n#### Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\n______________________________________________\n>原因：原来的ume-ui-gothic.ttf不支持很多简体中文字符  \n\n使用其它字体文件替换到目录 /opt/cxoffice/share/wine/fonts 下的[ume-ui-gothic.ttf](https://pan.baidu.com/s/13CDBKrvTAJOhrbuyLw96jA)字体文件 (同名)，记得将下好的文件重命名为ume-ui-gothic.ttf。\n\n#### Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\n_______________________________________________________\n=> 错误信息：`Error: Requiring Clutter, version none: Typelib file for namespace 'Clutter' (any version) not found ...`  \n=> 原因分析：该插件需要的依赖Clutter尚未安装\n=> 解决方法：\n```sh\n# 安装依赖\n$: sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0\n```\n\n#### Ubuntu18.04 一直提示 “检测到系统程序出现问题”\n---------------------------------------\nubuntu18.04已经移除了gksu软件，所以使用替代命令\n1. 添加alias命令\n```bash\n$: alias gksu='pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'\n```\n2. 编辑错误报告相关设置  \n```bash\n$: gksu gedit /etc/default/apport\n# 把`enable = 1`改为`enable = 0`\n```\n\n#### Ubuntu20.04 使用系统播放器打开视频提示“安装h.264编码软件”\n----------------------------------------------------\n```bash\n$: sudo apt install libdvdnav4 libdvd-pkg gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly libdvd-pkg\n$: sudo apt install ubuntu-restricted-extras\n```\n\n#### Ubuntu18.04 Gnome-Shell 插件\n______________________________________________\n\n* [CoverFlow Alt-Tab](https://extensions.gnome.org/extension/97/coverflow-alt-tab/) => 窗口Tab切换预览(★★★★☆)\n* [User Themes(必要)](https://extensions.gnome.org/extension/19/user-themes/) => 用户主题安装(★★★★★)\n* [Dash To Dock](https://extensions.gnome.org/extension/307/dash-to-dock/) => dock栏(★★★★★)\n* [Dash To Panel](https://extensions.gnome.org/extension/1160/dash-to-panel/) => 将dock和顶栏显示在一起(★★★★★)\n* [NoAnnoyance](https://extensions.gnome.org/extension/1236/noannoyance/) => 禁用多余的pop提示信息，直接提升活动窗口(★★★★★)\n* [Autohide Battery](https://extensions.gnome.org/extension/595/autohide-battery/) => 电池充满并连接电源时自动隐藏电池按钮(★★★★★)\n* [Places Status Indicator](https://extensions.gnome.org/extension/8/places-status-indicator/) => 顶部任务栏显示磁盘和卷的快捷入口(★★★★★)\n* [Removable Drive Menu](https://extensions.gnome.org/extension/7/removable-drive-menu/) => 顶部任务栏显示可移除的已挂载设备(★★★★★)\n* [Suspend Button](https://extensions.gnome.org/extension/826/suspend-button/) => 顶部菜单栏显示休眠按钮(★★★★★)\n* [TopIcons](https://extensions.gnome.org/extension/495/topicons/) => 顶部通知图标托盘(★★★★★)\n* [TopIconsPlus](https://extensions.gnome.org/extension/1031/topicons/) => 顶部通知图标托盘，自定义图标显示参数(★★★★☆)\n* [Blyr](https://extensions.gnome.org/extension/1251/blyr/) => 模糊应用预览背景图(★★★★★)\n* [Activities Configurator](https://extensions.gnome.org/extension/358/activities-configurator/) => 配置左上角活动按钮(★★★★☆)\n* [Workspace to Dock](https://extensions.gnome.org/extension/427/workspaces-to-dock/) => 将工作区转换为悬浮dock(★★★★★)\n* [Extensions](https://extensions.gnome.org/extension/1036/extensions/) => 在通知栏添加快捷开启和关闭gnome-shell插件的功能(★★★★★)\n* [Clipboard Indicator](https://extensions.gnome.org/extension/779/clipboard-indicator/) => 可视化剪贴板(★★★★★)\n* [Sound Input & Output Device Chooser](https://extensions.gnome.org/extension/906/sound-output-device-chooser/) => 声音输入和输入设备快速选择(★★★★★)\n* [NoAnnoyance](https://extensions.gnome.org/extension/1236/noannoyance/) => 取消“窗口已就绪”提示直接提升窗口(★★★★★)\n* [Bluetooth quick connect](https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/) => 蓝牙设备快速连接和断开(★★★★★)\n* [Remove Alt+Tab Delay](https://extensions.gnome.org/extension/1403/remove-alttab-delay/) => 移除【Alt + Tab】的开启应用预览延迟(★★★★★)\n* [Emoji Selector](https://extensions.gnome.org/extension/1162/emoji-selector/) => 快速选择Emoji表情(★★★★)\n\n#### Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\n--------------------------------------------\n```sh\n#Use Custom Dock Indicator ( Optional )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots false\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots false\n_______________________________________________________________________________________________\n\n# Disable Custom Dock Shrink ( Required for Good looking) (  Required )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-shrink false\n_______________________________________________________________________________________________\n\n# Dock Transparency mode ( Optional )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT\n_______________________________________________________________________________________________\n\n# Restore to Default\n$: dconf reset -f /org/gnome/shell/extensions/dash-to-dock/\n_______________________________________________________________________________________________\n```\n\n#### Ubuntu18.04 主题\n______________________________________________\n\n* GTK3主题(★★★★☆) => [X-Arc-Collection](https://www.gnome-look.org/p/1167049/)\n* GTK3主题(★★★★★) => [McOS-themes](https://www.gnome-look.org/p/1241688)\n* Gnome Shell主题(★★★★) => [Flat-Remix](https://github.com/daniruiz/flat-remix)\n* Gnome Shell主题(★★★☆) => [Human](https://www.gnome-look.org/p/1171095/)\n* Gnome Shell主题(★★★★★) => [macOS High Sierra](https://www.opendesktop.org/c/1460761561)\n* Gnome Shell主题(?) => [macOS High Sierra](https://www.gnome-look.org/p/1213208/)\n* Icon 主题(★★★★) => [flat-remix](https://github.com/daniruiz/flat-remix/releases)\n* Icon 主题(★★★★☆) => [Mac OS X Icon](https://www.gnome-look.org/p/1012200/)\n* Icon 主题(★★★★★) => [la-capitaine-icon-theme](https://github.com/keeferrourke/la-capitaine-icon-theme/releases)\n* Icon 主题(★★★★★) [McMojave-circle](https://www.pling.com/p/1305429/)\n* Icon 主题(★★★★☆) => [MacOS sierra ct](https://github.com/zayronxio/Macos-sierra-CT)\n* Cursor主题(★★★★☆) => [Capitaine Cursors](https://krourke.org/projects/art/capitaine-cursors)\n\n#### chrome实用插件整理\n-----------------------------------\n\n* [infinity pro 标签页](https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=InfinityNewtab) => 主页标签管理器(★★★★★)\n* [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=InfinityNewtab) => github仓库文件资源浏览树(★★★★★)\n* [Postman](https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?utm_source=InfinityNewtab) => API测试和请求模拟器(★★★★★)\n* [SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=InfinityNewtab) => 大家都用的代理软件(★★★★★)\n* [印象笔记剪藏](https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?utm_source=InfinityNewtab) => 随时随地把网络资源保存到你的笔记本里(★★★★★)\n* [SimpRead](https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?utm_source=InfinityNewtab) => 让浏览器支持纯净的阅读模式(★★★★★)\n* [Full Page Screen Capture](https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?utm_source=InfinityNewtab) => 全屏截图(★★★★☆)\n* [油猴tampermonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=InfinityNewtab) => 用户脚本管理器，一个用例是破解badu网盘的限速(★★★★★)\n* [Checker Plus for Gmail](https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj?utm_source=InfinityNewtab) => Google邮件提示插件(★★★★☆)\n* [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=InfinityNewtab) => 让google浏览器支持vim模式(firefox也有)(★★★★★)\n* [拷贝为Markdown](https://chrome.google.com/webstore/detail/copy-as-markdown/dgoenpnkphkichnohepecnmpmihnabdg) => 将选中网页转化为markdown格式并发送到剪贴板(★★★★☆)\n\n#### 实用程序和命令\n_______________________________\n\n* [fonts-firacode编程字体](https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager) => 解决vscode字体间隙过小的问题`sudo apt install fonts-firacode`\n* [vivaldi浏览器](https://vivaldi.com) => 可定制化程度高的个性化浏览器(★★★★★)\n* Terminator => 默认gnome终端升级版(★★★★★)\n* Timeshift => 创建系统快照，增量备份(★★★★★)\n* ipython3(命令工具) => python交互解释器(★★★★★)\n* jupyter => 交互式数据分析和记录工具(★★★★☆)\n* pdb/ipdb(命令工具) => python调试器(★★★★☆)\n* trash-cli(命令工具) => 命令行回收站(★★★★★)\n* bat(命令工具) => cat升级版，支持语法高亮和git状态显示(★★★★★)\n* axel(命令工具) => 下载限速不存在的，如果存在那我就开100个下载线程 : )(★★★★☆)\n* [aria2(命令工具)](https://github.com/aria2/aria2) => 强大的命令行下载工具\n* [stacer](https://github.com/oguzhaninan/Stacer) => linux电脑管家(★★★★★)\n* [ieaseMusic](https://github.com/trazyn/ieaseMusic) => 网易云音乐第三方客户端，没有bug，不会退出后再打开就让重新登陆\\[注：网易云音乐官方已修复]，界面还很酷(★★★★★)\n* parallel(命令工具) => 利用系统的多核来并行执行你的程序(★★★★☆)\n* cheat(命令工具) => 类似man命令的功能，简洁高效(★★★★☆)\n* topgrade(命令工具) => 一个命令更新所有软件(★★★★)\n* [dbKoda](https://www.dbkoda.com/) => mongodb GUI工具(★★★★☆)\n* [mongodb compass](https://www.mongodb.com/products/compass) => mongodb GUI工具(★★★★)\n* [peek](https://github.com/phw/peek) => 屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件(★★★★☆)\n* tmux => 终端管理器(★★★★)\n* 深度终端(ubuntu商店下载) => 支持分屏，内置实用主题(★★★★☆)\n* 深度截图(ubuntu商店下载) => 支持截图编辑(★★★★★)\n* shutter截图 => 功能丰富的截图和图标编辑软件，添加`ppa:linuxuprising/shutter`安装(★★★★☆)\n* flameshot => 支持Ubuntu20.04的截图编辑工具(★★★★★)\n* [WebTorrent](https://webtorrent.io/desktop/)、[FrostWire](https://www.frostwire.com/) => bt下载工具，支持边下边播(★★★★)\n* [SmartGit](https://www.syntevo.com/smartgit/) => linux平台免费的GIT GUI工具(★★★★★)\n* FileZilla => ftp工具(★★★★★)\n* [e-tools](https://github.com/Suremotoo/e-tools) => coder常用小工具(★★★★)\n* [WhatEver](https://electronjs.org/apps/whatever) => linux第三方印象笔记客户端，基于网页版(★★★★)\n* [wps](http://linux.wps.cn/) => linux office for free made by KingSoftware(★★★★★)\n* [vscode](https://code.visualstudio.com/) => 轻量化编辑器，很快！ (★★★★★)\n* ndb => node.js/javascript 调试器(★★★★★)\n* [nvm](https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh) => nodejs版本管理器\n* albert (添加软件源 `ppa:noobslab/macbuntu` 安装 ) => 桌面全局搜索类似Mac系统的SpotLight(★★★★★)\n* [lftp](https://linux.cn/article-5460-1.html) => 一个基于命令行的文件传输软件，支持FTP，FTPS，HTTP，HTTPS，HFTP，FISH，以及SFTP等协议，也有许多高级特性比\n如：多线程下载、断点续传\n* [redshift-gtk](http://jonls.dk/redshift/) 护眼模式，自带的色彩太黄了\n* apt-fast => 比apt更快的包管理器，添加`ppa:apt-fast/stable`安装(★★★★★)\n* nautilus action configure tool => 资源管理器右键菜单自定义，添加`ppa:daniel-marynicz/filemanager-actions`安装(★★★★★)\n* tig => 可交互的命令行git命令(★★★★★)\n* shellcheck => shell脚本语法检查(★★★★★)\n* [Motrix](https://motrix.app/zh-CN/) => 全平台下载工具，用于替代迅雷(★★★★★)\n* [Drawio](https://github.com/jgraph/drawio-desktop/) => 全平台绘图工具(流程图、类图、工程图...)，功能跟微软的visio相同(★★★★★)\n* [winetricks](https://github.com/Winetricks/winetricks) => wine环境的辅助工具，可用于生成wine基础环境、安装windows dll和字体等等(★★★★★)\n* [Insync](https://www.insynchq.com/) => 全平台同步工具，支持google云和onedrive(★★★★★)\n* [Timeshift](https://github.com/teejee2008/timeshift) => 创建系统增量备份计划(★★★★★)\n* dconf-editor => gnome桌面配置gui工具(★★★★)\n\n#### 实用网站推荐\n_______________\n\n![Vimix.png](Ubuntu18.04-14.png)\n\n* [Wallpaper](https://wallpapershome.com/)  => 高清桌面壁纸下载，支持多种分辨率(★★★★★)\n* [flaticon](https://www.flaticon.com) => 免费图标下载网站，支持svg和png两种格式\n* [Electron Apps](https://electronjs.org/apps) => 有很多Electron 框架写的跨平台应用(Linux/Mac/Windows)(★★★★☆)\n* [Linux运维日志](https://www.centos.bz/) => 服务搭建、Linux技术之类的(★★★★☆)\n* [IBM Developer](https://www.ibm.com/developerworks/cn/) => 技术文档类的参考(★★★★★)\n* [Linux常用命令](https://www.lulinux.com/archives/2513#awk)  =>  常用命令速查(★★★★☆)\n* [bilibili工具网站](https://www.kanbilibili.com/) => 支持 视频/弹幕/封面 下载等骚操作(★★★★★)\n* [Linux中国](https://linux.cn/) => 没事儿就上去看看别人翻译转载的文章(★★★★☆)\n* [TinyPNG](https://tinypng.com/) => 免费的图片无损压缩网站(★★★★☆)\n* [iLoveIMG](https://www.iloveimg.com/zh-cn) => 在线图片编辑网站(★★★★★)\n* [savefrom](https://en.savefrom.net/) => 直接下载youtube视频(★★★★☆)\n* [撸Linux](https://www.lulinux.com/) => 好像还蛮有趣的额(★★★★☆)\n* [油猴脚本](https://greasyfork.org/zh-CN/scripts) => 你甚至可以用来破解百度云限速(★★★★★)\n\n_注：以上内容部分是从网络搜集，希望解决广大Linuxer的问题所以做了部分整合._","source":"_posts/2019-06-12-Ubuntu18踩坑记录.md","raw":"---\ntitle: \"Ubuntu18踩坑记录\"\ncatalog: true\ntoc_nav_num: true\ndate:   2019-06-12 16:30:35\nsubtitle: \"ubuntu18.04 linux\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- ubuntu18.04\ncategories:\n- Linux\nupdateDate: 2019-06-12 16:30:35\n---\n\n![welcome / home](Ubuntu18.04-1.jpg)\n\n#### 目录\n__________\n\n* Wine应用启动后出现WineSystemTray 托盘的问题\n* 中文环境下将Home目录下的文件夹切换为英文名\n* Ubuntu系发行版安装deepin wine QQ\n* 续：安装QQ/微信\n* Ubuntu 18.04开机启动特别慢的问题\n* 终端oh-my-zsh配置\n* 终端终结者Terminator配置\n* 禁用内核更新\n* 终端常用等宽字体\n* crossover18破解\n* vim插件配置\n* Ubuntu18.04 定制Mac主题\n* Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\n* Ubuntu18.04 关于定制plymouth主题来更换开机动画\n* Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\n* Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\n* Ubuntu18.04 解决一些软件依赖不满足问题的问题\n* Ubuntu18.04 安装cinnamon桌面启动器\n* Linux分区过小导致后期容量不足解决方法\n* Shadowsocks-Qt5安装的问题\n* 使用polipo开启终端代理(需要先开启shadowsocks代理)\n* 将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\n* 自定义shadowsocks服务开机自启动脚本\n* Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\n* Atom编辑器内存占用过大的问题\n* Grub2 主题安装\n* Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\n* Ubuntu18.04 WPS 提示字体缺失的解决方法\n* Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\n* Ubuntu18.04 更新Gnome版本\n* Win10 + Ubuntu18.04 双系统时间显示不对\n* Ubuntu18.04 安装系统时说明(双硬盘)\n* Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\n* Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\n* Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\n* Ubuntu18.04 一直提示 “检测到系统程序出现问题”\n* Ubuntu20.04 使用系统播放器打开视频提示“安装h.264编码软件”\n* Ubuntu18.04 Gnome-Shell 插件\n* Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\n* Ubuntu18.04 主题\n* chrome实用插件整理\n* 实用程序和命令\n* 实用网站推荐\n\n#### Wine应用启动后出现WineSystemTray托盘的问题\n____________________________________________\n\n![wine_tray.png](Ubuntu18.04-2.png)\n\n![tray.png](Ubuntu18.04-3.png)\n1. 操作系统Linux Mint18.3\n右键点击面板(状态栏)，选择 - 向面板添加小程序，选择小程序 - 系统托盘，点击+号添加，之后Wine安装的应用和其它应用的图标就被系统托盘管理了。\n\n2. 操作系统Ubuntu 18.04\n安装gnome-shell插件 [TopIcons](https://extensions.gnome.org/extension/495/topicons/), 要想从浏览器上安装这个TopIcons需要先安装浏览器gnome交互插件chrome-gnome-shell (`sudo apt install chrome-gnome-shell` )，使用deepin QQ的时候可能需要重新启动TopIcons才能显示顶部QQ图标，如果遇到图标无故隐藏的问题那么可以再安装插件[Dash to Panel](https://extensions.gnome.org/extension/1160/dash-to-panel/)解决。\n\n#### 中文环境下将Home目录下的文件夹切换为英文名\n-------------------------------------------------------------------------\n\n1.  设置英文语言环境\n```sh\n$: export LANG=en_US(恢复-> zh_CN)\n```\n2. 更新目录\n```sh\n$: xdg-user-dirs-gtk-update\n```\n3. 弹出提示框点击 [确认]\n4. 重启后会再次弹出提示框是否将英文文件夹改回中文，选择 [不再提示] 并 [取消] 修改\n\n#### Ubuntu系发行版安装deepin wine QQ\n__________________________________\n\n1. 安装deepin-wine环境：上[https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu](https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu)页面下载zip包（或用git方式克隆），也可以[百度网盘](https://pan.baidu.com/s/120C5aHuqtyxQyn_fGTxHKg)下载，解压到本地文件夹，在文件夹中打开终端，输入`sudo sh ./install.sh`一键安装，如果你安装了这些依赖，在第二步的时候仍然报依赖错误，那就手动解压deb包，把那些依赖声明删除就行了(解压deb的方法下文中有提到)。\n\n2. 安装deepin.com应用容器：在[http://mirrors.aliyun.com/deepin/pool/non-free/d/](http://mirrors.aliyun.com/deepin/pool/non-free/d/)中下载想要的容器，点击deb安装即可，以下为推荐容器:\n*   QQ：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/)\n*   TIM：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/)\n*   QQ轻聊版：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/)\n*   微信：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/)\n*   Foxmail：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/)\n*   百度网盘：[http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/](http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/)\n*  360压缩：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/\n*  迅雷急速版:  https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg\n* Ubuntu系发行版包括Ubuntu、LinuxMint、ZorinOS等。\n\n#### 续：安装QQ/微信\n______________________\n\n1.linux上的微信大部分都是网页版微信封装的: [electronic-wechat](https://github.com/geeeeeeeeek/electronic-wechat)、[weweChat](https://github.com/trazyn/weweChat)，网页版功能简单，每次登录都要扫码。而且现在腾讯好像开始禁用了微信网页版的登陆，如果发现不能登录网页版就只能使用crossover来安装windows版的微信。\n\n2.￥140可以买个CrossOver18正版，一次激活，永久使用，然后愉快地安装QQ8.9，喜欢TIM的也能用TIM， 不过目前这个基于crossover的QQ有些bug，也不能记住密码。使用crossover18安装微信，安装包直接下载windows版本的就行，然后使用crossover创建windowsXP 64位容器，在容器中安装微信即可，不过可能安装时会出现`\"WeChatWin.dll 缺失问题\"`报错信息，需要执行下面命令安装额外的环境：\n```sh\n$: apt-get install libldap-2.4-2:i386\n```\n\n3.使用docker安装[Tim](https://hub.docker.com/r/bestwu/qq) 和 [wechat](https://hub.docker.com/r/bestwu/wechat)，[docker环境安装教程](https://www.runoob.com/docker/ubuntu-docker-install.html)\n\n4.wine环境下(crossover/deepin)安装好微信后如果发现不能输入文字(其实可以输入和发送，只是文字透明的)，可以使用这个文件[riched20.dll](https://pan.baidu.com/s/1-ScZvkmR9oZPdiFurdKQdA)(提取密码：rofj)替换掉微信所在容器下的C盘的`/windows/system32/riched20.dll`，容器路径一般在：`~/.cxoffice/[你的容器名]/drive_c/`。\n\n5.wine环境下(crossover/deepin)如果运行微信时发现界面有一个黑框不能关闭，只需要在聊天输入框中键入中文“不”然后再删除即可让黑框消失(原因:微信会根据你输入的字作为关键字在你现有表情中找符合的表情并显示出来提示你可用,但并没有很好的兼容这个功能变成一个黑框了，所以手动消除黑框的办法只有打关键字然后删除)。\n\n6.wine环境下(crossover/deepin)如果运行微信的时候不能发送图片，尝试安装 `sudo apt install libjpeg62:i386`，临时解决办法是把图片文件拖动到`收藏`，然后从收藏转发即可。\n\n7.wine环境下(crossover/deepin)如果运行QQ发现收到的图片一直加载不出来(刚登录开始可以，过一会就不行了)，那么可以在QQ登录界面设置一下网络代理(http/socks)，注意本地代理情况下代理地址不能使用localhost/127.0.0.1此类的IP，使用0.0.0.0是可以的。\n\n8.wine环境下如果发现微信/企业微信窗口边缘有阴影穿透情况时，点击任意一个联系人聊天界面，将窗口最大化后再恢复正常状态，窗口异常边框阴影便会消失。\n\n#### Ubuntu 18.04开机启动特别慢的问题\n_________________________________\n\n=> 禁用不必要的开机服务：\n```sh\n# 列出程序开机占用时间排行\nsystemd-analyze blame\n# 禁用plymouth\nsudo systemctl mask plymouth-start.service\nsudo systemctl mask plymouth-read-write.service\n```\n#### 终端oh-my-zsh配置\n_________________________________\n\n1. 主题\n* gnzh(已使用))\n* ys \n* avit\n* af-magic\n2. 插件\n* git => 自带git状态插件\n* svn => svn状态插件\n* colored-man-pages => man帮助信息高亮\n* zsh-syntax-highlighting => 命令高亮和错误提示\n* z => 自动记录路径快捷跳转\n* zsh-autosuggestions => 根据输入记录自动建议可选输入命令\n\n#### 终端终结者Terminator配置\n---------------------------\n\n特性：浅色调、字体舒适、无滚动条、自定义快捷键和配色、自动设置窗口布局\n\n注意：可以配合`设置->设备->键盘->添加自定义快捷键`这样自定义快捷键来启动终端，\n比如设置`Ctrl+Alt+T`为`terminator --geometry=93x32+450+300`，geometry为窗口的布局配置。\n\n覆盖文件`~/.config/terminator/config`内容：\n\n```bash\n  [global_config]\n  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler\n  suppress_multiple_term_dialog = True\n  title_hide_sizetext = True\n[keybindings]\n  prev_tab = <Alt>1\n  reset_clear = <Primary><Shift>g\n  clear = <Primary>l\n  switch_to_tab_1 = <Alt>1\n  switch_to_tab_2 = <Alt>2\n  switch_to_tab_3 = <Alt>3\n  switch_to_tab_4 = <Alt>4\n  switch_to_tab_5 = <Alt>5\n  toggle_scrollbar = None\n  toggle_zoom = <Primary><Shift>x\n[layouts]\n  [[default]]\n    [[[child1]]]\n      parent = window0\n      profile = default\n      type = Terminal\n    [[[window0]]]\n      parent = \"\"\n      size = 925, 570\n      type = Window\n[plugins]\n  [[CustomCommandsMenu]]\n    [[[清屏]]]\n      command = clear\n      enabled = True\n      name = 清屏\n      position = 0\n[profiles]\n  [[default]]\n    allow_bold = False\n    background_color = \"#fbfbfb\"\n    background_darkness = 0.93\n    background_type = transparent\n    copy_on_selection = True\n    cursor_color = \"#aaaaaa\"\n    cursor_shape = ibeam\n    font = Ubuntu Light 12\n    foreground_color = \"#49494a\"\n    palette = \"#2e3436:#ee6a6a:#38690a:#b3adb0:#3465a4:#75507b:#06989a:#d3d7cf:#979b93:#fe5f5f:#7fd42c:#b7afb1:#729fcf:#ad7fa8:#34e2e2:#eeeeec\"\n    scroll_on_keystroke = False\n    scrollbar_position = hidden\n    show_titlebar = False\n```\n\n#### 禁用内核更新\n------------------------\n\n```sh\n# 查看已安装内核\n$: dpkg --get-selections |grep linux-image\n# 查看正在使用的内核\n$: uname -a\n# 删除旧内核\n$: sudo apt-get remove\n$: linux-image-x.xx.x-xx-generic\n$: sudo apt-get remove  \n$: linux-image-extra-x.xx.x-xx-generic  \n# 或用这个命令移除\n$: sudo dpkg --purge linux-image-x.x.x-xx-generic\n# 禁止更新内核，需时间来验证\n$: sudo apt-mark hold linux-image-x.xx.x-xx-generic\n$: sudo apt-mark hold linux-image-extra-x.xx.x-xx-generic\n# 如果需要恢复原来的设定的话即允许更新内核，执行如下命令即可：\n$: sudo apt-mark unhold linux-image-x.xx.x-xx-generic\n$: sudo apt-mark unhold linux-image-extra-x.xx.x-xx-generic\n```\n\n#### 终端常用等宽字体\n-----------------------------\n* AR PL UKai CN 12\n* Bitstream Vera Sans Mono 10\n* Courier 10 Pitch 11\n* DejaVu Sans Mono 10\n* FreeMono 11\n* Nimbus Mono L 12\n* TlwgMono 11 \n\n#### crossover18破解\n----------------------------\n\n下载 [CrossoverPatch](https://pan.baidu.com/s/1BnT-cAKf-SBp-6J4CQoo-g ) `密码: ffp0`，解压后替换文件：\n```sh\n#  备份原文件\n$: cp ~/cxoffice/lib/wine/winewrapper.exe.so ~/cxoffice/lib/wine/winewrapper.exe.so-bak\n# 替换文件\n$: cp CrossoverPatch/winewrapper.exe.so ~/cxoffice/lib/wine\n```\n\n#### vim插件配置\n______________\n\n1. [Vundle](https://github.com/VundleVim/Vundle.vim) => 插件管理器，编辑.vimrc，然后执行命令`vim +PluginInstall`即可安装  \n2. [vim-airline](https://github.com/vim-airline/vim-airline) => 底部状态栏  \n3. [其他配置](https://juejin.im/post/5a38c37f6fb9a0450909a151)\n\n#### Ubuntu18.04 定制Mac主题\n__________________________\n\n![overview.png](Ubuntu18.04-5.png)\n\n![desktop.png](Ubuntu18.04-6.png)\n\n\n1. 安装gnome-tweak-tool 和 chrome-gnome-shell 插件 (`sudo aptitude install [name]`)\n2. 安装GTK3主题 => [X-Arc-Collection](https://www.gnome-look.org/p/1167049/)\n3. 使用tweak载入应用程序主题 => tweak -- 外观 -- 应用程序 -- 选择X-Arc-Collection\n4. 安装gnome-shell 主题 => [macOS High Sierra](https://www.gnome-look.org/p/1167049/)\n5. 安装gnome-shell 插件 => [User Themes](https://extensions.gnome.org/extension/19/user-themes/) ( 之后重启Gnome => [Alt + F2] & [输入 r] & [点击 Enter] )\n6. 使用tweak载入shell主题 => tweak -- 外观 -- shell -- 选择Sierra shell主题\n7.  下载Mac图标主题 [la-capitaine-icon-theme](https://github.com/keeferrourke/la-capitaine-icon-theme/releases) 或 [McMojave-circle](https://www.pling.com/p/1305429/)\n8. 图标文件夹移动到 ~/.icons目录下(没有则新建目录)\n9. 使用tweak载入icon主题 => tweak -- 外观 -- 图标 -- 选择对应的图标主题\n10. 安装gnome-shell插件 => Dash to dock (将原生dock转变为可定制的浮动dock)\n11. 定制firefox主题 => [Majave-gtk-theme](https://github.com/vinceliuice/Mojave-gtk-theme)\n\n#### Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式\n--------------------------------------------------------------------------------------------\n![lockscreen.png](Ubuntu18.04-7.png)\n\n![loginscreen.png](Ubuntu18.04-8.png)\n\n1. 安装脚本 => [github / nojsja / login-manager-config-ubuntu](https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/login-manager-config-ubuntu)  \n2. 说明=> 脚本通过更改/usr/share/gnome-shell/theme/ubuntu.css文件中声明的样式来修改系统登录页面按钮布局和背景图片的地址，使用ImageMagick包的`convert -blur`命令制作了毛玻璃效果的登录背景图片，最后还生成了一个SetAsWallpaper脚本，可以在文件夹中的图片文件上右键点击选择运行这个脚本(它会自动把目标图片更改成桌面壁纸和毛玻璃效果化的登录背景图)，最后锁屏壁纸需要用户手动安装`gnome-tweak-tool`进行更改。  \n3. 之前我想通过更改`/usr/share/gnome-shell/theme/gdm3.css`文件来修改样式，可是发现ubuntu18.04下总会有这样那样的问题。\n4. 注意=> 不要贸然尝试更改系统主题的CSS样式文件，如果修改的文件有语法错误或是其它原因，很可能会造成系统开机后无法登入图形界面(出现这种情况可以插入U盘登录PE系统然后挂载原系统的硬盘，最后将错误文件改回即可)。\n\n#### Ubuntu18.04 关于定制plymouth主题来更换开机动画\n-----------------------------------------------------------------------------\n\n>其实我不建议去改开机动画，一个原因是ubuntu自己的开机动画就挺美观简洁的，第二个原因是这个东西如果改出问题了卡在开机画面到时候恢复起来比较麻烦，如果执意想去折腾的话，可以去[gnome-look](https://www.gnome-look.org/browse/cat/108/)看看，这里提供一个苹果主题[darwin](https://pan.baidu.com/s/1qv3GZ_BE-jj2HIpiI2X7yQ)，密码: `rc6u`。\n1. 解压下载的plymouth主题到 `/usr/share/plymouth/themes`\n\n2. 执行安装\n```sh\n$: sudo update-alternatives --install /usr/share/plymouth/themes/ default.plymouth default.plymouth /usr/share/plymouth/themes/[THEME]/[THEME].plymouth 100\n```\n\n3. 更新配置，需要手动选择plymouth编号\n```sh\n$: sudo update-alternatives --config default.plymouth\n$: sudo update-initramfs -u\n```\n\n4. 手动更改错误路径参数\n```sh\n$: sudo gedit /usr/share/plymouth/themes/default.plymouth\n```\n替换`ImageDir`和`ScriptFile`为正确的plymouth文件存放路径，替换后：\n```sh\nImageDir=/usr/share/plymouth/themes/[THEME]\nScriptFile=/usr/share/plymouth/themes/[THEME]/[THEME].script\n```\n\n\n#### Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题\n---------------------------------------------------------------------------------------------\n\n>解决方法是去tweak设置里关闭[Dash to dock]的开关，别担心，关闭后，[Dash to dock]仍然正常工作，但是再也不会同时出现两个dock栏的尴尬情况了。  \n\n![dock-noise.png](Ubuntu18.04-9.png)\n\n![dock-single.png](Ubuntu18.04-10.png)\n\n\n\n#### Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题\n________________________________________________________\n\n![dock-tweak.png](Ubuntu18.04-11.png)\n\n1. 打开 软件与更新\n2. 选择那个源点击编辑\n3. 更改 发行版 信息 (请在网页上查看这个源的仓库文件内的dists目录下有哪些发行版)\n\n#### Ubuntu18.04 解决一些软件依赖不满足问题的问题\n____________________________________________\n\n=> 以Ubuntu18.04安装16.04版本网易云音乐为例\n```ssh\n# gdebi安装包\n$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb\n$: Dependency is not satisfiable: libqt5libqgtk2\n# Ubuntu18.04报出依赖问题，原因是libqt5libqgtk2已经被新的库qt5-style-plugins替代，\n# 软件源里找不到这个库，当然我们也能手动安装libqt5libqgtk2，但是很可能会就此引出新的依赖问题\n```\n=> 方法：解压安装包修改依赖项并重新打包\n=> 步骤：\n1. deb包同级目录下创建文件夹\n```ssh\n$: mkdir netease-cloud-music\n```\n2. 解压安装包到这个文件夹中\n```ssh\n$: dpkg -X netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb netease-cloud-music\n```\n3. 解压控制信息\n ```ssh\n$: dpkg -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb neteas-cloud-music/DEBIAN/\n```\n4. 修改依赖文件(把libqt5libqgtk2修改为qt5-style-plugins)\n```ssh\n# vim编辑文件\n$: vim neteas-cloud-music/DEBIAN/control\n# 使用vim正则对libqt5libqgtk2进行搜索替换\n:1,$s/libqt5libqgtk2/qt5-style-plugins/g\n# 或是手动查找Depends那一行中声明的libqt5libqgtk2进行替换替换即可\n```\n5. 生成新的安装包\n```ssh\n$: dpkg-deb -b neteas-cloud-music\n$: mv neteas-cloud-music.deb netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n```\n6. 安装\n```ssh\n# 使用gdebi或dpkg进行安装即可\n$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n$: sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb\n```\n\n#### Ubuntu18.04 安装Cinnamon桌面启动器\n-------------------------------------\n\n>cinnamon桌面也是基于gtk的，所以gonome下的一些gtk主题和icon主题也能直接使用，切换桌面后可以在设置界面直接切换主题。deepin桌面也能安装，美观度很好，但是卡死问题比较严重，不太推荐，Cinnamon相较而言安装后bug较少，可以正常使用。\n\n已知问题：\n* Cinnamon桌面通知API可能有更改，常见的wine/crossover应用程序不能正常调用通知接口，QQ/Wehcat无法在通知栏提示消息，不太方便\n* 输入法ibus不支持，无法正常使用，可以使用fcitx拼音和基于fcitx框架的sogou拼音\n* 默认没有集成蓝牙管理器，需要安装`blueman`进行蓝牙管理\n* 锁屏界面可能会非常卡顿\n* Cinnamon面板(等同gnome任务栏)默认安装了`系统托盘`，可以解决wine应用程序托盘菜单变成小窗口的bug，在面板通知区域正常显示\n* Cinnamon桌面动画性能也很低效，建议强制使用独立显卡\n\n安装步骤：\n1. 添加仓库Key\n```bash\n$: sudo add-apt-repository ppa:embrosyn/cinnamon  \n$: sudo apt update && sudo apt install cinnamon\n```\n2. 安装完成了注销后可以在登录界面点击设置按钮选择进入某个桌面环境\n3. 卸载cinnamon\n```bash\n$: sudo apt-get install ppa-purge\n$: sudo ppa-purge ppa:embrosyn/cinnamon\n```\n\n\n#### Linux分区过小导致后期容量不足解决方法\n------------------------------------\n\n=> 之前安装ubuntu 18.04的时候/var 分区只给了 1.5G，结果现在不够用了\n\n* 方法1\n```sh\n$: sudo apt-get clean\n$: sudo apt-get autoremove\n```\n如果仍然空间不足，使用方法2。\n* 方法2\n建立目录软链接解决(软链接和硬链接了解一下)：\n```sh\n# 以/var目录为例 将占用过大的文件夹移出\n$: mv /var/lib /opt\n# 建立opt下的lib内目录的软链接到var目录\n$: sudo ln -s /opt/lib /var\n```\n* 方法3\n如果/var没有单独分区，则系统默认共享使用/home目录，若此时提示/var空间不足，则说明/home空间不足，这种情况，建议重新安装系统，重新规划分区结构。一般来说，/var目录2G-4G为好，或者不分区，共享/home。\n\n#### Shadowsocks-Qt5安装的问题\n________________________\n\n> shadowsocks的GUI版本，用Qt写的，还行，不过我喜欢用sslocal命令脚本来连接服务器，开机自启动，很方便。顺带写个安装流程，不过会遇到我上面提到的 __软件源提示没有Release文件的问题__，可以通过上面的方法解决，这里需要将shadowdocks-Qt5发行版信息更改为`artful`，改为其它发行版可能会遇到依赖问题，遇到依赖问题多尝试几个，还有两行配置文件都要改额。  \n\n\\> sudo add-apt-repository ppa:hzwhuang/ss-qt5  \n\\> sudo apt update  \n\\> sudo apt-get install shadowsocks-qt5  \n\n#### 使用polipo开启终端代理(需要先开启shadowsocks代理)\n________________________________________________\n\n* 安装脚本(适合于bash和zsh终端) => [github / nojsja / polipo-install-config.sh\"](https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/shadowsocks-terminal)\n* 使用方式  \n\\> 说明：' hp ' == ' http_proxy=http://localhost:8123 ' for any command  \n\\> 说明：' gp ' == 'http.proxy=localhost:8123' for git proxy config  \n\\> 使用1：`hp curl ip.gs`\n\\> 使用2：`git clone https://android.googlesource.com/tools/repo --config $gp`\n* 如果polipo启动报错的话(通过`systemctl status polipo`查看)，可能是你的垃圾清理软件删除了polipo的日志文件夹，你可以手动更改polipo配置文件(`/etc/polipo/config`)禁用日至记录功能\n\n#### 将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\n_______________________________________________________\n\n>很多软件只有解压版，虽然可以解压后发送快捷方式到桌面，但是没有图标，应用列表也看不了。\n\n=> 安装脚本(测试环境ubuntu18.04) => [github / nojsja / makeIconLink](https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/application)\n=> 使用方式\n* 安装之前：请先将需要作为图标的icon图片(比例1:1比较适合，分辨率最好大于64px % 64px)放入目标文件夹内\n* 查看说明：\n```sh\n$: bash makeIconLink --help\n```\n* 安装指令：\n```sh\n$: bash makeIconLink --dir /path/to/[exec-file] --target [exec-file-name] --icon [icon-file-name]\n```\n* 卸载指令：\n```sh\n$: bash makeIconLink --uninstall [exec-file-name]\n```\n\n#### 自定义shadowsocks服务开机自启动脚本\n-------------------------------------------------------------\n\n> 使用systemd来管理shadowsocks服务，开机自启动，不用打开shadowsocks-qt5软件，FQ了无痕 ~\n\n=> 我的服务脚本：[startup.sh](https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/startup.sh)、[shadowsocks](https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/shadowsocks)  \n=> 步骤：\n\n* 编写shadowsocks service脚本文件，比如shadow.service\n\n```sh\n[Unit]\n# 描述\nDescription=Shadowsocks Service\n\n[Service]\nType=oneshot\n# 服务 start/stop 执行脚本(具体执行路径根据自己的目录更改)\nExecStart=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh start\nExecStop=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh stop\nRemainAfterExit=yes\n\n[Install]\n# 一些简单的依赖信息\nWantedBy=multi-user.target\n```\n\n* 将服务配置文件放到`/etc/systemd/system`下  \n\\> sudo cp shadow.service /etc/systemd/system\n* 设置服务自启动  \n\\> systemctl enable shadow\n* 服务开启和关闭  \n\\> systemctl start shadow  \n\\> systemctl stop shadow\n\n#### Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效\n________________________\n\n=> 先来一个shadowsocks全局pac代理的步骤：\n```sh\n# pip需要先安装\n$: sudo apt-get install python-pip python-dev build-essential\n$: sudo pip install --upgrade pip\n$: sudo pip install --upgrade virtualenv\n# 安装pac自动生成程序\n$: sudo pip install genpac\n# 生成pac文件\n$: mkdir ~/shadowsocks\n$: cd shadowsocks\n# proxy配置中的地址和端口具体要看你的shadowsocks连接配置\n$: genpac --proxy=\"SOCKS5 127.0.0.1:1080\" --gfwlist-proxy=\"SOCKS5 127.0.0.1:1080\" -o autoproxy.pac --gfwlist-url=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"\n```\n以上操作会在~/shadowsocks目录下生成autoproxy.pac配置文件，到系统设置 -> 网络 -> 网络代理 -> 自动 -> 填入file:///path/to/autoproxy.pac(上面我们生成的pac文件路径)，如果要新增被代理网站的话就自己编辑pac文件，在里面的域名列表里面再添加新的域名就好了。\n=> 再写一个脚本[genpac-command](https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/shadowsocks/genpac)，可以用来添加用户过滤规则(user-rules.txt) 和在线更新autoproxy.pac代理文件\n```sh\n# # 在脚本目录下执行\n# 显示帮助信息\n$: bash genpac-command --help\n# 在线更新\n$: bash genpac-command --update-online\n# 从本地user-rules.txt文件读取更新\n$: bash genpac-command --update-local\n# 添加自定义规则\n$: bash genpac-command --add-rules opendesktop.org\n# 添加多个自定义规则\n$: bash genpac-command --add-rules opendesktop.org atom.io\n# 删除自定义规则\n$: bash genpac-command --del-rules opendesktop.org\n# 删除多个自定义规则\n$: bash genpac-command --del-rules opendesktop.org atom.io\n```\n=> __不过我遇到了代理pac文件配置好后，firefox和google浏览器仍然不能FQ的情况，仔细排查原因，我发现因为之前我不是用的pac全局代理，是通过浏览器的SwitchOmega插件来手动代理的，这个插件会接管浏览器的网络代理权限，我们需要到浏览器设置里面把网络代理设置为系统代理，以火狐浏览器为例：__\n\n#### Atom编辑器内存占用过大的问题\n______________________________\n\n>Atom、Vscode、Sublime、Bracks都用过，Atom用着最爽，可定制化程度最高。但是有时候用着Atom电脑呼呼作响，查看系统占用，Atom内存占用达到过4、5个G，我的天！其实Atom出现内存泄漏的问题都不是Atom本身的问题，一定是你安装的哪个插件导致了内存泄漏，查看占用信息后定位到atom的插件，然后把它禁用就可以了，比如之前导致我出现这个问题的插件就是：ide-typescript，禁用之后现在基本一个Atom进程只占用200~400Mb左右，取决于你安装的其它插件。还有Atom要经常手动更新啊，仓库里面更新不了的，直接去Atom git仓库下载release正式版本，基本上一个大版本就要更新一次。\n\n#### Grub2 主题安装\n_________________\n\n![source.png](Ubuntu18.04-12.png)\n>Grub2就是引导操作系统启动的东西，开机的时候如果是多系统，就会显示多系统的启动菜单，如图，这个启动菜单可以自定义主题。\n\n1. 解压下载的主题文件 => [Vimix](https://pan.baidu.com/s/1ioMub2JmHlIzHJbS2_2gRQ)，得到Vimix文件夹(这里提供我用的一个主题，也可以自已去下载其它主题)\n2. 在/boot/grub里创建GRUB2主题目录themes\n\\> sudo mkdir -p /boot/grub/themes\n3. 将下载的Vimix文件夹整体复制到/boot/grub/themes文件夹下\n\\> sudo cp -r Vimix /boot/grub/themes\n4. 修改/etc/default/grub配置文件\n\\> sudo gedit /etc/default/grub\n在文件最后添加：GRUB_THEME=\"/boot/grub/themes/Vimix/theme.txt\" 并保存\n5. 更新GRUB\n\\> sudo update-grub\n6. 重启即生效(如果重启卡住请强制关机后再启动)\n\n#### Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer\n_________________________________________________________\n\n![firefox_proxy.png](Ubuntu18.04-13.png)\n\n1. [sourceforge](http://sourceforge.net/projects/corefonts/files/the%20fonts/final/)下载如图所示11个exe文件并放入一个文件夹，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer\n2. 运行字体配置程序\n\\> sudo dpkg-reconfigure ttf-mscorefonts-installer\n3. 在配置窗口中输入刚才保存exe的路径确定即可，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer\n\n#### Ubuntu18.04 WPS 提示字体缺失的解决方法\n---------------------------------------\n\n下载缺失的字体文件[fonts](https://pan.baidu.com/s/10MushHhTXwfRIFkKGmwD7Q) (密码: 4jpo)，然后复制到Linux系统中的/usr/share/fonts文件夹中，再使用系统命令更新字体设置：\n```sh\n# 生成字体的索引信息\n$: sudo mkfontscale\n$: sudo mkfontdir\n# 更新字体缓存\n$: sudo fc-cache\n```\n\n#### Ubuntu18.04 WPS 提示字体缺失的解决方法\n---------------------------------------\n\n```sh\n# 安装对应显卡驱动的32bit版本\n$: sudo apt-get install libnvidia-gl-440:i386\n```\n\n#### Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框\n------------------------------------------------------\n\n* 安装`xfce4-clipman`，每次使用深度截图时保证它开启\n```sh\n$: sudo apt install xfce4-clipman\n```\n* 也可以使用更高级的截图编辑管理软件`shutter`替代\n\n#### Ubuntu18.04 更新Gnome版本\n---------------------------------------\n\n```sh\n# Upgrade\n#If you were using the gnome3-team/gnome3-staging PPA, run the following before upgrading:\n$: sudo ppa-purge ppa:gnome3-team/gnome3-staging\n$: sudo ppa-purge ppa:gnome3-team/gnome3\n$: sudo apt install ubuntu-gnome-desktop^\n# The included GUI update manager will offer you the latest release of Ubuntu GNOME. Access this via the terminal:\n$: update-manager -c\n# Alternatively, run the following command:\n$: sudo do-release-upgrade\n```\n\n#### Win10 + Ubuntu18.04 双系统时间显示不对\n______________________________________\n\n>Ubuntu和Windows默认的时间管理方式不同，所以双系统发生时间错乱是正常的。Ubuntu默认时间是把BIOS时间当成GMT+0时间，也就是世界标准时，而我国在东八区(GMT+8)，所以如果你的Ubuntu位置是中国的话你系统显示的时间就是BIOS时间+8小时。假如现在是早上8点，那么你Ubuntu会显示8点，这时BIOS中的时间是0点。而当你切换到Windows系统时就会发生时间错乱，因为Windows会认为BIOS时间就是你的本地时间，结果就是Windows显示时间为0点……而假如你在Windows下同步时间，恢复显示为8点，这时BIOS时间也会被Windows改写成8点，再次进入Ubuntu时显示时间又变成了8+8=16点。\n\n1. 先在Ubuntu下更新一下时间\n\\> sudo apt-get install ntpdate\n\\> sudo ntpdate time.windows.com\n2. 将时间更新到硬件上\n\\> sudo hwclock --localtime --systohc\n3. 关闭linux重新进入windows系统，发现时间正常了\n\n#### Ubuntu18.04 安装系统时说明(双硬盘)\n______________________________________________\n\n> 主要分为 [ _GPT磁盘分区+UEFI引导方案_ ] 和 [ _传统MBR磁盘分区 + LEGANCY引导方案_ ]\n1. 方案一(兼容方案 gpt+uefi / mbr+legancy)\n使用UEFI模式安装Ubuntu18.04时可以选择用 兼容bios启动方式 来安装系统(同时兼容传统启动方式和UEFI启动方式)，即不分配\"/boot \"分区，分配一个大小为1GB左右的\"保留bios启动区域\"(UEFI模式会自动挂载/boot和/boot/efi)，其它分区至少还需要一个根分区\"/\"，8G内存的情况下最好还是分配8G的swap交换分区，另外除了\"保留bios启动区域\"为主分区，其它分区均为逻辑分区，最后一步很重要 -- 格式化每个分区，要不然安装很可能会出错！[参考](https://blog.csdn.net/jesse_mx/article/details/61425361\n)\n2. 方案二(gpt+uefi 已使用方案)\n创建\"efi系统分区\"，同时不需要划分\"/boot\"分区(boot引导是grub由引导的，而efi显然是UEFI引导的)，其余至少还需要划分\"/\"根分区，除了根分区所有分区都为逻辑分区，最后选择\"安装启动引导器的设备\"为刚才创建的\"efit系统分区\"。\n3. 方案三(传统mbr+legancy方案)\n传统的legancy + mbr的安装，至少划分\"/boot\"分区(主分区) 和 \"/\"根分区，其余的分区按需划分，最后选择\"安装启动引导器的设备\"为创建的\"/boot\"挂载点。\n\n#### Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法\n_________________________________________________\n\n* 使用root权限命令行后台启动并且屏蔽输出\n\\> sudo netease-cloud-music > /dev/null 2>&1  &\n* 规避session-manager引起的bug\n\\> alias netease='unset SESSION_MANAGER && netease-cloud-music'\n\\> netease > /dev/null &\n* 别用那个鸡肋的客户端了，有bug也不更新，上这个酷酷的第三方客户端[ieaseMusic](https://github.com/trazyn/ieaseMusic)\n* 这里还有个别人做的针对ubuntu18.04的[重新构建版本](https://github.com/innoob/netease-cloud-music)，可以正常使用，也没有重复登录的bug\n\n\n#### Ubuntu18.04 Crossover17安装QQ后乱码的解决方法\n______________________________________________\n>原因：原来的ume-ui-gothic.ttf不支持很多简体中文字符  \n\n使用其它字体文件替换到目录 /opt/cxoffice/share/wine/fonts 下的[ume-ui-gothic.ttf](https://pan.baidu.com/s/13CDBKrvTAJOhrbuyLw96jA)字体文件 (同名)，记得将下好的文件重命名为ume-ui-gothic.ttf。\n\n#### Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错\n_______________________________________________________\n=> 错误信息：`Error: Requiring Clutter, version none: Typelib file for namespace 'Clutter' (any version) not found ...`  \n=> 原因分析：该插件需要的依赖Clutter尚未安装\n=> 解决方法：\n```sh\n# 安装依赖\n$: sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0\n```\n\n#### Ubuntu18.04 一直提示 “检测到系统程序出现问题”\n---------------------------------------\nubuntu18.04已经移除了gksu软件，所以使用替代命令\n1. 添加alias命令\n```bash\n$: alias gksu='pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'\n```\n2. 编辑错误报告相关设置  \n```bash\n$: gksu gedit /etc/default/apport\n# 把`enable = 1`改为`enable = 0`\n```\n\n#### Ubuntu20.04 使用系统播放器打开视频提示“安装h.264编码软件”\n----------------------------------------------------\n```bash\n$: sudo apt install libdvdnav4 libdvd-pkg gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly libdvd-pkg\n$: sudo apt install ubuntu-restricted-extras\n```\n\n#### Ubuntu18.04 Gnome-Shell 插件\n______________________________________________\n\n* [CoverFlow Alt-Tab](https://extensions.gnome.org/extension/97/coverflow-alt-tab/) => 窗口Tab切换预览(★★★★☆)\n* [User Themes(必要)](https://extensions.gnome.org/extension/19/user-themes/) => 用户主题安装(★★★★★)\n* [Dash To Dock](https://extensions.gnome.org/extension/307/dash-to-dock/) => dock栏(★★★★★)\n* [Dash To Panel](https://extensions.gnome.org/extension/1160/dash-to-panel/) => 将dock和顶栏显示在一起(★★★★★)\n* [NoAnnoyance](https://extensions.gnome.org/extension/1236/noannoyance/) => 禁用多余的pop提示信息，直接提升活动窗口(★★★★★)\n* [Autohide Battery](https://extensions.gnome.org/extension/595/autohide-battery/) => 电池充满并连接电源时自动隐藏电池按钮(★★★★★)\n* [Places Status Indicator](https://extensions.gnome.org/extension/8/places-status-indicator/) => 顶部任务栏显示磁盘和卷的快捷入口(★★★★★)\n* [Removable Drive Menu](https://extensions.gnome.org/extension/7/removable-drive-menu/) => 顶部任务栏显示可移除的已挂载设备(★★★★★)\n* [Suspend Button](https://extensions.gnome.org/extension/826/suspend-button/) => 顶部菜单栏显示休眠按钮(★★★★★)\n* [TopIcons](https://extensions.gnome.org/extension/495/topicons/) => 顶部通知图标托盘(★★★★★)\n* [TopIconsPlus](https://extensions.gnome.org/extension/1031/topicons/) => 顶部通知图标托盘，自定义图标显示参数(★★★★☆)\n* [Blyr](https://extensions.gnome.org/extension/1251/blyr/) => 模糊应用预览背景图(★★★★★)\n* [Activities Configurator](https://extensions.gnome.org/extension/358/activities-configurator/) => 配置左上角活动按钮(★★★★☆)\n* [Workspace to Dock](https://extensions.gnome.org/extension/427/workspaces-to-dock/) => 将工作区转换为悬浮dock(★★★★★)\n* [Extensions](https://extensions.gnome.org/extension/1036/extensions/) => 在通知栏添加快捷开启和关闭gnome-shell插件的功能(★★★★★)\n* [Clipboard Indicator](https://extensions.gnome.org/extension/779/clipboard-indicator/) => 可视化剪贴板(★★★★★)\n* [Sound Input & Output Device Chooser](https://extensions.gnome.org/extension/906/sound-output-device-chooser/) => 声音输入和输入设备快速选择(★★★★★)\n* [NoAnnoyance](https://extensions.gnome.org/extension/1236/noannoyance/) => 取消“窗口已就绪”提示直接提升窗口(★★★★★)\n* [Bluetooth quick connect](https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/) => 蓝牙设备快速连接和断开(★★★★★)\n* [Remove Alt+Tab Delay](https://extensions.gnome.org/extension/1403/remove-alttab-delay/) => 移除【Alt + Tab】的开启应用预览延迟(★★★★★)\n* [Emoji Selector](https://extensions.gnome.org/extension/1162/emoji-selector/) => 快速选择Emoji表情(★★★★)\n\n#### Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置\n--------------------------------------------\n```sh\n#Use Custom Dock Indicator ( Optional )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots false\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots false\n_______________________________________________________________________________________________\n\n# Disable Custom Dock Shrink ( Required for Good looking) (  Required )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock custom-theme-shrink false\n_______________________________________________________________________________________________\n\n# Dock Transparency mode ( Optional )\n$: gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT\n_______________________________________________________________________________________________\n\n# Restore to Default\n$: dconf reset -f /org/gnome/shell/extensions/dash-to-dock/\n_______________________________________________________________________________________________\n```\n\n#### Ubuntu18.04 主题\n______________________________________________\n\n* GTK3主题(★★★★☆) => [X-Arc-Collection](https://www.gnome-look.org/p/1167049/)\n* GTK3主题(★★★★★) => [McOS-themes](https://www.gnome-look.org/p/1241688)\n* Gnome Shell主题(★★★★) => [Flat-Remix](https://github.com/daniruiz/flat-remix)\n* Gnome Shell主题(★★★☆) => [Human](https://www.gnome-look.org/p/1171095/)\n* Gnome Shell主题(★★★★★) => [macOS High Sierra](https://www.opendesktop.org/c/1460761561)\n* Gnome Shell主题(?) => [macOS High Sierra](https://www.gnome-look.org/p/1213208/)\n* Icon 主题(★★★★) => [flat-remix](https://github.com/daniruiz/flat-remix/releases)\n* Icon 主题(★★★★☆) => [Mac OS X Icon](https://www.gnome-look.org/p/1012200/)\n* Icon 主题(★★★★★) => [la-capitaine-icon-theme](https://github.com/keeferrourke/la-capitaine-icon-theme/releases)\n* Icon 主题(★★★★★) [McMojave-circle](https://www.pling.com/p/1305429/)\n* Icon 主题(★★★★☆) => [MacOS sierra ct](https://github.com/zayronxio/Macos-sierra-CT)\n* Cursor主题(★★★★☆) => [Capitaine Cursors](https://krourke.org/projects/art/capitaine-cursors)\n\n#### chrome实用插件整理\n-----------------------------------\n\n* [infinity pro 标签页](https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=InfinityNewtab) => 主页标签管理器(★★★★★)\n* [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=InfinityNewtab) => github仓库文件资源浏览树(★★★★★)\n* [Postman](https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?utm_source=InfinityNewtab) => API测试和请求模拟器(★★★★★)\n* [SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=InfinityNewtab) => 大家都用的代理软件(★★★★★)\n* [印象笔记剪藏](https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?utm_source=InfinityNewtab) => 随时随地把网络资源保存到你的笔记本里(★★★★★)\n* [SimpRead](https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?utm_source=InfinityNewtab) => 让浏览器支持纯净的阅读模式(★★★★★)\n* [Full Page Screen Capture](https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?utm_source=InfinityNewtab) => 全屏截图(★★★★☆)\n* [油猴tampermonkey](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=InfinityNewtab) => 用户脚本管理器，一个用例是破解badu网盘的限速(★★★★★)\n* [Checker Plus for Gmail](https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj?utm_source=InfinityNewtab) => Google邮件提示插件(★★★★☆)\n* [Vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=InfinityNewtab) => 让google浏览器支持vim模式(firefox也有)(★★★★★)\n* [拷贝为Markdown](https://chrome.google.com/webstore/detail/copy-as-markdown/dgoenpnkphkichnohepecnmpmihnabdg) => 将选中网页转化为markdown格式并发送到剪贴板(★★★★☆)\n\n#### 实用程序和命令\n_______________________________\n\n* [fonts-firacode编程字体](https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager) => 解决vscode字体间隙过小的问题`sudo apt install fonts-firacode`\n* [vivaldi浏览器](https://vivaldi.com) => 可定制化程度高的个性化浏览器(★★★★★)\n* Terminator => 默认gnome终端升级版(★★★★★)\n* Timeshift => 创建系统快照，增量备份(★★★★★)\n* ipython3(命令工具) => python交互解释器(★★★★★)\n* jupyter => 交互式数据分析和记录工具(★★★★☆)\n* pdb/ipdb(命令工具) => python调试器(★★★★☆)\n* trash-cli(命令工具) => 命令行回收站(★★★★★)\n* bat(命令工具) => cat升级版，支持语法高亮和git状态显示(★★★★★)\n* axel(命令工具) => 下载限速不存在的，如果存在那我就开100个下载线程 : )(★★★★☆)\n* [aria2(命令工具)](https://github.com/aria2/aria2) => 强大的命令行下载工具\n* [stacer](https://github.com/oguzhaninan/Stacer) => linux电脑管家(★★★★★)\n* [ieaseMusic](https://github.com/trazyn/ieaseMusic) => 网易云音乐第三方客户端，没有bug，不会退出后再打开就让重新登陆\\[注：网易云音乐官方已修复]，界面还很酷(★★★★★)\n* parallel(命令工具) => 利用系统的多核来并行执行你的程序(★★★★☆)\n* cheat(命令工具) => 类似man命令的功能，简洁高效(★★★★☆)\n* topgrade(命令工具) => 一个命令更新所有软件(★★★★)\n* [dbKoda](https://www.dbkoda.com/) => mongodb GUI工具(★★★★☆)\n* [mongodb compass](https://www.mongodb.com/products/compass) => mongodb GUI工具(★★★★)\n* [peek](https://github.com/phw/peek) => 屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件(★★★★☆)\n* tmux => 终端管理器(★★★★)\n* 深度终端(ubuntu商店下载) => 支持分屏，内置实用主题(★★★★☆)\n* 深度截图(ubuntu商店下载) => 支持截图编辑(★★★★★)\n* shutter截图 => 功能丰富的截图和图标编辑软件，添加`ppa:linuxuprising/shutter`安装(★★★★☆)\n* flameshot => 支持Ubuntu20.04的截图编辑工具(★★★★★)\n* [WebTorrent](https://webtorrent.io/desktop/)、[FrostWire](https://www.frostwire.com/) => bt下载工具，支持边下边播(★★★★)\n* [SmartGit](https://www.syntevo.com/smartgit/) => linux平台免费的GIT GUI工具(★★★★★)\n* FileZilla => ftp工具(★★★★★)\n* [e-tools](https://github.com/Suremotoo/e-tools) => coder常用小工具(★★★★)\n* [WhatEver](https://electronjs.org/apps/whatever) => linux第三方印象笔记客户端，基于网页版(★★★★)\n* [wps](http://linux.wps.cn/) => linux office for free made by KingSoftware(★★★★★)\n* [vscode](https://code.visualstudio.com/) => 轻量化编辑器，很快！ (★★★★★)\n* ndb => node.js/javascript 调试器(★★★★★)\n* [nvm](https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh) => nodejs版本管理器\n* albert (添加软件源 `ppa:noobslab/macbuntu` 安装 ) => 桌面全局搜索类似Mac系统的SpotLight(★★★★★)\n* [lftp](https://linux.cn/article-5460-1.html) => 一个基于命令行的文件传输软件，支持FTP，FTPS，HTTP，HTTPS，HFTP，FISH，以及SFTP等协议，也有许多高级特性比\n如：多线程下载、断点续传\n* [redshift-gtk](http://jonls.dk/redshift/) 护眼模式，自带的色彩太黄了\n* apt-fast => 比apt更快的包管理器，添加`ppa:apt-fast/stable`安装(★★★★★)\n* nautilus action configure tool => 资源管理器右键菜单自定义，添加`ppa:daniel-marynicz/filemanager-actions`安装(★★★★★)\n* tig => 可交互的命令行git命令(★★★★★)\n* shellcheck => shell脚本语法检查(★★★★★)\n* [Motrix](https://motrix.app/zh-CN/) => 全平台下载工具，用于替代迅雷(★★★★★)\n* [Drawio](https://github.com/jgraph/drawio-desktop/) => 全平台绘图工具(流程图、类图、工程图...)，功能跟微软的visio相同(★★★★★)\n* [winetricks](https://github.com/Winetricks/winetricks) => wine环境的辅助工具，可用于生成wine基础环境、安装windows dll和字体等等(★★★★★)\n* [Insync](https://www.insynchq.com/) => 全平台同步工具，支持google云和onedrive(★★★★★)\n* [Timeshift](https://github.com/teejee2008/timeshift) => 创建系统增量备份计划(★★★★★)\n* dconf-editor => gnome桌面配置gui工具(★★★★)\n\n#### 实用网站推荐\n_______________\n\n![Vimix.png](Ubuntu18.04-14.png)\n\n* [Wallpaper](https://wallpapershome.com/)  => 高清桌面壁纸下载，支持多种分辨率(★★★★★)\n* [flaticon](https://www.flaticon.com) => 免费图标下载网站，支持svg和png两种格式\n* [Electron Apps](https://electronjs.org/apps) => 有很多Electron 框架写的跨平台应用(Linux/Mac/Windows)(★★★★☆)\n* [Linux运维日志](https://www.centos.bz/) => 服务搭建、Linux技术之类的(★★★★☆)\n* [IBM Developer](https://www.ibm.com/developerworks/cn/) => 技术文档类的参考(★★★★★)\n* [Linux常用命令](https://www.lulinux.com/archives/2513#awk)  =>  常用命令速查(★★★★☆)\n* [bilibili工具网站](https://www.kanbilibili.com/) => 支持 视频/弹幕/封面 下载等骚操作(★★★★★)\n* [Linux中国](https://linux.cn/) => 没事儿就上去看看别人翻译转载的文章(★★★★☆)\n* [TinyPNG](https://tinypng.com/) => 免费的图片无损压缩网站(★★★★☆)\n* [iLoveIMG](https://www.iloveimg.com/zh-cn) => 在线图片编辑网站(★★★★★)\n* [savefrom](https://en.savefrom.net/) => 直接下载youtube视频(★★★★☆)\n* [撸Linux](https://www.lulinux.com/) => 好像还蛮有趣的额(★★★★☆)\n* [油猴脚本](https://greasyfork.org/zh-CN/scripts) => 你甚至可以用来破解百度云限速(★★★★★)\n\n_注：以上内容部分是从网络搜集，希望解决广大Linuxer的问题所以做了部分整合._","slug":"Ubuntu18踩坑记录","published":1,"updated":"2021-01-12T03:18:25.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmur70017kl9540he9enp","content":"<p><img src=\"Ubuntu18.04-1.jpg\" alt=\"welcome / home\"></p><h4 id=\"目录\">目录</h4><hr><ul><li>Wine应用启动后出现WineSystemTray 托盘的问题</li><li>中文环境下将Home目录下的文件夹切换为英文名</li><li>Ubuntu系发行版安装deepin wine QQ</li><li>续：安装QQ/微信</li><li>Ubuntu 18.04开机启动特别慢的问题</li><li>终端oh-my-zsh配置</li><li>终端终结者Terminator配置</li><li>禁用内核更新</li><li>终端常用等宽字体</li><li>crossover18破解</li><li>vim插件配置</li><li>Ubuntu18.04 定制Mac主题</li><li>Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式</li><li>Ubuntu18.04 关于定制plymouth主题来更换开机动画</li><li>Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题</li><li>Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题</li><li>Ubuntu18.04 解决一些软件依赖不满足问题的问题</li><li>Ubuntu18.04 安装cinnamon桌面启动器</li><li>Linux分区过小导致后期容量不足解决方法</li><li>Shadowsocks-Qt5安装的问题</li><li>使用polipo开启终端代理(需要先开启shadowsocks代理)</li><li>将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表</li><li>自定义shadowsocks服务开机自启动脚本</li><li>Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效</li><li>Atom编辑器内存占用过大的问题</li><li>Grub2 主题安装</li><li>Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer</li><li>Ubuntu18.04 WPS 提示字体缺失的解决方法</li><li>Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框</li><li>Ubuntu18.04 更新Gnome版本</li><li>Win10 + Ubuntu18.04 双系统时间显示不对</li><li>Ubuntu18.04 安装系统时说明(双硬盘)</li><li>Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法</li><li>Ubuntu18.04 Crossover17安装QQ后乱码的解决方法</li><li>Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错</li><li>Ubuntu18.04 一直提示 “检测到系统程序出现问题”</li><li>Ubuntu20.04 使用系统播放器打开视频提示“安装h.264编码软件”</li><li>Ubuntu18.04 Gnome-Shell 插件</li><li>Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置</li><li>Ubuntu18.04 主题</li><li>chrome实用插件整理</li><li>实用程序和命令</li><li>实用网站推荐</li></ul><h4 id=\"Wine应用启动后出现WineSystemTray托盘的问题\">Wine应用启动后出现WineSystemTray托盘的问题</h4><hr><p><img src=\"Ubuntu18.04-2.png\" alt=\"wine_tray.png\"></p><p><img src=\"Ubuntu18.04-3.png\" alt=\"tray.png\"></p><ol><li><p>操作系统Linux Mint18.3<br>右键点击面板(状态栏)，选择 - 向面板添加小程序，选择小程序 - 系统托盘，点击+号添加，之后Wine安装的应用和其它应用的图标就被系统托盘管理了。</p></li><li><p>操作系统Ubuntu 18.04<br>安装gnome-shell插件 <a href=\"https://extensions.gnome.org/extension/495/topicons/\" target=\"_blank\" rel=\"noopener\">TopIcons</a>, 要想从浏览器上安装这个TopIcons需要先安装浏览器gnome交互插件chrome-gnome-shell (<code>sudo apt install chrome-gnome-shell</code> )，使用deepin QQ的时候可能需要重新启动TopIcons才能显示顶部QQ图标，如果遇到图标无故隐藏的问题那么可以再安装插件<a href=\"https://extensions.gnome.org/extension/1160/dash-to-panel/\" target=\"_blank\" rel=\"noopener\">Dash to Panel</a>解决。</p></li></ol><h4 id=\"中文环境下将Home目录下的文件夹切换为英文名\">中文环境下将Home目录下的文件夹切换为英文名</h4><hr><ol><li>设置英文语言环境</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: <span class=\"built_in\">export</span> LANG=en_US(恢复-&gt; zh_CN)</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>更新目录</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>弹出提示框点击 [确认]</li><li>重启后会再次弹出提示框是否将英文文件夹改回中文，选择 [不再提示] 并 [取消] 修改</li></ol><h4 id=\"Ubuntu系发行版安装deepin-wine-QQ\">Ubuntu系发行版安装deepin wine QQ</h4><hr><ol><li><p>安装deepin-wine环境：上<a href=\"https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu\" target=\"_blank\" rel=\"noopener\">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a>页面下载zip包（或用git方式克隆），也可以<a href=\"https://pan.baidu.com/s/120C5aHuqtyxQyn_fGTxHKg\" target=\"_blank\" rel=\"noopener\">百度网盘</a>下载，解压到本地文件夹，在文件夹中打开终端，输入<code>sudo sh ./install.sh</code>一键安装，如果你安装了这些依赖，在第二步的时候仍然报依赖错误，那就手动解压deb包，把那些依赖声明删除就行了(解压deb的方法下文中有提到)。</p></li><li><p>安装deepin.com应用容器：在<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/</a>中下载想要的容器，点击deb安装即可，以下为推荐容器:</p></li></ol><ul><li>QQ：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/</a></li><li>TIM：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/</a></li><li>QQ轻聊版：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/</a></li><li>微信：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/</a></li><li>Foxmail：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/</a></li><li>百度网盘：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/</a></li><li>360压缩：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/</a></li><li>迅雷急速版: <a href=\"https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg</a></li><li>Ubuntu系发行版包括Ubuntu、LinuxMint、ZorinOS等。</li></ul><h4 id=\"续：安装QQ-微信\">续：安装QQ/微信</h4><hr><p>1.linux上的微信大部分都是网页版微信封装的: <a href=\"https://github.com/geeeeeeeeek/electronic-wechat\" target=\"_blank\" rel=\"noopener\">electronic-wechat</a>、<a href=\"https://github.com/trazyn/weweChat\" target=\"_blank\" rel=\"noopener\">weweChat</a>，网页版功能简单，每次登录都要扫码。而且现在腾讯好像开始禁用了微信网页版的登陆，如果发现不能登录网页版就只能使用crossover来安装windows版的微信。</p><p>2.￥140可以买个CrossOver18正版，一次激活，永久使用，然后愉快地安装QQ8.9，喜欢TIM的也能用TIM， 不过目前这个基于crossover的QQ有些bug，也不能记住密码。使用crossover18安装微信，安装包直接下载windows版本的就行，然后使用crossover创建windowsXP 64位容器，在容器中安装微信即可，不过可能安装时会出现<code>&quot;WeChatWin.dll 缺失问题&quot;</code>报错信息，需要执行下面命令安装额外的环境：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: apt-get install libldap-2.4-2:i386</span><br></pre></td></tr></table></figure><p>3.使用docker安装<a href=\"https://hub.docker.com/r/bestwu/qq\" target=\"_blank\" rel=\"noopener\">Tim</a> 和 <a href=\"https://hub.docker.com/r/bestwu/wechat\" target=\"_blank\" rel=\"noopener\">wechat</a>，<a href=\"https://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"noopener\">docker环境安装教程</a></p><p>4.wine环境下(crossover/deepin)安装好微信后如果发现不能输入文字(其实可以输入和发送，只是文字透明的)，可以使用这个文件<a href=\"https://pan.baidu.com/s/1-ScZvkmR9oZPdiFurdKQdA\" target=\"_blank\" rel=\"noopener\">riched20.dll</a>(提取密码：rofj)替换掉微信所在容器下的C盘的<code>/windows/system32/riched20.dll</code>，容器路径一般在：<code>~/.cxoffice/[你的容器名]/drive_c/</code>。</p><p>5.wine环境下(crossover/deepin)如果运行微信时发现界面有一个黑框不能关闭，只需要在聊天输入框中键入中文“不”然后再删除即可让黑框消失(原因:微信会根据你输入的字作为关键字在你现有表情中找符合的表情并显示出来提示你可用,但并没有很好的兼容这个功能变成一个黑框了，所以手动消除黑框的办法只有打关键字然后删除)。</p><p>6.wine环境下(crossover/deepin)如果运行微信的时候不能发送图片，尝试安装 <code>sudo apt install libjpeg62:i386</code>，临时解决办法是把图片文件拖动到<code>收藏</code>，然后从收藏转发即可。</p><p>7.wine环境下(crossover/deepin)如果运行QQ发现收到的图片一直加载不出来(刚登录开始可以，过一会就不行了)，那么可以在QQ登录界面设置一下网络代理(http/socks)，注意本地代理情况下代理地址不能使用localhost/127.0.0.1此类的IP，使用0.0.0.0是可以的。</p><p>8.wine环境下如果发现微信/企业微信窗口边缘有阴影穿透情况时，点击任意一个联系人聊天界面，将窗口最大化后再恢复正常状态，窗口异常边框阴影便会消失。</p><h4 id=\"Ubuntu-18-04开机启动特别慢的问题\">Ubuntu 18.04开机启动特别慢的问题</h4><hr><p>=&gt; 禁用不必要的开机服务：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出程序开机占用时间排行</span></span><br><span class=\"line\">systemd-analyze blame</span><br><span class=\"line\"><span class=\"comment\"># 禁用plymouth</span></span><br><span class=\"line\">sudo systemctl mask plymouth-start.service</span><br><span class=\"line\">sudo systemctl mask plymouth-read-write.service</span><br></pre></td></tr></table></figure><h4 id=\"终端oh-my-zsh配置\">终端oh-my-zsh配置</h4><hr><ol><li>主题</li></ol><ul><li>gnzh(已使用))</li><li>ys</li><li>avit</li><li>af-magic</li></ul><ol start=\"2\"><li>插件</li></ol><ul><li>git =&gt; 自带git状态插件</li><li>svn =&gt; svn状态插件</li><li>colored-man-pages =&gt; man帮助信息高亮</li><li>zsh-syntax-highlighting =&gt; 命令高亮和错误提示</li><li>z =&gt; 自动记录路径快捷跳转</li><li>zsh-autosuggestions =&gt; 根据输入记录自动建议可选输入命令</li></ul><h4 id=\"终端终结者Terminator配置\">终端终结者Terminator配置</h4><hr><p>特性：浅色调、字体舒适、无滚动条、自定义快捷键和配色、自动设置窗口布局</p><p>注意：可以配合<code>设置-&gt;设备-&gt;键盘-&gt;添加自定义快捷键</code>这样自定义快捷键来启动终端，<br>比如设置<code>Ctrl+Alt+T</code>为<code>terminator --geometry=93x32+450+300</code>，geometry为窗口的布局配置。</p><p>覆盖文件<code>~/.config/terminator/config</code>内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [global_config]</span><br><span class=\"line\">  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler</span><br><span class=\"line\">  suppress_multiple_term_dialog = True</span><br><span class=\"line\">  title_hide_sizetext = True</span><br><span class=\"line\">[keybindings]</span><br><span class=\"line\">  prev_tab = &lt;Alt&gt;1</span><br><span class=\"line\">  reset_clear = &lt;Primary&gt;&lt;Shift&gt;g</span><br><span class=\"line\">  clear = &lt;Primary&gt;l</span><br><span class=\"line\">  switch_to_tab_1 = &lt;Alt&gt;1</span><br><span class=\"line\">  switch_to_tab_2 = &lt;Alt&gt;2</span><br><span class=\"line\">  switch_to_tab_3 = &lt;Alt&gt;3</span><br><span class=\"line\">  switch_to_tab_4 = &lt;Alt&gt;4</span><br><span class=\"line\">  switch_to_tab_5 = &lt;Alt&gt;5</span><br><span class=\"line\">  toggle_scrollbar = None</span><br><span class=\"line\">  toggle_zoom = &lt;Primary&gt;&lt;Shift&gt;x</span><br><span class=\"line\">[layouts]</span><br><span class=\"line\">  [[default]]</span><br><span class=\"line\">    [[[child1]]]</span><br><span class=\"line\">      parent = window0</span><br><span class=\"line\">      profile = default</span><br><span class=\"line\">      <span class=\"built_in\">type</span> = Terminal</span><br><span class=\"line\">    [[[window0]]]</span><br><span class=\"line\">      parent = <span class=\"string\">\"\"</span></span><br><span class=\"line\">      size = 925, 570</span><br><span class=\"line\">      <span class=\"built_in\">type</span> = Window</span><br><span class=\"line\">[plugins]</span><br><span class=\"line\">  [[CustomCommandsMenu]]</span><br><span class=\"line\">    [[[清屏]]]</span><br><span class=\"line\">      <span class=\"built_in\">command</span> = clear</span><br><span class=\"line\">      enabled = True</span><br><span class=\"line\">      name = 清屏</span><br><span class=\"line\">      position = 0</span><br><span class=\"line\">[profiles]</span><br><span class=\"line\">  [[default]]</span><br><span class=\"line\">    allow_bold = False</span><br><span class=\"line\">    background_color = <span class=\"string\">\"#fbfbfb\"</span></span><br><span class=\"line\">    background_darkness = 0.93</span><br><span class=\"line\">    background_type = transparent</span><br><span class=\"line\">    copy_on_selection = True</span><br><span class=\"line\">    cursor_color = <span class=\"string\">\"#aaaaaa\"</span></span><br><span class=\"line\">    cursor_shape = ibeam</span><br><span class=\"line\">    font = Ubuntu Light 12</span><br><span class=\"line\">    foreground_color = <span class=\"string\">\"#49494a\"</span></span><br><span class=\"line\">    palette = <span class=\"string\">\"#2e3436:#ee6a6a:#38690a:#b3adb0:#3465a4:#75507b:#06989a:#d3d7cf:#979b93:#fe5f5f:#7fd42c:#b7afb1:#729fcf:#ad7fa8:#34e2e2:#eeeeec\"</span></span><br><span class=\"line\">    scroll_on_keystroke = False</span><br><span class=\"line\">    scrollbar_position = hidden</span><br><span class=\"line\">    show_titlebar = False</span><br></pre></td></tr></table></figure><h4 id=\"禁用内核更新\">禁用内核更新</h4><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看已安装内核</span></span><br><span class=\"line\">$: dpkg --get-selections |grep linux-image</span><br><span class=\"line\"><span class=\"comment\"># 查看正在使用的内核</span></span><br><span class=\"line\">$: uname -a</span><br><span class=\"line\"><span class=\"comment\"># 删除旧内核</span></span><br><span class=\"line\">$: sudo apt-get remove</span><br><span class=\"line\">$: linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-get remove  </span><br><span class=\"line\">$: linux-image-extra-x.xx.x-xx-generic  </span><br><span class=\"line\"><span class=\"comment\"># 或用这个命令移除</span></span><br><span class=\"line\">$: sudo dpkg --purge linux-image-x.x.x-xx-generic</span><br><span class=\"line\"><span class=\"comment\"># 禁止更新内核，需时间来验证</span></span><br><span class=\"line\">$: sudo apt-mark hold linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-mark hold linux-image-extra-x.xx.x-xx-generic</span><br><span class=\"line\"><span class=\"comment\"># 如果需要恢复原来的设定的话即允许更新内核，执行如下命令即可：</span></span><br><span class=\"line\">$: sudo apt-mark unhold linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-mark unhold linux-image-extra-x.xx.x-xx-generic</span><br></pre></td></tr></table></figure><h4 id=\"终端常用等宽字体\">终端常用等宽字体</h4><hr><ul><li>AR PL UKai CN 12</li><li>Bitstream Vera Sans Mono 10</li><li>Courier 10 Pitch 11</li><li>DejaVu Sans Mono 10</li><li>FreeMono 11</li><li>Nimbus Mono L 12</li><li>TlwgMono 11</li></ul><h4 id=\"crossover18破解\">crossover18破解</h4><hr><p>下载 <a href=\"https://pan.baidu.com/s/1BnT-cAKf-SBp-6J4CQoo-g\" target=\"_blank\" rel=\"noopener\">CrossoverPatch</a> <code>密码: ffp0</code>，解压后替换文件：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  备份原文件</span></span><br><span class=\"line\">$: cp ~/cxoffice/lib/wine/winewrapper.exe.so ~/cxoffice/lib/wine/winewrapper.exe.so-bak</span><br><span class=\"line\"><span class=\"comment\"># 替换文件</span></span><br><span class=\"line\">$: cp CrossoverPatch/winewrapper.exe.so ~/cxoffice/lib/wine</span><br></pre></td></tr></table></figure><h4 id=\"vim插件配置\">vim插件配置</h4><hr><ol><li><a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"noopener\">Vundle</a> =&gt; 插件管理器，编辑.vimrc，然后执行命令<code>vim +PluginInstall</code>即可安装</li><li><a href=\"https://github.com/vim-airline/vim-airline\" target=\"_blank\" rel=\"noopener\">vim-airline</a> =&gt; 底部状态栏</li><li><a href=\"https://juejin.im/post/5a38c37f6fb9a0450909a151\" target=\"_blank\" rel=\"noopener\">其他配置</a></li></ol><h4 id=\"Ubuntu18-04-定制Mac主题\">Ubuntu18.04 定制Mac主题</h4><hr><p><img src=\"Ubuntu18.04-5.png\" alt=\"overview.png\"></p><p><img src=\"Ubuntu18.04-6.png\" alt=\"desktop.png\"></p><ol><li>安装gnome-tweak-tool 和 chrome-gnome-shell 插件 (<code>sudo aptitude install [name]</code>)</li><li>安装GTK3主题 =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">X-Arc-Collection</a></li><li>使用tweak载入应用程序主题 =&gt; tweak – 外观 – 应用程序 – 选择X-Arc-Collection</li><li>安装gnome-shell 主题 =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li><li>安装gnome-shell 插件 =&gt; <a href=\"https://extensions.gnome.org/extension/19/user-themes/\" target=\"_blank\" rel=\"noopener\">User Themes</a> ( 之后重启Gnome =&gt; [Alt + F2] &amp; [输入 r] &amp; [点击 Enter] )</li><li>使用tweak载入shell主题 =&gt; tweak – 外观 – shell – 选择Sierra shell主题</li><li>下载Mac图标主题 <a href=\"https://github.com/keeferrourke/la-capitaine-icon-theme/releases\" target=\"_blank\" rel=\"noopener\">la-capitaine-icon-theme</a> 或 <a href=\"https://www.pling.com/p/1305429/\" target=\"_blank\" rel=\"noopener\">McMojave-circle</a></li><li>图标文件夹移动到 ~/.icons目录下(没有则新建目录)</li><li>使用tweak载入icon主题 =&gt; tweak – 外观 – 图标 – 选择对应的图标主题</li><li>安装gnome-shell插件 =&gt; Dash to dock (将原生dock转变为可定制的浮动dock)</li><li>定制firefox主题 =&gt; <a href=\"https://github.com/vinceliuice/Mojave-gtk-theme\" target=\"_blank\" rel=\"noopener\">Majave-gtk-theme</a></li></ol><h4 id=\"Ubuntu18-04-自己定制-登录、锁屏界面的图片和样式\">Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式</h4><hr><p><img src=\"Ubuntu18.04-7.png\" alt=\"lockscreen.png\"></p><p><img src=\"Ubuntu18.04-8.png\" alt=\"loginscreen.png\"></p><ol><li>安装脚本 =&gt; <a href=\"https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/login-manager-config-ubuntu\" target=\"_blank\" rel=\"noopener\">github / nojsja / login-manager-config-ubuntu</a></li><li>说明=&gt; 脚本通过更改/usr/share/gnome-shell/theme/ubuntu.css文件中声明的样式来修改系统登录页面按钮布局和背景图片的地址，使用ImageMagick包的<code>convert -blur</code>命令制作了毛玻璃效果的登录背景图片，最后还生成了一个SetAsWallpaper脚本，可以在文件夹中的图片文件上右键点击选择运行这个脚本(它会自动把目标图片更改成桌面壁纸和毛玻璃效果化的登录背景图)，最后锁屏壁纸需要用户手动安装<code>gnome-tweak-tool</code>进行更改。</li><li>之前我想通过更改<code>/usr/share/gnome-shell/theme/gdm3.css</code>文件来修改样式，可是发现ubuntu18.04下总会有这样那样的问题。</li><li>注意=&gt; 不要贸然尝试更改系统主题的CSS样式文件，如果修改的文件有语法错误或是其它原因，很可能会造成系统开机后无法登入图形界面(出现这种情况可以插入U盘登录PE系统然后挂载原系统的硬盘，最后将错误文件改回即可)。</li></ol><h4 id=\"Ubuntu18-04-关于定制plymouth主题来更换开机动画\">Ubuntu18.04 关于定制plymouth主题来更换开机动画</h4><hr><blockquote><p>其实我不建议去改开机动画，一个原因是ubuntu自己的开机动画就挺美观简洁的，第二个原因是这个东西如果改出问题了卡在开机画面到时候恢复起来比较麻烦，如果执意想去折腾的话，可以去<a href=\"https://www.gnome-look.org/browse/cat/108/\" target=\"_blank\" rel=\"noopener\">gnome-look</a>看看，这里提供一个苹果主题<a href=\"https://pan.baidu.com/s/1qv3GZ_BE-jj2HIpiI2X7yQ\" target=\"_blank\" rel=\"noopener\">darwin</a>，密码: <code>rc6u</code>。</p></blockquote><ol><li><p>解压下载的plymouth主题到 <code>/usr/share/plymouth/themes</code></p></li><li><p>执行安装</p></li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-alternatives --install /usr/share/plymouth/themes/ default.plymouth default.plymouth /usr/share/plymouth/themes/[THEME]/[THEME].plymouth 100</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>更新配置，需要手动选择plymouth编号</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-alternatives --config default.plymouth</span><br><span class=\"line\">$: sudo update-initramfs -u</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>手动更改错误路径参数</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /usr/share/plymouth/themes/default.plymouth</span><br></pre></td></tr></table></figure><p>替换<code>ImageDir</code>和<code>ScriptFile</code>为正确的plymouth文件存放路径，替换后：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageDir=/usr/share/plymouth/themes/[THEME]</span><br><span class=\"line\">ScriptFile=/usr/share/plymouth/themes/[THEME]/[THEME].script</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-使用-Dash-to-dock-插件时同时出现两个dock的问题\">Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题</h4><hr><blockquote><p>解决方法是去tweak设置里关闭[Dash to dock]的开关，别担心，关闭后，[Dash to dock]仍然正常工作，但是再也不会同时出现两个dock栏的尴尬情况了。</p></blockquote><p><img src=\"Ubuntu18.04-9.png\" alt=\"dock-noise.png\"></p><p><img src=\"Ubuntu18.04-10.png\" alt=\"dock-single.png\"></p><h4 id=\"Ubuntu18-04-添加软件源提示：没有Release文件，忽略源的问题\">Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题</h4><hr><p><img src=\"Ubuntu18.04-11.png\" alt=\"dock-tweak.png\"></p><ol><li>打开 软件与更新</li><li>选择那个源点击编辑</li><li>更改 发行版 信息 (请在网页上查看这个源的仓库文件内的dists目录下有哪些发行版)</li></ol><h4 id=\"Ubuntu18-04-解决一些软件依赖不满足问题的问题\">Ubuntu18.04 解决一些软件依赖不满足问题的问题</h4><hr><p>=&gt; 以Ubuntu18.04安装16.04版本网易云音乐为例</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># gdebi安装包</span><br><span class=\"line\">$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb</span><br><span class=\"line\">$: Dependency is not satisfiable: libqt5libqgtk2</span><br><span class=\"line\"># Ubuntu18.04报出依赖问题，原因是libqt5libqgtk2已经被新的库qt5-style-plugins替代，</span><br><span class=\"line\"># 软件源里找不到这个库，当然我们也能手动安装libqt5libqgtk2，但是很可能会就此引出新的依赖问题</span><br></pre></td></tr></table></figure><p>=&gt; 方法：解压安装包修改依赖项并重新打包<br>=&gt; 步骤：</p><ol><li>deb包同级目录下创建文件夹</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: mkdir netease-cloud-music</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>解压安装包到这个文件夹中</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg -X netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb netease-cloud-music</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>解压控制信息</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb neteas-cloud-music&#x2F;DEBIAN&#x2F;</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>修改依赖文件(把libqt5libqgtk2修改为qt5-style-plugins)</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim编辑文件</span><br><span class=\"line\">$: vim neteas-cloud-music&#x2F;DEBIAN&#x2F;control</span><br><span class=\"line\"># 使用vim正则对libqt5libqgtk2进行搜索替换</span><br><span class=\"line\">:1,$s&#x2F;libqt5libqgtk2&#x2F;qt5-style-plugins&#x2F;g</span><br><span class=\"line\"># 或是手动查找Depends那一行中声明的libqt5libqgtk2进行替换替换即可</span><br></pre></td></tr></table></figure><ol start=\"5\"><li>生成新的安装包</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg-deb -b neteas-cloud-music</span><br><span class=\"line\">$: mv neteas-cloud-music.deb netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br></pre></td></tr></table></figure><ol start=\"6\"><li>安装</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用gdebi或dpkg进行安装即可</span><br><span class=\"line\">$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br><span class=\"line\">$: sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-安装Cinnamon桌面启动器\">Ubuntu18.04 安装Cinnamon桌面启动器</h4><hr><blockquote><p>cinnamon桌面也是基于gtk的，所以gonome下的一些gtk主题和icon主题也能直接使用，切换桌面后可以在设置界面直接切换主题。deepin桌面也能安装，美观度很好，但是卡死问题比较严重，不太推荐，Cinnamon相较而言安装后bug较少，可以正常使用。</p></blockquote><p>已知问题：</p><ul><li>Cinnamon桌面通知API可能有更改，常见的wine/crossover应用程序不能正常调用通知接口，QQ/Wehcat无法在通知栏提示消息，不太方便</li><li>输入法ibus不支持，无法正常使用，可以使用fcitx拼音和基于fcitx框架的sogou拼音</li><li>默认没有集成蓝牙管理器，需要安装<code>blueman</code>进行蓝牙管理</li><li>锁屏界面可能会非常卡顿</li><li>Cinnamon面板(等同gnome任务栏)默认安装了<code>系统托盘</code>，可以解决wine应用程序托盘菜单变成小窗口的bug，在面板通知区域正常显示</li><li>Cinnamon桌面动画性能也很低效，建议强制使用独立显卡</li></ul><p>安装步骤：</p><ol><li>添加仓库Key</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo add-apt-repository ppa:embrosyn/cinnamon  </span><br><span class=\"line\">$: sudo apt update &amp;&amp; sudo apt install cinnamon</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>安装完成了注销后可以在登录界面点击设置按钮选择进入某个桌面环境</li><li>卸载cinnamon</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get install ppa-purge</span><br><span class=\"line\">$: sudo ppa-purge ppa:embrosyn/cinnamon</span><br></pre></td></tr></table></figure><h4 id=\"Linux分区过小导致后期容量不足解决方法\">Linux分区过小导致后期容量不足解决方法</h4><hr><p>=&gt; 之前安装ubuntu 18.04的时候/var 分区只给了 1.5G，结果现在不够用了</p><ul><li>方法1</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get clean</span><br><span class=\"line\">$: sudo apt-get autoremove</span><br></pre></td></tr></table></figure><p>如果仍然空间不足，使用方法2。</p><ul><li>方法2<br>建立目录软链接解决(软链接和硬链接了解一下)：</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以/var目录为例 将占用过大的文件夹移出</span></span><br><span class=\"line\">$: mv /var/lib /opt</span><br><span class=\"line\"><span class=\"comment\"># 建立opt下的lib内目录的软链接到var目录</span></span><br><span class=\"line\">$: sudo ln -s /opt/lib /var</span><br></pre></td></tr></table></figure><ul><li>方法3<br>如果/var没有单独分区，则系统默认共享使用/home目录，若此时提示/var空间不足，则说明/home空间不足，这种情况，建议重新安装系统，重新规划分区结构。一般来说，/var目录2G-4G为好，或者不分区，共享/home。</li></ul><h4 id=\"Shadowsocks-Qt5安装的问题\">Shadowsocks-Qt5安装的问题</h4><hr><blockquote><p>shadowsocks的GUI版本，用Qt写的，还行，不过我喜欢用sslocal命令脚本来连接服务器，开机自启动，很方便。顺带写个安装流程，不过会遇到我上面提到的 <strong>软件源提示没有Release文件的问题</strong>，可以通过上面的方法解决，这里需要将shadowdocks-Qt5发行版信息更改为<code>artful</code>，改为其它发行版可能会遇到依赖问题，遇到依赖问题多尝试几个，还有两行配置文件都要改额。</p></blockquote><p>&gt; sudo add-apt-repository ppa:hzwhuang/ss-qt5<br>&gt; sudo apt update<br>&gt; sudo apt-get install shadowsocks-qt5</p><h4 id=\"使用polipo开启终端代理-需要先开启shadowsocks代理\">使用polipo开启终端代理(需要先开启shadowsocks代理)</h4><hr><ul><li>安装脚本(适合于bash和zsh终端) =&gt; <a href=\"https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/shadowsocks-terminal\" target=\"_blank\" rel=\"noopener\">github / nojsja / polipo-install-config.sh&quot;</a></li><li>使用方式<br>&gt; 说明：’ hp ’ == ’ http_proxy=http://localhost:8123 ’ for any command<br>&gt; 说明：’ gp ’ == ‘http.proxy=localhost:8123’ for git proxy config<br>&gt; 使用1：<code>hp curl ip.gs</code><br>&gt; 使用2：<code>git clone https://android.googlesource.com/tools/repo --config $gp</code></li><li>如果polipo启动报错的话(通过<code>systemctl status polipo</code>查看)，可能是你的垃圾清理软件删除了polipo的日志文件夹，你可以手动更改polipo配置文件(<code>/etc/polipo/config</code>)禁用日至记录功能</li></ul><h4 id=\"将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\">将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表</h4><hr><blockquote><p>很多软件只有解压版，虽然可以解压后发送快捷方式到桌面，但是没有图标，应用列表也看不了。</p></blockquote><p>=&gt; 安装脚本(测试环境ubuntu18.04) =&gt; <a href=\"https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/application\" target=\"_blank\" rel=\"noopener\">github / nojsja / makeIconLink</a><br>=&gt; 使用方式</p><ul><li>安装之前：请先将需要作为图标的icon图片(比例1:1比较适合，分辨率最好大于64px % 64px)放入目标文件夹内</li><li>查看说明：</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure><ul><li>安装指令：</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --dir /path/to/[<span class=\"built_in\">exec</span>-file] --target [<span class=\"built_in\">exec</span>-file-name] --icon [icon-file-name]</span><br></pre></td></tr></table></figure><ul><li>卸载指令：</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --uninstall [<span class=\"built_in\">exec</span>-file-name]</span><br></pre></td></tr></table></figure><h4 id=\"自定义shadowsocks服务开机自启动脚本\">自定义shadowsocks服务开机自启动脚本</h4><hr><blockquote><p>使用systemd来管理shadowsocks服务，开机自启动，不用打开shadowsocks-qt5软件，FQ了无痕 ~</p></blockquote><p>=&gt; 我的服务脚本：<a href=\"https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/startup.sh\" target=\"_blank\" rel=\"noopener\">startup.sh</a>、<a href=\"https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/shadowsocks\" target=\"_blank\" rel=\"noopener\">shadowsocks</a><br>=&gt; 步骤：</p><ul><li>编写shadowsocks service脚本文件，比如shadow.service</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"comment\"># 描述</span></span><br><span class=\"line\">Description=Shadowsocks Service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=oneshot</span><br><span class=\"line\"><span class=\"comment\"># 服务 start/stop 执行脚本(具体执行路径根据自己的目录更改)</span></span><br><span class=\"line\">ExecStart=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh start</span><br><span class=\"line\">ExecStop=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh stop</span><br><span class=\"line\">RemainAfterExit=yes</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\"><span class=\"comment\"># 一些简单的依赖信息</span></span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>将服务配置文件放到<code>/etc/systemd/system</code>下<br>&gt; sudo cp shadow.service /etc/systemd/system</li><li>设置服务自启动<br>&gt; systemctl enable shadow</li><li>服务开启和关闭<br>&gt; systemctl start shadow<br>&gt; systemctl stop shadow</li></ul><h4 id=\"Ubuntu18-04设置shadowsocks全局pac自动代理对浏览器无效\">Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效</h4><hr><p>=&gt; 先来一个shadowsocks全局pac代理的步骤：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pip需要先安装</span></span><br><span class=\"line\">$: sudo apt-get install python-pip python-dev build-essential</span><br><span class=\"line\">$: sudo pip install --upgrade pip</span><br><span class=\"line\">$: sudo pip install --upgrade virtualenv</span><br><span class=\"line\"><span class=\"comment\"># 安装pac自动生成程序</span></span><br><span class=\"line\">$: sudo pip install genpac</span><br><span class=\"line\"><span class=\"comment\"># 生成pac文件</span></span><br><span class=\"line\">$: mkdir ~/shadowsocks</span><br><span class=\"line\">$: <span class=\"built_in\">cd</span> shadowsocks</span><br><span class=\"line\"><span class=\"comment\"># proxy配置中的地址和端口具体要看你的shadowsocks连接配置</span></span><br><span class=\"line\">$: genpac --proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> -o autoproxy.pac --gfwlist-url=<span class=\"string\">\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"</span></span><br></pre></td></tr></table></figure><p>以上操作会在~/shadowsocks目录下生成autoproxy.pac配置文件，到系统设置 -&gt; 网络 -&gt; 网络代理 -&gt; 自动 -&gt; 填入file:///path/to/autoproxy.pac(上面我们生成的pac文件路径)，如果要新增被代理网站的话就自己编辑pac文件，在里面的域名列表里面再添加新的域名就好了。<br>=&gt; 再写一个脚本<a href=\"https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/shadowsocks/genpac\" target=\"_blank\" rel=\"noopener\">genpac-command</a>，可以用来添加用户过滤规则(user-rules.txt) 和在线更新autoproxy.pac代理文件</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># # 在脚本目录下执行</span></span><br><span class=\"line\"><span class=\"comment\"># 显示帮助信息</span></span><br><span class=\"line\">$: bash genpac-command --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 在线更新</span></span><br><span class=\"line\">$: bash genpac-command --update-online</span><br><span class=\"line\"><span class=\"comment\"># 从本地user-rules.txt文件读取更新</span></span><br><span class=\"line\">$: bash genpac-command --update-local</span><br><span class=\"line\"><span class=\"comment\"># 添加自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --add-rules opendesktop.org</span><br><span class=\"line\"><span class=\"comment\"># 添加多个自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --add-rules opendesktop.org atom.io</span><br><span class=\"line\"><span class=\"comment\"># 删除自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --del-rules opendesktop.org</span><br><span class=\"line\"><span class=\"comment\"># 删除多个自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --del-rules opendesktop.org atom.io</span><br></pre></td></tr></table></figure><p>=&gt; <strong>不过我遇到了代理pac文件配置好后，firefox和google浏览器仍然不能FQ的情况，仔细排查原因，我发现因为之前我不是用的pac全局代理，是通过浏览器的SwitchOmega插件来手动代理的，这个插件会接管浏览器的网络代理权限，我们需要到浏览器设置里面把网络代理设置为系统代理，以火狐浏览器为例：</strong></p><h4 id=\"Atom编辑器内存占用过大的问题\">Atom编辑器内存占用过大的问题</h4><hr><blockquote><p>Atom、Vscode、Sublime、Bracks都用过，Atom用着最爽，可定制化程度最高。但是有时候用着Atom电脑呼呼作响，查看系统占用，Atom内存占用达到过4、5个G，我的天！其实Atom出现内存泄漏的问题都不是Atom本身的问题，一定是你安装的哪个插件导致了内存泄漏，查看占用信息后定位到atom的插件，然后把它禁用就可以了，比如之前导致我出现这个问题的插件就是：ide-typescript，禁用之后现在基本一个Atom进程只占用200~400Mb左右，取决于你安装的其它插件。还有Atom要经常手动更新啊，仓库里面更新不了的，直接去Atom git仓库下载release正式版本，基本上一个大版本就要更新一次。</p></blockquote><h4 id=\"Grub2-主题安装\">Grub2 主题安装</h4><hr><p><img src=\"Ubuntu18.04-12.png\" alt=\"source.png\"></p><blockquote><p>Grub2就是引导操作系统启动的东西，开机的时候如果是多系统，就会显示多系统的启动菜单，如图，这个启动菜单可以自定义主题。</p></blockquote><ol><li>解压下载的主题文件 =&gt; <a href=\"https://pan.baidu.com/s/1ioMub2JmHlIzHJbS2_2gRQ\" target=\"_blank\" rel=\"noopener\">Vimix</a>，得到Vimix文件夹(这里提供我用的一个主题，也可以自已去下载其它主题)</li><li>在/boot/grub里创建GRUB2主题目录themes<br>&gt; sudo mkdir -p /boot/grub/themes</li><li>将下载的Vimix文件夹整体复制到/boot/grub/themes文件夹下<br>&gt; sudo cp -r Vimix /boot/grub/themes</li><li>修改/etc/default/grub配置文件<br>&gt; sudo gedit /etc/default/grub<br>在文件最后添加：GRUB_THEME=“/boot/grub/themes/Vimix/theme.txt” 并保存</li><li>更新GRUB<br>&gt; sudo update-grub</li><li>重启即生效(如果重启卡住请强制关机后再启动)</li></ol><h4 id=\"Ubuntu18-04-解决下载额外数据文件失败：ttf-mscorefonts-installer\">Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer</h4><hr><p><img src=\"Ubuntu18.04-13.png\" alt=\"firefox_proxy.png\"></p><ol><li><a href=\"http://sourceforge.net/projects/corefonts/files/the%20fonts/final/\" target=\"_blank\" rel=\"noopener\">sourceforge</a>下载如图所示11个exe文件并放入一个文件夹，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer</li><li>运行字体配置程序<br>&gt; sudo dpkg-reconfigure ttf-mscorefonts-installer</li><li>在配置窗口中输入刚才保存exe的路径确定即可，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer</li></ol><h4 id=\"Ubuntu18-04-WPS-提示字体缺失的解决方法\">Ubuntu18.04 WPS 提示字体缺失的解决方法</h4><hr><p>下载缺失的字体文件<a href=\"https://pan.baidu.com/s/10MushHhTXwfRIFkKGmwD7Q\" target=\"_blank\" rel=\"noopener\">fonts</a> (密码: 4jpo)，然后复制到Linux系统中的/usr/share/fonts文件夹中，再使用系统命令更新字体设置：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成字体的索引信息</span></span><br><span class=\"line\">$: sudo mkfontscale</span><br><span class=\"line\">$: sudo mkfontdir</span><br><span class=\"line\"><span class=\"comment\"># 更新字体缓存</span></span><br><span class=\"line\">$: sudo <span class=\"built_in\">fc</span>-cache</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-WPS-提示字体缺失的解决方法-2\">Ubuntu18.04 WPS 提示字体缺失的解决方法</h4><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装对应显卡驱动的32bit版本</span></span><br><span class=\"line\">$: sudo apt-get install libnvidia-gl-440:i386</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu20-04-使用deepin-screenshot截图后无法粘贴到输入框\">Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框</h4><hr><ul><li>安装<code>xfce4-clipman</code>，每次使用深度截图时保证它开启</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt install xfce4-clipman</span><br></pre></td></tr></table></figure><ul><li>也可以使用更高级的截图编辑管理软件<code>shutter</code>替代</li></ul><h4 id=\"Ubuntu18-04-更新Gnome版本\">Ubuntu18.04 更新Gnome版本</h4><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Upgrade</span></span><br><span class=\"line\"><span class=\"comment\">#If you were using the gnome3-team/gnome3-staging PPA, run the following before upgrading:</span></span><br><span class=\"line\">$: sudo ppa-purge ppa:gnome3-team/gnome3-staging</span><br><span class=\"line\">$: sudo ppa-purge ppa:gnome3-team/gnome3</span><br><span class=\"line\">$: sudo apt install ubuntu-gnome-desktop^</span><br><span class=\"line\"><span class=\"comment\"># The included GUI update manager will offer you the latest release of Ubuntu GNOME. Access this via the terminal:</span></span><br><span class=\"line\">$: update-manager -c</span><br><span class=\"line\"><span class=\"comment\"># Alternatively, run the following command:</span></span><br><span class=\"line\">$: sudo <span class=\"keyword\">do</span>-release-upgrade</span><br></pre></td></tr></table></figure><h4 id=\"Win10-Ubuntu18-04-双系统时间显示不对\">Win10 + Ubuntu18.04 双系统时间显示不对</h4><hr><blockquote><p>Ubuntu和Windows默认的时间管理方式不同，所以双系统发生时间错乱是正常的。Ubuntu默认时间是把BIOS时间当成GMT+0时间，也就是世界标准时，而我国在东八区(GMT+8)，所以如果你的Ubuntu位置是中国的话你系统显示的时间就是BIOS时间+8小时。假如现在是早上8点，那么你Ubuntu会显示8点，这时BIOS中的时间是0点。而当你切换到Windows系统时就会发生时间错乱，因为Windows会认为BIOS时间就是你的本地时间，结果就是Windows显示时间为0点……而假如你在Windows下同步时间，恢复显示为8点，这时BIOS时间也会被Windows改写成8点，再次进入Ubuntu时显示时间又变成了8+8=16点。</p></blockquote><ol><li>先在Ubuntu下更新一下时间<br>&gt; sudo apt-get install ntpdate<br>&gt; sudo ntpdate <a href=\"http://time.windows.com\" target=\"_blank\" rel=\"noopener\">time.windows.com</a></li><li>将时间更新到硬件上<br>&gt; sudo hwclock --localtime --systohc</li><li>关闭linux重新进入windows系统，发现时间正常了</li></ol><h4 id=\"Ubuntu18-04-安装系统时说明-双硬盘\">Ubuntu18.04 安装系统时说明(双硬盘)</h4><hr><blockquote><p>主要分为 [ <em>GPT磁盘分区+UEFI引导方案</em> ] 和 [ <em>传统MBR磁盘分区 + LEGANCY引导方案</em> ]</p></blockquote><ol><li>方案一(兼容方案 gpt+uefi / mbr+legancy)<br>使用UEFI模式安装Ubuntu18.04时可以选择用 兼容bios启动方式 来安装系统(同时兼容传统启动方式和UEFI启动方式)，即不分配&quot;/boot “分区，分配一个大小为1GB左右的&quot;保留bios启动区域”(UEFI模式会自动挂载/boot和/boot/efi)，其它分区至少还需要一个根分区&quot;/&quot;，8G内存的情况下最好还是分配8G的swap交换分区，另外除了&quot;保留bios启动区域&quot;为主分区，其它分区均为逻辑分区，最后一步很重要 – 格式化每个分区，要不然安装很可能会出错！<a href=\"https://blog.csdn.net/jesse_mx/article/details/61425361\" target=\"_blank\" rel=\"noopener\">参考</a></li><li>方案二(gpt+uefi 已使用方案)<br>创建&quot;efi系统分区&quot;，同时不需要划分&quot;/boot&quot;分区(boot引导是grub由引导的，而efi显然是UEFI引导的)，其余至少还需要划分&quot;/“根分区，除了根分区所有分区都为逻辑分区，最后选择&quot;安装启动引导器的设备&quot;为刚才创建的&quot;efit系统分区”。</li><li>方案三(传统mbr+legancy方案)<br>传统的legancy + mbr的安装，至少划分&quot;/boot&quot;分区(主分区) 和 &quot;/“根分区，其余的分区按需划分，最后选择&quot;安装启动引导器的设备&quot;为创建的”/boot&quot;挂载点。</li></ol><h4 id=\"Ubuntu18-04-安装网易云音乐1-1-0后不能打开的解决方法\">Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法</h4><hr><ul><li>使用root权限命令行后台启动并且屏蔽输出<br>&gt; sudo netease-cloud-music &gt; /dev/null 2&gt;&amp;1 &amp;</li><li>规避session-manager引起的bug<br>&gt; alias netease=‘unset SESSION_MANAGER &amp;&amp; netease-cloud-music’<br>&gt; netease &gt; /dev/null &amp;</li><li>别用那个鸡肋的客户端了，有bug也不更新，上这个酷酷的第三方客户端<a href=\"https://github.com/trazyn/ieaseMusic\" target=\"_blank\" rel=\"noopener\">ieaseMusic</a></li><li>这里还有个别人做的针对ubuntu18.04的<a href=\"https://github.com/innoob/netease-cloud-music\" target=\"_blank\" rel=\"noopener\">重新构建版本</a>，可以正常使用，也没有重复登录的bug</li></ul><h4 id=\"Ubuntu18-04-Crossover17安装QQ后乱码的解决方法\">Ubuntu18.04 Crossover17安装QQ后乱码的解决方法</h4><hr><blockquote><p>原因：原来的ume-ui-gothic.ttf不支持很多简体中文字符</p></blockquote><p>使用其它字体文件替换到目录 /opt/cxoffice/share/wine/fonts 下的<a href=\"https://pan.baidu.com/s/13CDBKrvTAJOhrbuyLw96jA\" target=\"_blank\" rel=\"noopener\">ume-ui-gothic.ttf</a>字体文件 (同名)，记得将下好的文件重命名为ume-ui-gothic.ttf。</p><h4 id=\"Ubuntu18-04-通过tweak安装gnome插件Blyr后设置插件报错\">Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错</h4><hr><p>=&gt; 错误信息：<code>Error: Requiring Clutter, version none: Typelib file for namespace 'Clutter' (any version) not found ...</code><br>=&gt; 原因分析：该插件需要的依赖Clutter尚未安装<br>=&gt; 解决方法：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$: sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-一直提示-“检测到系统程序出现问题”\">Ubuntu18.04 一直提示 “检测到系统程序出现问题”</h4><hr><p>ubuntu18.04已经移除了gksu软件，所以使用替代命令</p><ol><li>添加alias命令</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: <span class=\"built_in\">alias</span> gksu=<span class=\"string\">'pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'</span></span><br></pre></td></tr></table></figure><ol start=\"2\"><li>编辑错误报告相关设置</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: gksu gedit /etc/default/apport</span><br><span class=\"line\"><span class=\"comment\"># 把`enable = 1`改为`enable = 0`</span></span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu20-04-使用系统播放器打开视频提示“安装h-264编码软件”\">Ubuntu20.04 使用系统播放器打开视频提示“安装h.264编码软件”</h4><hr><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt install libdvdnav4 libdvd-pkg gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly libdvd-pkg</span><br><span class=\"line\">$: sudo apt install ubuntu-restricted-extras</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-Gnome-Shell-插件\">Ubuntu18.04 Gnome-Shell 插件</h4><hr><ul><li><a href=\"https://extensions.gnome.org/extension/97/coverflow-alt-tab/\" target=\"_blank\" rel=\"noopener\">CoverFlow Alt-Tab</a> =&gt; 窗口Tab切换预览(★★★★☆)</li><li><a href=\"https://extensions.gnome.org/extension/19/user-themes/\" target=\"_blank\" rel=\"noopener\">User Themes(必要)</a> =&gt; 用户主题安装(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/307/dash-to-dock/\" target=\"_blank\" rel=\"noopener\">Dash To Dock</a> =&gt; dock栏(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1160/dash-to-panel/\" target=\"_blank\" rel=\"noopener\">Dash To Panel</a> =&gt; 将dock和顶栏显示在一起(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1236/noannoyance/\" target=\"_blank\" rel=\"noopener\">NoAnnoyance</a> =&gt; 禁用多余的pop提示信息，直接提升活动窗口(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/595/autohide-battery/\" target=\"_blank\" rel=\"noopener\">Autohide Battery</a> =&gt; 电池充满并连接电源时自动隐藏电池按钮(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/8/places-status-indicator/\" target=\"_blank\" rel=\"noopener\">Places Status Indicator</a> =&gt; 顶部任务栏显示磁盘和卷的快捷入口(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/7/removable-drive-menu/\" target=\"_blank\" rel=\"noopener\">Removable Drive Menu</a> =&gt; 顶部任务栏显示可移除的已挂载设备(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/826/suspend-button/\" target=\"_blank\" rel=\"noopener\">Suspend Button</a> =&gt; 顶部菜单栏显示休眠按钮(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/495/topicons/\" target=\"_blank\" rel=\"noopener\">TopIcons</a> =&gt; 顶部通知图标托盘(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1031/topicons/\" target=\"_blank\" rel=\"noopener\">TopIconsPlus</a> =&gt; 顶部通知图标托盘，自定义图标显示参数(★★★★☆)</li><li><a href=\"https://extensions.gnome.org/extension/1251/blyr/\" target=\"_blank\" rel=\"noopener\">Blyr</a> =&gt; 模糊应用预览背景图(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/358/activities-configurator/\" target=\"_blank\" rel=\"noopener\">Activities Configurator</a> =&gt; 配置左上角活动按钮(★★★★☆)</li><li><a href=\"https://extensions.gnome.org/extension/427/workspaces-to-dock/\" target=\"_blank\" rel=\"noopener\">Workspace to Dock</a> =&gt; 将工作区转换为悬浮dock(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1036/extensions/\" target=\"_blank\" rel=\"noopener\">Extensions</a> =&gt; 在通知栏添加快捷开启和关闭gnome-shell插件的功能(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/779/clipboard-indicator/\" target=\"_blank\" rel=\"noopener\">Clipboard Indicator</a> =&gt; 可视化剪贴板(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/906/sound-output-device-chooser/\" target=\"_blank\" rel=\"noopener\">Sound Input &amp; Output Device Chooser</a> =&gt; 声音输入和输入设备快速选择(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1236/noannoyance/\" target=\"_blank\" rel=\"noopener\">NoAnnoyance</a> =&gt; 取消“窗口已就绪”提示直接提升窗口(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/\" target=\"_blank\" rel=\"noopener\">Bluetooth quick connect</a> =&gt; 蓝牙设备快速连接和断开(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1403/remove-alttab-delay/\" target=\"_blank\" rel=\"noopener\">Remove Alt+Tab Delay</a> =&gt; 移除【Alt + Tab】的开启应用预览延迟(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1162/emoji-selector/\" target=\"_blank\" rel=\"noopener\">Emoji Selector</a> =&gt; 快速选择Emoji表情(★★★★)</li></ul><h4 id=\"Ubuntu18-04-插件-Dash-to-dock-一些常用设置\">Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置</h4><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Use Custom Dock Indicator ( Optional )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots <span class=\"literal\">false</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots <span class=\"literal\">false</span></span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable Custom Dock Shrink ( Required for Good looking) (  Required )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-shrink <span class=\"literal\">false</span></span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dock Transparency mode ( Optional )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT</span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Restore to Default</span></span><br><span class=\"line\">$: dconf reset -f /org/gnome/shell/extensions/dash-to-dock/</span><br><span class=\"line\">_______________________________________________________________________________________________</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-主题\">Ubuntu18.04 主题</h4><hr><ul><li>GTK3主题(★★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">X-Arc-Collection</a></li><li>GTK3主题(★★★★★) =&gt; <a href=\"https://www.gnome-look.org/p/1241688\" target=\"_blank\" rel=\"noopener\">McOS-themes</a></li><li>Gnome Shell主题(★★★★) =&gt; <a href=\"https://github.com/daniruiz/flat-remix\" target=\"_blank\" rel=\"noopener\">Flat-Remix</a></li><li>Gnome Shell主题(★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1171095/\" target=\"_blank\" rel=\"noopener\">Human</a></li><li>Gnome Shell主题(★★★★★) =&gt; <a href=\"https://www.opendesktop.org/c/1460761561\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li><li>Gnome Shell主题(?) =&gt; <a href=\"https://www.gnome-look.org/p/1213208/\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li><li>Icon 主题(★★★★) =&gt; <a href=\"https://github.com/daniruiz/flat-remix/releases\" target=\"_blank\" rel=\"noopener\">flat-remix</a></li><li>Icon 主题(★★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1012200/\" target=\"_blank\" rel=\"noopener\">Mac OS X Icon</a></li><li>Icon 主题(★★★★★) =&gt; <a href=\"https://github.com/keeferrourke/la-capitaine-icon-theme/releases\" target=\"_blank\" rel=\"noopener\">la-capitaine-icon-theme</a></li><li>Icon 主题(★★★★★) <a href=\"https://www.pling.com/p/1305429/\" target=\"_blank\" rel=\"noopener\">McMojave-circle</a></li><li>Icon 主题(★★★★☆) =&gt; <a href=\"https://github.com/zayronxio/Macos-sierra-CT\" target=\"_blank\" rel=\"noopener\">MacOS sierra ct</a></li><li>Cursor主题(★★★★☆) =&gt; <a href=\"https://krourke.org/projects/art/capitaine-cursors\" target=\"_blank\" rel=\"noopener\">Capitaine Cursors</a></li></ul><h4 id=\"chrome实用插件整理\">chrome实用插件整理</h4><hr><ul><li><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">infinity pro 标签页</a> =&gt; 主页标签管理器(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Octotree</a> =&gt; github仓库文件资源浏览树(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Postman</a> =&gt; API测试和请求模拟器(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">SwitchyOmega</a> =&gt; 大家都用的代理软件(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">印象笔记剪藏</a> =&gt; 随时随地把网络资源保存到你的笔记本里(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">SimpRead</a> =&gt; 让浏览器支持纯净的阅读模式(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Full Page Screen Capture</a> =&gt; 全屏截图(★★★★☆)</li><li><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">油猴tampermonkey</a> =&gt; 用户脚本管理器，一个用例是破解badu网盘的限速(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Checker Plus for Gmail</a> =&gt; Google邮件提示插件(★★★★☆)</li><li><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Vimium</a> =&gt; 让google浏览器支持vim模式(firefox也有)(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/copy-as-markdown/dgoenpnkphkichnohepecnmpmihnabdg\" target=\"_blank\" rel=\"noopener\">拷贝为Markdown</a> =&gt; 将选中网页转化为markdown格式并发送到剪贴板(★★★★☆)</li></ul><h4 id=\"实用程序和命令\">实用程序和命令</h4><hr><ul><li><a href=\"https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager\" target=\"_blank\" rel=\"noopener\">fonts-firacode编程字体</a> =&gt; 解决vscode字体间隙过小的问题<code>sudo apt install fonts-firacode</code></li><li><a href=\"https://vivaldi.com\" target=\"_blank\" rel=\"noopener\">vivaldi浏览器</a> =&gt; 可定制化程度高的个性化浏览器(★★★★★)</li><li>Terminator =&gt; 默认gnome终端升级版(★★★★★)</li><li>Timeshift =&gt; 创建系统快照，增量备份(★★★★★)</li><li>ipython3(命令工具) =&gt; python交互解释器(★★★★★)</li><li>jupyter =&gt; 交互式数据分析和记录工具(★★★★☆)</li><li>pdb/ipdb(命令工具) =&gt; python调试器(★★★★☆)</li><li>trash-cli(命令工具) =&gt; 命令行回收站(★★★★★)</li><li>bat(命令工具) =&gt; cat升级版，支持语法高亮和git状态显示(★★★★★)</li><li>axel(命令工具) =&gt; 下载限速不存在的，如果存在那我就开100个下载线程 : )(★★★★☆)</li><li><a href=\"https://github.com/aria2/aria2\" target=\"_blank\" rel=\"noopener\">aria2(命令工具)</a> =&gt; 强大的命令行下载工具</li><li><a href=\"https://github.com/oguzhaninan/Stacer\" target=\"_blank\" rel=\"noopener\">stacer</a> =&gt; linux电脑管家(★★★★★)</li><li><a href=\"https://github.com/trazyn/ieaseMusic\" target=\"_blank\" rel=\"noopener\">ieaseMusic</a> =&gt; 网易云音乐第三方客户端，没有bug，不会退出后再打开就让重新登陆[注：网易云音乐官方已修复]，界面还很酷(★★★★★)</li><li>parallel(命令工具) =&gt; 利用系统的多核来并行执行你的程序(★★★★☆)</li><li>cheat(命令工具) =&gt; 类似man命令的功能，简洁高效(★★★★☆)</li><li>topgrade(命令工具) =&gt; 一个命令更新所有软件(★★★★)</li><li><a href=\"https://www.dbkoda.com/\" target=\"_blank\" rel=\"noopener\">dbKoda</a> =&gt; mongodb GUI工具(★★★★☆)</li><li><a href=\"https://www.mongodb.com/products/compass\" target=\"_blank\" rel=\"noopener\">mongodb compass</a> =&gt; mongodb GUI工具(★★★★)</li><li><a href=\"https://github.com/phw/peek\" target=\"_blank\" rel=\"noopener\">peek</a> =&gt; 屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件(★★★★☆)</li><li>tmux =&gt; 终端管理器(★★★★)</li><li>深度终端(ubuntu商店下载) =&gt; 支持分屏，内置实用主题(★★★★☆)</li><li>深度截图(ubuntu商店下载) =&gt; 支持截图编辑(★★★★★)</li><li>shutter截图 =&gt; 功能丰富的截图和图标编辑软件，添加<code>ppa:linuxuprising/shutter</code>安装(★★★★☆)</li><li>flameshot =&gt; 支持Ubuntu20.04的截图编辑工具(★★★★★)</li><li><a href=\"https://webtorrent.io/desktop/\" target=\"_blank\" rel=\"noopener\">WebTorrent</a>、<a href=\"https://www.frostwire.com/\" target=\"_blank\" rel=\"noopener\">FrostWire</a> =&gt; bt下载工具，支持边下边播(★★★★)</li><li><a href=\"https://www.syntevo.com/smartgit/\" target=\"_blank\" rel=\"noopener\">SmartGit</a> =&gt; linux平台免费的GIT GUI工具(★★★★★)</li><li>FileZilla =&gt; ftp工具(★★★★★)</li><li><a href=\"https://github.com/Suremotoo/e-tools\" target=\"_blank\" rel=\"noopener\">e-tools</a> =&gt; coder常用小工具(★★★★)</li><li><a href=\"https://electronjs.org/apps/whatever\" target=\"_blank\" rel=\"noopener\">WhatEver</a> =&gt; linux第三方印象笔记客户端，基于网页版(★★★★)</li><li><a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">wps</a> =&gt; linux office for free made by KingSoftware(★★★★★)</li><li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode</a> =&gt; 轻量化编辑器，很快！ (★★★★★)</li><li>ndb =&gt; node.js/javascript 调试器(★★★★★)</li><li><a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh\" target=\"_blank\" rel=\"noopener\">nvm</a> =&gt; nodejs版本管理器</li><li>albert (添加软件源 <code>ppa:noobslab/macbuntu</code> 安装 ) =&gt; 桌面全局搜索类似Mac系统的SpotLight(★★★★★)</li><li><a href=\"https://linux.cn/article-5460-1.html\" target=\"_blank\" rel=\"noopener\">lftp</a> =&gt; 一个基于命令行的文件传输软件，支持FTP，FTPS，HTTP，HTTPS，HFTP，FISH，以及SFTP等协议，也有许多高级特性比<br>如：多线程下载、断点续传</li><li><a href=\"http://jonls.dk/redshift/\" target=\"_blank\" rel=\"noopener\">redshift-gtk</a> 护眼模式，自带的色彩太黄了</li><li>apt-fast =&gt; 比apt更快的包管理器，添加<code>ppa:apt-fast/stable</code>安装(★★★★★)</li><li>nautilus action configure tool =&gt; 资源管理器右键菜单自定义，添加<code>ppa:daniel-marynicz/filemanager-actions</code>安装(★★★★★)</li><li>tig =&gt; 可交互的命令行git命令(★★★★★)</li><li>shellcheck =&gt; shell脚本语法检查(★★★★★)</li><li><a href=\"https://motrix.app/zh-CN/\" target=\"_blank\" rel=\"noopener\">Motrix</a> =&gt; 全平台下载工具，用于替代迅雷(★★★★★)</li><li><a href=\"https://github.com/jgraph/drawio-desktop/\" target=\"_blank\" rel=\"noopener\">Drawio</a> =&gt; 全平台绘图工具(流程图、类图、工程图…)，功能跟微软的visio相同(★★★★★)</li><li><a href=\"https://github.com/Winetricks/winetricks\" target=\"_blank\" rel=\"noopener\">winetricks</a> =&gt; wine环境的辅助工具，可用于生成wine基础环境、安装windows dll和字体等等(★★★★★)</li><li><a href=\"https://www.insynchq.com/\" target=\"_blank\" rel=\"noopener\">Insync</a> =&gt; 全平台同步工具，支持google云和onedrive(★★★★★)</li><li><a href=\"https://github.com/teejee2008/timeshift\" target=\"_blank\" rel=\"noopener\">Timeshift</a> =&gt; 创建系统增量备份计划(★★★★★)</li><li>dconf-editor =&gt; gnome桌面配置gui工具(★★★★)</li></ul><h4 id=\"实用网站推荐\">实用网站推荐</h4><hr><p><img src=\"Ubuntu18.04-14.png\" alt=\"Vimix.png\"></p><ul><li><a href=\"https://wallpapershome.com/\" target=\"_blank\" rel=\"noopener\">Wallpaper</a> =&gt; 高清桌面壁纸下载，支持多种分辨率(★★★★★)</li><li><a href=\"https://www.flaticon.com\" target=\"_blank\" rel=\"noopener\">flaticon</a> =&gt; 免费图标下载网站，支持svg和png两种格式</li><li><a href=\"https://electronjs.org/apps\" target=\"_blank\" rel=\"noopener\">Electron Apps</a> =&gt; 有很多Electron 框架写的跨平台应用(Linux/Mac/Windows)(★★★★☆)</li><li><a href=\"https://www.centos.bz/\" target=\"_blank\" rel=\"noopener\">Linux运维日志</a> =&gt; 服务搭建、Linux技术之类的(★★★★☆)</li><li><a href=\"https://www.ibm.com/developerworks/cn/\" target=\"_blank\" rel=\"noopener\">IBM Developer</a> =&gt; 技术文档类的参考(★★★★★)</li><li><a href=\"https://www.lulinux.com/archives/2513#awk\" target=\"_blank\" rel=\"noopener\">Linux常用命令</a> =&gt; 常用命令速查(★★★★☆)</li><li><a href=\"https://www.kanbilibili.com/\" target=\"_blank\" rel=\"noopener\">bilibili工具网站</a> =&gt; 支持 视频/弹幕/封面 下载等骚操作(★★★★★)</li><li><a href=\"https://linux.cn/\" target=\"_blank\" rel=\"noopener\">Linux中国</a> =&gt; 没事儿就上去看看别人翻译转载的文章(★★★★☆)</li><li><a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">TinyPNG</a> =&gt; 免费的图片无损压缩网站(★★★★☆)</li><li><a href=\"https://www.iloveimg.com/zh-cn\" target=\"_blank\" rel=\"noopener\">iLoveIMG</a> =&gt; 在线图片编辑网站(★★★★★)</li><li><a href=\"https://en.savefrom.net/\" target=\"_blank\" rel=\"noopener\">savefrom</a> =&gt; 直接下载youtube视频(★★★★☆)</li><li><a href=\"https://www.lulinux.com/\" target=\"_blank\" rel=\"noopener\">撸Linux</a> =&gt; 好像还蛮有趣的额(★★★★☆)</li><li><a href=\"https://greasyfork.org/zh-CN/scripts\" target=\"_blank\" rel=\"noopener\">油猴脚本</a> =&gt; 你甚至可以用来破解百度云限速(★★★★★)</li></ul><p><em>注：以上内容部分是从网络搜集，希望解决广大Linuxer的问题所以做了部分整合.</em></p>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"Ubuntu18.04-1.jpg\" alt=\"welcome / home\"></p><h4 id=\"目录\">目录</h4><hr><ul><li>Wine应用启动后出现WineSystemTray 托盘的问题</li><li>中文环境下将Home目录下的文件夹切换为英文名</li><li>Ubuntu系发行版安装deepin wine QQ</li><li>续：安装QQ/微信</li><li>Ubuntu 18.04开机启动特别慢的问题</li><li>终端oh-my-zsh配置</li><li>终端终结者Terminator配置</li><li>禁用内核更新</li><li>终端常用等宽字体</li><li>crossover18破解</li><li>vim插件配置</li><li>Ubuntu18.04 定制Mac主题</li><li>Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式</li><li>Ubuntu18.04 关于定制plymouth主题来更换开机动画</li><li>Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题</li><li>Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题</li><li>Ubuntu18.04 解决一些软件依赖不满足问题的问题</li><li>Ubuntu18.04 安装cinnamon桌面启动器</li><li>Linux分区过小导致后期容量不足解决方法</li><li>Shadowsocks-Qt5安装的问题</li><li>使用polipo开启终端代理(需要先开启shadowsocks代理)</li><li>将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表</li><li>自定义shadowsocks服务开机自启动脚本</li><li>Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效</li><li>Atom编辑器内存占用过大的问题</li><li>Grub2 主题安装</li><li>Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer</li><li>Ubuntu18.04 WPS 提示字体缺失的解决方法</li><li>Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框</li><li>Ubuntu18.04 更新Gnome版本</li><li>Win10 + Ubuntu18.04 双系统时间显示不对</li><li>Ubuntu18.04 安装系统时说明(双硬盘)</li><li>Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法</li><li>Ubuntu18.04 Crossover17安装QQ后乱码的解决方法</li><li>Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错</li><li>Ubuntu18.04 一直提示 “检测到系统程序出现问题”</li><li>Ubuntu20.04 使用系统播放器打开视频提示“安装h.264编码软件”</li><li>Ubuntu18.04 Gnome-Shell 插件</li><li>Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置</li><li>Ubuntu18.04 主题</li><li>chrome实用插件整理</li><li>实用程序和命令</li><li>实用网站推荐</li></ul><h4 id=\"Wine应用启动后出现WineSystemTray托盘的问题\">Wine应用启动后出现WineSystemTray托盘的问题</h4><hr><p><img src=\"Ubuntu18.04-2.png\" alt=\"wine_tray.png\"></p><p><img src=\"Ubuntu18.04-3.png\" alt=\"tray.png\"></p><ol><li><p>操作系统Linux Mint18.3<br>右键点击面板(状态栏)，选择 - 向面板添加小程序，选择小程序 - 系统托盘，点击+号添加，之后Wine安装的应用和其它应用的图标就被系统托盘管理了。</p></li><li><p>操作系统Ubuntu 18.04<br>安装gnome-shell插件 <a href=\"https://extensions.gnome.org/extension/495/topicons/\" target=\"_blank\" rel=\"noopener\">TopIcons</a>, 要想从浏览器上安装这个TopIcons需要先安装浏览器gnome交互插件chrome-gnome-shell (<code>sudo apt install chrome-gnome-shell</code> )，使用deepin QQ的时候可能需要重新启动TopIcons才能显示顶部QQ图标，如果遇到图标无故隐藏的问题那么可以再安装插件<a href=\"https://extensions.gnome.org/extension/1160/dash-to-panel/\" target=\"_blank\" rel=\"noopener\">Dash to Panel</a>解决。</p></li></ol><h4 id=\"中文环境下将Home目录下的文件夹切换为英文名\">中文环境下将Home目录下的文件夹切换为英文名</h4><hr><ol><li>设置英文语言环境</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: <span class=\"built_in\">export</span> LANG=en_US(恢复-&gt; zh_CN)</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>更新目录</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: xdg-user-dirs-gtk-update</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>弹出提示框点击 [确认]</li><li>重启后会再次弹出提示框是否将英文文件夹改回中文，选择 [不再提示] 并 [取消] 修改</li></ol><h4 id=\"Ubuntu系发行版安装deepin-wine-QQ\">Ubuntu系发行版安装deepin wine QQ</h4><hr><ol><li><p>安装deepin-wine环境：上<a href=\"https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu\" target=\"_blank\" rel=\"noopener\">https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu</a>页面下载zip包（或用git方式克隆），也可以<a href=\"https://pan.baidu.com/s/120C5aHuqtyxQyn_fGTxHKg\" target=\"_blank\" rel=\"noopener\">百度网盘</a>下载，解压到本地文件夹，在文件夹中打开终端，输入<code>sudo sh ./install.sh</code>一键安装，如果你安装了这些依赖，在第二步的时候仍然报依赖错误，那就手动解压deb包，把那些依赖声明删除就行了(解压deb的方法下文中有提到)。</p></li><li><p>安装deepin.com应用容器：在<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/</a>中下载想要的容器，点击deb安装即可，以下为推荐容器:</p></li></ol><ul><li>QQ：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/</a></li><li>TIM：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/</a></li><li>QQ轻聊版：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/</a></li><li>微信：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/</a></li><li>Foxmail：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.foxmail/</a></li><li>百度网盘：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.baidu.pan/</a></li><li>360压缩：<a href=\"http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.cn.360.yasuo/</a></li><li>迅雷急速版: <a href=\"https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1cij1FhFeEn2sXdPtkJ3lSg</a></li><li>Ubuntu系发行版包括Ubuntu、LinuxMint、ZorinOS等。</li></ul><h4 id=\"续：安装QQ-微信\">续：安装QQ/微信</h4><hr><p>1.linux上的微信大部分都是网页版微信封装的: <a href=\"https://github.com/geeeeeeeeek/electronic-wechat\" target=\"_blank\" rel=\"noopener\">electronic-wechat</a>、<a href=\"https://github.com/trazyn/weweChat\" target=\"_blank\" rel=\"noopener\">weweChat</a>，网页版功能简单，每次登录都要扫码。而且现在腾讯好像开始禁用了微信网页版的登陆，如果发现不能登录网页版就只能使用crossover来安装windows版的微信。</p><p>2.￥140可以买个CrossOver18正版，一次激活，永久使用，然后愉快地安装QQ8.9，喜欢TIM的也能用TIM， 不过目前这个基于crossover的QQ有些bug，也不能记住密码。使用crossover18安装微信，安装包直接下载windows版本的就行，然后使用crossover创建windowsXP 64位容器，在容器中安装微信即可，不过可能安装时会出现<code>&quot;WeChatWin.dll 缺失问题&quot;</code>报错信息，需要执行下面命令安装额外的环境：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: apt-get install libldap-2.4-2:i386</span><br></pre></td></tr></table></figure><p>3.使用docker安装<a href=\"https://hub.docker.com/r/bestwu/qq\" target=\"_blank\" rel=\"noopener\">Tim</a> 和 <a href=\"https://hub.docker.com/r/bestwu/wechat\" target=\"_blank\" rel=\"noopener\">wechat</a>，<a href=\"https://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"noopener\">docker环境安装教程</a></p><p>4.wine环境下(crossover/deepin)安装好微信后如果发现不能输入文字(其实可以输入和发送，只是文字透明的)，可以使用这个文件<a href=\"https://pan.baidu.com/s/1-ScZvkmR9oZPdiFurdKQdA\" target=\"_blank\" rel=\"noopener\">riched20.dll</a>(提取密码：rofj)替换掉微信所在容器下的C盘的<code>/windows/system32/riched20.dll</code>，容器路径一般在：<code>~/.cxoffice/[你的容器名]/drive_c/</code>。</p><p>5.wine环境下(crossover/deepin)如果运行微信时发现界面有一个黑框不能关闭，只需要在聊天输入框中键入中文“不”然后再删除即可让黑框消失(原因:微信会根据你输入的字作为关键字在你现有表情中找符合的表情并显示出来提示你可用,但并没有很好的兼容这个功能变成一个黑框了，所以手动消除黑框的办法只有打关键字然后删除)。</p><p>6.wine环境下(crossover/deepin)如果运行微信的时候不能发送图片，尝试安装 <code>sudo apt install libjpeg62:i386</code>，临时解决办法是把图片文件拖动到<code>收藏</code>，然后从收藏转发即可。</p><p>7.wine环境下(crossover/deepin)如果运行QQ发现收到的图片一直加载不出来(刚登录开始可以，过一会就不行了)，那么可以在QQ登录界面设置一下网络代理(http/socks)，注意本地代理情况下代理地址不能使用localhost/127.0.0.1此类的IP，使用0.0.0.0是可以的。</p><p>8.wine环境下如果发现微信/企业微信窗口边缘有阴影穿透情况时，点击任意一个联系人聊天界面，将窗口最大化后再恢复正常状态，窗口异常边框阴影便会消失。</p><h4 id=\"Ubuntu-18-04开机启动特别慢的问题\">Ubuntu 18.04开机启动特别慢的问题</h4><hr><p>=&gt; 禁用不必要的开机服务：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出程序开机占用时间排行</span></span><br><span class=\"line\">systemd-analyze blame</span><br><span class=\"line\"><span class=\"comment\"># 禁用plymouth</span></span><br><span class=\"line\">sudo systemctl mask plymouth-start.service</span><br><span class=\"line\">sudo systemctl mask plymouth-read-write.service</span><br></pre></td></tr></table></figure><h4 id=\"终端oh-my-zsh配置\">终端oh-my-zsh配置</h4><hr><ol><li>主题</li></ol><ul><li>gnzh(已使用))</li><li>ys</li><li>avit</li><li>af-magic</li></ul><ol start=\"2\"><li>插件</li></ol><ul><li>git =&gt; 自带git状态插件</li><li>svn =&gt; svn状态插件</li><li>colored-man-pages =&gt; man帮助信息高亮</li><li>zsh-syntax-highlighting =&gt; 命令高亮和错误提示</li><li>z =&gt; 自动记录路径快捷跳转</li><li>zsh-autosuggestions =&gt; 根据输入记录自动建议可选输入命令</li></ul><h4 id=\"终端终结者Terminator配置\">终端终结者Terminator配置</h4><hr><p>特性：浅色调、字体舒适、无滚动条、自定义快捷键和配色、自动设置窗口布局</p><p>注意：可以配合<code>设置-&gt;设备-&gt;键盘-&gt;添加自定义快捷键</code>这样自定义快捷键来启动终端，<br>比如设置<code>Ctrl+Alt+T</code>为<code>terminator --geometry=93x32+450+300</code>，geometry为窗口的布局配置。</p><p>覆盖文件<code>~/.config/terminator/config</code>内容：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [global_config]</span><br><span class=\"line\">  enabled_plugins = CustomCommandsMenu, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler</span><br><span class=\"line\">  suppress_multiple_term_dialog = True</span><br><span class=\"line\">  title_hide_sizetext = True</span><br><span class=\"line\">[keybindings]</span><br><span class=\"line\">  prev_tab = &lt;Alt&gt;1</span><br><span class=\"line\">  reset_clear = &lt;Primary&gt;&lt;Shift&gt;g</span><br><span class=\"line\">  clear = &lt;Primary&gt;l</span><br><span class=\"line\">  switch_to_tab_1 = &lt;Alt&gt;1</span><br><span class=\"line\">  switch_to_tab_2 = &lt;Alt&gt;2</span><br><span class=\"line\">  switch_to_tab_3 = &lt;Alt&gt;3</span><br><span class=\"line\">  switch_to_tab_4 = &lt;Alt&gt;4</span><br><span class=\"line\">  switch_to_tab_5 = &lt;Alt&gt;5</span><br><span class=\"line\">  toggle_scrollbar = None</span><br><span class=\"line\">  toggle_zoom = &lt;Primary&gt;&lt;Shift&gt;x</span><br><span class=\"line\">[layouts]</span><br><span class=\"line\">  [[default]]</span><br><span class=\"line\">    [[[child1]]]</span><br><span class=\"line\">      parent = window0</span><br><span class=\"line\">      profile = default</span><br><span class=\"line\">      <span class=\"built_in\">type</span> = Terminal</span><br><span class=\"line\">    [[[window0]]]</span><br><span class=\"line\">      parent = <span class=\"string\">\"\"</span></span><br><span class=\"line\">      size = 925, 570</span><br><span class=\"line\">      <span class=\"built_in\">type</span> = Window</span><br><span class=\"line\">[plugins]</span><br><span class=\"line\">  [[CustomCommandsMenu]]</span><br><span class=\"line\">    [[[清屏]]]</span><br><span class=\"line\">      <span class=\"built_in\">command</span> = clear</span><br><span class=\"line\">      enabled = True</span><br><span class=\"line\">      name = 清屏</span><br><span class=\"line\">      position = 0</span><br><span class=\"line\">[profiles]</span><br><span class=\"line\">  [[default]]</span><br><span class=\"line\">    allow_bold = False</span><br><span class=\"line\">    background_color = <span class=\"string\">\"#fbfbfb\"</span></span><br><span class=\"line\">    background_darkness = 0.93</span><br><span class=\"line\">    background_type = transparent</span><br><span class=\"line\">    copy_on_selection = True</span><br><span class=\"line\">    cursor_color = <span class=\"string\">\"#aaaaaa\"</span></span><br><span class=\"line\">    cursor_shape = ibeam</span><br><span class=\"line\">    font = Ubuntu Light 12</span><br><span class=\"line\">    foreground_color = <span class=\"string\">\"#49494a\"</span></span><br><span class=\"line\">    palette = <span class=\"string\">\"#2e3436:#ee6a6a:#38690a:#b3adb0:#3465a4:#75507b:#06989a:#d3d7cf:#979b93:#fe5f5f:#7fd42c:#b7afb1:#729fcf:#ad7fa8:#34e2e2:#eeeeec\"</span></span><br><span class=\"line\">    scroll_on_keystroke = False</span><br><span class=\"line\">    scrollbar_position = hidden</span><br><span class=\"line\">    show_titlebar = False</span><br></pre></td></tr></table></figure><h4 id=\"禁用内核更新\">禁用内核更新</h4><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看已安装内核</span></span><br><span class=\"line\">$: dpkg --get-selections |grep linux-image</span><br><span class=\"line\"><span class=\"comment\"># 查看正在使用的内核</span></span><br><span class=\"line\">$: uname -a</span><br><span class=\"line\"><span class=\"comment\"># 删除旧内核</span></span><br><span class=\"line\">$: sudo apt-get remove</span><br><span class=\"line\">$: linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-get remove  </span><br><span class=\"line\">$: linux-image-extra-x.xx.x-xx-generic  </span><br><span class=\"line\"><span class=\"comment\"># 或用这个命令移除</span></span><br><span class=\"line\">$: sudo dpkg --purge linux-image-x.x.x-xx-generic</span><br><span class=\"line\"><span class=\"comment\"># 禁止更新内核，需时间来验证</span></span><br><span class=\"line\">$: sudo apt-mark hold linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-mark hold linux-image-extra-x.xx.x-xx-generic</span><br><span class=\"line\"><span class=\"comment\"># 如果需要恢复原来的设定的话即允许更新内核，执行如下命令即可：</span></span><br><span class=\"line\">$: sudo apt-mark unhold linux-image-x.xx.x-xx-generic</span><br><span class=\"line\">$: sudo apt-mark unhold linux-image-extra-x.xx.x-xx-generic</span><br></pre></td></tr></table></figure><h4 id=\"终端常用等宽字体\">终端常用等宽字体</h4><hr><ul><li>AR PL UKai CN 12</li><li>Bitstream Vera Sans Mono 10</li><li>Courier 10 Pitch 11</li><li>DejaVu Sans Mono 10</li><li>FreeMono 11</li><li>Nimbus Mono L 12</li><li>TlwgMono 11</li></ul><h4 id=\"crossover18破解\">crossover18破解</h4><hr><p>下载 <a href=\"https://pan.baidu.com/s/1BnT-cAKf-SBp-6J4CQoo-g\" target=\"_blank\" rel=\"noopener\">CrossoverPatch</a> <code>密码: ffp0</code>，解压后替换文件：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  备份原文件</span></span><br><span class=\"line\">$: cp ~/cxoffice/lib/wine/winewrapper.exe.so ~/cxoffice/lib/wine/winewrapper.exe.so-bak</span><br><span class=\"line\"><span class=\"comment\"># 替换文件</span></span><br><span class=\"line\">$: cp CrossoverPatch/winewrapper.exe.so ~/cxoffice/lib/wine</span><br></pre></td></tr></table></figure><h4 id=\"vim插件配置\">vim插件配置</h4><hr><ol><li><a href=\"https://github.com/VundleVim/Vundle.vim\" target=\"_blank\" rel=\"noopener\">Vundle</a> =&gt; 插件管理器，编辑.vimrc，然后执行命令<code>vim +PluginInstall</code>即可安装</li><li><a href=\"https://github.com/vim-airline/vim-airline\" target=\"_blank\" rel=\"noopener\">vim-airline</a> =&gt; 底部状态栏</li><li><a href=\"https://juejin.im/post/5a38c37f6fb9a0450909a151\" target=\"_blank\" rel=\"noopener\">其他配置</a></li></ol><h4 id=\"Ubuntu18-04-定制Mac主题\">Ubuntu18.04 定制Mac主题</h4><hr><p><img src=\"Ubuntu18.04-5.png\" alt=\"overview.png\"></p><p><img src=\"Ubuntu18.04-6.png\" alt=\"desktop.png\"></p><ol><li>安装gnome-tweak-tool 和 chrome-gnome-shell 插件 (<code>sudo aptitude install [name]</code>)</li><li>安装GTK3主题 =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">X-Arc-Collection</a></li><li>使用tweak载入应用程序主题 =&gt; tweak – 外观 – 应用程序 – 选择X-Arc-Collection</li><li>安装gnome-shell 主题 =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li><li>安装gnome-shell 插件 =&gt; <a href=\"https://extensions.gnome.org/extension/19/user-themes/\" target=\"_blank\" rel=\"noopener\">User Themes</a> ( 之后重启Gnome =&gt; [Alt + F2] &amp; [输入 r] &amp; [点击 Enter] )</li><li>使用tweak载入shell主题 =&gt; tweak – 外观 – shell – 选择Sierra shell主题</li><li>下载Mac图标主题 <a href=\"https://github.com/keeferrourke/la-capitaine-icon-theme/releases\" target=\"_blank\" rel=\"noopener\">la-capitaine-icon-theme</a> 或 <a href=\"https://www.pling.com/p/1305429/\" target=\"_blank\" rel=\"noopener\">McMojave-circle</a></li><li>图标文件夹移动到 ~/.icons目录下(没有则新建目录)</li><li>使用tweak载入icon主题 =&gt; tweak – 外观 – 图标 – 选择对应的图标主题</li><li>安装gnome-shell插件 =&gt; Dash to dock (将原生dock转变为可定制的浮动dock)</li><li>定制firefox主题 =&gt; <a href=\"https://github.com/vinceliuice/Mojave-gtk-theme\" target=\"_blank\" rel=\"noopener\">Majave-gtk-theme</a></li></ol><h4 id=\"Ubuntu18-04-自己定制-登录、锁屏界面的图片和样式\">Ubuntu18.04 自己定制 登录、锁屏界面的图片和样式</h4><hr><p><img src=\"Ubuntu18.04-7.png\" alt=\"lockscreen.png\"></p><p><img src=\"Ubuntu18.04-8.png\" alt=\"loginscreen.png\"></p><ol><li>安装脚本 =&gt; <a href=\"https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/login-manager-config-ubuntu\" target=\"_blank\" rel=\"noopener\">github / nojsja / login-manager-config-ubuntu</a></li><li>说明=&gt; 脚本通过更改/usr/share/gnome-shell/theme/ubuntu.css文件中声明的样式来修改系统登录页面按钮布局和背景图片的地址，使用ImageMagick包的<code>convert -blur</code>命令制作了毛玻璃效果的登录背景图片，最后还生成了一个SetAsWallpaper脚本，可以在文件夹中的图片文件上右键点击选择运行这个脚本(它会自动把目标图片更改成桌面壁纸和毛玻璃效果化的登录背景图)，最后锁屏壁纸需要用户手动安装<code>gnome-tweak-tool</code>进行更改。</li><li>之前我想通过更改<code>/usr/share/gnome-shell/theme/gdm3.css</code>文件来修改样式，可是发现ubuntu18.04下总会有这样那样的问题。</li><li>注意=&gt; 不要贸然尝试更改系统主题的CSS样式文件，如果修改的文件有语法错误或是其它原因，很可能会造成系统开机后无法登入图形界面(出现这种情况可以插入U盘登录PE系统然后挂载原系统的硬盘，最后将错误文件改回即可)。</li></ol><h4 id=\"Ubuntu18-04-关于定制plymouth主题来更换开机动画\">Ubuntu18.04 关于定制plymouth主题来更换开机动画</h4><hr><blockquote><p>其实我不建议去改开机动画，一个原因是ubuntu自己的开机动画就挺美观简洁的，第二个原因是这个东西如果改出问题了卡在开机画面到时候恢复起来比较麻烦，如果执意想去折腾的话，可以去<a href=\"https://www.gnome-look.org/browse/cat/108/\" target=\"_blank\" rel=\"noopener\">gnome-look</a>看看，这里提供一个苹果主题<a href=\"https://pan.baidu.com/s/1qv3GZ_BE-jj2HIpiI2X7yQ\" target=\"_blank\" rel=\"noopener\">darwin</a>，密码: <code>rc6u</code>。</p></blockquote><ol><li><p>解压下载的plymouth主题到 <code>/usr/share/plymouth/themes</code></p></li><li><p>执行安装</p></li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-alternatives --install /usr/share/plymouth/themes/ default.plymouth default.plymouth /usr/share/plymouth/themes/[THEME]/[THEME].plymouth 100</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>更新配置，需要手动选择plymouth编号</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo update-alternatives --config default.plymouth</span><br><span class=\"line\">$: sudo update-initramfs -u</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>手动更改错误路径参数</li></ol><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo gedit /usr/share/plymouth/themes/default.plymouth</span><br></pre></td></tr></table></figure><p>替换<code>ImageDir</code>和<code>ScriptFile</code>为正确的plymouth文件存放路径，替换后：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ImageDir=/usr/share/plymouth/themes/[THEME]</span><br><span class=\"line\">ScriptFile=/usr/share/plymouth/themes/[THEME]/[THEME].script</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-使用-Dash-to-dock-插件时同时出现两个dock的问题\">Ubuntu18.04 使用[Dash to dock]插件时同时出现两个dock的问题</h4><hr><blockquote><p>解决方法是去tweak设置里关闭[Dash to dock]的开关，别担心，关闭后，[Dash to dock]仍然正常工作，但是再也不会同时出现两个dock栏的尴尬情况了。</p></blockquote><p><img src=\"Ubuntu18.04-9.png\" alt=\"dock-noise.png\"></p><p><img src=\"Ubuntu18.04-10.png\" alt=\"dock-single.png\"></p><h4 id=\"Ubuntu18-04-添加软件源提示：没有Release文件，忽略源的问题\">Ubuntu18.04 添加软件源提示：没有Release文件，忽略源的问题</h4><hr><p><img src=\"Ubuntu18.04-11.png\" alt=\"dock-tweak.png\"></p><ol><li>打开 软件与更新</li><li>选择那个源点击编辑</li><li>更改 发行版 信息 (请在网页上查看这个源的仓库文件内的dists目录下有哪些发行版)</li></ol><h4 id=\"Ubuntu18-04-解决一些软件依赖不满足问题的问题\">Ubuntu18.04 解决一些软件依赖不满足问题的问题</h4><hr><p>=&gt; 以Ubuntu18.04安装16.04版本网易云音乐为例</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># gdebi安装包</span><br><span class=\"line\">$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb</span><br><span class=\"line\">$: Dependency is not satisfiable: libqt5libqgtk2</span><br><span class=\"line\"># Ubuntu18.04报出依赖问题，原因是libqt5libqgtk2已经被新的库qt5-style-plugins替代，</span><br><span class=\"line\"># 软件源里找不到这个库，当然我们也能手动安装libqt5libqgtk2，但是很可能会就此引出新的依赖问题</span><br></pre></td></tr></table></figure><p>=&gt; 方法：解压安装包修改依赖项并重新打包<br>=&gt; 步骤：</p><ol><li>deb包同级目录下创建文件夹</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: mkdir netease-cloud-music</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>解压安装包到这个文件夹中</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg -X netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb netease-cloud-music</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>解压控制信息</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg -e netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb neteas-cloud-music&#x2F;DEBIAN&#x2F;</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>修改依赖文件(把libqt5libqgtk2修改为qt5-style-plugins)</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># vim编辑文件</span><br><span class=\"line\">$: vim neteas-cloud-music&#x2F;DEBIAN&#x2F;control</span><br><span class=\"line\"># 使用vim正则对libqt5libqgtk2进行搜索替换</span><br><span class=\"line\">:1,$s&#x2F;libqt5libqgtk2&#x2F;qt5-style-plugins&#x2F;g</span><br><span class=\"line\"># 或是手动查找Depends那一行中声明的libqt5libqgtk2进行替换替换即可</span><br></pre></td></tr></table></figure><ol start=\"5\"><li>生成新的安装包</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: dpkg-deb -b neteas-cloud-music</span><br><span class=\"line\">$: mv neteas-cloud-music.deb netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br></pre></td></tr></table></figure><ol start=\"6\"><li>安装</li></ol><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用gdebi或dpkg进行安装即可</span><br><span class=\"line\">$: sudo gdebi netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br><span class=\"line\">$: sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu18.04.deb</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-安装Cinnamon桌面启动器\">Ubuntu18.04 安装Cinnamon桌面启动器</h4><hr><blockquote><p>cinnamon桌面也是基于gtk的，所以gonome下的一些gtk主题和icon主题也能直接使用，切换桌面后可以在设置界面直接切换主题。deepin桌面也能安装，美观度很好，但是卡死问题比较严重，不太推荐，Cinnamon相较而言安装后bug较少，可以正常使用。</p></blockquote><p>已知问题：</p><ul><li>Cinnamon桌面通知API可能有更改，常见的wine/crossover应用程序不能正常调用通知接口，QQ/Wehcat无法在通知栏提示消息，不太方便</li><li>输入法ibus不支持，无法正常使用，可以使用fcitx拼音和基于fcitx框架的sogou拼音</li><li>默认没有集成蓝牙管理器，需要安装<code>blueman</code>进行蓝牙管理</li><li>锁屏界面可能会非常卡顿</li><li>Cinnamon面板(等同gnome任务栏)默认安装了<code>系统托盘</code>，可以解决wine应用程序托盘菜单变成小窗口的bug，在面板通知区域正常显示</li><li>Cinnamon桌面动画性能也很低效，建议强制使用独立显卡</li></ul><p>安装步骤：</p><ol><li>添加仓库Key</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo add-apt-repository ppa:embrosyn/cinnamon  </span><br><span class=\"line\">$: sudo apt update &amp;&amp; sudo apt install cinnamon</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>安装完成了注销后可以在登录界面点击设置按钮选择进入某个桌面环境</li><li>卸载cinnamon</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get install ppa-purge</span><br><span class=\"line\">$: sudo ppa-purge ppa:embrosyn/cinnamon</span><br></pre></td></tr></table></figure><h4 id=\"Linux分区过小导致后期容量不足解决方法\">Linux分区过小导致后期容量不足解决方法</h4><hr><p>=&gt; 之前安装ubuntu 18.04的时候/var 分区只给了 1.5G，结果现在不够用了</p><ul><li>方法1</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt-get clean</span><br><span class=\"line\">$: sudo apt-get autoremove</span><br></pre></td></tr></table></figure><p>如果仍然空间不足，使用方法2。</p><ul><li>方法2<br>建立目录软链接解决(软链接和硬链接了解一下)：</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以/var目录为例 将占用过大的文件夹移出</span></span><br><span class=\"line\">$: mv /var/lib /opt</span><br><span class=\"line\"><span class=\"comment\"># 建立opt下的lib内目录的软链接到var目录</span></span><br><span class=\"line\">$: sudo ln -s /opt/lib /var</span><br></pre></td></tr></table></figure><ul><li>方法3<br>如果/var没有单独分区，则系统默认共享使用/home目录，若此时提示/var空间不足，则说明/home空间不足，这种情况，建议重新安装系统，重新规划分区结构。一般来说，/var目录2G-4G为好，或者不分区，共享/home。</li></ul><h4 id=\"Shadowsocks-Qt5安装的问题\">Shadowsocks-Qt5安装的问题</h4><hr><blockquote><p>shadowsocks的GUI版本，用Qt写的，还行，不过我喜欢用sslocal命令脚本来连接服务器，开机自启动，很方便。顺带写个安装流程，不过会遇到我上面提到的 <strong>软件源提示没有Release文件的问题</strong>，可以通过上面的方法解决，这里需要将shadowdocks-Qt5发行版信息更改为<code>artful</code>，改为其它发行版可能会遇到依赖问题，遇到依赖问题多尝试几个，还有两行配置文件都要改额。</p></blockquote><p>&gt; sudo add-apt-repository ppa:hzwhuang/ss-qt5<br>&gt; sudo apt update<br>&gt; sudo apt-get install shadowsocks-qt5</p><h4 id=\"使用polipo开启终端代理-需要先开启shadowsocks代理\">使用polipo开启终端代理(需要先开启shadowsocks代理)</h4><hr><ul><li>安装脚本(适合于bash和zsh终端) =&gt; <a href=\"https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/shadowsocks-terminal\" target=\"_blank\" rel=\"noopener\">github / nojsja / polipo-install-config.sh&quot;</a></li><li>使用方式<br>&gt; 说明：’ hp ’ == ’ http_proxy=http://localhost:8123 ’ for any command<br>&gt; 说明：’ gp ’ == ‘http.proxy=localhost:8123’ for git proxy config<br>&gt; 使用1：<code>hp curl ip.gs</code><br>&gt; 使用2：<code>git clone https://android.googlesource.com/tools/repo --config $gp</code></li><li>如果polipo启动报错的话(通过<code>systemctl status polipo</code>查看)，可能是你的垃圾清理软件删除了polipo的日志文件夹，你可以手动更改polipo配置文件(<code>/etc/polipo/config</code>)禁用日至记录功能</li></ul><h4 id=\"将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表\">将linux绿色解压版软件包或自定义脚本显示到应用菜单图标列表</h4><hr><blockquote><p>很多软件只有解压版，虽然可以解压后发送快捷方式到桌面，但是没有图标，应用列表也看不了。</p></blockquote><p>=&gt; 安装脚本(测试环境ubuntu18.04) =&gt; <a href=\"https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/application\" target=\"_blank\" rel=\"noopener\">github / nojsja / makeIconLink</a><br>=&gt; 使用方式</p><ul><li>安装之前：请先将需要作为图标的icon图片(比例1:1比较适合，分辨率最好大于64px % 64px)放入目标文件夹内</li><li>查看说明：</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --<span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure><ul><li>安装指令：</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --dir /path/to/[<span class=\"built_in\">exec</span>-file] --target [<span class=\"built_in\">exec</span>-file-name] --icon [icon-file-name]</span><br></pre></td></tr></table></figure><ul><li>卸载指令：</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: bash makeIconLink --uninstall [<span class=\"built_in\">exec</span>-file-name]</span><br></pre></td></tr></table></figure><h4 id=\"自定义shadowsocks服务开机自启动脚本\">自定义shadowsocks服务开机自启动脚本</h4><hr><blockquote><p>使用systemd来管理shadowsocks服务，开机自启动，不用打开shadowsocks-qt5软件，FQ了无痕 ~</p></blockquote><p>=&gt; 我的服务脚本：<a href=\"https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/startup.sh\" target=\"_blank\" rel=\"noopener\">startup.sh</a>、<a href=\"https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/shadowsocks\" target=\"_blank\" rel=\"noopener\">shadowsocks</a><br>=&gt; 步骤：</p><ul><li>编写shadowsocks service脚本文件，比如shadow.service</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\"><span class=\"comment\"># 描述</span></span><br><span class=\"line\">Description=Shadowsocks Service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=oneshot</span><br><span class=\"line\"><span class=\"comment\"># 服务 start/stop 执行脚本(具体执行路径根据自己的目录更改)</span></span><br><span class=\"line\">ExecStart=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh start</span><br><span class=\"line\">ExecStop=/bin/bash /home/nojsja/github/maintenance/code/shell/desktop/startup.sh stop</span><br><span class=\"line\">RemainAfterExit=yes</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\"><span class=\"comment\"># 一些简单的依赖信息</span></span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>将服务配置文件放到<code>/etc/systemd/system</code>下<br>&gt; sudo cp shadow.service /etc/systemd/system</li><li>设置服务自启动<br>&gt; systemctl enable shadow</li><li>服务开启和关闭<br>&gt; systemctl start shadow<br>&gt; systemctl stop shadow</li></ul><h4 id=\"Ubuntu18-04设置shadowsocks全局pac自动代理对浏览器无效\">Ubuntu18.04设置shadowsocks全局pac自动代理对浏览器无效</h4><hr><p>=&gt; 先来一个shadowsocks全局pac代理的步骤：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pip需要先安装</span></span><br><span class=\"line\">$: sudo apt-get install python-pip python-dev build-essential</span><br><span class=\"line\">$: sudo pip install --upgrade pip</span><br><span class=\"line\">$: sudo pip install --upgrade virtualenv</span><br><span class=\"line\"><span class=\"comment\"># 安装pac自动生成程序</span></span><br><span class=\"line\">$: sudo pip install genpac</span><br><span class=\"line\"><span class=\"comment\"># 生成pac文件</span></span><br><span class=\"line\">$: mkdir ~/shadowsocks</span><br><span class=\"line\">$: <span class=\"built_in\">cd</span> shadowsocks</span><br><span class=\"line\"><span class=\"comment\"># proxy配置中的地址和端口具体要看你的shadowsocks连接配置</span></span><br><span class=\"line\">$: genpac --proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> --gfwlist-proxy=<span class=\"string\">\"SOCKS5 127.0.0.1:1080\"</span> -o autoproxy.pac --gfwlist-url=<span class=\"string\">\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"</span></span><br></pre></td></tr></table></figure><p>以上操作会在~/shadowsocks目录下生成autoproxy.pac配置文件，到系统设置 -&gt; 网络 -&gt; 网络代理 -&gt; 自动 -&gt; 填入file:///path/to/autoproxy.pac(上面我们生成的pac文件路径)，如果要新增被代理网站的话就自己编辑pac文件，在里面的域名列表里面再添加新的域名就好了。<br>=&gt; 再写一个脚本<a href=\"https://github.com/nojsja/maintenance/tree/master/code/shell/desktop/shadowsocks/genpac\" target=\"_blank\" rel=\"noopener\">genpac-command</a>，可以用来添加用户过滤规则(user-rules.txt) 和在线更新autoproxy.pac代理文件</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># # 在脚本目录下执行</span></span><br><span class=\"line\"><span class=\"comment\"># 显示帮助信息</span></span><br><span class=\"line\">$: bash genpac-command --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 在线更新</span></span><br><span class=\"line\">$: bash genpac-command --update-online</span><br><span class=\"line\"><span class=\"comment\"># 从本地user-rules.txt文件读取更新</span></span><br><span class=\"line\">$: bash genpac-command --update-local</span><br><span class=\"line\"><span class=\"comment\"># 添加自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --add-rules opendesktop.org</span><br><span class=\"line\"><span class=\"comment\"># 添加多个自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --add-rules opendesktop.org atom.io</span><br><span class=\"line\"><span class=\"comment\"># 删除自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --del-rules opendesktop.org</span><br><span class=\"line\"><span class=\"comment\"># 删除多个自定义规则</span></span><br><span class=\"line\">$: bash genpac-command --del-rules opendesktop.org atom.io</span><br></pre></td></tr></table></figure><p>=&gt; <strong>不过我遇到了代理pac文件配置好后，firefox和google浏览器仍然不能FQ的情况，仔细排查原因，我发现因为之前我不是用的pac全局代理，是通过浏览器的SwitchOmega插件来手动代理的，这个插件会接管浏览器的网络代理权限，我们需要到浏览器设置里面把网络代理设置为系统代理，以火狐浏览器为例：</strong></p><h4 id=\"Atom编辑器内存占用过大的问题\">Atom编辑器内存占用过大的问题</h4><hr><blockquote><p>Atom、Vscode、Sublime、Bracks都用过，Atom用着最爽，可定制化程度最高。但是有时候用着Atom电脑呼呼作响，查看系统占用，Atom内存占用达到过4、5个G，我的天！其实Atom出现内存泄漏的问题都不是Atom本身的问题，一定是你安装的哪个插件导致了内存泄漏，查看占用信息后定位到atom的插件，然后把它禁用就可以了，比如之前导致我出现这个问题的插件就是：ide-typescript，禁用之后现在基本一个Atom进程只占用200~400Mb左右，取决于你安装的其它插件。还有Atom要经常手动更新啊，仓库里面更新不了的，直接去Atom git仓库下载release正式版本，基本上一个大版本就要更新一次。</p></blockquote><h4 id=\"Grub2-主题安装\">Grub2 主题安装</h4><hr><p><img src=\"Ubuntu18.04-12.png\" alt=\"source.png\"></p><blockquote><p>Grub2就是引导操作系统启动的东西，开机的时候如果是多系统，就会显示多系统的启动菜单，如图，这个启动菜单可以自定义主题。</p></blockquote><ol><li>解压下载的主题文件 =&gt; <a href=\"https://pan.baidu.com/s/1ioMub2JmHlIzHJbS2_2gRQ\" target=\"_blank\" rel=\"noopener\">Vimix</a>，得到Vimix文件夹(这里提供我用的一个主题，也可以自已去下载其它主题)</li><li>在/boot/grub里创建GRUB2主题目录themes<br>&gt; sudo mkdir -p /boot/grub/themes</li><li>将下载的Vimix文件夹整体复制到/boot/grub/themes文件夹下<br>&gt; sudo cp -r Vimix /boot/grub/themes</li><li>修改/etc/default/grub配置文件<br>&gt; sudo gedit /etc/default/grub<br>在文件最后添加：GRUB_THEME=“/boot/grub/themes/Vimix/theme.txt” 并保存</li><li>更新GRUB<br>&gt; sudo update-grub</li><li>重启即生效(如果重启卡住请强制关机后再启动)</li></ol><h4 id=\"Ubuntu18-04-解决下载额外数据文件失败：ttf-mscorefonts-installer\">Ubuntu18.04 解决下载额外数据文件失败：ttf-mscorefonts-installer</h4><hr><p><img src=\"Ubuntu18.04-13.png\" alt=\"firefox_proxy.png\"></p><ol><li><a href=\"http://sourceforge.net/projects/corefonts/files/the%20fonts/final/\" target=\"_blank\" rel=\"noopener\">sourceforge</a>下载如图所示11个exe文件并放入一个文件夹，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer</li><li>运行字体配置程序<br>&gt; sudo dpkg-reconfigure ttf-mscorefonts-installer</li><li>在配置窗口中输入刚才保存exe的路径确定即可，比如： /home/nojsja/Downloads/ttf-mscorefonts-installer</li></ol><h4 id=\"Ubuntu18-04-WPS-提示字体缺失的解决方法\">Ubuntu18.04 WPS 提示字体缺失的解决方法</h4><hr><p>下载缺失的字体文件<a href=\"https://pan.baidu.com/s/10MushHhTXwfRIFkKGmwD7Q\" target=\"_blank\" rel=\"noopener\">fonts</a> (密码: 4jpo)，然后复制到Linux系统中的/usr/share/fonts文件夹中，再使用系统命令更新字体设置：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 生成字体的索引信息</span></span><br><span class=\"line\">$: sudo mkfontscale</span><br><span class=\"line\">$: sudo mkfontdir</span><br><span class=\"line\"><span class=\"comment\"># 更新字体缓存</span></span><br><span class=\"line\">$: sudo <span class=\"built_in\">fc</span>-cache</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-WPS-提示字体缺失的解决方法-2\">Ubuntu18.04 WPS 提示字体缺失的解决方法</h4><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装对应显卡驱动的32bit版本</span></span><br><span class=\"line\">$: sudo apt-get install libnvidia-gl-440:i386</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu20-04-使用deepin-screenshot截图后无法粘贴到输入框\">Ubuntu20.04 使用deepin-screenshot截图后无法粘贴到输入框</h4><hr><ul><li>安装<code>xfce4-clipman</code>，每次使用深度截图时保证它开启</li></ul><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt install xfce4-clipman</span><br></pre></td></tr></table></figure><ul><li>也可以使用更高级的截图编辑管理软件<code>shutter</code>替代</li></ul><h4 id=\"Ubuntu18-04-更新Gnome版本\">Ubuntu18.04 更新Gnome版本</h4><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Upgrade</span></span><br><span class=\"line\"><span class=\"comment\">#If you were using the gnome3-team/gnome3-staging PPA, run the following before upgrading:</span></span><br><span class=\"line\">$: sudo ppa-purge ppa:gnome3-team/gnome3-staging</span><br><span class=\"line\">$: sudo ppa-purge ppa:gnome3-team/gnome3</span><br><span class=\"line\">$: sudo apt install ubuntu-gnome-desktop^</span><br><span class=\"line\"><span class=\"comment\"># The included GUI update manager will offer you the latest release of Ubuntu GNOME. Access this via the terminal:</span></span><br><span class=\"line\">$: update-manager -c</span><br><span class=\"line\"><span class=\"comment\"># Alternatively, run the following command:</span></span><br><span class=\"line\">$: sudo <span class=\"keyword\">do</span>-release-upgrade</span><br></pre></td></tr></table></figure><h4 id=\"Win10-Ubuntu18-04-双系统时间显示不对\">Win10 + Ubuntu18.04 双系统时间显示不对</h4><hr><blockquote><p>Ubuntu和Windows默认的时间管理方式不同，所以双系统发生时间错乱是正常的。Ubuntu默认时间是把BIOS时间当成GMT+0时间，也就是世界标准时，而我国在东八区(GMT+8)，所以如果你的Ubuntu位置是中国的话你系统显示的时间就是BIOS时间+8小时。假如现在是早上8点，那么你Ubuntu会显示8点，这时BIOS中的时间是0点。而当你切换到Windows系统时就会发生时间错乱，因为Windows会认为BIOS时间就是你的本地时间，结果就是Windows显示时间为0点……而假如你在Windows下同步时间，恢复显示为8点，这时BIOS时间也会被Windows改写成8点，再次进入Ubuntu时显示时间又变成了8+8=16点。</p></blockquote><ol><li>先在Ubuntu下更新一下时间<br>&gt; sudo apt-get install ntpdate<br>&gt; sudo ntpdate <a href=\"http://time.windows.com\" target=\"_blank\" rel=\"noopener\">time.windows.com</a></li><li>将时间更新到硬件上<br>&gt; sudo hwclock --localtime --systohc</li><li>关闭linux重新进入windows系统，发现时间正常了</li></ol><h4 id=\"Ubuntu18-04-安装系统时说明-双硬盘\">Ubuntu18.04 安装系统时说明(双硬盘)</h4><hr><blockquote><p>主要分为 [ <em>GPT磁盘分区+UEFI引导方案</em> ] 和 [ <em>传统MBR磁盘分区 + LEGANCY引导方案</em> ]</p></blockquote><ol><li>方案一(兼容方案 gpt+uefi / mbr+legancy)<br>使用UEFI模式安装Ubuntu18.04时可以选择用 兼容bios启动方式 来安装系统(同时兼容传统启动方式和UEFI启动方式)，即不分配&quot;/boot “分区，分配一个大小为1GB左右的&quot;保留bios启动区域”(UEFI模式会自动挂载/boot和/boot/efi)，其它分区至少还需要一个根分区&quot;/&quot;，8G内存的情况下最好还是分配8G的swap交换分区，另外除了&quot;保留bios启动区域&quot;为主分区，其它分区均为逻辑分区，最后一步很重要 – 格式化每个分区，要不然安装很可能会出错！<a href=\"https://blog.csdn.net/jesse_mx/article/details/61425361\" target=\"_blank\" rel=\"noopener\">参考</a></li><li>方案二(gpt+uefi 已使用方案)<br>创建&quot;efi系统分区&quot;，同时不需要划分&quot;/boot&quot;分区(boot引导是grub由引导的，而efi显然是UEFI引导的)，其余至少还需要划分&quot;/“根分区，除了根分区所有分区都为逻辑分区，最后选择&quot;安装启动引导器的设备&quot;为刚才创建的&quot;efit系统分区”。</li><li>方案三(传统mbr+legancy方案)<br>传统的legancy + mbr的安装，至少划分&quot;/boot&quot;分区(主分区) 和 &quot;/“根分区，其余的分区按需划分，最后选择&quot;安装启动引导器的设备&quot;为创建的”/boot&quot;挂载点。</li></ol><h4 id=\"Ubuntu18-04-安装网易云音乐1-1-0后不能打开的解决方法\">Ubuntu18.04 安装网易云音乐1.1.0后不能打开的解决方法</h4><hr><ul><li>使用root权限命令行后台启动并且屏蔽输出<br>&gt; sudo netease-cloud-music &gt; /dev/null 2&gt;&amp;1 &amp;</li><li>规避session-manager引起的bug<br>&gt; alias netease=‘unset SESSION_MANAGER &amp;&amp; netease-cloud-music’<br>&gt; netease &gt; /dev/null &amp;</li><li>别用那个鸡肋的客户端了，有bug也不更新，上这个酷酷的第三方客户端<a href=\"https://github.com/trazyn/ieaseMusic\" target=\"_blank\" rel=\"noopener\">ieaseMusic</a></li><li>这里还有个别人做的针对ubuntu18.04的<a href=\"https://github.com/innoob/netease-cloud-music\" target=\"_blank\" rel=\"noopener\">重新构建版本</a>，可以正常使用，也没有重复登录的bug</li></ul><h4 id=\"Ubuntu18-04-Crossover17安装QQ后乱码的解决方法\">Ubuntu18.04 Crossover17安装QQ后乱码的解决方法</h4><hr><blockquote><p>原因：原来的ume-ui-gothic.ttf不支持很多简体中文字符</p></blockquote><p>使用其它字体文件替换到目录 /opt/cxoffice/share/wine/fonts 下的<a href=\"https://pan.baidu.com/s/13CDBKrvTAJOhrbuyLw96jA\" target=\"_blank\" rel=\"noopener\">ume-ui-gothic.ttf</a>字体文件 (同名)，记得将下好的文件重命名为ume-ui-gothic.ttf。</p><h4 id=\"Ubuntu18-04-通过tweak安装gnome插件Blyr后设置插件报错\">Ubuntu18.04 通过tweak安装gnome插件Blyr后设置插件报错</h4><hr><p>=&gt; 错误信息：<code>Error: Requiring Clutter, version none: Typelib file for namespace 'Clutter' (any version) not found ...</code><br>=&gt; 原因分析：该插件需要的依赖Clutter尚未安装<br>=&gt; 解决方法：</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">$: sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-一直提示-“检测到系统程序出现问题”\">Ubuntu18.04 一直提示 “检测到系统程序出现问题”</h4><hr><p>ubuntu18.04已经移除了gksu软件，所以使用替代命令</p><ol><li>添加alias命令</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: <span class=\"built_in\">alias</span> gksu=<span class=\"string\">'pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'</span></span><br></pre></td></tr></table></figure><ol start=\"2\"><li>编辑错误报告相关设置</li></ol><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: gksu gedit /etc/default/apport</span><br><span class=\"line\"><span class=\"comment\"># 把`enable = 1`改为`enable = 0`</span></span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu20-04-使用系统播放器打开视频提示“安装h-264编码软件”\">Ubuntu20.04 使用系统播放器打开视频提示“安装h.264编码软件”</h4><hr><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo apt install libdvdnav4 libdvd-pkg gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly libdvd-pkg</span><br><span class=\"line\">$: sudo apt install ubuntu-restricted-extras</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-Gnome-Shell-插件\">Ubuntu18.04 Gnome-Shell 插件</h4><hr><ul><li><a href=\"https://extensions.gnome.org/extension/97/coverflow-alt-tab/\" target=\"_blank\" rel=\"noopener\">CoverFlow Alt-Tab</a> =&gt; 窗口Tab切换预览(★★★★☆)</li><li><a href=\"https://extensions.gnome.org/extension/19/user-themes/\" target=\"_blank\" rel=\"noopener\">User Themes(必要)</a> =&gt; 用户主题安装(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/307/dash-to-dock/\" target=\"_blank\" rel=\"noopener\">Dash To Dock</a> =&gt; dock栏(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1160/dash-to-panel/\" target=\"_blank\" rel=\"noopener\">Dash To Panel</a> =&gt; 将dock和顶栏显示在一起(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1236/noannoyance/\" target=\"_blank\" rel=\"noopener\">NoAnnoyance</a> =&gt; 禁用多余的pop提示信息，直接提升活动窗口(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/595/autohide-battery/\" target=\"_blank\" rel=\"noopener\">Autohide Battery</a> =&gt; 电池充满并连接电源时自动隐藏电池按钮(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/8/places-status-indicator/\" target=\"_blank\" rel=\"noopener\">Places Status Indicator</a> =&gt; 顶部任务栏显示磁盘和卷的快捷入口(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/7/removable-drive-menu/\" target=\"_blank\" rel=\"noopener\">Removable Drive Menu</a> =&gt; 顶部任务栏显示可移除的已挂载设备(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/826/suspend-button/\" target=\"_blank\" rel=\"noopener\">Suspend Button</a> =&gt; 顶部菜单栏显示休眠按钮(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/495/topicons/\" target=\"_blank\" rel=\"noopener\">TopIcons</a> =&gt; 顶部通知图标托盘(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1031/topicons/\" target=\"_blank\" rel=\"noopener\">TopIconsPlus</a> =&gt; 顶部通知图标托盘，自定义图标显示参数(★★★★☆)</li><li><a href=\"https://extensions.gnome.org/extension/1251/blyr/\" target=\"_blank\" rel=\"noopener\">Blyr</a> =&gt; 模糊应用预览背景图(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/358/activities-configurator/\" target=\"_blank\" rel=\"noopener\">Activities Configurator</a> =&gt; 配置左上角活动按钮(★★★★☆)</li><li><a href=\"https://extensions.gnome.org/extension/427/workspaces-to-dock/\" target=\"_blank\" rel=\"noopener\">Workspace to Dock</a> =&gt; 将工作区转换为悬浮dock(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1036/extensions/\" target=\"_blank\" rel=\"noopener\">Extensions</a> =&gt; 在通知栏添加快捷开启和关闭gnome-shell插件的功能(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/779/clipboard-indicator/\" target=\"_blank\" rel=\"noopener\">Clipboard Indicator</a> =&gt; 可视化剪贴板(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/906/sound-output-device-chooser/\" target=\"_blank\" rel=\"noopener\">Sound Input &amp; Output Device Chooser</a> =&gt; 声音输入和输入设备快速选择(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1236/noannoyance/\" target=\"_blank\" rel=\"noopener\">NoAnnoyance</a> =&gt; 取消“窗口已就绪”提示直接提升窗口(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1401/bluetooth-quick-connect/\" target=\"_blank\" rel=\"noopener\">Bluetooth quick connect</a> =&gt; 蓝牙设备快速连接和断开(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1403/remove-alttab-delay/\" target=\"_blank\" rel=\"noopener\">Remove Alt+Tab Delay</a> =&gt; 移除【Alt + Tab】的开启应用预览延迟(★★★★★)</li><li><a href=\"https://extensions.gnome.org/extension/1162/emoji-selector/\" target=\"_blank\" rel=\"noopener\">Emoji Selector</a> =&gt; 快速选择Emoji表情(★★★★)</li></ul><h4 id=\"Ubuntu18-04-插件-Dash-to-dock-一些常用设置\">Ubuntu18.04 插件 [ Dash to dock ] 一些常用设置</h4><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Use Custom Dock Indicator ( Optional )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-running-dots <span class=\"literal\">false</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-customize-running-dots <span class=\"literal\">false</span></span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Disable Custom Dock Shrink ( Required for Good looking) (  Required )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock custom-theme-shrink <span class=\"literal\">false</span></span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Dock Transparency mode ( Optional )</span></span><br><span class=\"line\">$: gsettings <span class=\"built_in\">set</span> org.gnome.shell.extensions.dash-to-dock transparency-mode DEFAULT</span><br><span class=\"line\">_______________________________________________________________________________________________</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Restore to Default</span></span><br><span class=\"line\">$: dconf reset -f /org/gnome/shell/extensions/dash-to-dock/</span><br><span class=\"line\">_______________________________________________________________________________________________</span><br></pre></td></tr></table></figure><h4 id=\"Ubuntu18-04-主题\">Ubuntu18.04 主题</h4><hr><ul><li>GTK3主题(★★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1167049/\" target=\"_blank\" rel=\"noopener\">X-Arc-Collection</a></li><li>GTK3主题(★★★★★) =&gt; <a href=\"https://www.gnome-look.org/p/1241688\" target=\"_blank\" rel=\"noopener\">McOS-themes</a></li><li>Gnome Shell主题(★★★★) =&gt; <a href=\"https://github.com/daniruiz/flat-remix\" target=\"_blank\" rel=\"noopener\">Flat-Remix</a></li><li>Gnome Shell主题(★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1171095/\" target=\"_blank\" rel=\"noopener\">Human</a></li><li>Gnome Shell主题(★★★★★) =&gt; <a href=\"https://www.opendesktop.org/c/1460761561\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li><li>Gnome Shell主题(?) =&gt; <a href=\"https://www.gnome-look.org/p/1213208/\" target=\"_blank\" rel=\"noopener\">macOS High Sierra</a></li><li>Icon 主题(★★★★) =&gt; <a href=\"https://github.com/daniruiz/flat-remix/releases\" target=\"_blank\" rel=\"noopener\">flat-remix</a></li><li>Icon 主题(★★★★☆) =&gt; <a href=\"https://www.gnome-look.org/p/1012200/\" target=\"_blank\" rel=\"noopener\">Mac OS X Icon</a></li><li>Icon 主题(★★★★★) =&gt; <a href=\"https://github.com/keeferrourke/la-capitaine-icon-theme/releases\" target=\"_blank\" rel=\"noopener\">la-capitaine-icon-theme</a></li><li>Icon 主题(★★★★★) <a href=\"https://www.pling.com/p/1305429/\" target=\"_blank\" rel=\"noopener\">McMojave-circle</a></li><li>Icon 主题(★★★★☆) =&gt; <a href=\"https://github.com/zayronxio/Macos-sierra-CT\" target=\"_blank\" rel=\"noopener\">MacOS sierra ct</a></li><li>Cursor主题(★★★★☆) =&gt; <a href=\"https://krourke.org/projects/art/capitaine-cursors\" target=\"_blank\" rel=\"noopener\">Capitaine Cursors</a></li></ul><h4 id=\"chrome实用插件整理\">chrome实用插件整理</h4><hr><ul><li><a href=\"https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">infinity pro 标签页</a> =&gt; 主页标签管理器(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Octotree</a> =&gt; github仓库文件资源浏览树(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/postman-interceptor/aicmkgpgakddgnaphhhpliifpcfhicfo?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Postman</a> =&gt; API测试和请求模拟器(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">SwitchyOmega</a> =&gt; 大家都用的代理软件(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">印象笔记剪藏</a> =&gt; 随时随地把网络资源保存到你的笔记本里(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">SimpRead</a> =&gt; 让浏览器支持纯净的阅读模式(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Full Page Screen Capture</a> =&gt; 全屏截图(★★★★☆)</li><li><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">油猴tampermonkey</a> =&gt; 用户脚本管理器，一个用例是破解badu网盘的限速(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Checker Plus for Gmail</a> =&gt; Google邮件提示插件(★★★★☆)</li><li><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=InfinityNewtab\" target=\"_blank\" rel=\"noopener\">Vimium</a> =&gt; 让google浏览器支持vim模式(firefox也有)(★★★★★)</li><li><a href=\"https://chrome.google.com/webstore/detail/copy-as-markdown/dgoenpnkphkichnohepecnmpmihnabdg\" target=\"_blank\" rel=\"noopener\">拷贝为Markdown</a> =&gt; 将选中网页转化为markdown格式并发送到剪贴板(★★★★☆)</li></ul><h4 id=\"实用程序和命令\">实用程序和命令</h4><hr><ul><li><a href=\"https://github.com/tonsky/FiraCode/wiki/Linux-instructions#installing-with-a-package-manager\" target=\"_blank\" rel=\"noopener\">fonts-firacode编程字体</a> =&gt; 解决vscode字体间隙过小的问题<code>sudo apt install fonts-firacode</code></li><li><a href=\"https://vivaldi.com\" target=\"_blank\" rel=\"noopener\">vivaldi浏览器</a> =&gt; 可定制化程度高的个性化浏览器(★★★★★)</li><li>Terminator =&gt; 默认gnome终端升级版(★★★★★)</li><li>Timeshift =&gt; 创建系统快照，增量备份(★★★★★)</li><li>ipython3(命令工具) =&gt; python交互解释器(★★★★★)</li><li>jupyter =&gt; 交互式数据分析和记录工具(★★★★☆)</li><li>pdb/ipdb(命令工具) =&gt; python调试器(★★★★☆)</li><li>trash-cli(命令工具) =&gt; 命令行回收站(★★★★★)</li><li>bat(命令工具) =&gt; cat升级版，支持语法高亮和git状态显示(★★★★★)</li><li>axel(命令工具) =&gt; 下载限速不存在的，如果存在那我就开100个下载线程 : )(★★★★☆)</li><li><a href=\"https://github.com/aria2/aria2\" target=\"_blank\" rel=\"noopener\">aria2(命令工具)</a> =&gt; 强大的命令行下载工具</li><li><a href=\"https://github.com/oguzhaninan/Stacer\" target=\"_blank\" rel=\"noopener\">stacer</a> =&gt; linux电脑管家(★★★★★)</li><li><a href=\"https://github.com/trazyn/ieaseMusic\" target=\"_blank\" rel=\"noopener\">ieaseMusic</a> =&gt; 网易云音乐第三方客户端，没有bug，不会退出后再打开就让重新登陆[注：网易云音乐官方已修复]，界面还很酷(★★★★★)</li><li>parallel(命令工具) =&gt; 利用系统的多核来并行执行你的程序(★★★★☆)</li><li>cheat(命令工具) =&gt; 类似man命令的功能，简洁高效(★★★★☆)</li><li>topgrade(命令工具) =&gt; 一个命令更新所有软件(★★★★)</li><li><a href=\"https://www.dbkoda.com/\" target=\"_blank\" rel=\"noopener\">dbKoda</a> =&gt; mongodb GUI工具(★★★★☆)</li><li><a href=\"https://www.mongodb.com/products/compass\" target=\"_blank\" rel=\"noopener\">mongodb compass</a> =&gt; mongodb GUI工具(★★★★)</li><li><a href=\"https://github.com/phw/peek\" target=\"_blank\" rel=\"noopener\">peek</a> =&gt; 屏幕录制工具，支持输出gif/webm/apng/webm格式的媒体文件(★★★★☆)</li><li>tmux =&gt; 终端管理器(★★★★)</li><li>深度终端(ubuntu商店下载) =&gt; 支持分屏，内置实用主题(★★★★☆)</li><li>深度截图(ubuntu商店下载) =&gt; 支持截图编辑(★★★★★)</li><li>shutter截图 =&gt; 功能丰富的截图和图标编辑软件，添加<code>ppa:linuxuprising/shutter</code>安装(★★★★☆)</li><li>flameshot =&gt; 支持Ubuntu20.04的截图编辑工具(★★★★★)</li><li><a href=\"https://webtorrent.io/desktop/\" target=\"_blank\" rel=\"noopener\">WebTorrent</a>、<a href=\"https://www.frostwire.com/\" target=\"_blank\" rel=\"noopener\">FrostWire</a> =&gt; bt下载工具，支持边下边播(★★★★)</li><li><a href=\"https://www.syntevo.com/smartgit/\" target=\"_blank\" rel=\"noopener\">SmartGit</a> =&gt; linux平台免费的GIT GUI工具(★★★★★)</li><li>FileZilla =&gt; ftp工具(★★★★★)</li><li><a href=\"https://github.com/Suremotoo/e-tools\" target=\"_blank\" rel=\"noopener\">e-tools</a> =&gt; coder常用小工具(★★★★)</li><li><a href=\"https://electronjs.org/apps/whatever\" target=\"_blank\" rel=\"noopener\">WhatEver</a> =&gt; linux第三方印象笔记客户端，基于网页版(★★★★)</li><li><a href=\"http://linux.wps.cn/\" target=\"_blank\" rel=\"noopener\">wps</a> =&gt; linux office for free made by KingSoftware(★★★★★)</li><li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">vscode</a> =&gt; 轻量化编辑器，很快！ (★★★★★)</li><li>ndb =&gt; node.js/javascript 调试器(★★★★★)</li><li><a href=\"https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh\" target=\"_blank\" rel=\"noopener\">nvm</a> =&gt; nodejs版本管理器</li><li>albert (添加软件源 <code>ppa:noobslab/macbuntu</code> 安装 ) =&gt; 桌面全局搜索类似Mac系统的SpotLight(★★★★★)</li><li><a href=\"https://linux.cn/article-5460-1.html\" target=\"_blank\" rel=\"noopener\">lftp</a> =&gt; 一个基于命令行的文件传输软件，支持FTP，FTPS，HTTP，HTTPS，HFTP，FISH，以及SFTP等协议，也有许多高级特性比<br>如：多线程下载、断点续传</li><li><a href=\"http://jonls.dk/redshift/\" target=\"_blank\" rel=\"noopener\">redshift-gtk</a> 护眼模式，自带的色彩太黄了</li><li>apt-fast =&gt; 比apt更快的包管理器，添加<code>ppa:apt-fast/stable</code>安装(★★★★★)</li><li>nautilus action configure tool =&gt; 资源管理器右键菜单自定义，添加<code>ppa:daniel-marynicz/filemanager-actions</code>安装(★★★★★)</li><li>tig =&gt; 可交互的命令行git命令(★★★★★)</li><li>shellcheck =&gt; shell脚本语法检查(★★★★★)</li><li><a href=\"https://motrix.app/zh-CN/\" target=\"_blank\" rel=\"noopener\">Motrix</a> =&gt; 全平台下载工具，用于替代迅雷(★★★★★)</li><li><a href=\"https://github.com/jgraph/drawio-desktop/\" target=\"_blank\" rel=\"noopener\">Drawio</a> =&gt; 全平台绘图工具(流程图、类图、工程图…)，功能跟微软的visio相同(★★★★★)</li><li><a href=\"https://github.com/Winetricks/winetricks\" target=\"_blank\" rel=\"noopener\">winetricks</a> =&gt; wine环境的辅助工具，可用于生成wine基础环境、安装windows dll和字体等等(★★★★★)</li><li><a href=\"https://www.insynchq.com/\" target=\"_blank\" rel=\"noopener\">Insync</a> =&gt; 全平台同步工具，支持google云和onedrive(★★★★★)</li><li><a href=\"https://github.com/teejee2008/timeshift\" target=\"_blank\" rel=\"noopener\">Timeshift</a> =&gt; 创建系统增量备份计划(★★★★★)</li><li>dconf-editor =&gt; gnome桌面配置gui工具(★★★★)</li></ul><h4 id=\"实用网站推荐\">实用网站推荐</h4><hr><p><img src=\"Ubuntu18.04-14.png\" alt=\"Vimix.png\"></p><ul><li><a href=\"https://wallpapershome.com/\" target=\"_blank\" rel=\"noopener\">Wallpaper</a> =&gt; 高清桌面壁纸下载，支持多种分辨率(★★★★★)</li><li><a href=\"https://www.flaticon.com\" target=\"_blank\" rel=\"noopener\">flaticon</a> =&gt; 免费图标下载网站，支持svg和png两种格式</li><li><a href=\"https://electronjs.org/apps\" target=\"_blank\" rel=\"noopener\">Electron Apps</a> =&gt; 有很多Electron 框架写的跨平台应用(Linux/Mac/Windows)(★★★★☆)</li><li><a href=\"https://www.centos.bz/\" target=\"_blank\" rel=\"noopener\">Linux运维日志</a> =&gt; 服务搭建、Linux技术之类的(★★★★☆)</li><li><a href=\"https://www.ibm.com/developerworks/cn/\" target=\"_blank\" rel=\"noopener\">IBM Developer</a> =&gt; 技术文档类的参考(★★★★★)</li><li><a href=\"https://www.lulinux.com/archives/2513#awk\" target=\"_blank\" rel=\"noopener\">Linux常用命令</a> =&gt; 常用命令速查(★★★★☆)</li><li><a href=\"https://www.kanbilibili.com/\" target=\"_blank\" rel=\"noopener\">bilibili工具网站</a> =&gt; 支持 视频/弹幕/封面 下载等骚操作(★★★★★)</li><li><a href=\"https://linux.cn/\" target=\"_blank\" rel=\"noopener\">Linux中国</a> =&gt; 没事儿就上去看看别人翻译转载的文章(★★★★☆)</li><li><a href=\"https://tinypng.com/\" target=\"_blank\" rel=\"noopener\">TinyPNG</a> =&gt; 免费的图片无损压缩网站(★★★★☆)</li><li><a href=\"https://www.iloveimg.com/zh-cn\" target=\"_blank\" rel=\"noopener\">iLoveIMG</a> =&gt; 在线图片编辑网站(★★★★★)</li><li><a href=\"https://en.savefrom.net/\" target=\"_blank\" rel=\"noopener\">savefrom</a> =&gt; 直接下载youtube视频(★★★★☆)</li><li><a href=\"https://www.lulinux.com/\" target=\"_blank\" rel=\"noopener\">撸Linux</a> =&gt; 好像还蛮有趣的额(★★★★☆)</li><li><a href=\"https://greasyfork.org/zh-CN/scripts\" target=\"_blank\" rel=\"noopener\">油猴脚本</a> =&gt; 你甚至可以用来破解百度云限速(★★★★★)</li></ul><p><em>注：以上内容部分是从网络搜集，希望解决广大Linuxer的问题所以做了部分整合.</em></p>"},{"title":"基于s3对象存储多文件分片上传的Javascript实现（二）","catalog":true,"toc_nav_num":true,"date":"2020-03-26T08:18:00.000Z","subtitle":"fileupload node fs","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-03-26T08:18:00.000Z","_content":"\n### 目录\n------------\n\n1. 概述\n\n2. 文件上传-Js向中间层Node发送分片数据\n\n3. 文件上传-中间层Node接收前端发送的分片数据\n\n4. 文件下载-中间层Node获取后端文件数据的两种处理\n\n5. 文件下载-Js下载中间层文件的两种不同方式\n\n### 预览\n-------\n\n![upload](upload.png)\n\n### 概述\n-------\n\nAmazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。  \n前一篇文章[基于s3对象存储多文件分片上传的Javascript实现(一)](./基于s3对象存储多文件分片上传的Javascript实现(一).md)主要讲了前端Js多文件分片上传逻辑的实现，描述了浏览器端多文件分片异步上传状态管理方面的设计，这篇文章主要针对前端Coder文件操作的一些痛点，比如：前端分片是以怎样的数据形式发送到中间层的、中间层是怎样接收前端发送的分片数据的、文件下载时中间层怎样处理后端接口返回的大文件数据然后发送给前端、前端又是怎样拿到和下载中间层返回的文件数据的，主要包含这些方面。\n\n### 文件上传-Js向中间层Node发送分片数据\n----------------------------------\n\n#### 创建Axios实例\n```js\nconst XHR = axios.create({\n  baseURl: '',\n  timeout: 30e3,\n  headers: originHeaders,\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n});\n```\n\n#### 使用文件分片构造表单数据\n>fileShardsData为File.slice接口对文件截取得到的部分文件数据\n```js\nconst data = new FormData();\nformData.append('file', fileShardsData, 'file');\n```\n\n#### 发送分片\n>注意设置请求头的请求数据类型\n```js\nXHR({\n  api,\n  method,\n  data,\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n}).then((response) => {\n  ...\n});\n```\n\n### 文件上传-中间层Node接收前端发送的分片数据\n>Express没有自带文件处理功能，需要使用第三方middleware\n\n环境：\n* Express V4框架\n* Node.js V8\n\n#### 方法1：使用formidable中间件处理文件请求\n1. 编写公用中间处理组件\n```js\nconst formidable = require('formidable');\n/**\n  * parseFile [使用formidable进行文件解析 - 性能一般]\n  * @author nojsja\n  * @param  {[Object]} req [req obj]\n  * @param  {[Object]} res [res obj]\n  */\nexports.formidableParseFile = (req, res, callback) => {\n  try {\n    const form = new formidable.IncomingForm();\n    form.parse(req, (err, fields, files) => {\n      if (fs.existsSync(files.file.path)) {\n        fs.readFile(files.file.path, (err, fileBuffer) => {\n          fs.unlink(files.file.path, (err) => {\n            if (err) console.log(err);\n          });\n          if (err) {\n            return callback(err);\n          }\n          callback(null, fileBuffer);\n        });\n      } else {\n        callback(null, '');\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    callback(error);\n  }\n}\n```\n\n2. 挂载路由\n```js\nrouter.post('/object/object/upload', function(req, res, next) {\n  console.log('upload');\n  const random = Math.random();\n  console.time(`${random} -> 1`);\n  formidableParseFile(req, res, (err, fileBuffer) => {\n    console.timeEnd(`${random} -> 1`);\n    if (err) {\n      return res.json({\n        code: 500,\n        result: err.toString(),\n      })\n    }\n    console.time(`${random} -> 2`);\n    commonRequestAuth(req.query, objectsresourceApi.object.uploadObject, req, fileBuffer).then(\n      (response) => {\n        console.timeEnd(`${random} -> 2`);\n        res.json({\n          code: response.code,\n          result: {\n            ...{ etag: response.headers ? response.headers.etag : '' },\n            ...response.result\n          },\n        });\n      },\n      );\n    });\n});\n```\n\n#### 方法2：代码实现文件处理\n\n1. 声明方法\n```js\n/**\n  * parseFile [form-data原生文件解析 - 性能差]\n  * @author nojsja\n  * @param  {[Object]} req [req obj]\n  * @param  {[Object]} res [res obj]\n  */\nexports.parseFile = (req, res, callback) => {\n  req.setEncoding('binary');\n  let body = '';   // 文件数据\n  let fileName = '';  // 文件名\n\n  // 边界字符串\n  const boundary = req.headers['content-type'].split('; ')[1].replace('boundary=', '');\n\n  req.on('data', function (chunk) {\n    body += chunk;\n  });\n\n  req.on('end', function () {\n    try {\n      // 分隔键值对(\\r\\n)和键值(:)\n      const file = querystring.parse(body, '\\r\\n', ':')\n      //获取文件名\n      const fileInfo = file['Content-Disposition'].split('; ');\n      for (value in fileInfo) {\n        if (fileInfo[value].indexOf(\"filename=\") != -1) {\n          fileName = fileInfo[value].substring(10, fileInfo[value].length - 1);\n\n          if (fileName.indexOf('\\\\') != -1) {\n            fileName = fileName.substring(fileName.lastIndexOf('\\\\') + 1);\n          }\n        }\n      }\n\n      // 获取图片类型(如：image/gif 或 image/png))\n      const entireData = body.toString();\n\n      contentType = file['Content-Type'].substring(1);\n\n      //获取文件二进制数据开始位置，即contentType的结尾\n      const upperBoundary = entireData.indexOf(contentType) + contentType.length;\n      const shorterData = entireData.substring(upperBoundary);\n\n      // 替换开始位置的空格\n      const binaryDataAlmost = shorterData.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n\n      // 去除数据末尾的额外数据，即: \"--\"+ boundary + \"--\"\n      const binaryData = binaryDataAlmost.substring(0, binaryDataAlmost.indexOf('--' + boundary + '--'));\n\n      callback(null, binaryData);\n    } catch (error) {\n      callback(new Error('form-data parse error!'));\n    }\n\n  });\n};\n```\n2. 挂载路由同上\n\n### 文件下载-中间层Node获取后端文件数据的两种处理\n------------------------------------------\n>两种方式均使用Axios发送请求\n\n#### 小文件直传\n接收到接口数据后直接放入内存然后以文件的类型发送给前端\n\n1. 请求header注意设置`resType: \"arraybuffer\"`\n```js\n// 对象详情信息\nrouter.post('/resource/object/detailinfo/all', function(req, res, next) {\n  commonRequestAuth({ ...req.body, ...{ $no_timeout$: true }}, objectsresourceApi.object.objectinfoAll, req).then((response) => {\n    res.type('file').send(response.result)\n  });\n});\n```\n\n#### 大文件转存为静态资源\n> Node.js支持文件流操作，包含可读流、可写流以及可读可写流，如果在处理大文件的时候直接把数据放入内存，就会出现中间层内存爆满的情况，这里先声明接口返回数据为可读流，然后通过本地静态资源路径创建可写流，最后为了避免由于可读流的数据写入可写流时由于读取速度和写入速度的差异问题导致的数据丢失情况，使用管道pipe连接可读流和可写流再进行数据传输。\n1. Node Pipe管道的概念\n![node pipe](node_pipe.png)\n\n2. 请求header注意设置`resType: \"stream\"`\n\n3. 创建本地可写流\n使用fs.createWriteStream接口，参数为本地某个目录文件，文件可以不存在，目录需要实际存在\n\n4. 接口返回的是可读流，可以直接连接到管道\n注意服务器是否支持以数据流方式返回二进制数据\n\n5. 可写流完成写入后向前端发送静态资源文件地址\n监听可写流的finish事件可以异步处理文件完成写入事件\n\n```js\n// 对象详情信息\nrouter.post('/resource/object/detailinfo', function(req, res, next) {\n  console.log('download');\n  commonRequestAuth({ ...req.body, ...{ $no_timeout$: true }}, objectsresourceApi.object.objectinfo, req).then((response) => {\n    console.log('download callback');\n    const fileName = req.body.object.split('/').pop();\n    const fileSymbol = `${fileName}-${Date.now()}`;\n    const filePath = path.join(_path.public, 'download', fileSymbol);\n    const ws = fs.createWriteStream(filePath);\n    response.result.pipe(ws);\n    ws.on('finish', () => { \n      console.log('download finish');\n      res.header({\n        'Content-Disposition': fileName\n      });\n      res.json({\n        code: 200,\n        result: filePath.split('node-express-react/public/public')[1],\n      });\n    }); \n  });\n});\n```\n\n### 文件下载-Js下载中间层文件的两种不同方式\n-------------------------------------\n\n#### 小文件直接从接口拿到数据并生成DataURL触发下载  \n\n1. 请求header声明`responseType:arraybuffer`  \n指名返回的数据是可直接使用的二进制流数据  \n\n2. 接口数据返回后生成前端通用的大二进制块数据`Blob`\nnew Blob(DataArray, { type: mimetype })，mimetype需要正确指定，比如jpeg格式的图片mimetype为image/jpeg\n\n3. 使用HTML5 FileReader接口读取二进制块\nreader.readAsDataURL将二进制读取为base64编码的字符串数据，前端可以直接预览和下载此类DataURL\n\n4. 构造a标签并指名download属性下载DataURL\n替代方法是使用window.open(dataUrl)\n\n```js\ndownloadObjectInMemory = (para, info) => {\n    const iAxios = axios.create();\n    // iAxios.defaults.timeout = 60 * 1000 * 60 * 10;\n    iAxios.defaults.timeout = 0;\n\n    const options = {\n      method: 'POST',\n      url: '/resource/object/detailinfo/all',\n      withCredentials: true,\n      responseType: 'arraybuffer',\n      headers: {\n        'Cache-Control': 'max-age=0',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      data: para,\n    };\n\n    const readAsDataUrl = (data, emptyData) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(data);\n      reader.onload = (e) => {\n        const url = e.target.result;\n        const a = document.createElement('a');\n        const filename = para.object.split('/').pop();\n        a.href = url === 'data:' ? emptyData : url;\n        a.download = filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n      };\n    };\n    const typename = mapMimeType(info.name).mime;\n    iAxios.request(options)\n      .then((res) => {\n        const blobData = new Blob([res.data], { type: typename });\n        readAsDataUrl(blobData, `data:${typename};base64,`);\n      }).catch((error) => {\n        console.log(error);\n      });\n  }\n```\n\n#### 大文件通过接口返回的静态文件链接进行下载\n步骤同上，只不过构造DataURL的过程取消，a标签可以直接使用接口返回的静态文件地质URL\n\n```js\ndownloadObjectWithURL = (para) => {\n    const iAxios = axios.create();\n    // iAxios.defaults.timeout = 60 * 1000 * 60 * 10;\n    iAxios.defaults.timeout = 0;\n\n    const options = {\n      method: 'POST',\n      url: '/resource/object/detailinfo',\n      withCredentials: true,\n      responseType: 'json',\n      headers: {\n        'Cache-Control': 'max-age=0',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      data: para,\n    };\n\n    let timer;\n    iAxios.request(options)\n      .then((res) => {\n        clearTimeout(timer);\n        const a = document.createElement('a');\n        const filename = para.object.split('/').pop();\n        const address = process.env.NODE_ENV === 'development' ? `${window.location.protocol}//10.0.6.206:3000${res.data.result}` : `${window.location.protocol}//${window.location.hostname}:3000${res.data.result}`;\n        a.href = address;\n        a.download = filename;\n        a.click();\n      }).catch((error) => {\n        console.log(error);\n      });\n    timer = setTimeout(() => {\n      openNotification('info', null, this.lang.lang.fileDownloadTips);\n    }, 1e3);\n  }\n```","source":"_posts/2020-03-26-基于s3对象存储多文件分片上传的Javascript实现（二）.md","raw":"---\ntitle: \"基于s3对象存储多文件分片上传的Javascript实现（二）\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-03-26 16:18:00\nsubtitle: \"fileupload node fs\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- upload\n- node\nupdateDate: 2020-03-26 16:18:00\ncategories:\n- Javascript\n- Node\n---\n\n### 目录\n------------\n\n1. 概述\n\n2. 文件上传-Js向中间层Node发送分片数据\n\n3. 文件上传-中间层Node接收前端发送的分片数据\n\n4. 文件下载-中间层Node获取后端文件数据的两种处理\n\n5. 文件下载-Js下载中间层文件的两种不同方式\n\n### 预览\n-------\n\n![upload](upload.png)\n\n### 概述\n-------\n\nAmazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。  \n前一篇文章[基于s3对象存储多文件分片上传的Javascript实现(一)](./基于s3对象存储多文件分片上传的Javascript实现(一).md)主要讲了前端Js多文件分片上传逻辑的实现，描述了浏览器端多文件分片异步上传状态管理方面的设计，这篇文章主要针对前端Coder文件操作的一些痛点，比如：前端分片是以怎样的数据形式发送到中间层的、中间层是怎样接收前端发送的分片数据的、文件下载时中间层怎样处理后端接口返回的大文件数据然后发送给前端、前端又是怎样拿到和下载中间层返回的文件数据的，主要包含这些方面。\n\n### 文件上传-Js向中间层Node发送分片数据\n----------------------------------\n\n#### 创建Axios实例\n```js\nconst XHR = axios.create({\n  baseURl: '',\n  timeout: 30e3,\n  headers: originHeaders,\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n});\n```\n\n#### 使用文件分片构造表单数据\n>fileShardsData为File.slice接口对文件截取得到的部分文件数据\n```js\nconst data = new FormData();\nformData.append('file', fileShardsData, 'file');\n```\n\n#### 发送分片\n>注意设置请求头的请求数据类型\n```js\nXHR({\n  api,\n  method,\n  data,\n  headers: {\n    'Content-Type': 'multipart/form-data',\n  },\n}).then((response) => {\n  ...\n});\n```\n\n### 文件上传-中间层Node接收前端发送的分片数据\n>Express没有自带文件处理功能，需要使用第三方middleware\n\n环境：\n* Express V4框架\n* Node.js V8\n\n#### 方法1：使用formidable中间件处理文件请求\n1. 编写公用中间处理组件\n```js\nconst formidable = require('formidable');\n/**\n  * parseFile [使用formidable进行文件解析 - 性能一般]\n  * @author nojsja\n  * @param  {[Object]} req [req obj]\n  * @param  {[Object]} res [res obj]\n  */\nexports.formidableParseFile = (req, res, callback) => {\n  try {\n    const form = new formidable.IncomingForm();\n    form.parse(req, (err, fields, files) => {\n      if (fs.existsSync(files.file.path)) {\n        fs.readFile(files.file.path, (err, fileBuffer) => {\n          fs.unlink(files.file.path, (err) => {\n            if (err) console.log(err);\n          });\n          if (err) {\n            return callback(err);\n          }\n          callback(null, fileBuffer);\n        });\n      } else {\n        callback(null, '');\n      }\n    });\n  } catch (error) {\n    console.error(error);\n    callback(error);\n  }\n}\n```\n\n2. 挂载路由\n```js\nrouter.post('/object/object/upload', function(req, res, next) {\n  console.log('upload');\n  const random = Math.random();\n  console.time(`${random} -> 1`);\n  formidableParseFile(req, res, (err, fileBuffer) => {\n    console.timeEnd(`${random} -> 1`);\n    if (err) {\n      return res.json({\n        code: 500,\n        result: err.toString(),\n      })\n    }\n    console.time(`${random} -> 2`);\n    commonRequestAuth(req.query, objectsresourceApi.object.uploadObject, req, fileBuffer).then(\n      (response) => {\n        console.timeEnd(`${random} -> 2`);\n        res.json({\n          code: response.code,\n          result: {\n            ...{ etag: response.headers ? response.headers.etag : '' },\n            ...response.result\n          },\n        });\n      },\n      );\n    });\n});\n```\n\n#### 方法2：代码实现文件处理\n\n1. 声明方法\n```js\n/**\n  * parseFile [form-data原生文件解析 - 性能差]\n  * @author nojsja\n  * @param  {[Object]} req [req obj]\n  * @param  {[Object]} res [res obj]\n  */\nexports.parseFile = (req, res, callback) => {\n  req.setEncoding('binary');\n  let body = '';   // 文件数据\n  let fileName = '';  // 文件名\n\n  // 边界字符串\n  const boundary = req.headers['content-type'].split('; ')[1].replace('boundary=', '');\n\n  req.on('data', function (chunk) {\n    body += chunk;\n  });\n\n  req.on('end', function () {\n    try {\n      // 分隔键值对(\\r\\n)和键值(:)\n      const file = querystring.parse(body, '\\r\\n', ':')\n      //获取文件名\n      const fileInfo = file['Content-Disposition'].split('; ');\n      for (value in fileInfo) {\n        if (fileInfo[value].indexOf(\"filename=\") != -1) {\n          fileName = fileInfo[value].substring(10, fileInfo[value].length - 1);\n\n          if (fileName.indexOf('\\\\') != -1) {\n            fileName = fileName.substring(fileName.lastIndexOf('\\\\') + 1);\n          }\n        }\n      }\n\n      // 获取图片类型(如：image/gif 或 image/png))\n      const entireData = body.toString();\n\n      contentType = file['Content-Type'].substring(1);\n\n      //获取文件二进制数据开始位置，即contentType的结尾\n      const upperBoundary = entireData.indexOf(contentType) + contentType.length;\n      const shorterData = entireData.substring(upperBoundary);\n\n      // 替换开始位置的空格\n      const binaryDataAlmost = shorterData.replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n\n      // 去除数据末尾的额外数据，即: \"--\"+ boundary + \"--\"\n      const binaryData = binaryDataAlmost.substring(0, binaryDataAlmost.indexOf('--' + boundary + '--'));\n\n      callback(null, binaryData);\n    } catch (error) {\n      callback(new Error('form-data parse error!'));\n    }\n\n  });\n};\n```\n2. 挂载路由同上\n\n### 文件下载-中间层Node获取后端文件数据的两种处理\n------------------------------------------\n>两种方式均使用Axios发送请求\n\n#### 小文件直传\n接收到接口数据后直接放入内存然后以文件的类型发送给前端\n\n1. 请求header注意设置`resType: \"arraybuffer\"`\n```js\n// 对象详情信息\nrouter.post('/resource/object/detailinfo/all', function(req, res, next) {\n  commonRequestAuth({ ...req.body, ...{ $no_timeout$: true }}, objectsresourceApi.object.objectinfoAll, req).then((response) => {\n    res.type('file').send(response.result)\n  });\n});\n```\n\n#### 大文件转存为静态资源\n> Node.js支持文件流操作，包含可读流、可写流以及可读可写流，如果在处理大文件的时候直接把数据放入内存，就会出现中间层内存爆满的情况，这里先声明接口返回数据为可读流，然后通过本地静态资源路径创建可写流，最后为了避免由于可读流的数据写入可写流时由于读取速度和写入速度的差异问题导致的数据丢失情况，使用管道pipe连接可读流和可写流再进行数据传输。\n1. Node Pipe管道的概念\n![node pipe](node_pipe.png)\n\n2. 请求header注意设置`resType: \"stream\"`\n\n3. 创建本地可写流\n使用fs.createWriteStream接口，参数为本地某个目录文件，文件可以不存在，目录需要实际存在\n\n4. 接口返回的是可读流，可以直接连接到管道\n注意服务器是否支持以数据流方式返回二进制数据\n\n5. 可写流完成写入后向前端发送静态资源文件地址\n监听可写流的finish事件可以异步处理文件完成写入事件\n\n```js\n// 对象详情信息\nrouter.post('/resource/object/detailinfo', function(req, res, next) {\n  console.log('download');\n  commonRequestAuth({ ...req.body, ...{ $no_timeout$: true }}, objectsresourceApi.object.objectinfo, req).then((response) => {\n    console.log('download callback');\n    const fileName = req.body.object.split('/').pop();\n    const fileSymbol = `${fileName}-${Date.now()}`;\n    const filePath = path.join(_path.public, 'download', fileSymbol);\n    const ws = fs.createWriteStream(filePath);\n    response.result.pipe(ws);\n    ws.on('finish', () => { \n      console.log('download finish');\n      res.header({\n        'Content-Disposition': fileName\n      });\n      res.json({\n        code: 200,\n        result: filePath.split('node-express-react/public/public')[1],\n      });\n    }); \n  });\n});\n```\n\n### 文件下载-Js下载中间层文件的两种不同方式\n-------------------------------------\n\n#### 小文件直接从接口拿到数据并生成DataURL触发下载  \n\n1. 请求header声明`responseType:arraybuffer`  \n指名返回的数据是可直接使用的二进制流数据  \n\n2. 接口数据返回后生成前端通用的大二进制块数据`Blob`\nnew Blob(DataArray, { type: mimetype })，mimetype需要正确指定，比如jpeg格式的图片mimetype为image/jpeg\n\n3. 使用HTML5 FileReader接口读取二进制块\nreader.readAsDataURL将二进制读取为base64编码的字符串数据，前端可以直接预览和下载此类DataURL\n\n4. 构造a标签并指名download属性下载DataURL\n替代方法是使用window.open(dataUrl)\n\n```js\ndownloadObjectInMemory = (para, info) => {\n    const iAxios = axios.create();\n    // iAxios.defaults.timeout = 60 * 1000 * 60 * 10;\n    iAxios.defaults.timeout = 0;\n\n    const options = {\n      method: 'POST',\n      url: '/resource/object/detailinfo/all',\n      withCredentials: true,\n      responseType: 'arraybuffer',\n      headers: {\n        'Cache-Control': 'max-age=0',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      data: para,\n    };\n\n    const readAsDataUrl = (data, emptyData) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(data);\n      reader.onload = (e) => {\n        const url = e.target.result;\n        const a = document.createElement('a');\n        const filename = para.object.split('/').pop();\n        a.href = url === 'data:' ? emptyData : url;\n        a.download = filename;\n        a.click();\n        window.URL.revokeObjectURL(url);\n      };\n    };\n    const typename = mapMimeType(info.name).mime;\n    iAxios.request(options)\n      .then((res) => {\n        const blobData = new Blob([res.data], { type: typename });\n        readAsDataUrl(blobData, `data:${typename};base64,`);\n      }).catch((error) => {\n        console.log(error);\n      });\n  }\n```\n\n#### 大文件通过接口返回的静态文件链接进行下载\n步骤同上，只不过构造DataURL的过程取消，a标签可以直接使用接口返回的静态文件地质URL\n\n```js\ndownloadObjectWithURL = (para) => {\n    const iAxios = axios.create();\n    // iAxios.defaults.timeout = 60 * 1000 * 60 * 10;\n    iAxios.defaults.timeout = 0;\n\n    const options = {\n      method: 'POST',\n      url: '/resource/object/detailinfo',\n      withCredentials: true,\n      responseType: 'json',\n      headers: {\n        'Cache-Control': 'max-age=0',\n        'X-Requested-With': 'XMLHttpRequest',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      data: para,\n    };\n\n    let timer;\n    iAxios.request(options)\n      .then((res) => {\n        clearTimeout(timer);\n        const a = document.createElement('a');\n        const filename = para.object.split('/').pop();\n        const address = process.env.NODE_ENV === 'development' ? `${window.location.protocol}//10.0.6.206:3000${res.data.result}` : `${window.location.protocol}//${window.location.hostname}:3000${res.data.result}`;\n        a.href = address;\n        a.download = filename;\n        a.click();\n      }).catch((error) => {\n        console.log(error);\n      });\n    timer = setTimeout(() => {\n      openNotification('info', null, this.lang.lang.fileDownloadTips);\n    }, 1e3);\n  }\n```","slug":"基于s3对象存储多文件分片上传的Javascript实现（二）","published":1,"updated":"2020-12-06T10:53:22.624Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmur80019kl95cchn5qya","content":"<h3 id=\"目录\">目录</h3><hr><ol><li><p>概述</p></li><li><p>文件上传-Js向中间层Node发送分片数据</p></li><li><p>文件上传-中间层Node接收前端发送的分片数据</p></li><li><p>文件下载-中间层Node获取后端文件数据的两种处理</p></li><li><p>文件下载-Js下载中间层文件的两种不同方式</p></li></ol><h3 id=\"预览\">预览</h3><hr><p><img src=\"upload.png\" alt=\"upload\"></p><h3 id=\"概述\">概述</h3><hr><p>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。<br>前一篇文章<a href=\"./%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0(%E4%B8%80).md\">基于s3对象存储多文件分片上传的Javascript实现(一)</a>主要讲了前端Js多文件分片上传逻辑的实现，描述了浏览器端多文件分片异步上传状态管理方面的设计，这篇文章主要针对前端Coder文件操作的一些痛点，比如：前端分片是以怎样的数据形式发送到中间层的、中间层是怎样接收前端发送的分片数据的、文件下载时中间层怎样处理后端接口返回的大文件数据然后发送给前端、前端又是怎样拿到和下载中间层返回的文件数据的，主要包含这些方面。</p><h3 id=\"文件上传-Js向中间层Node发送分片数据\">文件上传-Js向中间层Node发送分片数据</h3><hr><h4 id=\"创建Axios实例\">创建Axios实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> XHR = axios.create(&#123;</span><br><span class=\"line\">  baseURl: <span class=\"string\">''</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">30e3</span>,</span><br><span class=\"line\">  headers: originHeaders,</span><br><span class=\"line\">  validateStatus(status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"使用文件分片构造表单数据\">使用文件分片构造表单数据</h4><blockquote><p>fileShardsData为File.slice接口对文件截取得到的部分文件数据</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">formData.append(<span class=\"string\">'file'</span>, fileShardsData, <span class=\"string\">'file'</span>);</span><br></pre></td></tr></table></figure><h4 id=\"发送分片\">发送分片</h4><blockquote><p>注意设置请求头的请求数据类型</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XHR(&#123;</span><br><span class=\"line\">  api,</span><br><span class=\"line\">  method,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'multipart/form-data'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\"文件上传-中间层Node接收前端发送的分片数据\">文件上传-中间层Node接收前端发送的分片数据</h3><blockquote><p>Express没有自带文件处理功能，需要使用第三方middleware</p></blockquote><p>环境：</p><ul><li>Express V4框架</li><li>Node.js V8</li></ul><h4 id=\"方法1：使用formidable中间件处理文件请求\">方法1：使用formidable中间件处理文件请求</h4><ol><li>编写公用中间处理组件</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * parseFile [使用formidable进行文件解析 - 性能一般]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [req obj]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>res [res obj]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.formidableParseFile = <span class=\"function\">(<span class=\"params\">req, res, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">    form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fs.existsSync(files.file.path)) &#123;</span><br><span class=\"line\">        fs.readFile(files.file.path, (err, fileBuffer) =&gt; &#123;</span><br><span class=\"line\">          fs.unlink(files.file.path, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          callback(<span class=\"literal\">null</span>, fileBuffer);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">    callback(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>挂载路由</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/object/object/upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'upload'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 1`</span>);</span><br><span class=\"line\">  formidableParseFile(req, res, (err, fileBuffer) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 1`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">500</span>,</span><br><span class=\"line\">        result: err.toString(),</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 2`</span>);</span><br><span class=\"line\">    commonRequestAuth(req.query, objectsresourceApi.object.uploadObject, req, fileBuffer).then(</span><br><span class=\"line\">      (response) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 2`</span>);</span><br><span class=\"line\">        res.json(&#123;</span><br><span class=\"line\">          code: response.code,</span><br><span class=\"line\">          result: &#123;</span><br><span class=\"line\">            ...&#123; <span class=\"attr\">etag</span>: response.headers ? response.headers.etag : <span class=\"string\">''</span> &#125;,</span><br><span class=\"line\">            ...response.result</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"方法2：代码实现文件处理\">方法2：代码实现文件处理</h4><ol><li>声明方法</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * parseFile [form-data原生文件解析 - 性能差]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [req obj]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>res [res obj]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.parseFile = <span class=\"function\">(<span class=\"params\">req, res, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  req.setEncoding(<span class=\"string\">'binary'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"string\">''</span>;   <span class=\"comment\">// 文件数据</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fileName = <span class=\"string\">''</span>;  <span class=\"comment\">// 文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 边界字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundary = req.headers[<span class=\"string\">'content-type'</span>].split(<span class=\"string\">'; '</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">'boundary='</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</span><br><span class=\"line\">    body += chunk;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 分隔键值对(\\r\\n)和键值(:)</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> file = querystring.parse(body, <span class=\"string\">'\\r\\n'</span>, <span class=\"string\">':'</span>)</span><br><span class=\"line\">      <span class=\"comment\">//获取文件名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> fileInfo = file[<span class=\"string\">'Content-Disposition'</span>].split(<span class=\"string\">'; '</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (value <span class=\"keyword\">in</span> fileInfo) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fileInfo[value].indexOf(<span class=\"string\">\"filename=\"</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          fileName = fileInfo[value].substring(<span class=\"number\">10</span>, fileInfo[value].length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fileName.indexOf(<span class=\"string\">'\\\\'</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            fileName = fileName.substring(fileName.lastIndexOf(<span class=\"string\">'\\\\'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取图片类型(如：image/gif 或 image/png))</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> entireData = body.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">      contentType = file[<span class=\"string\">'Content-Type'</span>].substring(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//获取文件二进制数据开始位置，即contentType的结尾</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> upperBoundary = entireData.indexOf(contentType) + contentType.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> shorterData = entireData.substring(upperBoundary);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 替换开始位置的空格</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> binaryDataAlmost = shorterData.replace(<span class=\"regexp\">/^\\s\\s*/</span>, <span class=\"string\">''</span>).replace(<span class=\"regexp\">/\\s\\s*$/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 去除数据末尾的额外数据，即: \"--\"+ boundary + \"--\"</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> binaryData = binaryDataAlmost.substring(<span class=\"number\">0</span>, binaryDataAlmost.indexOf(<span class=\"string\">'--'</span> + boundary + <span class=\"string\">'--'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      callback(<span class=\"literal\">null</span>, binaryData);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'form-data parse error!'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>挂载路由同上</li></ol><h3 id=\"文件下载-中间层Node获取后端文件数据的两种处理\">文件下载-中间层Node获取后端文件数据的两种处理</h3><hr><blockquote><p>两种方式均使用Axios发送请求</p></blockquote><h4 id=\"小文件直传\">小文件直传</h4><p>接收到接口数据后直接放入内存然后以文件的类型发送给前端</p><ol><li>请求header注意设置<code>resType: &quot;arraybuffer&quot;</code></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象详情信息</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/resource/object/detailinfo/all'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  commonRequestAuth(&#123; ...req.body, ...&#123; <span class=\"attr\">$no_timeout$</span>: <span class=\"literal\">true</span> &#125;&#125;, objectsresourceApi.object.objectinfoAll, req).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.type(<span class=\"string\">'file'</span>).send(response.result)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"大文件转存为静态资源\">大文件转存为静态资源</h4><blockquote><p>Node.js支持文件流操作，包含可读流、可写流以及可读可写流，如果在处理大文件的时候直接把数据放入内存，就会出现中间层内存爆满的情况，这里先声明接口返回数据为可读流，然后通过本地静态资源路径创建可写流，最后为了避免由于可读流的数据写入可写流时由于读取速度和写入速度的差异问题导致的数据丢失情况，使用管道pipe连接可读流和可写流再进行数据传输。</p></blockquote><ol><li><p>Node Pipe管道的概念<br><img src=\"node_pipe.png\" alt=\"node pipe\"></p></li><li><p>请求header注意设置<code>resType: &quot;stream&quot;</code></p></li><li><p>创建本地可写流<br>使用fs.createWriteStream接口，参数为本地某个目录文件，文件可以不存在，目录需要实际存在</p></li><li><p>接口返回的是可读流，可以直接连接到管道<br>注意服务器是否支持以数据流方式返回二进制数据</p></li><li><p>可写流完成写入后向前端发送静态资源文件地址<br>监听可写流的finish事件可以异步处理文件完成写入事件</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象详情信息</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/resource/object/detailinfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'download'</span>);</span><br><span class=\"line\">  commonRequestAuth(&#123; ...req.body, ...&#123; <span class=\"attr\">$no_timeout$</span>: <span class=\"literal\">true</span> &#125;&#125;, objectsresourceApi.object.objectinfo, req).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'download callback'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = req.body.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileSymbol = <span class=\"string\">`<span class=\"subst\">$&#123;fileName&#125;</span>-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filePath = path.join(_path.public, <span class=\"string\">'download'</span>, fileSymbol);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ws = fs.createWriteStream(filePath);</span><br><span class=\"line\">    response.result.pipe(ws);</span><br><span class=\"line\">    ws.on(<span class=\"string\">'finish'</span>, () =&gt; &#123; </span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'download finish'</span>);</span><br><span class=\"line\">      res.header(&#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Disposition'</span>: fileName</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        result: filePath.split(<span class=\"string\">'node-express-react/public/public'</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\"文件下载-Js下载中间层文件的两种不同方式\">文件下载-Js下载中间层文件的两种不同方式</h3><hr><h4 id=\"小文件直接从接口拿到数据并生成DataURL触发下载\">小文件直接从接口拿到数据并生成DataURL触发下载</h4><ol><li><p>请求header声明<code>responseType:arraybuffer</code><br>指名返回的数据是可直接使用的二进制流数据</p></li><li><p>接口数据返回后生成前端通用的大二进制块数据<code>Blob</code><br>new Blob(DataArray, { type: mimetype })，mimetype需要正确指定，比如jpeg格式的图片mimetype为image/jpeg</p></li><li><p>使用HTML5 FileReader接口读取二进制块<br>reader.readAsDataURL将二进制读取为base64编码的字符串数据，前端可以直接预览和下载此类DataURL</p></li><li><p>构造a标签并指名download属性下载DataURL<br>替代方法是使用window.open(dataUrl)</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadObjectInMemory = <span class=\"function\">(<span class=\"params\">para, info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">    <span class=\"comment\">// iAxios.defaults.timeout = 60 * 1000 * 60 * 10;</span></span><br><span class=\"line\">    iAxios.defaults.timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/resource/object/detailinfo/all'</span>,</span><br><span class=\"line\">      withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      responseType: <span class=\"string\">'arraybuffer'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=0'</span>,</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      data: para,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> readAsDataUrl = <span class=\"function\">(<span class=\"params\">data, emptyData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">      reader.readAsDataURL(data);</span><br><span class=\"line\">      reader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = e.target.result;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = para.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">        a.href = url === <span class=\"string\">'data:'</span> ? emptyData : url;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(url);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> typename = mapMimeType(info.name).mime;</span><br><span class=\"line\">    iAxios.request(options)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> blobData = <span class=\"keyword\">new</span> Blob([res.data], &#123; <span class=\"attr\">type</span>: typename &#125;);</span><br><span class=\"line\">        readAsDataUrl(blobData, <span class=\"string\">`data:<span class=\"subst\">$&#123;typename&#125;</span>;base64,`</span>);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"大文件通过接口返回的静态文件链接进行下载\">大文件通过接口返回的静态文件链接进行下载</h4><p>步骤同上，只不过构造DataURL的过程取消，a标签可以直接使用接口返回的静态文件地质URL</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadObjectWithURL = <span class=\"function\">(<span class=\"params\">para</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">    <span class=\"comment\">// iAxios.defaults.timeout = 60 * 1000 * 60 * 10;</span></span><br><span class=\"line\">    iAxios.defaults.timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/resource/object/detailinfo'</span>,</span><br><span class=\"line\">      withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      responseType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=0'</span>,</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      data: para,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">    iAxios.request(options)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = para.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> address = process.env.NODE_ENV === <span class=\"string\">'development'</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.protocol&#125;</span>//10.0.6.206:3000<span class=\"subst\">$&#123;res.data.result&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.protocol&#125;</span>//<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.hostname&#125;</span>:3000<span class=\"subst\">$&#123;res.data.result&#125;</span>`</span>;</span><br><span class=\"line\">        a.href = address;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      openNotification(<span class=\"string\">'info'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.fileDownloadTips);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"目录\">目录</h3><hr><ol><li><p>概述</p></li><li><p>文件上传-Js向中间层Node发送分片数据</p></li><li><p>文件上传-中间层Node接收前端发送的分片数据</p></li><li><p>文件下载-中间层Node获取后端文件数据的两种处理</p></li><li><p>文件下载-Js下载中间层文件的两种不同方式</p></li></ol><h3 id=\"预览\">预览</h3><hr><p><img src=\"upload.png\" alt=\"upload\"></p><h3 id=\"概述\">概述</h3><hr><p>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。<br>前一篇文章<a href=\"./%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0(%E4%B8%80).md\">基于s3对象存储多文件分片上传的Javascript实现(一)</a>主要讲了前端Js多文件分片上传逻辑的实现，描述了浏览器端多文件分片异步上传状态管理方面的设计，这篇文章主要针对前端Coder文件操作的一些痛点，比如：前端分片是以怎样的数据形式发送到中间层的、中间层是怎样接收前端发送的分片数据的、文件下载时中间层怎样处理后端接口返回的大文件数据然后发送给前端、前端又是怎样拿到和下载中间层返回的文件数据的，主要包含这些方面。</p><h3 id=\"文件上传-Js向中间层Node发送分片数据\">文件上传-Js向中间层Node发送分片数据</h3><hr><h4 id=\"创建Axios实例\">创建Axios实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> XHR = axios.create(&#123;</span><br><span class=\"line\">  baseURl: <span class=\"string\">''</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">30e3</span>,</span><br><span class=\"line\">  headers: originHeaders,</span><br><span class=\"line\">  validateStatus(status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"使用文件分片构造表单数据\">使用文件分片构造表单数据</h4><blockquote><p>fileShardsData为File.slice接口对文件截取得到的部分文件数据</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">formData.append(<span class=\"string\">'file'</span>, fileShardsData, <span class=\"string\">'file'</span>);</span><br></pre></td></tr></table></figure><h4 id=\"发送分片\">发送分片</h4><blockquote><p>注意设置请求头的请求数据类型</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XHR(&#123;</span><br><span class=\"line\">  api,</span><br><span class=\"line\">  method,</span><br><span class=\"line\">  data,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'multipart/form-data'</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\"文件上传-中间层Node接收前端发送的分片数据\">文件上传-中间层Node接收前端发送的分片数据</h3><blockquote><p>Express没有自带文件处理功能，需要使用第三方middleware</p></blockquote><p>环境：</p><ul><li>Express V4框架</li><li>Node.js V8</li></ul><h4 id=\"方法1：使用formidable中间件处理文件请求\">方法1：使用formidable中间件处理文件请求</h4><ol><li>编写公用中间处理组件</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> formidable = <span class=\"built_in\">require</span>(<span class=\"string\">'formidable'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * parseFile [使用formidable进行文件解析 - 性能一般]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [req obj]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>res [res obj]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.formidableParseFile = <span class=\"function\">(<span class=\"params\">req, res, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> form = <span class=\"keyword\">new</span> formidable.IncomingForm();</span><br><span class=\"line\">    form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (fs.existsSync(files.file.path)) &#123;</span><br><span class=\"line\">        fs.readFile(files.file.path, (err, fileBuffer) =&gt; &#123;</span><br><span class=\"line\">          fs.unlink(files.file.path, (err) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          callback(<span class=\"literal\">null</span>, fileBuffer);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">    callback(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>挂载路由</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.post(<span class=\"string\">'/object/object/upload'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'upload'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> random = <span class=\"built_in\">Math</span>.random();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.time(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 1`</span>);</span><br><span class=\"line\">  formidableParseFile(req, res, (err, fileBuffer) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 1`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">500</span>,</span><br><span class=\"line\">        result: err.toString(),</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.time(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 2`</span>);</span><br><span class=\"line\">    commonRequestAuth(req.query, objectsresourceApi.object.uploadObject, req, fileBuffer).then(</span><br><span class=\"line\">      (response) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">`<span class=\"subst\">$&#123;random&#125;</span> -&gt; 2`</span>);</span><br><span class=\"line\">        res.json(&#123;</span><br><span class=\"line\">          code: response.code,</span><br><span class=\"line\">          result: &#123;</span><br><span class=\"line\">            ...&#123; <span class=\"attr\">etag</span>: response.headers ? response.headers.etag : <span class=\"string\">''</span> &#125;,</span><br><span class=\"line\">            ...response.result</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"方法2：代码实现文件处理\">方法2：代码实现文件处理</h4><ol><li>声明方法</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * parseFile [form-data原生文件解析 - 性能差]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@author <span class=\"variable\">nojsja</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>req [req obj]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>res [res obj]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.parseFile = <span class=\"function\">(<span class=\"params\">req, res, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  req.setEncoding(<span class=\"string\">'binary'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> body = <span class=\"string\">''</span>;   <span class=\"comment\">// 文件数据</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fileName = <span class=\"string\">''</span>;  <span class=\"comment\">// 文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 边界字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> boundary = req.headers[<span class=\"string\">'content-type'</span>].split(<span class=\"string\">'; '</span>)[<span class=\"number\">1</span>].replace(<span class=\"string\">'boundary='</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</span><br><span class=\"line\">    body += chunk;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 分隔键值对(\\r\\n)和键值(:)</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> file = querystring.parse(body, <span class=\"string\">'\\r\\n'</span>, <span class=\"string\">':'</span>)</span><br><span class=\"line\">      <span class=\"comment\">//获取文件名</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> fileInfo = file[<span class=\"string\">'Content-Disposition'</span>].split(<span class=\"string\">'; '</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (value <span class=\"keyword\">in</span> fileInfo) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fileInfo[value].indexOf(<span class=\"string\">\"filename=\"</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">          fileName = fileInfo[value].substring(<span class=\"number\">10</span>, fileInfo[value].length - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (fileName.indexOf(<span class=\"string\">'\\\\'</span>) != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            fileName = fileName.substring(fileName.lastIndexOf(<span class=\"string\">'\\\\'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 获取图片类型(如：image/gif 或 image/png))</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> entireData = body.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">      contentType = file[<span class=\"string\">'Content-Type'</span>].substring(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//获取文件二进制数据开始位置，即contentType的结尾</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> upperBoundary = entireData.indexOf(contentType) + contentType.length;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> shorterData = entireData.substring(upperBoundary);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 替换开始位置的空格</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> binaryDataAlmost = shorterData.replace(<span class=\"regexp\">/^\\s\\s*/</span>, <span class=\"string\">''</span>).replace(<span class=\"regexp\">/\\s\\s*$/</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 去除数据末尾的额外数据，即: \"--\"+ boundary + \"--\"</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> binaryData = binaryDataAlmost.substring(<span class=\"number\">0</span>, binaryDataAlmost.indexOf(<span class=\"string\">'--'</span> + boundary + <span class=\"string\">'--'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      callback(<span class=\"literal\">null</span>, binaryData);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">      callback(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'form-data parse error!'</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>挂载路由同上</li></ol><h3 id=\"文件下载-中间层Node获取后端文件数据的两种处理\">文件下载-中间层Node获取后端文件数据的两种处理</h3><hr><blockquote><p>两种方式均使用Axios发送请求</p></blockquote><h4 id=\"小文件直传\">小文件直传</h4><p>接收到接口数据后直接放入内存然后以文件的类型发送给前端</p><ol><li>请求header注意设置<code>resType: &quot;arraybuffer&quot;</code></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象详情信息</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/resource/object/detailinfo/all'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  commonRequestAuth(&#123; ...req.body, ...&#123; <span class=\"attr\">$no_timeout$</span>: <span class=\"literal\">true</span> &#125;&#125;, objectsresourceApi.object.objectinfoAll, req).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.type(<span class=\"string\">'file'</span>).send(response.result)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"大文件转存为静态资源\">大文件转存为静态资源</h4><blockquote><p>Node.js支持文件流操作，包含可读流、可写流以及可读可写流，如果在处理大文件的时候直接把数据放入内存，就会出现中间层内存爆满的情况，这里先声明接口返回数据为可读流，然后通过本地静态资源路径创建可写流，最后为了避免由于可读流的数据写入可写流时由于读取速度和写入速度的差异问题导致的数据丢失情况，使用管道pipe连接可读流和可写流再进行数据传输。</p></blockquote><ol><li><p>Node Pipe管道的概念<br><img src=\"node_pipe.png\" alt=\"node pipe\"></p></li><li><p>请求header注意设置<code>resType: &quot;stream&quot;</code></p></li><li><p>创建本地可写流<br>使用fs.createWriteStream接口，参数为本地某个目录文件，文件可以不存在，目录需要实际存在</p></li><li><p>接口返回的是可读流，可以直接连接到管道<br>注意服务器是否支持以数据流方式返回二进制数据</p></li><li><p>可写流完成写入后向前端发送静态资源文件地址<br>监听可写流的finish事件可以异步处理文件完成写入事件</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象详情信息</span></span><br><span class=\"line\">router.post(<span class=\"string\">'/resource/object/detailinfo'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'download'</span>);</span><br><span class=\"line\">  commonRequestAuth(&#123; ...req.body, ...&#123; <span class=\"attr\">$no_timeout$</span>: <span class=\"literal\">true</span> &#125;&#125;, objectsresourceApi.object.objectinfo, req).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'download callback'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = req.body.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileSymbol = <span class=\"string\">`<span class=\"subst\">$&#123;fileName&#125;</span>-<span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now()&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> filePath = path.join(_path.public, <span class=\"string\">'download'</span>, fileSymbol);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ws = fs.createWriteStream(filePath);</span><br><span class=\"line\">    response.result.pipe(ws);</span><br><span class=\"line\">    ws.on(<span class=\"string\">'finish'</span>, () =&gt; &#123; </span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'download finish'</span>);</span><br><span class=\"line\">      res.header(&#123;</span><br><span class=\"line\">        <span class=\"string\">'Content-Disposition'</span>: fileName</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      res.json(&#123;</span><br><span class=\"line\">        code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        result: filePath.split(<span class=\"string\">'node-express-react/public/public'</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;); </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h3 id=\"文件下载-Js下载中间层文件的两种不同方式\">文件下载-Js下载中间层文件的两种不同方式</h3><hr><h4 id=\"小文件直接从接口拿到数据并生成DataURL触发下载\">小文件直接从接口拿到数据并生成DataURL触发下载</h4><ol><li><p>请求header声明<code>responseType:arraybuffer</code><br>指名返回的数据是可直接使用的二进制流数据</p></li><li><p>接口数据返回后生成前端通用的大二进制块数据<code>Blob</code><br>new Blob(DataArray, { type: mimetype })，mimetype需要正确指定，比如jpeg格式的图片mimetype为image/jpeg</p></li><li><p>使用HTML5 FileReader接口读取二进制块<br>reader.readAsDataURL将二进制读取为base64编码的字符串数据，前端可以直接预览和下载此类DataURL</p></li><li><p>构造a标签并指名download属性下载DataURL<br>替代方法是使用window.open(dataUrl)</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadObjectInMemory = <span class=\"function\">(<span class=\"params\">para, info</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">    <span class=\"comment\">// iAxios.defaults.timeout = 60 * 1000 * 60 * 10;</span></span><br><span class=\"line\">    iAxios.defaults.timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/resource/object/detailinfo/all'</span>,</span><br><span class=\"line\">      withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      responseType: <span class=\"string\">'arraybuffer'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=0'</span>,</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      data: para,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> readAsDataUrl = <span class=\"function\">(<span class=\"params\">data, emptyData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">      reader.readAsDataURL(data);</span><br><span class=\"line\">      reader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = e.target.result;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = para.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">        a.href = url === <span class=\"string\">'data:'</span> ? emptyData : url;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(url);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> typename = mapMimeType(info.name).mime;</span><br><span class=\"line\">    iAxios.request(options)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> blobData = <span class=\"keyword\">new</span> Blob([res.data], &#123; <span class=\"attr\">type</span>: typename &#125;);</span><br><span class=\"line\">        readAsDataUrl(blobData, <span class=\"string\">`data:<span class=\"subst\">$&#123;typename&#125;</span>;base64,`</span>);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"大文件通过接口返回的静态文件链接进行下载\">大文件通过接口返回的静态文件链接进行下载</h4><p>步骤同上，只不过构造DataURL的过程取消，a标签可以直接使用接口返回的静态文件地质URL</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">downloadObjectWithURL = <span class=\"function\">(<span class=\"params\">para</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> iAxios = axios.create();</span><br><span class=\"line\">    <span class=\"comment\">// iAxios.defaults.timeout = 60 * 1000 * 60 * 10;</span></span><br><span class=\"line\">    iAxios.defaults.timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">      method: <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">      url: <span class=\"string\">'/resource/object/detailinfo'</span>,</span><br><span class=\"line\">      withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      responseType: <span class=\"string\">'json'</span>,</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">'Cache-Control'</span>: <span class=\"string\">'max-age=0'</span>,</span><br><span class=\"line\">        <span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">        <span class=\"string\">'Access-Control-Allow-Origin'</span>: <span class=\"string\">'*'</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      data: para,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">    iAxios.request(options)</span><br><span class=\"line\">      .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        clearTimeout(timer);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> filename = para.object.split(<span class=\"string\">'/'</span>).pop();</span><br><span class=\"line\">        <span class=\"keyword\">const</span> address = process.env.NODE_ENV === <span class=\"string\">'development'</span> ? <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.protocol&#125;</span>//10.0.6.206:3000<span class=\"subst\">$&#123;res.data.result&#125;</span>`</span> : <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.protocol&#125;</span>//<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.location.hostname&#125;</span>:3000<span class=\"subst\">$&#123;res.data.result&#125;</span>`</span>;</span><br><span class=\"line\">        a.href = address;</span><br><span class=\"line\">        a.download = filename;</span><br><span class=\"line\">        a.click();</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      openNotification(<span class=\"string\">'info'</span>, <span class=\"literal\">null</span>, <span class=\"keyword\">this</span>.lang.lang.fileDownloadTips);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1e3</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>"},{"title":"前端浏览器开发工具","catalog":true,"toc_nav_num":true,"date":"2020-04-16T03:45:00.000Z","subtitle":"browser tools","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-04-16T03:45:00.000Z","_content":"\n\n>author: nojsja\n\n![life is strange](dev-tools.png)\n\n### 目录\n---------------------------------\n\n1. DevTools常用功能区域介绍\n2. 使用DevTools查看浏览器DOM元素\n3. 使用DevTools查看浏览器本地数据\n4. 使用DevTools在线编辑DOM样式\n5. 使用DevTools查看网络请求情况\n6. 使用DevTools查看控制台信息\n7. 使用DevTools在线调试代码\n\n### DevTools常用功能区域介绍\n---------------------------------\n\n#### 查看器  \n\n* 快速定位元素\n\n* 展示当前网页元素的渲染情况，只展示最终的渲染结构，如果使用了React等前端框架，则需要额外安装react-dev-tool来查看React组件的结构。\n\n* 可以手动修改DOM结构和修改组件样式以及查看元素盒模型和其它信息\n\n* 响应式设计模式\n\n#### 存储\n\n* Cookie\n* SessionStorage\n* LocalStorage\n* Indexed DB\n\n#### 调试器\n\n* 定位代码，断点调试\n* 调试：暂停/继续、跨越、步进、步出\n\n#### 控制台\n\n* 多行模式和单行模式\n* console命令\n\n#### 网络\n\n* 筛选请求类型\n* 查看某个网络请求\n* 构造极限情况-限流\n\n#### 样式编辑器\n\n* 查看盒模型属性\n* 查看字体\n* 定位和编辑元素样式表\n\n#### 性能\n\n* 内存占用\n\n* 浏览器自身渲染过程和调用情况\n\n### 使用DevTools查看浏览器DOM元素\n---------------------------------\n\n1. 右键选择`检查元素`快速定位元素\n2. 通过控制台`选取页面中的元素`(Ctrl+Shift+C)来预览和选择元素\n3. 通过控制台`搜索HTML`使用querySelector语法搜索一个元素\n\n### 使用DevTools查看浏览器本地数据\n---------------------------------\n![life is strange](dev-tools-storage.png)\n\n#### Cookie\n>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能，限制大小4K。  \n\nCookie主要用于以下三个方面：\n* 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n* 个性化设置（如用户自定义设置、主题等）\n* 浏览器行为跟踪（如跟踪分析用户行为等）\n\nCookie特点：\n1. 不需要任何服务器资源。 Cookie 存储在客户端并在发送后由服务器读\n2. 使用较简单。Cookie 是一种基于文本的轻量结构，包含简单的键值对\n3. 数据持久性。虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式\n\n\n#### SessionStorage\n> sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。\n\n![life is strange](dev-tools-storage2.png)\n\n#### LocalStorage\n> localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除，限制大小5M\n\n#### Indexed DB\n>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。\n\n特点：\n\n1. 键值对储存。 IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以\"键值对\"的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误\n\n2. 异步。 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现\n\n3. 支持事务。 IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况\n\n4. 同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库\n\n5. 储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限\n\n5. 支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）\n\n### 使用DevTools在线编辑DOM样式\n---------------------------------\n\n1. 查看字体\n2. 定位和编辑元素样式表\n\n### 使用DevTools查看网络请求情况\n---------------------------------\n\n1. 筛选请求类型\n2. 查看某个网络请求\n3. 构造极限情况-限流\n\n### 使用DevTools查看控制台信息\n---------------------------------\n\n#### 通过控制台打印数据\n\n1. console.log 用于输出普通信息\n\n2. console.info 用于输出提示性信息\n\n3. console.error用于输出错误信息\n\n4. console.warn用于输出警示信息\n\n5. console.debug用于输出调试信息\n\n6. console.dirxml打印dom对象结构\n\n#### printf格式化输出数据\n\n1. 打印字符串  \nconsole.log(\"他是%s\", \"nojsja\");\n\n2. 打印数字  \nconsole.log(\"%d年%d月%d日\",2011,3,26);\n\n3. 打印浮点数字  \nconsole.log(\"圆周率是%f\",3.1415926);\n\n#### 打印一组数据\n>bilibili控制台demo\n\n1. console.group输出一组信息的开头\n\n2. console.groupEnd结束一组输出信息\n\n#### 断言\n>输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台\n\n1. console.assert(boolValue, info);\n\n#### 统计代码段执行次数\n>console.log打印的信息比较混乱，console.count可以用来单独统计某个代码块在一段时间内的执行次数\n\n1. console.count(symbol)\n\n#### 统计一段代码的执行时间\n>通过传入参数确定定时器归属\n\n1. console.time(symbol)开始统计\n\n2. console.timeEnd(symbol)结束统计\n\n### 打印堆栈信息\n\nconsole.trace 堆栈跟踪相关的调试\n\n### 使用DevTools在线调试代码\n---------------------------------\n![life is strange](dev-tools-debug.png)\n\n1. 定位代码，断点调试\n2. 调试：暂停/继续、跨越、步进、步出","source":"_posts/2020-04-16-前端浏览器开发工具.md","raw":"---\ntitle: \"前端浏览器开发工具\"\ncatalog: true\ntoc_nav_num: true\ndate:   2020-04-16 11:45:00\nsubtitle: \"browser tools\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- browser\n- tools\ncategories:\n- Tools\nupdateDate: 2020-04-16 11:45:00\n---\n\n\n>author: nojsja\n\n![life is strange](dev-tools.png)\n\n### 目录\n---------------------------------\n\n1. DevTools常用功能区域介绍\n2. 使用DevTools查看浏览器DOM元素\n3. 使用DevTools查看浏览器本地数据\n4. 使用DevTools在线编辑DOM样式\n5. 使用DevTools查看网络请求情况\n6. 使用DevTools查看控制台信息\n7. 使用DevTools在线调试代码\n\n### DevTools常用功能区域介绍\n---------------------------------\n\n#### 查看器  \n\n* 快速定位元素\n\n* 展示当前网页元素的渲染情况，只展示最终的渲染结构，如果使用了React等前端框架，则需要额外安装react-dev-tool来查看React组件的结构。\n\n* 可以手动修改DOM结构和修改组件样式以及查看元素盒模型和其它信息\n\n* 响应式设计模式\n\n#### 存储\n\n* Cookie\n* SessionStorage\n* LocalStorage\n* Indexed DB\n\n#### 调试器\n\n* 定位代码，断点调试\n* 调试：暂停/继续、跨越、步进、步出\n\n#### 控制台\n\n* 多行模式和单行模式\n* console命令\n\n#### 网络\n\n* 筛选请求类型\n* 查看某个网络请求\n* 构造极限情况-限流\n\n#### 样式编辑器\n\n* 查看盒模型属性\n* 查看字体\n* 定位和编辑元素样式表\n\n#### 性能\n\n* 内存占用\n\n* 浏览器自身渲染过程和调用情况\n\n### 使用DevTools查看浏览器DOM元素\n---------------------------------\n\n1. 右键选择`检查元素`快速定位元素\n2. 通过控制台`选取页面中的元素`(Ctrl+Shift+C)来预览和选择元素\n3. 通过控制台`搜索HTML`使用querySelector语法搜索一个元素\n\n### 使用DevTools查看浏览器本地数据\n---------------------------------\n![life is strange](dev-tools-storage.png)\n\n#### Cookie\n>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能，限制大小4K。  \n\nCookie主要用于以下三个方面：\n* 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n* 个性化设置（如用户自定义设置、主题等）\n* 浏览器行为跟踪（如跟踪分析用户行为等）\n\nCookie特点：\n1. 不需要任何服务器资源。 Cookie 存储在客户端并在发送后由服务器读\n2. 使用较简单。Cookie 是一种基于文本的轻量结构，包含简单的键值对\n3. 数据持久性。虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式\n\n\n#### SessionStorage\n> sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。\n\n![life is strange](dev-tools-storage2.png)\n\n#### LocalStorage\n> localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除，限制大小5M\n\n#### Indexed DB\n>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。\n\n特点：\n\n1. 键值对储存。 IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以\"键值对\"的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误\n\n2. 异步。 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现\n\n3. 支持事务。 IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况\n\n4. 同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库\n\n5. 储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限\n\n5. 支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）\n\n### 使用DevTools在线编辑DOM样式\n---------------------------------\n\n1. 查看字体\n2. 定位和编辑元素样式表\n\n### 使用DevTools查看网络请求情况\n---------------------------------\n\n1. 筛选请求类型\n2. 查看某个网络请求\n3. 构造极限情况-限流\n\n### 使用DevTools查看控制台信息\n---------------------------------\n\n#### 通过控制台打印数据\n\n1. console.log 用于输出普通信息\n\n2. console.info 用于输出提示性信息\n\n3. console.error用于输出错误信息\n\n4. console.warn用于输出警示信息\n\n5. console.debug用于输出调试信息\n\n6. console.dirxml打印dom对象结构\n\n#### printf格式化输出数据\n\n1. 打印字符串  \nconsole.log(\"他是%s\", \"nojsja\");\n\n2. 打印数字  \nconsole.log(\"%d年%d月%d日\",2011,3,26);\n\n3. 打印浮点数字  \nconsole.log(\"圆周率是%f\",3.1415926);\n\n#### 打印一组数据\n>bilibili控制台demo\n\n1. console.group输出一组信息的开头\n\n2. console.groupEnd结束一组输出信息\n\n#### 断言\n>输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台\n\n1. console.assert(boolValue, info);\n\n#### 统计代码段执行次数\n>console.log打印的信息比较混乱，console.count可以用来单独统计某个代码块在一段时间内的执行次数\n\n1. console.count(symbol)\n\n#### 统计一段代码的执行时间\n>通过传入参数确定定时器归属\n\n1. console.time(symbol)开始统计\n\n2. console.timeEnd(symbol)结束统计\n\n### 打印堆栈信息\n\nconsole.trace 堆栈跟踪相关的调试\n\n### 使用DevTools在线调试代码\n---------------------------------\n![life is strange](dev-tools-debug.png)\n\n1. 定位代码，断点调试\n2. 调试：暂停/继续、跨越、步进、步出","slug":"前端浏览器开发工具","published":1,"updated":"2020-12-06T10:53:28.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmura001dkl95bmy696oj","content":"<blockquote><p>author: nojsja</p></blockquote><p><img src=\"dev-tools.png\" alt=\"life is strange\"></p><h3 id=\"目录\">目录</h3><hr><ol><li>DevTools常用功能区域介绍</li><li>使用DevTools查看浏览器DOM元素</li><li>使用DevTools查看浏览器本地数据</li><li>使用DevTools在线编辑DOM样式</li><li>使用DevTools查看网络请求情况</li><li>使用DevTools查看控制台信息</li><li>使用DevTools在线调试代码</li></ol><h3 id=\"DevTools常用功能区域介绍\">DevTools常用功能区域介绍</h3><hr><h4 id=\"查看器\">查看器</h4><ul><li><p>快速定位元素</p></li><li><p>展示当前网页元素的渲染情况，只展示最终的渲染结构，如果使用了React等前端框架，则需要额外安装react-dev-tool来查看React组件的结构。</p></li><li><p>可以手动修改DOM结构和修改组件样式以及查看元素盒模型和其它信息</p></li><li><p>响应式设计模式</p></li></ul><h4 id=\"存储\">存储</h4><ul><li>Cookie</li><li>SessionStorage</li><li>LocalStorage</li><li>Indexed DB</li></ul><h4 id=\"调试器\">调试器</h4><ul><li>定位代码，断点调试</li><li>调试：暂停/继续、跨越、步进、步出</li></ul><h4 id=\"控制台\">控制台</h4><ul><li>多行模式和单行模式</li><li>console命令</li></ul><h4 id=\"网络\">网络</h4><ul><li>筛选请求类型</li><li>查看某个网络请求</li><li>构造极限情况-限流</li></ul><h4 id=\"样式编辑器\">样式编辑器</h4><ul><li>查看盒模型属性</li><li>查看字体</li><li>定位和编辑元素样式表</li></ul><h4 id=\"性能\">性能</h4><ul><li><p>内存占用</p></li><li><p>浏览器自身渲染过程和调用情况</p></li></ul><h3 id=\"使用DevTools查看浏览器DOM元素\">使用DevTools查看浏览器DOM元素</h3><hr><ol><li>右键选择<code>检查元素</code>快速定位元素</li><li>通过控制台<code>选取页面中的元素</code>(Ctrl+Shift+C)来预览和选择元素</li><li>通过控制台<code>搜索HTML</code>使用querySelector语法搜索一个元素</li></ol><h3 id=\"使用DevTools查看浏览器本地数据\">使用DevTools查看浏览器本地数据</h3><hr><p><img src=\"dev-tools-storage.png\" alt=\"life is strange\"></p><h4 id=\"Cookie\">Cookie</h4><blockquote><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能，限制大小4K。</p></blockquote><p>Cookie主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><p>Cookie特点：</p><ol><li>不需要任何服务器资源。 Cookie 存储在客户端并在发送后由服务器读</li><li>使用较简单。Cookie 是一种基于文本的轻量结构，包含简单的键值对</li><li>数据持久性。虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式</li></ol><h4 id=\"SessionStorage\">SessionStorage</h4><blockquote><p>sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</p></blockquote><p><img src=\"dev-tools-storage2.png\" alt=\"life is strange\"></p><h4 id=\"LocalStorage\">LocalStorage</h4><blockquote><p>localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除，限制大小5M</p></blockquote><h4 id=\"Indexed-DB\">Indexed DB</h4><blockquote><p>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p></blockquote><p>特点：</p><ol><li><p>键值对储存。 IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以&quot;键值对&quot;的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误</p></li><li><p>异步。 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现</p></li><li><p>支持事务。 IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况</p></li><li><p>同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库</p></li><li><p>储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限</p></li><li><p>支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）</p></li></ol><h3 id=\"使用DevTools在线编辑DOM样式\">使用DevTools在线编辑DOM样式</h3><hr><ol><li>查看字体</li><li>定位和编辑元素样式表</li></ol><h3 id=\"使用DevTools查看网络请求情况\">使用DevTools查看网络请求情况</h3><hr><ol><li>筛选请求类型</li><li>查看某个网络请求</li><li>构造极限情况-限流</li></ol><h3 id=\"使用DevTools查看控制台信息\">使用DevTools查看控制台信息</h3><hr><h4 id=\"通过控制台打印数据\">通过控制台打印数据</h4><ol><li><p>console.log 用于输出普通信息</p></li><li><p><a href=\"http://console.info\" target=\"_blank\" rel=\"noopener\">console.info</a> 用于输出提示性信息</p></li><li><p>console.error用于输出错误信息</p></li><li><p>console.warn用于输出警示信息</p></li><li><p>console.debug用于输出调试信息</p></li><li><p>console.dirxml打印dom对象结构</p></li></ol><h4 id=\"printf格式化输出数据\">printf格式化输出数据</h4><ol><li><p>打印字符串<br>console.log(“他是%s”, “nojsja”);</p></li><li><p>打印数字<br>console.log(“%d年%d月%d日”,2011,3,26);</p></li><li><p>打印浮点数字<br>console.log(“圆周率是%f”,3.1415926);</p></li></ol><h4 id=\"打印一组数据\">打印一组数据</h4><blockquote><p>bilibili控制台demo</p></blockquote><ol><li><p>console.group输出一组信息的开头</p></li><li><p>console.groupEnd结束一组输出信息</p></li></ol><h4 id=\"断言\">断言</h4><blockquote><p>输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台</p></blockquote><ol><li>console.assert(boolValue, info);</li></ol><h4 id=\"统计代码段执行次数\">统计代码段执行次数</h4><blockquote><p>console.log打印的信息比较混乱，console.count可以用来单独统计某个代码块在一段时间内的执行次数</p></blockquote><ol><li>console.count(symbol)</li></ol><h4 id=\"统计一段代码的执行时间\">统计一段代码的执行时间</h4><blockquote><p>通过传入参数确定定时器归属</p></blockquote><ol><li><p>console.time(symbol)开始统计</p></li><li><p>console.timeEnd(symbol)结束统计</p></li></ol><h3 id=\"打印堆栈信息\">打印堆栈信息</h3><p>console.trace 堆栈跟踪相关的调试</p><h3 id=\"使用DevTools在线调试代码\">使用DevTools在线调试代码</h3><hr><p><img src=\"dev-tools-debug.png\" alt=\"life is strange\"></p><ol><li>定位代码，断点调试</li><li>调试：暂停/继续、跨越、步进、步出</li></ol>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>author: nojsja</p></blockquote><p><img src=\"dev-tools.png\" alt=\"life is strange\"></p><h3 id=\"目录\">目录</h3><hr><ol><li>DevTools常用功能区域介绍</li><li>使用DevTools查看浏览器DOM元素</li><li>使用DevTools查看浏览器本地数据</li><li>使用DevTools在线编辑DOM样式</li><li>使用DevTools查看网络请求情况</li><li>使用DevTools查看控制台信息</li><li>使用DevTools在线调试代码</li></ol><h3 id=\"DevTools常用功能区域介绍\">DevTools常用功能区域介绍</h3><hr><h4 id=\"查看器\">查看器</h4><ul><li><p>快速定位元素</p></li><li><p>展示当前网页元素的渲染情况，只展示最终的渲染结构，如果使用了React等前端框架，则需要额外安装react-dev-tool来查看React组件的结构。</p></li><li><p>可以手动修改DOM结构和修改组件样式以及查看元素盒模型和其它信息</p></li><li><p>响应式设计模式</p></li></ul><h4 id=\"存储\">存储</h4><ul><li>Cookie</li><li>SessionStorage</li><li>LocalStorage</li><li>Indexed DB</li></ul><h4 id=\"调试器\">调试器</h4><ul><li>定位代码，断点调试</li><li>调试：暂停/继续、跨越、步进、步出</li></ul><h4 id=\"控制台\">控制台</h4><ul><li>多行模式和单行模式</li><li>console命令</li></ul><h4 id=\"网络\">网络</h4><ul><li>筛选请求类型</li><li>查看某个网络请求</li><li>构造极限情况-限流</li></ul><h4 id=\"样式编辑器\">样式编辑器</h4><ul><li>查看盒模型属性</li><li>查看字体</li><li>定位和编辑元素样式表</li></ul><h4 id=\"性能\">性能</h4><ul><li><p>内存占用</p></li><li><p>浏览器自身渲染过程和调用情况</p></li></ul><h3 id=\"使用DevTools查看浏览器DOM元素\">使用DevTools查看浏览器DOM元素</h3><hr><ol><li>右键选择<code>检查元素</code>快速定位元素</li><li>通过控制台<code>选取页面中的元素</code>(Ctrl+Shift+C)来预览和选择元素</li><li>通过控制台<code>搜索HTML</code>使用querySelector语法搜索一个元素</li></ol><h3 id=\"使用DevTools查看浏览器本地数据\">使用DevTools查看浏览器本地数据</h3><hr><p><img src=\"dev-tools-storage.png\" alt=\"life is strange\"></p><h4 id=\"Cookie\">Cookie</h4><blockquote><p>HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能，限制大小4K。</p></blockquote><p>Cookie主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><p>Cookie特点：</p><ol><li>不需要任何服务器资源。 Cookie 存储在客户端并在发送后由服务器读</li><li>使用较简单。Cookie 是一种基于文本的轻量结构，包含简单的键值对</li><li>数据持久性。虽然客户端计算机上 Cookie 的持续时间取决于客户端上的 Cookie 过期处理和用户干预，Cookie 通常是客户端上持续时间最长的数据保留形式</li></ol><h4 id=\"SessionStorage\">SessionStorage</h4><blockquote><p>sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</p></blockquote><p><img src=\"dev-tools-storage2.png\" alt=\"life is strange\"></p><h4 id=\"LocalStorage\">LocalStorage</h4><blockquote><p>localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去删除，限制大小5M</p></blockquote><h4 id=\"Indexed-DB\">Indexed DB</h4><blockquote><p>通俗地说，IndexedDB 就是浏览器提供的本地数据库，它可以被网页脚本创建和操作。IndexedDB 允许储存大量数据，提供查找接口，还能建立索引。这些都是 LocalStorage 所不具备的。就数据库类型而言，IndexedDB 不属于关系型数据库（不支持 SQL 查询语句），更接近 NoSQL 数据库。</p></blockquote><p>特点：</p><ol><li><p>键值对储存。 IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以&quot;键值对&quot;的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误</p></li><li><p>异步。 IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现</p></li><li><p>支持事务。 IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况</p></li><li><p>同源限制 IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库</p></li><li><p>储存空间大 IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限</p></li><li><p>支持二进制储存。 IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）</p></li></ol><h3 id=\"使用DevTools在线编辑DOM样式\">使用DevTools在线编辑DOM样式</h3><hr><ol><li>查看字体</li><li>定位和编辑元素样式表</li></ol><h3 id=\"使用DevTools查看网络请求情况\">使用DevTools查看网络请求情况</h3><hr><ol><li>筛选请求类型</li><li>查看某个网络请求</li><li>构造极限情况-限流</li></ol><h3 id=\"使用DevTools查看控制台信息\">使用DevTools查看控制台信息</h3><hr><h4 id=\"通过控制台打印数据\">通过控制台打印数据</h4><ol><li><p>console.log 用于输出普通信息</p></li><li><p><a href=\"http://console.info\" target=\"_blank\" rel=\"noopener\">console.info</a> 用于输出提示性信息</p></li><li><p>console.error用于输出错误信息</p></li><li><p>console.warn用于输出警示信息</p></li><li><p>console.debug用于输出调试信息</p></li><li><p>console.dirxml打印dom对象结构</p></li></ol><h4 id=\"printf格式化输出数据\">printf格式化输出数据</h4><ol><li><p>打印字符串<br>console.log(“他是%s”, “nojsja”);</p></li><li><p>打印数字<br>console.log(“%d年%d月%d日”,2011,3,26);</p></li><li><p>打印浮点数字<br>console.log(“圆周率是%f”,3.1415926);</p></li></ol><h4 id=\"打印一组数据\">打印一组数据</h4><blockquote><p>bilibili控制台demo</p></blockquote><ol><li><p>console.group输出一组信息的开头</p></li><li><p>console.groupEnd结束一组输出信息</p></li></ol><h4 id=\"断言\">断言</h4><blockquote><p>输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台</p></blockquote><ol><li>console.assert(boolValue, info);</li></ol><h4 id=\"统计代码段执行次数\">统计代码段执行次数</h4><blockquote><p>console.log打印的信息比较混乱，console.count可以用来单独统计某个代码块在一段时间内的执行次数</p></blockquote><ol><li>console.count(symbol)</li></ol><h4 id=\"统计一段代码的执行时间\">统计一段代码的执行时间</h4><blockquote><p>通过传入参数确定定时器归属</p></blockquote><ol><li><p>console.time(symbol)开始统计</p></li><li><p>console.timeEnd(symbol)结束统计</p></li></ol><h3 id=\"打印堆栈信息\">打印堆栈信息</h3><p>console.trace 堆栈跟踪相关的调试</p><h3 id=\"使用DevTools在线调试代码\">使用DevTools在线调试代码</h3><hr><p><img src=\"dev-tools-debug.png\" alt=\"life is strange\"></p><ol><li>定位代码，断点调试</li><li>调试：暂停/继续、跨越、步进、步出</li></ol>"},{"title":"基于Electron的smb客户端开发记录","catalog":true,"toc_nav_num":true,"date":"2020-07-17T07:59:00.000Z","subtitle":"smb samba client","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-07-17T07:59:00.000Z","top":null,"_content":"\n\n### 前言\n---------------\n最近拿到客户需求，需要利用现有存储产品部分后台接口和原生smb协议来实现一个windows平台的smb客户端，主要功能需要包含：存储集群节点管理、集群用户登录、远程共享目录挂载、共享目录浏览、目录权限设置、文件上传管理，其中目录权限设置和目录浏览接口已经被提供，其余几个功能的electron代码和web端代码需要由我负责。考虑整个项目由前端同事来实现且数据存储量较小、数据关系不复杂，所以技术选型方面使用了支持跨平台的Electron框架和易用的的本地json数据库[lowdb](https://github.com/typicode/lowdb)。\n\n项目精简版[DEMO]展示(https://github.com/nojsja/electron-react-template)\n\n### 功能需求\n---------------\n\n#### 集群节点管理\n\n1. 客户端需要支持多个节点(每个节点所属集群不同)的添加、删除操作\n2. 支持设置默认节点操作用于自动登录功能\n3. 添加节点的时候要进行ping逻辑判断目标节点是否可用\n4. 调用存储集群ID获取接口保证每个集群只有一个节点被添加到集群管理列表\n\n需求分析：节点IP列表、默认节点属性、节点用户登录信息均需要在本地json数据库存储管理，以便数据记录。\n\n![RhinoDisk](smb_node.jpg)\n\n![RhinoDisk](smb_node_conf.jpg)\n\n#### 集群用户登录\n\n1. 支持已登录过客户端的用户自动下拉提示\n2. 支持已记住密码的用户自动填充密码到输入框\n3. 如果设置了默认节点，且默认节点的当前用户密码已经记住，则启动客户端时自动执行登录，类似QQ登录面板\n\n需求分析：调用已有登录接口验证smb用户名和密码是否正确，然后拿到具有接口操作权限的access_token(注意直接走smb协议的操作无需使用token)，并且在本地json数据库存储用户名、密码、自动登录标识、用户节点登录记录等。\n\n![RhinoDisk](smb_login.jpg)\n\n#### 远程共享目录挂载\n\n1. windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作\n2. 选择挂载设备时需要弹出所有空闲的磁盘盘符，支持范围C-Z\n\n需求分析：同windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作，所有挂载信息包括空闲盘符、共享挂载状态 均需要使用windows cmd命令即时获取以防数据不一致的情况。\n\n![RhinoDisk](smb_share.jpg)\n![RhinoDisk](smb_share_mount.jpg)\n\n#### 文件上传管理\n\n1. 文件上传管理能够查看当前任务列表的任务详情，包含上传速度、上传时间、完成时间、文件大小、文件名称，勾选进行中的任务后能够进行暂停、重传、删除、续传等操作。\n2. 在任务列表的所有文件都被上传后会进行一次历史任务同步，把内存中的任务列表状态写入文件中。\n3. 任务历史记录中可以进行删除任务记录、恢复上传错误的历史任务(重传)等操作。\n4. 切换不同节点重新登录用户上传任务不受影响，在当前节点重新登录用户上传任务会被强制终止，退出客户端后上传任务会被强制终止，各个用户的上传任务列表均不相同互不干扰，所有被强制终止的任务都能从历史任务列表中中恢复。\n\n需求分析：当前任务列表即时存储于内存中，以便快速进行增删查改操作，任务历史记录使用json数据库进行本地存储；每次任务列表自动同步时将内存中的任务写入到本地json数据库里，并且任务列表数据从内存中释放。\n\n![RhinoDisk](smb_upload_now.jpg)\n![RhinoDisk](smb_upload_record.jpg)\n\n### 实现难点\n-----------\n\n#### 多语言功能实现\n\n总体逻辑是通过配置文件或参数声明引入某个语言目录下的所有语言配置文件即可，注意每次更改语言后将lang配置写入文件，下次启动应用时读取文件配置然后调用下面声明的方法加载语言文件即可。\n\n![lang](electron-lang.png)\n\n```js\nconst fs = require('fs');\nconst path = require('path');\nconst { app } = require('electron');\n\n/**\n * global.lang -- 内存里保存的所有语言数据\n * global.LANG -- 语言数据标识(en_us, zh_cn, zh_tw)\n * session.lang -- 在session里保存一份语言数据标识，防止用户cookie丢失时语言设置失效(session 持久化)\n * cookie.lang -- 保存在客户端的语言数据标识，session.lang和cookie.lang保持同步\n */\nconst lang = (function lang() {\n  const defaultLang = 'zh_CN';\n\n  /* ------------------- 获取统一的语言环境标识 ------------------- */\n  const getLANG = (acceptLang) => {\n    // 英语\n    if (['en-US', 'en', 'en-us', 'en_us', 'en_US'].indexOf(acceptLang) !== -1) {\n      return 'en_us';\n    }\n    // 中文简体\n    if (['zh-CN', 'zh', 'zh-cn', 'zh_cn', 'zh_CN'].indexOf(acceptLang) !== -1) {\n      return 'zh_cn';\n    } if (['zh-TW', 'zh-tw', 'zh_tw', 'zh_TW'].indexOf(acceptLang) !== -1) {\n      return 'zh_tw';\n    // 默认中文简体\n    }\n    return 'zh_cn';\n  };\n\n  /* ------------------- 加载语言文件 ------------------- */\n  const setLang = (langEnv) => {\n    global.lang = global.lang ? global.lang : {};\n    global.LANG = langEnv;\n\n    // 读取文件夹的语言配置文件写入全局配置\n    fs.readdir(path.join(app.getAppPath(), 'app/lang', langEnv), (err, files) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      files.forEach((file) => {\n        global.lang[path.basename(file)] = require(path.join(app.getAppPath(), 'app/lang', langEnv, file));\n      });\n    });\n  };\n\n  return (acceptLang) => {\n    const _lang = getLANG(acceptLang || defaultLang);\n    if (global.LANG && global.LANG == _lang) {\n      return;\n    }\n    // 设置目前的语言环境\n    setLang(_lang);\n  };\n}());\n\nmodule.exports = lang;\n\n```\n\n#### 托盘功能的实现\n\n使用Electron的Tray创建托盘菜单，Menu.buildFromTemplate方法创建菜单子项以及对应的事件回调函数。\n\n```js\ncontextMenu() {\n    global.appTray = new Tray(path.join(app.getAppPath(), os.type() === 'Windows_NT' ? `resources/icon_${this.envConf.work_env}.ico` : 'resources/mac_tray.png'));\n    const menu = Menu.buildFromTemplate( [\n      {\n          label: global.lang.public.quit,\n          type: 'normal',\n          click: () => {\n            this.sendToWeb('upload', {action: 'getUploadingTask'});\n            ipcMainProcess.ipc.once('upload-getUploadingTask', (event, rsp) => {\n              if (rsp.code === 200) {\n\n                  global.ipcMainWindow.sendToWeb('shell', { action: 'upload-clear' });\n                  .then(() => {\n                    global.appTray.destroy();\n                    app.quit();\n                  }).catch(() => {\n                    global.ipcMainProcess.notifySend({\n                      body: global.lang.public['data_write_failed_before_quit']\n                    });\n                  });\n                };\n                \n                if (rsp.result !== 0) {\n                  const buttonId = dialog.showMessageBoxSync(this.windowoptions, {\n                    defaultId: 0,\n                    buttons: ['No', 'Yes'],\n                    type: 'info',\n                    title: global.lang.public.tips,\n                    message: global.lang.upload.app_quit_tips\n                  });\n                  if (buttonId === 1) quitApp();\n                } else {\n                  quitApp();\n                }\n                \n              } else {\n                global.ipcMainProcess.notifySend({\n                  body: rsp.result\n                });\n              }\n            });\n          }\n        }\n    ]);\n\n    global.appTray.on('click', ()=>{    \n      this.window.show();\n    });\n    global.appTray.setToolTip('RninoDisk');\n    global.appTray.setContextMenu(menu);\n  }\n```\n\n#### Node执行操作系统命令\n\n1. 通用的系统命令执行函数(日志输出阻塞版本)  \n使用Node.js的`child_process.exec`函数衍生 shell，然后在 shell 中执行 command，会在命令执行完成之后将所有信息输出到控制台。\n```js\nconst child = require('child_process');\n/**\n   * [exec 执行一个命令，阻塞输出信息到控制台]\n   * @param  { [String] }  command    [命令]\n   * @param  { [Array | String] }   params  [参数数组]\n   * @param  { [Object] }  options [exec可定制的参数]\n   * @return { Promise }           [返回Promise对象]\n   */\nexports.exec = (_command, _params=[], _options={}) => {\n  const params = Array.isArray(_params) ? _params.join(' ') : '';\n  const options = (String(_params) === '[object Object]') ? _params : (_options);\n  const command = `${_command} ${params}`;\n  \n  console.log(params, options, command);\n\n  return new Promise((resolve, reject) => {\n    child.exec(command, options, (_err, _stdout, _stderr) => {\n      if (_err) {\n        exports.console_log(_err, 'red');\n        resolve({code: 1, result: _err});\n      } else if (_stderr && _stderr.toString()) {\n        exports.console_log(_stderr, 'red');\n        resolve({code: 1, result: _stderr});\n      } else {\n        console.log(_stdout);\n        resolve({code: 0, result: _stdout});\n      }\n    });\n  });\n}\n```\n\n2. 通用的系统命令执行函数(日志同步输出版本)  \n使用Node.js的`child_process.exec`函数衍生 shell，然后在 shell 中执行 command，所有控制台日志会同步输出。\n```js\n  const child = require('child_process');\n  /**\n   * [execRealtime 执行一个命令，实时输出信息到控制台]\n   * @param  { [String] }  command    [命令]\n   * @param  { [Array | String] }   params  [参数数组]\n   * @param  { [Object] }  options [exec可定制的参数]\n   * @return { Promise }           [返回Promise对象]\n   */\n  exports.execRealtime = (_command, _params=[], _options={}) => {\n    const params = Array.isArray(_params) ? _params.join(' ') : '';\n    const options = (String(_params) === '[object Object]') ? _params : (_options);\n    const command = `${_command} ${params}`;\n    let data = '', error = '';\n    \n    console.log(params, options, command);\n  \n    return new Promise((resolve, reject) => {\n      const result = child.exec(command, options);\n      \n      result.stdout.on('data', (data) => {\n        exports.console_log(data, 'white');\n        data += `${data}`;\n      });\n\n      result.stderr.on('data', (data) => {\n        exports.console_log(data, 'red');\n        error += `${data}`;\n      });\n\n      result.on('close', (code) => {\n        resolve({code, result: data, error});\n      });\n    });\n  }\n\n```\n\n#### 远程共享目录挂载\n\n1. 获取空闲盘符和已经挂载盘符\n```js\n/**\n    * getSystemDriveLetter [获取系统已经挂载的磁盘]\n    * @return {[Array]} [盘符列表]\n    */\n  getSystemDriveLetter() {\n    return new Promise((resolve) => {\n      this.sudo.exec('fsutil fsinfo drives', [], { encoding: 'buffer' }).then((stdout) => {\n        const driverstr = stdout;\n        const driverstrArr = driverstr.split(' ').filter(s => s !== os.EOL).map(s => s.replace('\\\\', ''));\n        const allDrivers = [\n          'C:', 'D:', 'E:', 'F:', 'G:', 'H:', 'I:', 'J:', 'K:', 'L:',\n          'M:', 'N:', 'O:', 'P:', 'Q:', 'R:', 'S:', 'T:', 'U:', 'V:',\n          'W:', 'X:', 'Y:', 'Z:'\n        ];\n        driverstrArr.shift();\n        resolve({\n          code: 200,\n          result: {\n            mounted: driverstrArr,\n            available: allDrivers.filter(d => !driverstrArr.includes(d.toLocaleUpperCase()))\n          },\n        })\n      }, (err) => {\n        console.error(err);\n        resolve({\n          code: 600,\n          result: err,\n        });\n      });\n    })\n  }\n```\n\n2. 通过UNC命令对远程共享进行挂载\n```js\n/* 挂载共享 */\n_mountSystemDriver_Windows_NT({ host, driver, path, auto = false }) {\n    const pwd = global.ipcMainProcess.userModel.get('last.pwd');\n    const { isThirdUser, nickname, isLocalUser, username } = global.ipcMainProcess.userModel.info;\n    const commandUseIPC = `net use \\\\\\\\${host}\\\\ipc$ \"${pwd}\" /user:\"${username}\"`;\n    const commandMount = `net use ${driver} \\\\\\\\${host}\\\\${path} \"${pwd}\" /user:\"${username}\"`;\n    const commandUmount = `net use ${driver} /del /y`;\n\n    return new Promise((resolve, reject) => {\n      // 获取系统已经挂载的磁盘和空闲的磁盘\n      this.getSystemDriveLetter()\n        .then((rsp) => {\n          if (rsp.code === 200) {\n            if (rsp.result.mounted.includes(driver.toLocaleUpperCase())) {\n              throw new Error(global.lang.node.driver_already_mount);\n            }\n          } else {\n            throw new Error(global.lang.node.get_system_mount_info_failed);\n          }\n        })\n        // 尝试UNC连接\n        .then(() => {\n          return this.sudo.exec(commandUseIPC);\n        })\n        // 执行挂载命令\n        .then(() => {\n          return this.sudo.exec(commandMount);\n        })\n        // 更新数据\n        .then(() => {\n          return this.update('mountPoint', { username, host, path }, {\n            username, host, path, driver, auto\n          });\n        }).then((rsp) => {\n          resolve({\n            code: 200,\n            result: {\n              username, host, driver\n            },\n          });\n        }).catch((err) => {\n          console.error(err, err.toString());\n          resolve({\n            code: 600,\n            result: global.lang.node.net_mount_failed_reason,\n          });\n        });\n    });\n  }\n```\n\n#### 文件上传管理\n\n前端界面沿用之前的AWS对象存储文件上传管理逻辑[基于s3对象存储多文件分片上传的Javascript实现(一)](https://nojsja.gitee.io/blogs/2020/03/07/%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0-%E4%B8%80/)，不同的地方是加入了`历史任务`功能用于持久化文件上传任务记录功能，失败的任务能在历史任务中重新启动。由于smb简单文件上传协议不支持文件分片管理功能，所以前端界面的上传进度获取和上传速度计算均是基于 Node.js 的 FS API实现，整体流程是：使用Windows UNC命令连接后端共享，然后可以像访问本地文件系统一样访问远程一个共享路径，比如`\\\\[host]\\[sharename]\\file1`，这样子文件上传就变成本地目录文件的复制、删除、重命名了。\n\n下图为前端界面的上传逻辑示意图：\n![upload](shards_upload.jpg)\n\n##### 上传流程描述\n\n1) 页面上使用`<Input />`组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个`path`属性指明文件位于系统的绝对路径)  \n2) 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息  \n3）页面调用init请求附带上选中的文件信息初始化文件上传任务  \n4）Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作  \n5）页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)  \n6）Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置  \n7）upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID  \n8）Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传状态  \n9）界面上传任务列表清空后，向后端发送sync请求，用于把当前任务同步到历史任务中，表明当前所有任务已经完成  \n10）Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传  \n\n##### Node.js(Electron)端的部分关键代码\n\n1. 初始化一个上传任务\n```js\n/**\n    * init [初始化上传]\n    * @param  {[String]} host [主机名]\n    * @param  {[String]} username [用户名]\n    * @param  {[Object]} file [文件对象]\n    * @param  {[String]} abspath [文件绝对路径]\n    * @param  {[String]} sharename [远程smb共享名]\n    * @param  {[String]} fragsize [分片大小]\n    */\n  init({ host, file, abspath, sharename, fragsize, prefix = '' }) {\n    const pre = `\\\\\\\\${host}\\\\${sharename}`;\n    const date = Date.now();\n    const { pwd, username } = global.ipcMainProcess.userModel.info;\n    const uploadId = getStringMd5(date + file.name + file.type + file.size);\n    let remotePath = '';\n    let size = 0;\n\n    return new Promise((resolve) => {\n      // 使用UNC命令连接后端smb共享\n      this.uncCommandConnect({ host, username, pwd, sharename })\n        .then(() => new Promise((reso) => {\n          remotePath = path.join(pre, prefix, file.name);\n          fsPromise.unlink(path.join(pre, prefix, file.name)).then(reso).catch(reso);\n        }))\n        .then((rsp) => {\n          // 分析绝对文件路径名，然后自动创建所有需要创建的文件夹\n          const dirs = getFileDirs([path.join(prefix, file.name)]);\n          return mkdirs(pre, dirs);\n        })\n        .then((rsp) => {\n          // 打开文件描述符\n          return fileBlock.open(abspath)\n        })\n        .then((rsp) => {\n          if (rsp.code === 200) {\n            // 临时存储文件上传信息在内存中\n            return this._setUploadRecordsInMemory({\n              username,\n              host,\n              filename: path.join(prefix, file.name),\n              size: file.size,\n              fragsize,\n              sharename,\n              abspath,\n              remotePath,\n              startime: getTime(new Date().getTime()), // 上传日期\n              endtime: '',\n              uploadId,\n              index: 0,\n              total: Math.ceil(size / fragsize),\n              status: 'uploading' // 上传状态\n            });\n          } else {\n            resolve(rsp);\n          }\n        }).then((rsp) => {\n          resolve({\n            code: 200,\n            result: {\n              uploadId,\n              size,\n              total: Math.ceil(size / fragsize)\n            }\n          });\n        }).catch(err => {\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        });\n    });\n  }\n```\n2. 上传文件\n```js\n/**\n    * upload [上传文件]\n    * @param  {[String]} index [分片索引，0为起始值]\n    * @param  {[String]} uploadId [上传任务ID]\n    */\n  upload({ uploadId, index }) {\n    // 获取文件信息\n    const record = this._getUploadRecordsInMemory(uploadId);\n    if (!record) return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n    if (record.status !== 'uploading') return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n\n    const { host, filename, size, sharename, fragsize, abspath, username } = record;\n    const pwd = global.ipcMainProcess.userModel.info.pwd;\n    const pre = `\\\\\\\\${host}\\\\${sharename}`;\n    const position = fragsize * (index);\n    const slicesize = ((fragsize * (index + 1)) <= size) ? fragsize : (size - fragsize * index);\n\n    return new Promise((resolve) => {\n      if (position > size) {\n        resolve({\n          code: 600,\n          result: lang.upload.upload_index_overflow\n        });\n        return;\n      }\n      // 读取一个文件分片\n      fileBlock.read(abspath, position, slicesize)\n        .then(rsp => {\n          if (rsp.code === 200) {\n            // 递增写入文件\n            fs.appendFile(path.join(pre, filename), rsp.result, { encoding: 'binary' }, (err) => {\n              if (err) {\n                // 排查错误原因\n                checkPermission(path.join(pre, filename, '..'), 'ew', (err2, isExit, canWrite) => {\n                  if (err2) {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.writeDataFailed\n                    });\n                  } else if (isExit && !canWrite) {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.insufficientPermissionUpload\n                    });\n                  } else {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.writeDataFailed\n                    });\n                  }\n                });\n              } else {\n                // 更新内存中的文件上传分片信息\n                this._updateUploadRecordsInMemory({ index: (index + 1) }, uploadId);\n                resolve({\n                  code: 200,\n                  result: { filename, uploadId, index, abspath, sharename }\n                });\n              }\n              if (!this._getUploadRecordsInMemory(uploadId) || this._getUploadRecordsInMemory(uploadId).status === 'error') {\n                try {\n                  console.log('--uploading-unlink', path.join(pre, filename));\n                  fs.unlinkSync(path.join(pre, filename));\n                } catch (error) {\n                  console.log(error);\n                }\n              }\n            });\n          } else {\n            resolve(rsp);\n          }\n        })\n        .catch(err => {\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        });\n    })\n  }\n```\n3. 完成一个文件上传任务\n```js\n/**\n    * upload [完成上传]\n    * @param  {[String]} uploadId [上传任务ID]\n    */\n  complete({ uploadId }) {\n    // 获取文件信息\n    const record = this._getUploadRecordsInMemory(uploadId);\n\n    if (!record) return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n\n    const { abspath } = record;\n    return new Promise(resolve => {\n      // 更新上传任务状态\n      this._updateUploadRecordsInMemory({ status: 'break', endtime: getTime(new Date().getTime()) }, uploadId);\n      // 关闭文件描述符\n      fileBlock.close(abspath).then(() => {\n        resolve({\n          code: 200,\n          result: uploadId\n        });\n      }).catch(err => {\n        resolve({\n          code: 600,\n          result: err.toString()\n        });\n      });\n    })\n  }\n```\n4. 文件分片读取管理工厂\n文件初始化的时候调用`open`方法临时存储文件描述符和文件绝对路径的映射关系；文件上传的时候调用`read`方法根据文件读取位置、读取容量大小进行分片切割；文件上传完成的时候关闭文件描述符；\n\n```js\n/**\n  * readFileBlock [读取文件块]\n  */\nexports.readFileBlock = () => {\n\n  const fdStore = {};\n  const smallFileMap = {};\n\n  return {\n    /* 打开文件描述符 */\n    open: (path, size, minSize=1024*2) => {\n      return new Promise((resolve) => {\n        try {\n          // 小文件不打开文件描述符，直接读取写入\n          if (size <= minSize) {\n            smallFileMap[path] = true;\n            return resolve({\n              code: 200,\n              result: {\n                fd: null\n              }\n            });\n          }\n          // 打开文件描述符，建议绝对路径和fd的映射关系\n          fs.open(path, 'r', (err, fd) => {\n            if (err) {\n              console.trace(err);\n              resolve({\n                code: 601,\n                result: err.toString()\n              });\n            } else {\n              fdStore[path] = fd;\n              resolve({\n                code: 200,\n                result: {\n                  fd: fdStore[path]\n                }\n              });\n            }\n          });\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      })\n    },\n  \n    /* 读取文件块 */\n    read: (path, position, length) => {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          if (err) {\n            resolve({\n              code: 600,\n              result: err.toString()\n            });\n          } else {\n            resolve({\n              code: 200,\n              result: data\n            });\n          }\n        };\n        try {\n          // 小文件直接读取，大文件使用文件描述符和偏移量读取\n          if (smallFileMap[path]) {\n            fs.readFile(path, (err, buffer) => {\n              callback(err, buffer);\n            });\n          } else {\n            // 空文件处理\n            if (length === 0) return callback(null, '');\n            fs.read(fdStore[path], Buffer.alloc(length), 0, length, position, function(err, readByte, readResult){\n              callback(err, readResult);\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    /* 关闭文件描述符 */\n    close: (path) => {\n      return new Promise((resolve) => {\n        try {\n          if (smallFileMap[path]) {\n            delete smallFileMap[path];\n            resolve({\n              code: 200\n            });\n          } else {\n            fs.close(fdStore[path], () => {\n              resolve({code: 200});\n              delete fdStore[path];\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    fdStore\n\n  }\n\n}\n\n```\n\n#### windows安装包自动化打包配置\n\nwindows安装包使用electron nsis配置，注意使用`.ico`格式的应用图标以免打包失败，package.json中的`build.files`字段声明了需要打包的所有文件，`build.win`是windows平台的打包配置，`build.nsis`是nsis打包的详细配置，运行`npm run build-win`即可开始win平台的Electron App打包，由于整个打包流程包含web打包和electron打包，使用Node.js编写了通用打包脚本[项目build.js](https://github.com/nojsja/electron-react-template/blob/master/build.js)、[electron build.js](https://github.com/nojsja/electron-react-template/blob/master/server/build.js)对整个流程进行了整合，`项目build.js`兼顾web打包以及调用`electron build.js`负责Electron App打包，使用`node build.js --help`查看所有打包命令帮助信息。\n\n__node build.js - -help__\n\n```bash\ndescription: build command for RhinoDisk.\n    command: node build.js [action] [config]\n    |\n    |\n    |______ param: [--help | -h ] => show usage info.\n    |______ param: [build-win   ] [--edit | --office] => build package for windows, the default conf file is ./server/config.json.\n    |______ param: [build-linux ] [--edit | --office] => build package for linux, the default conf file is ./server/config.json\n    |______ param: [build-mac   ] [--edit | --office] => build package for mac, the default conf file is ./server/config.json\n    |______ param: [build-all   ] [--edit | --office] => build package for all platform, the default conf file is ./server/config.json\n    |______ param: [clean-build ] => clean build directory after build\n    |\n    |______ example1: node build.js build-win\n    |______ example2: node build.js build-linux\n    |______ example3: node build.js build-mac\n    |______ example4: node build.js build-all\n    |______ example5: node build.js build-win --edit\n    |______ example6: node build.js build-win --office\n    |______ example7: node build.js --help\n    |______ example8: node build.js clean-build\n```\n\n__package.json：__\n```js\n{\n  \"name\": \"RhinoDisk\",\n  \"version\": \"1.0.0\",\n  \"description\": \"SMB management client\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    ...\n    \"build-win\": \"electron-builder --win\",\n    ...\n  },\n  \"devDependencies\": {\n    ...\n  },\n  \"dependencies\": {\n    ...\n  },\n  \"build\": {\n    \"productName\": \"RhinoDisk\",\n    \"appId\": \"org.datatom.rhinodisk\",\n    \"asar\": false,\n    \"copyright\": \"CopyRight © 2011-2020 上海德拓信息技术股份有限公司\",\n    \"directories\": {\n      \"buildResources\": \"build\",\n      \"output\": \"build\"\n    },\n    \"files\": [\n      \"package.json\",\n      \"config.json\",\n      \"index.js\",\n      \"dist/\",\n      \"app/\",\n      \"node_modules/\",\n      \"resources/*.*\"\n    ],\n    \"win\": {\n      \"icon\": \"build/iconx256.ico\",\n      \"target\": [\n        {\n          \"target\": \"zip\"\n        },\n        {\n          \"target\": \"nsis\",\n          \"arch\": [\n            \"x64\"\n          ]\n        }\n      ]\n    },\n    \"nsis\": {\n      \"oneClick\": false,\n      \"allowElevation\": true,\n      \"allowToChangeInstallationDirectory\": true,\n      \"installerIcon\": \"./build/iconx256.ico\",\n      \"uninstallerIcon\": \"./build/iconx256.ico\",\n      \"installerHeaderIcon\": \"./build/iconx256.ico\",\n      \"createDesktopShortcut\": true,\n      \"createStartMenuShortcut\": true,\n      \"deleteAppDataOnUninstall\": true,\n      \"shortcutName\": \"RhinoDisk\"\n    }\n  }\n}\n\n```\n\n### 总结\n--------\n\n第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题... 总之获得了很多经验，也整理出了一些通用解决方法。  \nElectron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！\n","source":"_posts/2020-07-17-基于Electron的smb客户端开发记录.md","raw":"---\ntitle: \"基于Electron的smb客户端开发记录\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-07-17 15:59:00\nsubtitle: \"smb samba client\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- smb\ncategories:\n- Electron\nupdateDate: 2020-07-17 15:59:00\ntop: \n---\n\n\n### 前言\n---------------\n最近拿到客户需求，需要利用现有存储产品部分后台接口和原生smb协议来实现一个windows平台的smb客户端，主要功能需要包含：存储集群节点管理、集群用户登录、远程共享目录挂载、共享目录浏览、目录权限设置、文件上传管理，其中目录权限设置和目录浏览接口已经被提供，其余几个功能的electron代码和web端代码需要由我负责。考虑整个项目由前端同事来实现且数据存储量较小、数据关系不复杂，所以技术选型方面使用了支持跨平台的Electron框架和易用的的本地json数据库[lowdb](https://github.com/typicode/lowdb)。\n\n项目精简版[DEMO]展示(https://github.com/nojsja/electron-react-template)\n\n### 功能需求\n---------------\n\n#### 集群节点管理\n\n1. 客户端需要支持多个节点(每个节点所属集群不同)的添加、删除操作\n2. 支持设置默认节点操作用于自动登录功能\n3. 添加节点的时候要进行ping逻辑判断目标节点是否可用\n4. 调用存储集群ID获取接口保证每个集群只有一个节点被添加到集群管理列表\n\n需求分析：节点IP列表、默认节点属性、节点用户登录信息均需要在本地json数据库存储管理，以便数据记录。\n\n![RhinoDisk](smb_node.jpg)\n\n![RhinoDisk](smb_node_conf.jpg)\n\n#### 集群用户登录\n\n1. 支持已登录过客户端的用户自动下拉提示\n2. 支持已记住密码的用户自动填充密码到输入框\n3. 如果设置了默认节点，且默认节点的当前用户密码已经记住，则启动客户端时自动执行登录，类似QQ登录面板\n\n需求分析：调用已有登录接口验证smb用户名和密码是否正确，然后拿到具有接口操作权限的access_token(注意直接走smb协议的操作无需使用token)，并且在本地json数据库存储用户名、密码、自动登录标识、用户节点登录记录等。\n\n![RhinoDisk](smb_login.jpg)\n\n#### 远程共享目录挂载\n\n1. windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作\n2. 选择挂载设备时需要弹出所有空闲的磁盘盘符，支持范围C-Z\n\n需求分析：同windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作，所有挂载信息包括空闲盘符、共享挂载状态 均需要使用windows cmd命令即时获取以防数据不一致的情况。\n\n![RhinoDisk](smb_share.jpg)\n![RhinoDisk](smb_share_mount.jpg)\n\n#### 文件上传管理\n\n1. 文件上传管理能够查看当前任务列表的任务详情，包含上传速度、上传时间、完成时间、文件大小、文件名称，勾选进行中的任务后能够进行暂停、重传、删除、续传等操作。\n2. 在任务列表的所有文件都被上传后会进行一次历史任务同步，把内存中的任务列表状态写入文件中。\n3. 任务历史记录中可以进行删除任务记录、恢复上传错误的历史任务(重传)等操作。\n4. 切换不同节点重新登录用户上传任务不受影响，在当前节点重新登录用户上传任务会被强制终止，退出客户端后上传任务会被强制终止，各个用户的上传任务列表均不相同互不干扰，所有被强制终止的任务都能从历史任务列表中中恢复。\n\n需求分析：当前任务列表即时存储于内存中，以便快速进行增删查改操作，任务历史记录使用json数据库进行本地存储；每次任务列表自动同步时将内存中的任务写入到本地json数据库里，并且任务列表数据从内存中释放。\n\n![RhinoDisk](smb_upload_now.jpg)\n![RhinoDisk](smb_upload_record.jpg)\n\n### 实现难点\n-----------\n\n#### 多语言功能实现\n\n总体逻辑是通过配置文件或参数声明引入某个语言目录下的所有语言配置文件即可，注意每次更改语言后将lang配置写入文件，下次启动应用时读取文件配置然后调用下面声明的方法加载语言文件即可。\n\n![lang](electron-lang.png)\n\n```js\nconst fs = require('fs');\nconst path = require('path');\nconst { app } = require('electron');\n\n/**\n * global.lang -- 内存里保存的所有语言数据\n * global.LANG -- 语言数据标识(en_us, zh_cn, zh_tw)\n * session.lang -- 在session里保存一份语言数据标识，防止用户cookie丢失时语言设置失效(session 持久化)\n * cookie.lang -- 保存在客户端的语言数据标识，session.lang和cookie.lang保持同步\n */\nconst lang = (function lang() {\n  const defaultLang = 'zh_CN';\n\n  /* ------------------- 获取统一的语言环境标识 ------------------- */\n  const getLANG = (acceptLang) => {\n    // 英语\n    if (['en-US', 'en', 'en-us', 'en_us', 'en_US'].indexOf(acceptLang) !== -1) {\n      return 'en_us';\n    }\n    // 中文简体\n    if (['zh-CN', 'zh', 'zh-cn', 'zh_cn', 'zh_CN'].indexOf(acceptLang) !== -1) {\n      return 'zh_cn';\n    } if (['zh-TW', 'zh-tw', 'zh_tw', 'zh_TW'].indexOf(acceptLang) !== -1) {\n      return 'zh_tw';\n    // 默认中文简体\n    }\n    return 'zh_cn';\n  };\n\n  /* ------------------- 加载语言文件 ------------------- */\n  const setLang = (langEnv) => {\n    global.lang = global.lang ? global.lang : {};\n    global.LANG = langEnv;\n\n    // 读取文件夹的语言配置文件写入全局配置\n    fs.readdir(path.join(app.getAppPath(), 'app/lang', langEnv), (err, files) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n      files.forEach((file) => {\n        global.lang[path.basename(file)] = require(path.join(app.getAppPath(), 'app/lang', langEnv, file));\n      });\n    });\n  };\n\n  return (acceptLang) => {\n    const _lang = getLANG(acceptLang || defaultLang);\n    if (global.LANG && global.LANG == _lang) {\n      return;\n    }\n    // 设置目前的语言环境\n    setLang(_lang);\n  };\n}());\n\nmodule.exports = lang;\n\n```\n\n#### 托盘功能的实现\n\n使用Electron的Tray创建托盘菜单，Menu.buildFromTemplate方法创建菜单子项以及对应的事件回调函数。\n\n```js\ncontextMenu() {\n    global.appTray = new Tray(path.join(app.getAppPath(), os.type() === 'Windows_NT' ? `resources/icon_${this.envConf.work_env}.ico` : 'resources/mac_tray.png'));\n    const menu = Menu.buildFromTemplate( [\n      {\n          label: global.lang.public.quit,\n          type: 'normal',\n          click: () => {\n            this.sendToWeb('upload', {action: 'getUploadingTask'});\n            ipcMainProcess.ipc.once('upload-getUploadingTask', (event, rsp) => {\n              if (rsp.code === 200) {\n\n                  global.ipcMainWindow.sendToWeb('shell', { action: 'upload-clear' });\n                  .then(() => {\n                    global.appTray.destroy();\n                    app.quit();\n                  }).catch(() => {\n                    global.ipcMainProcess.notifySend({\n                      body: global.lang.public['data_write_failed_before_quit']\n                    });\n                  });\n                };\n                \n                if (rsp.result !== 0) {\n                  const buttonId = dialog.showMessageBoxSync(this.windowoptions, {\n                    defaultId: 0,\n                    buttons: ['No', 'Yes'],\n                    type: 'info',\n                    title: global.lang.public.tips,\n                    message: global.lang.upload.app_quit_tips\n                  });\n                  if (buttonId === 1) quitApp();\n                } else {\n                  quitApp();\n                }\n                \n              } else {\n                global.ipcMainProcess.notifySend({\n                  body: rsp.result\n                });\n              }\n            });\n          }\n        }\n    ]);\n\n    global.appTray.on('click', ()=>{    \n      this.window.show();\n    });\n    global.appTray.setToolTip('RninoDisk');\n    global.appTray.setContextMenu(menu);\n  }\n```\n\n#### Node执行操作系统命令\n\n1. 通用的系统命令执行函数(日志输出阻塞版本)  \n使用Node.js的`child_process.exec`函数衍生 shell，然后在 shell 中执行 command，会在命令执行完成之后将所有信息输出到控制台。\n```js\nconst child = require('child_process');\n/**\n   * [exec 执行一个命令，阻塞输出信息到控制台]\n   * @param  { [String] }  command    [命令]\n   * @param  { [Array | String] }   params  [参数数组]\n   * @param  { [Object] }  options [exec可定制的参数]\n   * @return { Promise }           [返回Promise对象]\n   */\nexports.exec = (_command, _params=[], _options={}) => {\n  const params = Array.isArray(_params) ? _params.join(' ') : '';\n  const options = (String(_params) === '[object Object]') ? _params : (_options);\n  const command = `${_command} ${params}`;\n  \n  console.log(params, options, command);\n\n  return new Promise((resolve, reject) => {\n    child.exec(command, options, (_err, _stdout, _stderr) => {\n      if (_err) {\n        exports.console_log(_err, 'red');\n        resolve({code: 1, result: _err});\n      } else if (_stderr && _stderr.toString()) {\n        exports.console_log(_stderr, 'red');\n        resolve({code: 1, result: _stderr});\n      } else {\n        console.log(_stdout);\n        resolve({code: 0, result: _stdout});\n      }\n    });\n  });\n}\n```\n\n2. 通用的系统命令执行函数(日志同步输出版本)  \n使用Node.js的`child_process.exec`函数衍生 shell，然后在 shell 中执行 command，所有控制台日志会同步输出。\n```js\n  const child = require('child_process');\n  /**\n   * [execRealtime 执行一个命令，实时输出信息到控制台]\n   * @param  { [String] }  command    [命令]\n   * @param  { [Array | String] }   params  [参数数组]\n   * @param  { [Object] }  options [exec可定制的参数]\n   * @return { Promise }           [返回Promise对象]\n   */\n  exports.execRealtime = (_command, _params=[], _options={}) => {\n    const params = Array.isArray(_params) ? _params.join(' ') : '';\n    const options = (String(_params) === '[object Object]') ? _params : (_options);\n    const command = `${_command} ${params}`;\n    let data = '', error = '';\n    \n    console.log(params, options, command);\n  \n    return new Promise((resolve, reject) => {\n      const result = child.exec(command, options);\n      \n      result.stdout.on('data', (data) => {\n        exports.console_log(data, 'white');\n        data += `${data}`;\n      });\n\n      result.stderr.on('data', (data) => {\n        exports.console_log(data, 'red');\n        error += `${data}`;\n      });\n\n      result.on('close', (code) => {\n        resolve({code, result: data, error});\n      });\n    });\n  }\n\n```\n\n#### 远程共享目录挂载\n\n1. 获取空闲盘符和已经挂载盘符\n```js\n/**\n    * getSystemDriveLetter [获取系统已经挂载的磁盘]\n    * @return {[Array]} [盘符列表]\n    */\n  getSystemDriveLetter() {\n    return new Promise((resolve) => {\n      this.sudo.exec('fsutil fsinfo drives', [], { encoding: 'buffer' }).then((stdout) => {\n        const driverstr = stdout;\n        const driverstrArr = driverstr.split(' ').filter(s => s !== os.EOL).map(s => s.replace('\\\\', ''));\n        const allDrivers = [\n          'C:', 'D:', 'E:', 'F:', 'G:', 'H:', 'I:', 'J:', 'K:', 'L:',\n          'M:', 'N:', 'O:', 'P:', 'Q:', 'R:', 'S:', 'T:', 'U:', 'V:',\n          'W:', 'X:', 'Y:', 'Z:'\n        ];\n        driverstrArr.shift();\n        resolve({\n          code: 200,\n          result: {\n            mounted: driverstrArr,\n            available: allDrivers.filter(d => !driverstrArr.includes(d.toLocaleUpperCase()))\n          },\n        })\n      }, (err) => {\n        console.error(err);\n        resolve({\n          code: 600,\n          result: err,\n        });\n      });\n    })\n  }\n```\n\n2. 通过UNC命令对远程共享进行挂载\n```js\n/* 挂载共享 */\n_mountSystemDriver_Windows_NT({ host, driver, path, auto = false }) {\n    const pwd = global.ipcMainProcess.userModel.get('last.pwd');\n    const { isThirdUser, nickname, isLocalUser, username } = global.ipcMainProcess.userModel.info;\n    const commandUseIPC = `net use \\\\\\\\${host}\\\\ipc$ \"${pwd}\" /user:\"${username}\"`;\n    const commandMount = `net use ${driver} \\\\\\\\${host}\\\\${path} \"${pwd}\" /user:\"${username}\"`;\n    const commandUmount = `net use ${driver} /del /y`;\n\n    return new Promise((resolve, reject) => {\n      // 获取系统已经挂载的磁盘和空闲的磁盘\n      this.getSystemDriveLetter()\n        .then((rsp) => {\n          if (rsp.code === 200) {\n            if (rsp.result.mounted.includes(driver.toLocaleUpperCase())) {\n              throw new Error(global.lang.node.driver_already_mount);\n            }\n          } else {\n            throw new Error(global.lang.node.get_system_mount_info_failed);\n          }\n        })\n        // 尝试UNC连接\n        .then(() => {\n          return this.sudo.exec(commandUseIPC);\n        })\n        // 执行挂载命令\n        .then(() => {\n          return this.sudo.exec(commandMount);\n        })\n        // 更新数据\n        .then(() => {\n          return this.update('mountPoint', { username, host, path }, {\n            username, host, path, driver, auto\n          });\n        }).then((rsp) => {\n          resolve({\n            code: 200,\n            result: {\n              username, host, driver\n            },\n          });\n        }).catch((err) => {\n          console.error(err, err.toString());\n          resolve({\n            code: 600,\n            result: global.lang.node.net_mount_failed_reason,\n          });\n        });\n    });\n  }\n```\n\n#### 文件上传管理\n\n前端界面沿用之前的AWS对象存储文件上传管理逻辑[基于s3对象存储多文件分片上传的Javascript实现(一)](https://nojsja.gitee.io/blogs/2020/03/07/%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0-%E4%B8%80/)，不同的地方是加入了`历史任务`功能用于持久化文件上传任务记录功能，失败的任务能在历史任务中重新启动。由于smb简单文件上传协议不支持文件分片管理功能，所以前端界面的上传进度获取和上传速度计算均是基于 Node.js 的 FS API实现，整体流程是：使用Windows UNC命令连接后端共享，然后可以像访问本地文件系统一样访问远程一个共享路径，比如`\\\\[host]\\[sharename]\\file1`，这样子文件上传就变成本地目录文件的复制、删除、重命名了。\n\n下图为前端界面的上传逻辑示意图：\n![upload](shards_upload.jpg)\n\n##### 上传流程描述\n\n1) 页面上使用`<Input />`组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个`path`属性指明文件位于系统的绝对路径)  \n2) 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息  \n3）页面调用init请求附带上选中的文件信息初始化文件上传任务  \n4）Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作  \n5）页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)  \n6）Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置  \n7）upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID  \n8）Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传状态  \n9）界面上传任务列表清空后，向后端发送sync请求，用于把当前任务同步到历史任务中，表明当前所有任务已经完成  \n10）Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传  \n\n##### Node.js(Electron)端的部分关键代码\n\n1. 初始化一个上传任务\n```js\n/**\n    * init [初始化上传]\n    * @param  {[String]} host [主机名]\n    * @param  {[String]} username [用户名]\n    * @param  {[Object]} file [文件对象]\n    * @param  {[String]} abspath [文件绝对路径]\n    * @param  {[String]} sharename [远程smb共享名]\n    * @param  {[String]} fragsize [分片大小]\n    */\n  init({ host, file, abspath, sharename, fragsize, prefix = '' }) {\n    const pre = `\\\\\\\\${host}\\\\${sharename}`;\n    const date = Date.now();\n    const { pwd, username } = global.ipcMainProcess.userModel.info;\n    const uploadId = getStringMd5(date + file.name + file.type + file.size);\n    let remotePath = '';\n    let size = 0;\n\n    return new Promise((resolve) => {\n      // 使用UNC命令连接后端smb共享\n      this.uncCommandConnect({ host, username, pwd, sharename })\n        .then(() => new Promise((reso) => {\n          remotePath = path.join(pre, prefix, file.name);\n          fsPromise.unlink(path.join(pre, prefix, file.name)).then(reso).catch(reso);\n        }))\n        .then((rsp) => {\n          // 分析绝对文件路径名，然后自动创建所有需要创建的文件夹\n          const dirs = getFileDirs([path.join(prefix, file.name)]);\n          return mkdirs(pre, dirs);\n        })\n        .then((rsp) => {\n          // 打开文件描述符\n          return fileBlock.open(abspath)\n        })\n        .then((rsp) => {\n          if (rsp.code === 200) {\n            // 临时存储文件上传信息在内存中\n            return this._setUploadRecordsInMemory({\n              username,\n              host,\n              filename: path.join(prefix, file.name),\n              size: file.size,\n              fragsize,\n              sharename,\n              abspath,\n              remotePath,\n              startime: getTime(new Date().getTime()), // 上传日期\n              endtime: '',\n              uploadId,\n              index: 0,\n              total: Math.ceil(size / fragsize),\n              status: 'uploading' // 上传状态\n            });\n          } else {\n            resolve(rsp);\n          }\n        }).then((rsp) => {\n          resolve({\n            code: 200,\n            result: {\n              uploadId,\n              size,\n              total: Math.ceil(size / fragsize)\n            }\n          });\n        }).catch(err => {\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        });\n    });\n  }\n```\n2. 上传文件\n```js\n/**\n    * upload [上传文件]\n    * @param  {[String]} index [分片索引，0为起始值]\n    * @param  {[String]} uploadId [上传任务ID]\n    */\n  upload({ uploadId, index }) {\n    // 获取文件信息\n    const record = this._getUploadRecordsInMemory(uploadId);\n    if (!record) return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n    if (record.status !== 'uploading') return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n\n    const { host, filename, size, sharename, fragsize, abspath, username } = record;\n    const pwd = global.ipcMainProcess.userModel.info.pwd;\n    const pre = `\\\\\\\\${host}\\\\${sharename}`;\n    const position = fragsize * (index);\n    const slicesize = ((fragsize * (index + 1)) <= size) ? fragsize : (size - fragsize * index);\n\n    return new Promise((resolve) => {\n      if (position > size) {\n        resolve({\n          code: 600,\n          result: lang.upload.upload_index_overflow\n        });\n        return;\n      }\n      // 读取一个文件分片\n      fileBlock.read(abspath, position, slicesize)\n        .then(rsp => {\n          if (rsp.code === 200) {\n            // 递增写入文件\n            fs.appendFile(path.join(pre, filename), rsp.result, { encoding: 'binary' }, (err) => {\n              if (err) {\n                // 排查错误原因\n                checkPermission(path.join(pre, filename, '..'), 'ew', (err2, isExit, canWrite) => {\n                  if (err2) {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.writeDataFailed\n                    });\n                  } else if (isExit && !canWrite) {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.insufficientPermissionUpload\n                    });\n                  } else {\n                    resolve({\n                      code: 600,\n                      result: global.lang.upload.writeDataFailed\n                    });\n                  }\n                });\n              } else {\n                // 更新内存中的文件上传分片信息\n                this._updateUploadRecordsInMemory({ index: (index + 1) }, uploadId);\n                resolve({\n                  code: 200,\n                  result: { filename, uploadId, index, abspath, sharename }\n                });\n              }\n              if (!this._getUploadRecordsInMemory(uploadId) || this._getUploadRecordsInMemory(uploadId).status === 'error') {\n                try {\n                  console.log('--uploading-unlink', path.join(pre, filename));\n                  fs.unlinkSync(path.join(pre, filename));\n                } catch (error) {\n                  console.log(error);\n                }\n              }\n            });\n          } else {\n            resolve(rsp);\n          }\n        })\n        .catch(err => {\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        });\n    })\n  }\n```\n3. 完成一个文件上传任务\n```js\n/**\n    * upload [完成上传]\n    * @param  {[String]} uploadId [上传任务ID]\n    */\n  complete({ uploadId }) {\n    // 获取文件信息\n    const record = this._getUploadRecordsInMemory(uploadId);\n\n    if (!record) return Promise.resolve({ code: 600, result: lang.upload.readDataFailed });\n\n    const { abspath } = record;\n    return new Promise(resolve => {\n      // 更新上传任务状态\n      this._updateUploadRecordsInMemory({ status: 'break', endtime: getTime(new Date().getTime()) }, uploadId);\n      // 关闭文件描述符\n      fileBlock.close(abspath).then(() => {\n        resolve({\n          code: 200,\n          result: uploadId\n        });\n      }).catch(err => {\n        resolve({\n          code: 600,\n          result: err.toString()\n        });\n      });\n    })\n  }\n```\n4. 文件分片读取管理工厂\n文件初始化的时候调用`open`方法临时存储文件描述符和文件绝对路径的映射关系；文件上传的时候调用`read`方法根据文件读取位置、读取容量大小进行分片切割；文件上传完成的时候关闭文件描述符；\n\n```js\n/**\n  * readFileBlock [读取文件块]\n  */\nexports.readFileBlock = () => {\n\n  const fdStore = {};\n  const smallFileMap = {};\n\n  return {\n    /* 打开文件描述符 */\n    open: (path, size, minSize=1024*2) => {\n      return new Promise((resolve) => {\n        try {\n          // 小文件不打开文件描述符，直接读取写入\n          if (size <= minSize) {\n            smallFileMap[path] = true;\n            return resolve({\n              code: 200,\n              result: {\n                fd: null\n              }\n            });\n          }\n          // 打开文件描述符，建议绝对路径和fd的映射关系\n          fs.open(path, 'r', (err, fd) => {\n            if (err) {\n              console.trace(err);\n              resolve({\n                code: 601,\n                result: err.toString()\n              });\n            } else {\n              fdStore[path] = fd;\n              resolve({\n                code: 200,\n                result: {\n                  fd: fdStore[path]\n                }\n              });\n            }\n          });\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      })\n    },\n  \n    /* 读取文件块 */\n    read: (path, position, length) => {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          if (err) {\n            resolve({\n              code: 600,\n              result: err.toString()\n            });\n          } else {\n            resolve({\n              code: 200,\n              result: data\n            });\n          }\n        };\n        try {\n          // 小文件直接读取，大文件使用文件描述符和偏移量读取\n          if (smallFileMap[path]) {\n            fs.readFile(path, (err, buffer) => {\n              callback(err, buffer);\n            });\n          } else {\n            // 空文件处理\n            if (length === 0) return callback(null, '');\n            fs.read(fdStore[path], Buffer.alloc(length), 0, length, position, function(err, readByte, readResult){\n              callback(err, readResult);\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    /* 关闭文件描述符 */\n    close: (path) => {\n      return new Promise((resolve) => {\n        try {\n          if (smallFileMap[path]) {\n            delete smallFileMap[path];\n            resolve({\n              code: 200\n            });\n          } else {\n            fs.close(fdStore[path], () => {\n              resolve({code: 200});\n              delete fdStore[path];\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    fdStore\n\n  }\n\n}\n\n```\n\n#### windows安装包自动化打包配置\n\nwindows安装包使用electron nsis配置，注意使用`.ico`格式的应用图标以免打包失败，package.json中的`build.files`字段声明了需要打包的所有文件，`build.win`是windows平台的打包配置，`build.nsis`是nsis打包的详细配置，运行`npm run build-win`即可开始win平台的Electron App打包，由于整个打包流程包含web打包和electron打包，使用Node.js编写了通用打包脚本[项目build.js](https://github.com/nojsja/electron-react-template/blob/master/build.js)、[electron build.js](https://github.com/nojsja/electron-react-template/blob/master/server/build.js)对整个流程进行了整合，`项目build.js`兼顾web打包以及调用`electron build.js`负责Electron App打包，使用`node build.js --help`查看所有打包命令帮助信息。\n\n__node build.js - -help__\n\n```bash\ndescription: build command for RhinoDisk.\n    command: node build.js [action] [config]\n    |\n    |\n    |______ param: [--help | -h ] => show usage info.\n    |______ param: [build-win   ] [--edit | --office] => build package for windows, the default conf file is ./server/config.json.\n    |______ param: [build-linux ] [--edit | --office] => build package for linux, the default conf file is ./server/config.json\n    |______ param: [build-mac   ] [--edit | --office] => build package for mac, the default conf file is ./server/config.json\n    |______ param: [build-all   ] [--edit | --office] => build package for all platform, the default conf file is ./server/config.json\n    |______ param: [clean-build ] => clean build directory after build\n    |\n    |______ example1: node build.js build-win\n    |______ example2: node build.js build-linux\n    |______ example3: node build.js build-mac\n    |______ example4: node build.js build-all\n    |______ example5: node build.js build-win --edit\n    |______ example6: node build.js build-win --office\n    |______ example7: node build.js --help\n    |______ example8: node build.js clean-build\n```\n\n__package.json：__\n```js\n{\n  \"name\": \"RhinoDisk\",\n  \"version\": \"1.0.0\",\n  \"description\": \"SMB management client\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    ...\n    \"build-win\": \"electron-builder --win\",\n    ...\n  },\n  \"devDependencies\": {\n    ...\n  },\n  \"dependencies\": {\n    ...\n  },\n  \"build\": {\n    \"productName\": \"RhinoDisk\",\n    \"appId\": \"org.datatom.rhinodisk\",\n    \"asar\": false,\n    \"copyright\": \"CopyRight © 2011-2020 上海德拓信息技术股份有限公司\",\n    \"directories\": {\n      \"buildResources\": \"build\",\n      \"output\": \"build\"\n    },\n    \"files\": [\n      \"package.json\",\n      \"config.json\",\n      \"index.js\",\n      \"dist/\",\n      \"app/\",\n      \"node_modules/\",\n      \"resources/*.*\"\n    ],\n    \"win\": {\n      \"icon\": \"build/iconx256.ico\",\n      \"target\": [\n        {\n          \"target\": \"zip\"\n        },\n        {\n          \"target\": \"nsis\",\n          \"arch\": [\n            \"x64\"\n          ]\n        }\n      ]\n    },\n    \"nsis\": {\n      \"oneClick\": false,\n      \"allowElevation\": true,\n      \"allowToChangeInstallationDirectory\": true,\n      \"installerIcon\": \"./build/iconx256.ico\",\n      \"uninstallerIcon\": \"./build/iconx256.ico\",\n      \"installerHeaderIcon\": \"./build/iconx256.ico\",\n      \"createDesktopShortcut\": true,\n      \"createStartMenuShortcut\": true,\n      \"deleteAppDataOnUninstall\": true,\n      \"shortcutName\": \"RhinoDisk\"\n    }\n  }\n}\n\n```\n\n### 总结\n--------\n\n第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题... 总之获得了很多经验，也整理出了一些通用解决方法。  \nElectron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！\n","slug":"基于Electron的smb客户端开发记录","published":1,"updated":"2020-12-06T10:53:35.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmurd001hkl957exl1ehe","content":"<h3 id=\"前言\">前言</h3><hr><p>最近拿到客户需求，需要利用现有存储产品部分后台接口和原生smb协议来实现一个windows平台的smb客户端，主要功能需要包含：存储集群节点管理、集群用户登录、远程共享目录挂载、共享目录浏览、目录权限设置、文件上传管理，其中目录权限设置和目录浏览接口已经被提供，其余几个功能的electron代码和web端代码需要由我负责。考虑整个项目由前端同事来实现且数据存储量较小、数据关系不复杂，所以技术选型方面使用了支持跨平台的Electron框架和易用的的本地json数据库<a href=\"https://github.com/typicode/lowdb\" target=\"_blank\" rel=\"noopener\">lowdb</a>。</p><p>项目精简版[DEMO]展示(<a href=\"https://github.com/nojsja/electron-react-template\" target=\"_blank\" rel=\"noopener\">https://github.com/nojsja/electron-react-template</a>)</p><h3 id=\"功能需求\">功能需求</h3><hr><h4 id=\"集群节点管理\">集群节点管理</h4><ol><li>客户端需要支持多个节点(每个节点所属集群不同)的添加、删除操作</li><li>支持设置默认节点操作用于自动登录功能</li><li>添加节点的时候要进行ping逻辑判断目标节点是否可用</li><li>调用存储集群ID获取接口保证每个集群只有一个节点被添加到集群管理列表</li></ol><p>需求分析：节点IP列表、默认节点属性、节点用户登录信息均需要在本地json数据库存储管理，以便数据记录。</p><p><img src=\"smb_node.jpg\" alt=\"RhinoDisk\"></p><p><img src=\"smb_node_conf.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"集群用户登录\">集群用户登录</h4><ol><li>支持已登录过客户端的用户自动下拉提示</li><li>支持已记住密码的用户自动填充密码到输入框</li><li>如果设置了默认节点，且默认节点的当前用户密码已经记住，则启动客户端时自动执行登录，类似QQ登录面板</li></ol><p>需求分析：调用已有登录接口验证smb用户名和密码是否正确，然后拿到具有接口操作权限的access_token(注意直接走smb协议的操作无需使用token)，并且在本地json数据库存储用户名、密码、自动登录标识、用户节点登录记录等。</p><p><img src=\"smb_login.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"远程共享目录挂载\">远程共享目录挂载</h4><ol><li>windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作</li><li>选择挂载设备时需要弹出所有空闲的磁盘盘符，支持范围C-Z</li></ol><p>需求分析：同windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作，所有挂载信息包括空闲盘符、共享挂载状态 均需要使用windows cmd命令即时获取以防数据不一致的情况。</p><p><img src=\"smb_share.jpg\" alt=\"RhinoDisk\"><br><img src=\"smb_share_mount.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"文件上传管理\">文件上传管理</h4><ol><li>文件上传管理能够查看当前任务列表的任务详情，包含上传速度、上传时间、完成时间、文件大小、文件名称，勾选进行中的任务后能够进行暂停、重传、删除、续传等操作。</li><li>在任务列表的所有文件都被上传后会进行一次历史任务同步，把内存中的任务列表状态写入文件中。</li><li>任务历史记录中可以进行删除任务记录、恢复上传错误的历史任务(重传)等操作。</li><li>切换不同节点重新登录用户上传任务不受影响，在当前节点重新登录用户上传任务会被强制终止，退出客户端后上传任务会被强制终止，各个用户的上传任务列表均不相同互不干扰，所有被强制终止的任务都能从历史任务列表中中恢复。</li></ol><p>需求分析：当前任务列表即时存储于内存中，以便快速进行增删查改操作，任务历史记录使用json数据库进行本地存储；每次任务列表自动同步时将内存中的任务写入到本地json数据库里，并且任务列表数据从内存中释放。</p><p><img src=\"smb_upload_now.jpg\" alt=\"RhinoDisk\"><br><img src=\"smb_upload_record.jpg\" alt=\"RhinoDisk\"></p><h3 id=\"实现难点\">实现难点</h3><hr><h4 id=\"多语言功能实现\">多语言功能实现</h4><p>总体逻辑是通过配置文件或参数声明引入某个语言目录下的所有语言配置文件即可，注意每次更改语言后将lang配置写入文件，下次启动应用时读取文件配置然后调用下面声明的方法加载语言文件即可。</p><p><img src=\"electron-lang.png\" alt=\"lang\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * global.lang -- 内存里保存的所有语言数据</span></span><br><span class=\"line\"><span class=\"comment\"> * global.LANG -- 语言数据标识(en_us, zh_cn, zh_tw)</span></span><br><span class=\"line\"><span class=\"comment\"> * session.lang -- 在session里保存一份语言数据标识，防止用户cookie丢失时语言设置失效(session 持久化)</span></span><br><span class=\"line\"><span class=\"comment\"> * cookie.lang -- 保存在客户端的语言数据标识，session.lang和cookie.lang保持同步</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lang = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lang</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultLang = <span class=\"string\">'zh_CN'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- 获取统一的语言环境标识 ------------------- */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getLANG = <span class=\"function\">(<span class=\"params\">acceptLang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 英语</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'en-US'</span>, <span class=\"string\">'en'</span>, <span class=\"string\">'en-us'</span>, <span class=\"string\">'en_us'</span>, <span class=\"string\">'en_US'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'en_us'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 中文简体</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'zh-CN'</span>, <span class=\"string\">'zh'</span>, <span class=\"string\">'zh-cn'</span>, <span class=\"string\">'zh_cn'</span>, <span class=\"string\">'zh_CN'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'zh_cn'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">if</span> ([<span class=\"string\">'zh-TW'</span>, <span class=\"string\">'zh-tw'</span>, <span class=\"string\">'zh_tw'</span>, <span class=\"string\">'zh_TW'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'zh_tw'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 默认中文简体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'zh_cn'</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- 加载语言文件 ------------------- */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setLang = <span class=\"function\">(<span class=\"params\">langEnv</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    global.lang = global.lang ? global.lang : &#123;&#125;;</span><br><span class=\"line\">    global.LANG = langEnv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取文件夹的语言配置文件写入全局配置</span></span><br><span class=\"line\">    fs.readdir(path.join(app.getAppPath(), <span class=\"string\">'app/lang'</span>, langEnv), (err, files) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        global.lang[path.basename(file)] = <span class=\"built_in\">require</span>(path.join(app.getAppPath(), <span class=\"string\">'app/lang'</span>, langEnv, file));</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">acceptLang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _lang = getLANG(acceptLang || defaultLang);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (global.LANG &amp;&amp; global.LANG == _lang) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置目前的语言环境</span></span><br><span class=\"line\">    setLang(_lang);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = lang;</span><br></pre></td></tr></table></figure><h4 id=\"托盘功能的实现\">托盘功能的实现</h4><p>使用Electron的Tray创建托盘菜单，Menu.buildFromTemplate方法创建菜单子项以及对应的事件回调函数。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contextMenu() &#123;</span><br><span class=\"line\">    global.appTray = <span class=\"keyword\">new</span> Tray(path.join(app.getAppPath(), os.type() === <span class=\"string\">'Windows_NT'</span> ? <span class=\"string\">`resources/icon_<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.envConf.work_env&#125;</span>.ico`</span> : <span class=\"string\">'resources/mac_tray.png'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> menu = Menu.buildFromTemplate( [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          label: global.lang.public.quit,</span><br><span class=\"line\">          type: <span class=\"string\">'normal'</span>,</span><br><span class=\"line\">          click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.sendToWeb(<span class=\"string\">'upload'</span>, &#123;<span class=\"attr\">action</span>: <span class=\"string\">'getUploadingTask'</span>&#125;);</span><br><span class=\"line\">            ipcMainProcess.ipc.once(<span class=\"string\">'upload-getUploadingTask'</span>, (event, rsp) =&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                  global.ipcMainWindow.sendToWeb(<span class=\"string\">'shell'</span>, &#123; <span class=\"attr\">action</span>: <span class=\"string\">'upload-clear'</span> &#125;);</span><br><span class=\"line\">                  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    global.appTray.destroy();</span><br><span class=\"line\">                    app.quit();</span><br><span class=\"line\">                  &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    global.ipcMainProcess.notifySend(&#123;</span><br><span class=\"line\">                      body: global.lang.public[<span class=\"string\">'data_write_failed_before_quit'</span>]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rsp.result !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">const</span> buttonId = dialog.showMessageBoxSync(<span class=\"keyword\">this</span>.windowoptions, &#123;</span><br><span class=\"line\">                    defaultId: <span class=\"number\">0</span>,</span><br><span class=\"line\">                    buttons: [<span class=\"string\">'No'</span>, <span class=\"string\">'Yes'</span>],</span><br><span class=\"line\">                    type: <span class=\"string\">'info'</span>,</span><br><span class=\"line\">                    title: global.lang.public.tips,</span><br><span class=\"line\">                    message: global.lang.upload.app_quit_tips</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (buttonId === <span class=\"number\">1</span>) quitApp();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  quitApp();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                global.ipcMainProcess.notifySend(&#123;</span><br><span class=\"line\">                  body: rsp.result</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    global.appTray.on(<span class=\"string\">'click'</span>, ()=&gt;&#123;    </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.window.show();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    global.appTray.setToolTip(<span class=\"string\">'RninoDisk'</span>);</span><br><span class=\"line\">    global.appTray.setContextMenu(menu);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"Node执行操作系统命令\">Node执行操作系统命令</h4><ol><li>通用的系统命令执行函数(日志输出阻塞版本)<br>使用Node.js的<code>child_process.exec</code>函数衍生 shell，然后在 shell 中执行 command，会在命令执行完成之后将所有信息输出到控制台。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [exec 执行一个命令，阻塞输出信息到控制台]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [String] &#125;</span>  </span>command    [命令]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Array | String] &#125;</span>   </span>params  [参数数组]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Object] &#125;</span>  </span>options [exec可定制的参数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return <span class=\"type\">&#123; Promise &#125;</span>           </span>[返回Promise对象]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">exports.exec = <span class=\"function\">(<span class=\"params\">_command, _params=[], _options=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.isArray(_params) ? _params.join(<span class=\"string\">' '</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = (<span class=\"built_in\">String</span>(_params) === <span class=\"string\">'[object Object]'</span>) ? _params : (_options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`<span class=\"subst\">$&#123;_command&#125;</span> <span class=\"subst\">$&#123;params&#125;</span>`</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params, options, command);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    child.exec(command, options, (_err, _stdout, _stderr) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_err) &#123;</span><br><span class=\"line\">        exports.console_log(_err, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">1</span>, <span class=\"attr\">result</span>: _err&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_stderr &amp;&amp; _stderr.toString()) &#123;</span><br><span class=\"line\">        exports.console_log(_stderr, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">1</span>, <span class=\"attr\">result</span>: _stderr&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(_stdout);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">result</span>: _stdout&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>通用的系统命令执行函数(日志同步输出版本)<br>使用Node.js的<code>child_process.exec</code>函数衍生 shell，然后在 shell 中执行 command，所有控制台日志会同步输出。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [execRealtime 执行一个命令，实时输出信息到控制台]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [String] &#125;</span>  </span>command    [命令]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Array | String] &#125;</span>   </span>params  [参数数组]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Object] &#125;</span>  </span>options [exec可定制的参数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123; Promise &#125;</span>           </span>[返回Promise对象]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.execRealtime = <span class=\"function\">(<span class=\"params\">_command, _params=[], _options=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.isArray(_params) ? _params.join(<span class=\"string\">' '</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = (<span class=\"built_in\">String</span>(_params) === <span class=\"string\">'[object Object]'</span>) ? _params : (_options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`<span class=\"subst\">$&#123;_command&#125;</span> <span class=\"subst\">$&#123;params&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"string\">''</span>, error = <span class=\"string\">''</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params, options, command);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = child.exec(command, options);</span><br><span class=\"line\">    </span><br><span class=\"line\">    result.stdout.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      exports.console_log(data, <span class=\"string\">'white'</span>);</span><br><span class=\"line\">      data += <span class=\"string\">`<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    result.stderr.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      exports.console_log(data, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">      error += <span class=\"string\">`<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    result.on(<span class=\"string\">'close'</span>, (code) =&gt; &#123;</span><br><span class=\"line\">      resolve(&#123;code, <span class=\"attr\">result</span>: data, error&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"远程共享目录挂载-2\">远程共享目录挂载</h4><ol><li>获取空闲盘符和已经挂载盘符</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * getSystemDriveLetter [获取系统已经挂载的磁盘]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return <span class=\"type\">&#123;[Array]&#125;</span> </span>[盘符列表]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  getSystemDriveLetter() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sudo.exec(<span class=\"string\">'fsutil fsinfo drives'</span>, [], &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'buffer'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">stdout</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> driverstr = stdout;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> driverstrArr = driverstr.split(<span class=\"string\">' '</span>).filter(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s !== os.EOL).map(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> allDrivers = [</span><br><span class=\"line\">          <span class=\"string\">'C:'</span>, <span class=\"string\">'D:'</span>, <span class=\"string\">'E:'</span>, <span class=\"string\">'F:'</span>, <span class=\"string\">'G:'</span>, <span class=\"string\">'H:'</span>, <span class=\"string\">'I:'</span>, <span class=\"string\">'J:'</span>, <span class=\"string\">'K:'</span>, <span class=\"string\">'L:'</span>,</span><br><span class=\"line\">          <span class=\"string\">'M:'</span>, <span class=\"string\">'N:'</span>, <span class=\"string\">'O:'</span>, <span class=\"string\">'P:'</span>, <span class=\"string\">'Q:'</span>, <span class=\"string\">'R:'</span>, <span class=\"string\">'S:'</span>, <span class=\"string\">'T:'</span>, <span class=\"string\">'U:'</span>, <span class=\"string\">'V:'</span>,</span><br><span class=\"line\">          <span class=\"string\">'W:'</span>, <span class=\"string\">'X:'</span>, <span class=\"string\">'Y:'</span>, <span class=\"string\">'Z:'</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\">        driverstrArr.shift();</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">          result: &#123;</span><br><span class=\"line\">            mounted: driverstrArr,</span><br><span class=\"line\">            available: allDrivers.filter(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> !driverstrArr.includes(d.toLocaleUpperCase()))</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: err,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>通过UNC命令对远程共享进行挂载</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 挂载共享 */</span></span><br><span class=\"line\">_mountSystemDriver_Windows_NT(&#123; host, driver, path, auto = <span class=\"literal\">false</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pwd = global.ipcMainProcess.userModel.get(<span class=\"string\">'last.pwd'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isThirdUser, nickname, isLocalUser, username &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUseIPC = <span class=\"string\">`net use \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\ipc$ \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandMount = <span class=\"string\">`net use <span class=\"subst\">$&#123;driver&#125;</span> \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;path&#125;</span> \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUmount = <span class=\"string\">`net use <span class=\"subst\">$&#123;driver&#125;</span> /del /y`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取系统已经挂载的磁盘和空闲的磁盘</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getSystemDriveLetter()</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rsp.result.mounted.includes(driver.toLocaleUpperCase())) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(global.lang.node.driver_already_mount);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(global.lang.node.get_system_mount_info_failed);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 尝试UNC连接</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sudo.exec(commandUseIPC);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 执行挂载命令</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sudo.exec(commandMount);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 更新数据</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.update(<span class=\"string\">'mountPoint'</span>, &#123; username, host, path &#125;, &#123;</span><br><span class=\"line\">            username, host, path, driver, auto</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">200</span>,</span><br><span class=\"line\">            result: &#123;</span><br><span class=\"line\">              username, host, driver</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.error(err, err.toString());</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: global.lang.node.net_mount_failed_reason,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"文件上传管理-2\">文件上传管理</h4><p>前端界面沿用之前的AWS对象存储文件上传管理逻辑<a href=\"https://nojsja.gitee.io/blogs/2020/03/07/%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">基于s3对象存储多文件分片上传的Javascript实现(一)</a>，不同的地方是加入了<code>历史任务</code>功能用于持久化文件上传任务记录功能，失败的任务能在历史任务中重新启动。由于smb简单文件上传协议不支持文件分片管理功能，所以前端界面的上传进度获取和上传速度计算均是基于 Node.js 的 FS API实现，整体流程是：使用Windows UNC命令连接后端共享，然后可以像访问本地文件系统一样访问远程一个共享路径，比如<code>\\\\[host]\\[sharename]\\file1</code>，这样子文件上传就变成本地目录文件的复制、删除、重命名了。</p><p>下图为前端界面的上传逻辑示意图：<br><img src=\"shards_upload.jpg\" alt=\"upload\"></p><h5 id=\"上传流程描述\">上传流程描述</h5><ol><li>页面上使用<code>&lt;Input /&gt;</code>组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个<code>path</code>属性指明文件位于系统的绝对路径)</li><li>缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息<br>3）页面调用init请求附带上选中的文件信息初始化文件上传任务<br>4）Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作<br>5）页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)<br>6）Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置<br>7）upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID<br>8）Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传状态<br>9）界面上传任务列表清空后，向后端发送sync请求，用于把当前任务同步到历史任务中，表明当前所有任务已经完成<br>10）Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传</li></ol><h5 id=\"Node-js-Electron-端的部分关键代码\">Node.js(Electron)端的部分关键代码</h5><ol><li>初始化一个上传任务</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * init [初始化上传]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>host [主机名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>username [用户名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>abspath [文件绝对路径]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>sharename [远程smb共享名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>fragsize [分片大小]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  init(&#123; host, file, abspath, sharename, fragsize, prefix = <span class=\"string\">''</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pre = <span class=\"string\">`\\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;sharename&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; pwd, username &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> uploadId = getStringMd5(date + file.name + file.type + file.size);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remotePath = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用UNC命令连接后端smb共享</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.uncCommandConnect(&#123; host, username, pwd, sharename &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reso</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          remotePath = path.join(pre, prefix, file.name);</span><br><span class=\"line\">          fsPromise.unlink(path.join(pre, prefix, file.name)).then(reso).catch(reso);</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 分析绝对文件路径名，然后自动创建所有需要创建的文件夹</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> dirs = getFileDirs([path.join(prefix, file.name)]);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> mkdirs(pre, dirs);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> fileBlock.open(abspath)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 临时存储文件上传信息在内存中</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._setUploadRecordsInMemory(&#123;</span><br><span class=\"line\">              username,</span><br><span class=\"line\">              host,</span><br><span class=\"line\">              filename: path.join(prefix, file.name),</span><br><span class=\"line\">              size: file.size,</span><br><span class=\"line\">              fragsize,</span><br><span class=\"line\">              sharename,</span><br><span class=\"line\">              abspath,</span><br><span class=\"line\">              remotePath,</span><br><span class=\"line\">              startime: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()), <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">              endtime: <span class=\"string\">''</span>,</span><br><span class=\"line\">              uploadId,</span><br><span class=\"line\">              index: <span class=\"number\">0</span>,</span><br><span class=\"line\">              total: <span class=\"built_in\">Math</span>.ceil(size / fragsize),</span><br><span class=\"line\">              status: <span class=\"string\">'uploading'</span> <span class=\"comment\">// 上传状态</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">200</span>,</span><br><span class=\"line\">            result: &#123;</span><br><span class=\"line\">              uploadId,</span><br><span class=\"line\">              size,</span><br><span class=\"line\">              total: <span class=\"built_in\">Math</span>.ceil(size / fragsize)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>上传文件</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * upload [上传文件]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>index [分片索引，0为起始值]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [上传任务ID]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  upload(&#123; uploadId, index &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record.status !== <span class=\"string\">'uploading'</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; host, filename, size, sharename, fragsize, abspath, username &#125; = record;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pwd = global.ipcMainProcess.userModel.info.pwd;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pre = <span class=\"string\">`\\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;sharename&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = fragsize * (index);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slicesize = ((fragsize * (index + <span class=\"number\">1</span>)) &lt;= size) ? fragsize : (size - fragsize * index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position &gt; size) &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: lang.upload.upload_index_overflow</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 读取一个文件分片</span></span><br><span class=\"line\">      fileBlock.read(abspath, position, slicesize)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 递增写入文件</span></span><br><span class=\"line\">            fs.appendFile(path.join(pre, filename), rsp.result, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'binary'</span> &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 排查错误原因</span></span><br><span class=\"line\">                checkPermission(path.join(pre, filename, <span class=\"string\">'..'</span>), <span class=\"string\">'ew'</span>, (err2, isExit, canWrite) =&gt; &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (err2) &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.writeDataFailed</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isExit &amp;&amp; !canWrite) &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.insufficientPermissionUpload</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.writeDataFailed</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 更新内存中的文件上传分片信息</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>._updateUploadRecordsInMemory(&#123; <span class=\"attr\">index</span>: (index + <span class=\"number\">1</span>) &#125;, uploadId);</span><br><span class=\"line\">                resolve(&#123;</span><br><span class=\"line\">                  code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                  result: &#123; filename, uploadId, index, abspath, sharename &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId) || <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId).status === <span class=\"string\">'error'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">'--uploading-unlink'</span>, path.join(pre, filename));</span><br><span class=\"line\">                  fs.unlinkSync(path.join(pre, filename));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>完成一个文件上传任务</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * upload [完成上传]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [上传任务ID]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  complete(&#123; uploadId &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; abspath &#125; = record;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更新上传任务状态</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._updateUploadRecordsInMemory(&#123; <span class=\"attr\">status</span>: <span class=\"string\">'break'</span>, <span class=\"attr\">endtime</span>: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()) &#125;, uploadId);</span><br><span class=\"line\">      <span class=\"comment\">// 关闭文件描述符</span></span><br><span class=\"line\">      fileBlock.close(abspath).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">          result: uploadId</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: err.toString()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>文件分片读取管理工厂<br>文件初始化的时候调用<code>open</code>方法临时存储文件描述符和文件绝对路径的映射关系；文件上传的时候调用<code>read</code>方法根据文件读取位置、读取容量大小进行分片切割；文件上传完成的时候关闭文件描述符；</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * readFileBlock [读取文件块]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.readFileBlock = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fdStore = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> smallFileMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 打开文件描述符 */</span></span><br><span class=\"line\">    open: <span class=\"function\">(<span class=\"params\">path, size, minSize=<span class=\"number\">1024</span>*<span class=\"number\">2</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件不打开文件描述符，直接读取写入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size &lt;= minSize) &#123;</span><br><span class=\"line\">            smallFileMap[path] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: &#123;</span><br><span class=\"line\">                fd: <span class=\"literal\">null</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符，建议绝对路径和fd的映射关系</span></span><br><span class=\"line\">          fs.open(path, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">601</span>,</span><br><span class=\"line\">                result: err.toString()</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              fdStore[path] = fd;</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                result: &#123;</span><br><span class=\"line\">                  fd: fdStore[path]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* 读取文件块 */</span></span><br><span class=\"line\">    read: <span class=\"function\">(<span class=\"params\">path, position, length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">600</span>,</span><br><span class=\"line\">              result: err.toString()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件直接读取，大文件使用文件描述符和偏移量读取</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            fs.readFile(path, (err, buffer) =&gt; &#123;</span><br><span class=\"line\">              callback(err, buffer);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空文件处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            fs.read(fdStore[path], Buffer.alloc(length), <span class=\"number\">0</span>, length, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, readByte, readResult</span>)</span>&#123;</span><br><span class=\"line\">              callback(err, readResult);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 关闭文件描述符 */</span></span><br><span class=\"line\">    close: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> smallFileMap[path];</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fs.close(fdStore[path], () =&gt; &#123;</span><br><span class=\"line\">              resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">200</span>&#125;);</span><br><span class=\"line\">              <span class=\"keyword\">delete</span> fdStore[path];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    fdStore</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"windows安装包自动化打包配置\">windows安装包自动化打包配置</h4><p>windows安装包使用electron nsis配置，注意使用<code>.ico</code>格式的应用图标以免打包失败，package.json中的<code>build.files</code>字段声明了需要打包的所有文件，<code>build.win</code>是windows平台的打包配置，<code>build.nsis</code>是nsis打包的详细配置，运行<code>npm run build-win</code>即可开始win平台的Electron App打包，由于整个打包流程包含web打包和electron打包，使用Node.js编写了通用打包脚本<a href=\"https://github.com/nojsja/electron-react-template/blob/master/build.js\" target=\"_blank\" rel=\"noopener\">项目build.js</a>、<a href=\"https://github.com/nojsja/electron-react-template/blob/master/server/build.js\" target=\"_blank\" rel=\"noopener\">electron build.js</a>对整个流程进行了整合，<code>项目build.js</code>兼顾web打包以及调用<code>electron build.js</code>负责Electron App打包，使用<code>node build.js --help</code>查看所有打包命令帮助信息。</p><p><strong>node build.js - -help</strong></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">description: build <span class=\"built_in\">command</span> <span class=\"keyword\">for</span> RhinoDisk.</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: node build.js [action] [config]</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |______ param: [--<span class=\"built_in\">help</span> | -h ] =&gt; show usage info.</span><br><span class=\"line\">    |______ param: [build-win   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> windows, the default conf file is ./server/config.json.</span><br><span class=\"line\">    |______ param: [build-linux ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> linux, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [build-mac   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> mac, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [build-all   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> all platform, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [clean-build ] =&gt; clean build directory after build</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |______ example1: node build.js build-win</span><br><span class=\"line\">    |______ example2: node build.js build-linux</span><br><span class=\"line\">    |______ example3: node build.js build-mac</span><br><span class=\"line\">    |______ example4: node build.js build-all</span><br><span class=\"line\">    |______ example5: node build.js build-win --edit</span><br><span class=\"line\">    |______ example6: node build.js build-win --office</span><br><span class=\"line\">    |______ example7: node build.js --<span class=\"built_in\">help</span></span><br><span class=\"line\">    |______ example8: node build.js clean-build</span><br></pre></td></tr></table></figure><p><strong>package.json：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"RhinoDisk\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"SMB management client\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"build-win\"</span>: <span class=\"string\">\"electron-builder --win\"</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"productName\"</span>: <span class=\"string\">\"RhinoDisk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"appId\"</span>: <span class=\"string\">\"org.datatom.rhinodisk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"asar\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"copyright\"</span>: <span class=\"string\">\"CopyRight © 2011-2020 上海德拓信息技术股份有限公司\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"directories\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"buildResources\"</span>: <span class=\"string\">\"build\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"output\"</span>: <span class=\"string\">\"build\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"files\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"package.json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"config.json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"dist/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"node_modules/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"resources/*.*\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"win\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"icon\"</span>: <span class=\"string\">\"build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"target\"</span>: <span class=\"string\">\"zip\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"target\"</span>: <span class=\"string\">\"nsis\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"arch\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"x64\"</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"nsis\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"oneClick\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowElevation\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowToChangeInstallationDirectory\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"installerIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"uninstallerIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"installerHeaderIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"createDesktopShortcut\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"createStartMenuShortcut\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"deleteAppDataOnUninstall\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"shortcutName\"</span>: <span class=\"string\">\"RhinoDisk\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"总结\">总结</h3><hr><p>第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题… 总之获得了很多经验，也整理出了一些通用解决方法。<br>Electron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\">前言</h3><hr><p>最近拿到客户需求，需要利用现有存储产品部分后台接口和原生smb协议来实现一个windows平台的smb客户端，主要功能需要包含：存储集群节点管理、集群用户登录、远程共享目录挂载、共享目录浏览、目录权限设置、文件上传管理，其中目录权限设置和目录浏览接口已经被提供，其余几个功能的electron代码和web端代码需要由我负责。考虑整个项目由前端同事来实现且数据存储量较小、数据关系不复杂，所以技术选型方面使用了支持跨平台的Electron框架和易用的的本地json数据库<a href=\"https://github.com/typicode/lowdb\" target=\"_blank\" rel=\"noopener\">lowdb</a>。</p><p>项目精简版[DEMO]展示(<a href=\"https://github.com/nojsja/electron-react-template\" target=\"_blank\" rel=\"noopener\">https://github.com/nojsja/electron-react-template</a>)</p><h3 id=\"功能需求\">功能需求</h3><hr><h4 id=\"集群节点管理\">集群节点管理</h4><ol><li>客户端需要支持多个节点(每个节点所属集群不同)的添加、删除操作</li><li>支持设置默认节点操作用于自动登录功能</li><li>添加节点的时候要进行ping逻辑判断目标节点是否可用</li><li>调用存储集群ID获取接口保证每个集群只有一个节点被添加到集群管理列表</li></ol><p>需求分析：节点IP列表、默认节点属性、节点用户登录信息均需要在本地json数据库存储管理，以便数据记录。</p><p><img src=\"smb_node.jpg\" alt=\"RhinoDisk\"></p><p><img src=\"smb_node_conf.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"集群用户登录\">集群用户登录</h4><ol><li>支持已登录过客户端的用户自动下拉提示</li><li>支持已记住密码的用户自动填充密码到输入框</li><li>如果设置了默认节点，且默认节点的当前用户密码已经记住，则启动客户端时自动执行登录，类似QQ登录面板</li></ol><p>需求分析：调用已有登录接口验证smb用户名和密码是否正确，然后拿到具有接口操作权限的access_token(注意直接走smb协议的操作无需使用token)，并且在本地json数据库存储用户名、密码、自动登录标识、用户节点登录记录等。</p><p><img src=\"smb_login.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"远程共享目录挂载\">远程共享目录挂载</h4><ol><li>windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作</li><li>选择挂载设备时需要弹出所有空闲的磁盘盘符，支持范围C-Z</li></ol><p>需求分析：同windows资源管理器原生功能一样，将远程主机的smb共享挂载为本地的一个磁盘，方便用户使用windows资源管理器直接对文件和目录进行操作，所有挂载信息包括空闲盘符、共享挂载状态 均需要使用windows cmd命令即时获取以防数据不一致的情况。</p><p><img src=\"smb_share.jpg\" alt=\"RhinoDisk\"><br><img src=\"smb_share_mount.jpg\" alt=\"RhinoDisk\"></p><h4 id=\"文件上传管理\">文件上传管理</h4><ol><li>文件上传管理能够查看当前任务列表的任务详情，包含上传速度、上传时间、完成时间、文件大小、文件名称，勾选进行中的任务后能够进行暂停、重传、删除、续传等操作。</li><li>在任务列表的所有文件都被上传后会进行一次历史任务同步，把内存中的任务列表状态写入文件中。</li><li>任务历史记录中可以进行删除任务记录、恢复上传错误的历史任务(重传)等操作。</li><li>切换不同节点重新登录用户上传任务不受影响，在当前节点重新登录用户上传任务会被强制终止，退出客户端后上传任务会被强制终止，各个用户的上传任务列表均不相同互不干扰，所有被强制终止的任务都能从历史任务列表中中恢复。</li></ol><p>需求分析：当前任务列表即时存储于内存中，以便快速进行增删查改操作，任务历史记录使用json数据库进行本地存储；每次任务列表自动同步时将内存中的任务写入到本地json数据库里，并且任务列表数据从内存中释放。</p><p><img src=\"smb_upload_now.jpg\" alt=\"RhinoDisk\"><br><img src=\"smb_upload_record.jpg\" alt=\"RhinoDisk\"></p><h3 id=\"实现难点\">实现难点</h3><hr><h4 id=\"多语言功能实现\">多语言功能实现</h4><p>总体逻辑是通过配置文件或参数声明引入某个语言目录下的所有语言配置文件即可，注意每次更改语言后将lang配置写入文件，下次启动应用时读取文件配置然后调用下面声明的方法加载语言文件即可。</p><p><img src=\"electron-lang.png\" alt=\"lang\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * global.lang -- 内存里保存的所有语言数据</span></span><br><span class=\"line\"><span class=\"comment\"> * global.LANG -- 语言数据标识(en_us, zh_cn, zh_tw)</span></span><br><span class=\"line\"><span class=\"comment\"> * session.lang -- 在session里保存一份语言数据标识，防止用户cookie丢失时语言设置失效(session 持久化)</span></span><br><span class=\"line\"><span class=\"comment\"> * cookie.lang -- 保存在客户端的语言数据标识，session.lang和cookie.lang保持同步</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lang = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lang</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> defaultLang = <span class=\"string\">'zh_CN'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- 获取统一的语言环境标识 ------------------- */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getLANG = <span class=\"function\">(<span class=\"params\">acceptLang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 英语</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'en-US'</span>, <span class=\"string\">'en'</span>, <span class=\"string\">'en-us'</span>, <span class=\"string\">'en_us'</span>, <span class=\"string\">'en_US'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'en_us'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 中文简体</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"string\">'zh-CN'</span>, <span class=\"string\">'zh'</span>, <span class=\"string\">'zh-cn'</span>, <span class=\"string\">'zh_cn'</span>, <span class=\"string\">'zh_CN'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'zh_cn'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">if</span> ([<span class=\"string\">'zh-TW'</span>, <span class=\"string\">'zh-tw'</span>, <span class=\"string\">'zh_tw'</span>, <span class=\"string\">'zh_TW'</span>].indexOf(acceptLang) !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'zh_tw'</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 默认中文简体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'zh_cn'</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* ------------------- 加载语言文件 ------------------- */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> setLang = <span class=\"function\">(<span class=\"params\">langEnv</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    global.lang = global.lang ? global.lang : &#123;&#125;;</span><br><span class=\"line\">    global.LANG = langEnv;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 读取文件夹的语言配置文件写入全局配置</span></span><br><span class=\"line\">    fs.readdir(path.join(app.getAppPath(), <span class=\"string\">'app/lang'</span>, langEnv), (err, files) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      files.forEach(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        global.lang[path.basename(file)] = <span class=\"built_in\">require</span>(path.join(app.getAppPath(), <span class=\"string\">'app/lang'</span>, langEnv, file));</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">acceptLang</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _lang = getLANG(acceptLang || defaultLang);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (global.LANG &amp;&amp; global.LANG == _lang) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置目前的语言环境</span></span><br><span class=\"line\">    setLang(_lang);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = lang;</span><br></pre></td></tr></table></figure><h4 id=\"托盘功能的实现\">托盘功能的实现</h4><p>使用Electron的Tray创建托盘菜单，Menu.buildFromTemplate方法创建菜单子项以及对应的事件回调函数。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">contextMenu() &#123;</span><br><span class=\"line\">    global.appTray = <span class=\"keyword\">new</span> Tray(path.join(app.getAppPath(), os.type() === <span class=\"string\">'Windows_NT'</span> ? <span class=\"string\">`resources/icon_<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.envConf.work_env&#125;</span>.ico`</span> : <span class=\"string\">'resources/mac_tray.png'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">const</span> menu = Menu.buildFromTemplate( [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          label: global.lang.public.quit,</span><br><span class=\"line\">          type: <span class=\"string\">'normal'</span>,</span><br><span class=\"line\">          click: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.sendToWeb(<span class=\"string\">'upload'</span>, &#123;<span class=\"attr\">action</span>: <span class=\"string\">'getUploadingTask'</span>&#125;);</span><br><span class=\"line\">            ipcMainProcess.ipc.once(<span class=\"string\">'upload-getUploadingTask'</span>, (event, rsp) =&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                  global.ipcMainWindow.sendToWeb(<span class=\"string\">'shell'</span>, &#123; <span class=\"attr\">action</span>: <span class=\"string\">'upload-clear'</span> &#125;);</span><br><span class=\"line\">                  .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    global.appTray.destroy();</span><br><span class=\"line\">                    app.quit();</span><br><span class=\"line\">                  &#125;).catch(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">                    global.ipcMainProcess.notifySend(&#123;</span><br><span class=\"line\">                      body: global.lang.public[<span class=\"string\">'data_write_failed_before_quit'</span>]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rsp.result !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">const</span> buttonId = dialog.showMessageBoxSync(<span class=\"keyword\">this</span>.windowoptions, &#123;</span><br><span class=\"line\">                    defaultId: <span class=\"number\">0</span>,</span><br><span class=\"line\">                    buttons: [<span class=\"string\">'No'</span>, <span class=\"string\">'Yes'</span>],</span><br><span class=\"line\">                    type: <span class=\"string\">'info'</span>,</span><br><span class=\"line\">                    title: global.lang.public.tips,</span><br><span class=\"line\">                    message: global.lang.upload.app_quit_tips</span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (buttonId === <span class=\"number\">1</span>) quitApp();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  quitApp();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                global.ipcMainProcess.notifySend(&#123;</span><br><span class=\"line\">                  body: rsp.result</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]);</span><br><span class=\"line\"></span><br><span class=\"line\">    global.appTray.on(<span class=\"string\">'click'</span>, ()=&gt;&#123;    </span><br><span class=\"line\">      <span class=\"keyword\">this</span>.window.show();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    global.appTray.setToolTip(<span class=\"string\">'RninoDisk'</span>);</span><br><span class=\"line\">    global.appTray.setContextMenu(menu);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"Node执行操作系统命令\">Node执行操作系统命令</h4><ol><li>通用的系统命令执行函数(日志输出阻塞版本)<br>使用Node.js的<code>child_process.exec</code>函数衍生 shell，然后在 shell 中执行 command，会在命令执行完成之后将所有信息输出到控制台。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * [exec 执行一个命令，阻塞输出信息到控制台]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [String] &#125;</span>  </span>command    [命令]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Array | String] &#125;</span>   </span>params  [参数数组]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Object] &#125;</span>  </span>options [exec可定制的参数]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return <span class=\"type\">&#123; Promise &#125;</span>           </span>[返回Promise对象]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">exports.exec = <span class=\"function\">(<span class=\"params\">_command, _params=[], _options=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.isArray(_params) ? _params.join(<span class=\"string\">' '</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = (<span class=\"built_in\">String</span>(_params) === <span class=\"string\">'[object Object]'</span>) ? _params : (_options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`<span class=\"subst\">$&#123;_command&#125;</span> <span class=\"subst\">$&#123;params&#125;</span>`</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params, options, command);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    child.exec(command, options, (_err, _stdout, _stderr) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_err) &#123;</span><br><span class=\"line\">        exports.console_log(_err, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">1</span>, <span class=\"attr\">result</span>: _err&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_stderr &amp;&amp; _stderr.toString()) &#123;</span><br><span class=\"line\">        exports.console_log(_stderr, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">1</span>, <span class=\"attr\">result</span>: _stderr&#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(_stdout);</span><br><span class=\"line\">        resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">0</span>, <span class=\"attr\">result</span>: _stdout&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>通用的系统命令执行函数(日志同步输出版本)<br>使用Node.js的<code>child_process.exec</code>函数衍生 shell，然后在 shell 中执行 command，所有控制台日志会同步输出。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [execRealtime 执行一个命令，实时输出信息到控制台]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [String] &#125;</span>  </span>command    [命令]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Array | String] &#125;</span>   </span>params  [参数数组]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123; [Object] &#125;</span>  </span>options [exec可定制的参数]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123; Promise &#125;</span>           </span>[返回Promise对象]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">exports.execRealtime = <span class=\"function\">(<span class=\"params\">_command, _params=[], _options=&#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> params = <span class=\"built_in\">Array</span>.isArray(_params) ? _params.join(<span class=\"string\">' '</span>) : <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = (<span class=\"built_in\">String</span>(_params) === <span class=\"string\">'[object Object]'</span>) ? _params : (_options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> command = <span class=\"string\">`<span class=\"subst\">$&#123;_command&#125;</span> <span class=\"subst\">$&#123;params&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = <span class=\"string\">''</span>, error = <span class=\"string\">''</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(params, options, command);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = child.exec(command, options);</span><br><span class=\"line\">    </span><br><span class=\"line\">    result.stdout.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      exports.console_log(data, <span class=\"string\">'white'</span>);</span><br><span class=\"line\">      data += <span class=\"string\">`<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    result.stderr.on(<span class=\"string\">'data'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">      exports.console_log(data, <span class=\"string\">'red'</span>);</span><br><span class=\"line\">      error += <span class=\"string\">`<span class=\"subst\">$&#123;data&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    result.on(<span class=\"string\">'close'</span>, (code) =&gt; &#123;</span><br><span class=\"line\">      resolve(&#123;code, <span class=\"attr\">result</span>: data, error&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"远程共享目录挂载-2\">远程共享目录挂载</h4><ol><li>获取空闲盘符和已经挂载盘符</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * getSystemDriveLetter [获取系统已经挂载的磁盘]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return <span class=\"type\">&#123;[Array]&#125;</span> </span>[盘符列表]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  getSystemDriveLetter() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sudo.exec(<span class=\"string\">'fsutil fsinfo drives'</span>, [], &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'buffer'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">stdout</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> driverstr = stdout;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> driverstrArr = driverstr.split(<span class=\"string\">' '</span>).filter(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s !== os.EOL).map(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s.replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">''</span>));</span><br><span class=\"line\">        <span class=\"keyword\">const</span> allDrivers = [</span><br><span class=\"line\">          <span class=\"string\">'C:'</span>, <span class=\"string\">'D:'</span>, <span class=\"string\">'E:'</span>, <span class=\"string\">'F:'</span>, <span class=\"string\">'G:'</span>, <span class=\"string\">'H:'</span>, <span class=\"string\">'I:'</span>, <span class=\"string\">'J:'</span>, <span class=\"string\">'K:'</span>, <span class=\"string\">'L:'</span>,</span><br><span class=\"line\">          <span class=\"string\">'M:'</span>, <span class=\"string\">'N:'</span>, <span class=\"string\">'O:'</span>, <span class=\"string\">'P:'</span>, <span class=\"string\">'Q:'</span>, <span class=\"string\">'R:'</span>, <span class=\"string\">'S:'</span>, <span class=\"string\">'T:'</span>, <span class=\"string\">'U:'</span>, <span class=\"string\">'V:'</span>,</span><br><span class=\"line\">          <span class=\"string\">'W:'</span>, <span class=\"string\">'X:'</span>, <span class=\"string\">'Y:'</span>, <span class=\"string\">'Z:'</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\">        driverstrArr.shift();</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">          result: &#123;</span><br><span class=\"line\">            mounted: driverstrArr,</span><br><span class=\"line\">            available: allDrivers.filter(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> !driverstrArr.includes(d.toLocaleUpperCase()))</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: err,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>通过UNC命令对远程共享进行挂载</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 挂载共享 */</span></span><br><span class=\"line\">_mountSystemDriver_Windows_NT(&#123; host, driver, path, auto = <span class=\"literal\">false</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pwd = global.ipcMainProcess.userModel.get(<span class=\"string\">'last.pwd'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isThirdUser, nickname, isLocalUser, username &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUseIPC = <span class=\"string\">`net use \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\ipc$ \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandMount = <span class=\"string\">`net use <span class=\"subst\">$&#123;driver&#125;</span> \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;path&#125;</span> \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUmount = <span class=\"string\">`net use <span class=\"subst\">$&#123;driver&#125;</span> /del /y`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取系统已经挂载的磁盘和空闲的磁盘</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.getSystemDriveLetter()</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rsp.result.mounted.includes(driver.toLocaleUpperCase())) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(global.lang.node.driver_already_mount);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(global.lang.node.get_system_mount_info_failed);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 尝试UNC连接</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sudo.exec(commandUseIPC);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 执行挂载命令</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sudo.exec(commandMount);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 更新数据</span></span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.update(<span class=\"string\">'mountPoint'</span>, &#123; username, host, path &#125;, &#123;</span><br><span class=\"line\">            username, host, path, driver, auto</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">200</span>,</span><br><span class=\"line\">            result: &#123;</span><br><span class=\"line\">              username, host, driver</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.error(err, err.toString());</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: global.lang.node.net_mount_failed_reason,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"文件上传管理-2\">文件上传管理</h4><p>前端界面沿用之前的AWS对象存储文件上传管理逻辑<a href=\"https://nojsja.gitee.io/blogs/2020/03/07/%E5%9F%BA%E4%BA%8Es3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%A4%9A%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0%E7%9A%84Javascript%E5%AE%9E%E7%8E%B0-%E4%B8%80/\" target=\"_blank\" rel=\"noopener\">基于s3对象存储多文件分片上传的Javascript实现(一)</a>，不同的地方是加入了<code>历史任务</code>功能用于持久化文件上传任务记录功能，失败的任务能在历史任务中重新启动。由于smb简单文件上传协议不支持文件分片管理功能，所以前端界面的上传进度获取和上传速度计算均是基于 Node.js 的 FS API实现，整体流程是：使用Windows UNC命令连接后端共享，然后可以像访问本地文件系统一样访问远程一个共享路径，比如<code>\\\\[host]\\[sharename]\\file1</code>，这样子文件上传就变成本地目录文件的复制、删除、重命名了。</p><p>下图为前端界面的上传逻辑示意图：<br><img src=\"shards_upload.jpg\" alt=\"upload\"></p><h5 id=\"上传流程描述\">上传流程描述</h5><ol><li>页面上使用<code>&lt;Input /&gt;</code>组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个<code>path</code>属性指明文件位于系统的绝对路径)</li><li>缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息<br>3）页面调用init请求附带上选中的文件信息初始化文件上传任务<br>4）Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作<br>5）页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)<br>6）Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置<br>7）upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID<br>8）Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传状态<br>9）界面上传任务列表清空后，向后端发送sync请求，用于把当前任务同步到历史任务中，表明当前所有任务已经完成<br>10）Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传</li></ol><h5 id=\"Node-js-Electron-端的部分关键代码\">Node.js(Electron)端的部分关键代码</h5><ol><li>初始化一个上传任务</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * init [初始化上传]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>host [主机名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>username [用户名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件对象]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>abspath [文件绝对路径]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>sharename [远程smb共享名]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>fragsize [分片大小]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  init(&#123; host, file, abspath, sharename, fragsize, prefix = <span class=\"string\">''</span> &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pre = <span class=\"string\">`\\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;sharename&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; pwd, username &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> uploadId = getStringMd5(date + file.name + file.type + file.size);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> remotePath = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用UNC命令连接后端smb共享</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.uncCommandConnect(&#123; host, username, pwd, sharename &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reso</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          remotePath = path.join(pre, prefix, file.name);</span><br><span class=\"line\">          fsPromise.unlink(path.join(pre, prefix, file.name)).then(reso).catch(reso);</span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 分析绝对文件路径名，然后自动创建所有需要创建的文件夹</span></span><br><span class=\"line\">          <span class=\"keyword\">const</span> dirs = getFileDirs([path.join(prefix, file.name)]);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> mkdirs(pre, dirs);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> fileBlock.open(abspath)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 临时存储文件上传信息在内存中</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._setUploadRecordsInMemory(&#123;</span><br><span class=\"line\">              username,</span><br><span class=\"line\">              host,</span><br><span class=\"line\">              filename: path.join(prefix, file.name),</span><br><span class=\"line\">              size: file.size,</span><br><span class=\"line\">              fragsize,</span><br><span class=\"line\">              sharename,</span><br><span class=\"line\">              abspath,</span><br><span class=\"line\">              remotePath,</span><br><span class=\"line\">              startime: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()), <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">              endtime: <span class=\"string\">''</span>,</span><br><span class=\"line\">              uploadId,</span><br><span class=\"line\">              index: <span class=\"number\">0</span>,</span><br><span class=\"line\">              total: <span class=\"built_in\">Math</span>.ceil(size / fragsize),</span><br><span class=\"line\">              status: <span class=\"string\">'uploading'</span> <span class=\"comment\">// 上传状态</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;).then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">200</span>,</span><br><span class=\"line\">            result: &#123;</span><br><span class=\"line\">              uploadId,</span><br><span class=\"line\">              size,</span><br><span class=\"line\">              total: <span class=\"built_in\">Math</span>.ceil(size / fragsize)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>上传文件</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * upload [上传文件]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>index [分片索引，0为起始值]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [上传任务ID]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  upload(&#123; uploadId, index &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record.status !== <span class=\"string\">'uploading'</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; host, filename, size, sharename, fragsize, abspath, username &#125; = record;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pwd = global.ipcMainProcess.userModel.info.pwd;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pre = <span class=\"string\">`\\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\<span class=\"subst\">$&#123;sharename&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> position = fragsize * (index);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> slicesize = ((fragsize * (index + <span class=\"number\">1</span>)) &lt;= size) ? fragsize : (size - fragsize * index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (position &gt; size) &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: lang.upload.upload_index_overflow</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 读取一个文件分片</span></span><br><span class=\"line\">      fileBlock.read(abspath, position, slicesize)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 递增写入文件</span></span><br><span class=\"line\">            fs.appendFile(path.join(pre, filename), rsp.result, &#123; <span class=\"attr\">encoding</span>: <span class=\"string\">'binary'</span> &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 排查错误原因</span></span><br><span class=\"line\">                checkPermission(path.join(pre, filename, <span class=\"string\">'..'</span>), <span class=\"string\">'ew'</span>, (err2, isExit, canWrite) =&gt; &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (err2) &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.writeDataFailed</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isExit &amp;&amp; !canWrite) &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.insufficientPermissionUpload</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resolve(&#123;</span><br><span class=\"line\">                      code: <span class=\"number\">600</span>,</span><br><span class=\"line\">                      result: global.lang.upload.writeDataFailed</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 更新内存中的文件上传分片信息</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>._updateUploadRecordsInMemory(&#123; <span class=\"attr\">index</span>: (index + <span class=\"number\">1</span>) &#125;, uploadId);</span><br><span class=\"line\">                resolve(&#123;</span><br><span class=\"line\">                  code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                  result: &#123; filename, uploadId, index, abspath, sharename &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId) || <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId).status === <span class=\"string\">'error'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                  <span class=\"built_in\">console</span>.log(<span class=\"string\">'--uploading-unlink'</span>, path.join(pre, filename));</span><br><span class=\"line\">                  fs.unlinkSync(path.join(pre, filename));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">                  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"3\"><li>完成一个文件上传任务</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * upload [完成上传]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>uploadId [上传任务ID]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  complete(&#123; uploadId &#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> record = <span class=\"keyword\">this</span>._getUploadRecordsInMemory(uploadId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(&#123; <span class=\"attr\">code</span>: <span class=\"number\">600</span>, <span class=\"attr\">result</span>: lang.upload.readDataFailed &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; abspath &#125; = record;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更新上传任务状态</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>._updateUploadRecordsInMemory(&#123; <span class=\"attr\">status</span>: <span class=\"string\">'break'</span>, <span class=\"attr\">endtime</span>: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()) &#125;, uploadId);</span><br><span class=\"line\">      <span class=\"comment\">// 关闭文件描述符</span></span><br><span class=\"line\">      fileBlock.close(abspath).then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">          result: uploadId</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: err.toString()</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>文件分片读取管理工厂<br>文件初始化的时候调用<code>open</code>方法临时存储文件描述符和文件绝对路径的映射关系；文件上传的时候调用<code>read</code>方法根据文件读取位置、读取容量大小进行分片切割；文件上传完成的时候关闭文件描述符；</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * readFileBlock [读取文件块]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.readFileBlock = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fdStore = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> smallFileMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 打开文件描述符 */</span></span><br><span class=\"line\">    open: <span class=\"function\">(<span class=\"params\">path, size, minSize=<span class=\"number\">1024</span>*<span class=\"number\">2</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件不打开文件描述符，直接读取写入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size &lt;= minSize) &#123;</span><br><span class=\"line\">            smallFileMap[path] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: &#123;</span><br><span class=\"line\">                fd: <span class=\"literal\">null</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符，建议绝对路径和fd的映射关系</span></span><br><span class=\"line\">          fs.open(path, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">601</span>,</span><br><span class=\"line\">                result: err.toString()</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              fdStore[path] = fd;</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                result: &#123;</span><br><span class=\"line\">                  fd: fdStore[path]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* 读取文件块 */</span></span><br><span class=\"line\">    read: <span class=\"function\">(<span class=\"params\">path, position, length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">600</span>,</span><br><span class=\"line\">              result: err.toString()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件直接读取，大文件使用文件描述符和偏移量读取</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            fs.readFile(path, (err, buffer) =&gt; &#123;</span><br><span class=\"line\">              callback(err, buffer);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空文件处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            fs.read(fdStore[path], Buffer.alloc(length), <span class=\"number\">0</span>, length, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, readByte, readResult</span>)</span>&#123;</span><br><span class=\"line\">              callback(err, readResult);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 关闭文件描述符 */</span></span><br><span class=\"line\">    close: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> smallFileMap[path];</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fs.close(fdStore[path], () =&gt; &#123;</span><br><span class=\"line\">              resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">200</span>&#125;);</span><br><span class=\"line\">              <span class=\"keyword\">delete</span> fdStore[path];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    fdStore</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"windows安装包自动化打包配置\">windows安装包自动化打包配置</h4><p>windows安装包使用electron nsis配置，注意使用<code>.ico</code>格式的应用图标以免打包失败，package.json中的<code>build.files</code>字段声明了需要打包的所有文件，<code>build.win</code>是windows平台的打包配置，<code>build.nsis</code>是nsis打包的详细配置，运行<code>npm run build-win</code>即可开始win平台的Electron App打包，由于整个打包流程包含web打包和electron打包，使用Node.js编写了通用打包脚本<a href=\"https://github.com/nojsja/electron-react-template/blob/master/build.js\" target=\"_blank\" rel=\"noopener\">项目build.js</a>、<a href=\"https://github.com/nojsja/electron-react-template/blob/master/server/build.js\" target=\"_blank\" rel=\"noopener\">electron build.js</a>对整个流程进行了整合，<code>项目build.js</code>兼顾web打包以及调用<code>electron build.js</code>负责Electron App打包，使用<code>node build.js --help</code>查看所有打包命令帮助信息。</p><p><strong>node build.js - -help</strong></p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">description: build <span class=\"built_in\">command</span> <span class=\"keyword\">for</span> RhinoDisk.</span><br><span class=\"line\">    <span class=\"built_in\">command</span>: node build.js [action] [config]</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |______ param: [--<span class=\"built_in\">help</span> | -h ] =&gt; show usage info.</span><br><span class=\"line\">    |______ param: [build-win   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> windows, the default conf file is ./server/config.json.</span><br><span class=\"line\">    |______ param: [build-linux ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> linux, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [build-mac   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> mac, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [build-all   ] [--edit | --office] =&gt; build package <span class=\"keyword\">for</span> all platform, the default conf file is ./server/config.json</span><br><span class=\"line\">    |______ param: [clean-build ] =&gt; clean build directory after build</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |______ example1: node build.js build-win</span><br><span class=\"line\">    |______ example2: node build.js build-linux</span><br><span class=\"line\">    |______ example3: node build.js build-mac</span><br><span class=\"line\">    |______ example4: node build.js build-all</span><br><span class=\"line\">    |______ example5: node build.js build-win --edit</span><br><span class=\"line\">    |______ example6: node build.js build-win --office</span><br><span class=\"line\">    |______ example7: node build.js --<span class=\"built_in\">help</span></span><br><span class=\"line\">    |______ example8: node build.js clean-build</span><br></pre></td></tr></table></figure><p><strong>package.json：</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"RhinoDisk\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"SMB management client\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"build-win\"</span>: <span class=\"string\">\"electron-builder --win\"</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"build\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"productName\"</span>: <span class=\"string\">\"RhinoDisk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"appId\"</span>: <span class=\"string\">\"org.datatom.rhinodisk\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"asar\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"copyright\"</span>: <span class=\"string\">\"CopyRight © 2011-2020 上海德拓信息技术股份有限公司\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"directories\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"buildResources\"</span>: <span class=\"string\">\"build\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"output\"</span>: <span class=\"string\">\"build\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"files\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"package.json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"config.json\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"dist/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"app/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"node_modules/\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"resources/*.*\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"win\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"icon\"</span>: <span class=\"string\">\"build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"target\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"target\"</span>: <span class=\"string\">\"zip\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"string\">\"target\"</span>: <span class=\"string\">\"nsis\"</span>,</span><br><span class=\"line\">          <span class=\"string\">\"arch\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"x64\"</span></span><br><span class=\"line\">          ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"nsis\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"oneClick\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowElevation\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"allowToChangeInstallationDirectory\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"installerIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"uninstallerIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"installerHeaderIcon\"</span>: <span class=\"string\">\"./build/iconx256.ico\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"createDesktopShortcut\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"createStartMenuShortcut\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"deleteAppDataOnUninstall\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"shortcutName\"</span>: <span class=\"string\">\"RhinoDisk\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"总结\">总结</h3><hr><p>第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题… 总之获得了很多经验，也整理出了一些通用解决方法。<br>Electron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！</p>"},{"title":"基于Antd库实现可编辑树组件","catalog":true,"toc_nav_num":true,"header-img":"/blogs/img/article_header/article_header.png","date":"2020-08-28T08:19:59.000Z","subtitle":"Antd Editable Tree","_content":"\n### I 前言\n---------\n\n==Antd==是基于Ant Design设计体系的React UI组件库，主要用于研发企业级中后台产品，在前端很多项目中都有使用。除了提供一些比较基础的例如`Button`、`Form`、`Input`、`Modal`、`List`...组件，还有`Tree`、`Upload`、`Table`这几个功能集成度比较高的复杂组件，其中`Tree`组件的应用场景挺多的，在一些涉及显示树形结构数据的功能中可以体现：目录结构展示、族谱关系图...，总之在需要呈现多个父子层级之间结构关系的场景中就可能用到这种Tree组件，Antd虽然官方提供了Tree组件但是它的功能比较有限，定位是主要负责对数据的展示工作，树数据的增删查改这些功能基本没有支持，但是Antd Tree的属性支持比较完善，我们可以基于Antd树来实现支持编辑功能的`EditableTree`组件。\n\n源码：[nojsja/EditableTree](https://github.com/nojsja/react-nojsja/tree/master/components/EditableTree)，克隆整个仓库下来后可以直接运行起来。\n\n已经发布为npm组件，可以直接安装：\n```bash\n$: npm install editable-tree-antd\n# or\n$: yarn add editable-tree-antd\n\n```\n#### 预览\n\n![editable_tree](./editable_tree.png)\n\n### II 功能分析\n-------------\n\n- [x] 非叶子节点的节点名不为空，节点值为空或数组\n- [x] 叶子节点的节点名可为空，节点值不可为空\n- [x] 点击树节点进入节点编辑状态，提交后实现节点数据更新\n- [x] 非叶子节点各层级支持临节点添加/子节点添加/节点删除/节点名和值编辑\n- [x] 叶子节点只支持当前节点删除和当前节点的节点名/节点值编辑\n- [x] 树的各层级的节点名和节点值可否编辑支持配置，默认可编辑\n- [x] 树的各层级的节点是否可删除支持配置，默认可删除\n- [x] 树的层级深度支持属性配置，子节点深度不能超过树的最大深度值，默认为50层子级\n- [x] 新增支持：将一段yaml字符串解析为多个树节点\n\n### III 实现解析\n--------------\n\n基于React / Antd / Mobx\n\n[Antd Tree文档](https://ant.design/components/tree-cn/)\n\n#### 文件结构\n\n--- index.js -- 入口文件，数据初始化、组件生命周期控制、递归调用`TreeNode`进行数据渲染  \n--- Tree.js -- Tree类用于抽象化树形数据的增删查改操作，相当于`Model`层  \n--- lang.js -- 多语言文件  \n--- TreeNode.jsx -- 单层树节点组件，用于隔离每层节点状态显示和操作  \n------- TreeNodeDisplay.jsx -- 非编辑状态下树数据的展示  \n------- TreeNodeNormalEditing.jsx -- 普通节点处于编辑状态下时  \n------- TreeNodeYamlEditing.jsx -- yaml节点处于编辑状态下时  \n------- TreeNodeActions.jsx -- 该层级树节点的所有功能按钮组  \n--- styles / editable-tree.css -- 树样式  \n--- styles / icon-font / *  -- 图标依赖的iconfont文件  \n\n#### 实现原理\n\n* 先来看下Antd原生需要`Tree`数据格式：\n```json\n[\n  {\n    title: 'parent 1',\n    key: '0-0',\n    children: [\n      {\n        title: 'parent 1-0',\n        key: '0-0-0',\n        disabled: true,\n        children: [\n          {\n            title: 'leaf',\n            key: '0-0-0-0',\n            disableCheckbox: true,\n          },\n          {\n            title: 'leaf',\n            key: '0-0-0-1',\n          }\n        ]\n      },\n      {\n        title: 'parent 1-1',\n        key: '0-0-1',\n        children: [{ title: <span style={{ color: '#1890ff' }}>sss</span>, key: '0-0-1-0' }]\n      }\n    ]\n  }\n]\n```\n\n* 每一层级节点除了需要基本的`title`(文字label)、`key`(节点唯一标识)、`children`(子结点列表)属性外，还有其它很多自定义参数比如配置节点是否选中等等，这里就不对其它功能配置项做细研究了，感兴趣可以查看官方文档。  \n\n* 在官方说明中`title`值其实不只是一个字符串，还可以是一个ReactNode，也就是说Antd官方为我们提供了一个树改造的后门，我们可以用自己的渲染逻辑来替换官方的`title`渲染逻辑，所以关键点就是分离这个`title`渲染为一个独立的React组件，在这个组件里我们独立管理每一层级的树节点数据展示，同时又向这个组件暴露操作整个树形数据的方法。另一方面Tree型数据一般都需要使用递归逻辑来进行节点渲染和数据增删查改，这里`TreeNode.js`就是递归渲染的Component对象，而增删查改逻辑我们把它分离到`Tree.js`Model里面进行管理，这样子思路就比较清晰了。\n\n#### 关键点说明：index.js\n\n>入口文件，用于：数据初始化、组件生命周期控制、递归调用`TreeNode`进行数据渲染、加载lang文件等等\n\n* 在生命周期`componentDidMount`中我们初始化一个Tree Model，并设置初始化state数据。\n\n* 在`componentWillReceiveProps`中我们更新这个Model和state以控制界面状态更新，注意使用的Js数据深比较函数`deepComparison`用来避免不必要的数据渲染，数据深比较时要使用与树显示相关的节点属性`裸数据`(见方法`getNudeTreeData`)，比如`nodeName`，`nodeValue`等属性，其它的无关属性比如`id`和`depth`需要忽略。\n\n* `formatNodeData`主要功能是将我们传入的自定义树数据递归 “翻译” 成Antd Tree渲染需要的原生树数据。\n```json\n[\n  {\n    nodeName: '出版者',\n    id: '出版者', // unique id, required\n    nameEditable: true, // is level editable (name), default true\n    valueEditable: true, // is level editable (value), default true\n    nodeDeletable: false, // is level deletable, default true\n    nodeValue: [\n      {\n        nodeName: '出版者描述',\n        isInEdit: true, // is level in edit status\n        id: '出版者描述',\n        nodeValue: [\n          {\n            nodeName: '出版者名称',\n            id: '出版者名称',\n            nodeValue: '出版者A',\n          },\n          {\n            nodeName: '出版者地',\n            id: '出版者地',\n            valueEditable: false,\n            nodeValue: '出版地B1',\n          },\n        ],\n      }\n    ],\n  },\n  ...\n];\n```\n\n* 代码逻辑：\n```js\n...\nclass EditableTree extends Component {\n  state = {\n    treeData: [], // Antd Tree 需要的结构化数据\n    expandedKeys: [], // 将树的节点展开/折叠状态纳入控制\n    maxLevel: 50, ；// 默认最大树深度\n    enableYaml: false,\n    lang: 'zh_CN'\n  };\n  dataOrigin = []\n  treeModel = null\n  key=getRandomString()\n\n  /* 组件挂载后初始化树数据，生成treeModel，更新state */\n  componentDidMount() {\n    const { data, maxLevel = 50, enableYaml, lang=\"zh_CN\" } = this.props;\n\n    if (data) {\n      this.dataOrigin = data;\n      TreeClass.defaultTreeValueWrapper(this.dataOrigin); // 树节点添加默认值\n      TreeClass.levelDepthWrapper(this.dataOrigin); // 添加层级深度属性\n      const formattedData = this.formatTreeData(this.dataOrigin); // 生成格式化后的Antd Tree数据\n      this.updateTreeModel({ data: this.dataOrigin, key: this.key }); // 更新model\n      const keys = TreeClass.getTreeKeys(this.dataOrigin); // 获取各个层级的key，默认展开所有层级\n      this.setState({\n        treeData: formattedData,\n        expandedKeys: keys,\n        enableYaml: !!enableYaml,\n        maxLevel,\n        lang,\n      });\n    }\n  }\n\n  /* 组件props数据更新后更新treeModel和state */\n  componentWillReceiveProps(nextProps) {\n    const { data, maxLevel = 50, enableYaml, lang=\"zh_CN\" } = nextProps;\n    this.setState({ enableYaml: !!enableYaml, lang, maxLevel });\n    // 深比较函数避免不必要的树更新\n    if (\n      !deepComparison(\n          TreeClass.getNudeTreeData(deepClone(this.dataOrigin)),\n          TreeClass.getNudeTreeData(deepClone(data))\n        )\n    ) {\n      this.dataOrigin = data;\n      TreeClass.defaultTreeValueWrapper(this.dataOrigin);\n      TreeClass.levelDepthWrapper(this.dataOrigin);\n      const formattedData = this.formatTreeData(this.dataOrigin);\n      this.updateTreeModel({ data: this.dataOrigin, key: this.key });\n      const keys = TreeClass.getTreeKeys(this.dataOrigin);\n      this.onDataChange(this.dataOrigin); // 触发onChange回调钩子\n      this.setState({\n        treeData: formattedData,\n        expandedKeys: keys\n      });\n    }\n  }\n\n  /* 修改节点 */\n  modifyNode = (key, treeNode) => {\n    const modifiedData = this.treeModel.modifyNode(key, treeNode); // 更新model\n    this.setState({\n      treeData: this.formatTreeData(modifiedData), // 更新state,触发数据回调钩子\n    }, () => this.onDataChange(this.dataOrigin));\n  }\n\n  /**\n   * 以下省略的方法具有跟modifyNode相似的逻辑\n   * 调用treeModel修改数据然后更新state\n   **/\n\n  /* 进入编辑模式 */\n  getInToEditable = (key, treeNode) => { ... }\n  /* 添加一个兄弟节点 */\n  addSisterNode = (key) => { ... }\n  /* 添加一个子结点 */\n  addSubNode = (key) => { ... }\n  /* 移除一个节点 */\n  removeNode = (key) => { ... }\n\n  /* 递归生成树节点数据 */\n  formatNodeData = (treeData) => {\n    let tree = {};\n    const key = `${this.key}_${treeData.id}`;\n    if (treeData.toString() === '[object Object]' && tree !== null) {\n      tree.key = key;\n      treeData.key = key;\n      tree.title = /* 关键点 */\n        (<TreeNode\n          maxLevel={this.maxLevel}\n          focusKey={this.state.focusKey}\n          treeData={treeData}\n          enableYaml={this.state.enableYaml}\n          modifyNode={this.modifyNode}\n          addSisterNode={this.addSisterNode}\n          addExpandedKey={this.addExpandedKey}\n          getInToEditable={this.getInToEditable}\n          addSubNode={this.addSubNode}\n          addNodeFragment={this.addNodeFragment}\n          removeNode={this.removeNode}\n          lang={lang(this.state.lang)}\n        />);\n      if (treeData.nodeValue instanceof Array) tree.children = treeData.nodeValue.map(d => this.formatNodeData(d));\n    } else {\n      tree = '';\n    }\n    return tree;\n  }\n\n  /* 生成树数据 */\n  formatTreeData = (treeData) => {\n    let tree = [];\n    if (treeData instanceof Array) tree = treeData.map(treeNode => this.formatNodeData(treeNode));\n    return tree;\n  }\n\n  /* 更新 tree model */\n  updateTreeModel = (props) => {\n    if (this.treeModel) {\n      this.treeModel.update(props);\n    } else {\n      const _lang = lang(this.state.lang);\n      this.treeModel = new TreeClass(\n        props.data,\n        props.key,\n        {\n          maxLevel: this.state.maxLevel,\n          overLevelTips: _lang.template_tree_max_level_tips,\n          completeEditingNodeTips: _lang.pleaseCompleteTheNodeBeingEdited,\n          addSameLevelTips: _lang.extendedMetadata_same_level_name_cannot_be_added,\n        }\n      );\n    }\n  }\n\n\n  /* 树数据更新钩子，提供给上一层级调用 */\n  onDataChange = (modifiedData) => {\n    const { onDataChange = () => {} } = this.props;\n    onDataChange(modifiedData);\n  }\n\n  ...\n\n  render() {\n    const { treeData } = this.state;\n    return (\n      <div className=\"editable-tree-wrapper\">\n      {\n        (treeData && treeData.length) ?\n          <Tree\n            showLine\n            onExpand={this.onExpand}\n            expandedKeys={this.state.expandedKeys}\n            // defaultExpandedKeys={this.state.expandedKeys}\n            defaultExpandAll\n            treeData={treeData}\n          />\n        : null\n      }\n      </div>\n    );\n  }\n}\n\nEditableTree.propTypes = {\n  data: PropTypes.array.isRequired, // tree data, required\n  onDataChange: PropTypes.func, // data change callback, default none\n  maxLevel: PropTypes.number, // tree max level, default 50\n  lang: PropTypes.string, // lang - zh_CN/en_US, default zh_CN\n  enableYaml: PropTypes.bool // enable it if you want to parse yaml string when adding a new node, default false\n};\n\n```\n\n#### 关键点说明：Tree.js\n\n>Tree类用于抽象化树形数据的增删查改操作，相当于`Model`层\n\n逻辑不算复杂，很多都是递归树数据修改节点，具体代码不予赘述：\n```js\nexport default class Tree {\n  constructor(data, treeKey, {\n    maxLevel,\n    overLevelTips = '已经限制模板树的最大深度为：',\n    addSameLevelTips = '同层级已经有同名节点被添加！',\n    completeEditingNodeTips = '请完善当前正在编辑的节点数据！',\n  }) {\n    this.treeData = data;\n    this.treeKey = treeKey;\n    this.maxLevel = maxLevel;\n    this.overLevelTips = overLevelTips;\n    this.completeEditingNodeTips = completeEditingNodeTips;\n    this.addSameLevelTips = addSameLevelTips;\n  }\n\n  ...\n\n  /* 为输入数据覆盖默认值 */\n  static defaultTreeValueWrapper() { ... }\n\n  /* 查询是否有节点正在编辑 */\n  static findInEdit(items) { ... }\n\n  /* 进入编辑模式 */\n  getInToEditable(key, { nodeName, nodeValue, id, isInEdit } = {}) { ... }\n\n  /* 修改一个节点数据 */\n  modifyNode(key, {\n    nodeName = '', nodeValue = '', nameEditable = true,\n    valueEditable = true, nodeDeletable = true, isInEdit = false,\n  } = {}) { ... }\n\n  /* 添加一个目标节点的兄弟结点 */\n  addSisterNode(key, {\n    nodeName = '', nameEditable = true, valueEditable = true,\n    nodeDeletable = true, isInEdit = true, nodeValue = '',\n  } = {}) { ... }\n\n  /* 添加一个目标节点的子结点 */\n  addSubNode(key, {\n    nodeName = '', nameEditable = true, valueEditable = true,\n    nodeDeletable = true, isInEdit = true, nodeValue = '',\n  } = {}) { ... }\n\n  /* 移除节点 */\n  removeNode(key) { ... }\n\n  /* 获取树数据 */\n  getTreeData() {\n    return deepClone(this.treeData);\n  }\n\n  /* 更新树数据 */\n  update({ data, key }) {\n    this.treeData = data;\n    this.treeKey = key;\n  }\n}\n\n```\n\n#### 关键点说明：TreeNode.jsx\n>表示单个树节点的React组件，以下均为其子组件，用于展示各个状态下的树层级  \n\n* TreeNodeDisplay.jsx -- 非编辑状态下树数据的展示\n\n* TreeNodeNormalEditing.jsx -- 普通节点处于编辑状态下时\n\n* TreeNodeYamlEditing.jsx -- yaml节点处于编辑状态下时\n\n* TreeNodeActions.jsx -- 该层级树节点的所有功能按钮组\n\n每个层级节点都可以添加子节点、添加同级节点、编辑节点名、编辑节点值、删除当前节点(一并删除子节点)，`nameEditable`属性控制节点名是否可编辑，`valueEditable`树形控制节点值是否可编辑，`nodeDeletable`属性控制节点是否可以删除，默认值都是为`true`。  \n\n![tree_add_sister](./tree_add_sister.png)\n\n![tree_add_sub](./tree_add_sub.png)\n\n`isInEdit`属性表明当前节点是否处于编辑状态，处于编辑状态时显示输入框，否则显示文字，当点击文字时当前节点变成编辑状态。\n\n![tree_in_edit](./tree_in_edit.png)\n\n简单的页面展示组件，具体实现见 [源码：TreeNode.jsx](https://github.com/nojsja/react-nojsja/blob/master/components/EditableTree/src/TreeNode.jsx)\n\n### IV 遇到的问题&解决办法\n------------------------------\n\n#### 树数据更新渲染导致的节点折叠状态重置\n\n* 想象我们打开了树的中间某个层级进行节点名编辑，编辑完成后点击提交，树重新渲染刷新，然后之前编辑的节点又重新折叠起来了，我们需要重新打开那个层级看是否编辑成功，这种使用体验无疑是痛苦的。\n\n* 造成树节点折叠状态重置的原因就是树的重新渲染，且这个折叠状态的控制数据并没有暴露到每个TreeNode上，所以在我们自己实现的TreeNode中无法独立控制树节点的折叠/展开。\n\n* 查看官方文档，传入树的`expandedKeys`属性可以显式指定整颗树中需要展开的节点，`expandedKeys`即需要展开节点的key值数组，为了将每个树节点折叠状态变成受控状态，我们将`expandedKeys`存在state或mobx store中，并在树节点折叠状态改变后更新这个值。\n```js\n...\nrender() {\n    const { treeData } = this.state;\n    return (\n      <div className=\"editable-tree-wrapper\">\n      {\n        (treeData && treeData.length) ?\n          <Tree\n            showLine\n            onExpand={this.onExpand}\n            expandedKeys={this.state.expandedKeys}\n            treeData={treeData}\n          />\n        : null\n      }\n      </div>\n    );\n  }\n```\n\n#### Antd格子布局塌陷\n\n* 在`TreeNode.jsx`组件中有一个比较严重的问题，如上文提到的`EditableTree`的某一层级处于编辑状态时，该层级中的文字展示组件`<span>`会变成输入组件`<input>`，我发现在编辑模式下Antd的`Row/Col`格子布局正常工作，在非编辑模式下由于节点内容从块元素`input`变成了内联元素`span`，格子布局塌陷了，这种情况下即使声明了Col占用的格子数量，内容依旧使用最小宽度展示，即文字占用的宽度。\n\n* 推测原因是Antd的`Row/Col`格子布局自身的问题，没有深究，这边只是将`<span>`元素换成了`<div>`元素，并且在样式中声明`div`占用的最小宽度`min-width`，同时设置`max-width`和`overflow`避免文字元素超出边界。\n\n![tree_in_edit](./tree_in_edit.png)\n\n### V 结语\n---------\n\n其实Tree组件已经不止写过一次了，之前基于`Semantic UI`写过一次，不过因为`Semantic UI`没有Tree的基础实现，所以基本上是完全自己重写的，基本思路其实跟这篇文章写的大致相同，也是递归更新渲染节点，将各个节点的折叠状态放入state进行受控管理，不过这次实现的`EditableTree`最主要一点是分离了`treeModel`的数据管理逻辑，让界面操作层`TreeNode.jsx`、数据管理层`Tree.js`和控制层`index.jsx`完全分离开来，结构明了，后期即使想扩展功能也未尝不可。又是跟`Antd`斗智斗勇的一次😕... \n","source":"_posts/2020-08-28-基于Antd库实现可编辑树组件.md","raw":"---\ntitle: 基于Antd库实现可编辑树组件\ncatalog: true\ntoc_nav_num: true\nheader-img: \"/blogs/img/article_header/article_header.png\"\ndate: 2020-08-28 16:19:59\nsubtitle: \"Antd Editable Tree\"\ntags:\n- antd\n- tree\ncategories:\n- Antd\n- React\n---\n\n### I 前言\n---------\n\n==Antd==是基于Ant Design设计体系的React UI组件库，主要用于研发企业级中后台产品，在前端很多项目中都有使用。除了提供一些比较基础的例如`Button`、`Form`、`Input`、`Modal`、`List`...组件，还有`Tree`、`Upload`、`Table`这几个功能集成度比较高的复杂组件，其中`Tree`组件的应用场景挺多的，在一些涉及显示树形结构数据的功能中可以体现：目录结构展示、族谱关系图...，总之在需要呈现多个父子层级之间结构关系的场景中就可能用到这种Tree组件，Antd虽然官方提供了Tree组件但是它的功能比较有限，定位是主要负责对数据的展示工作，树数据的增删查改这些功能基本没有支持，但是Antd Tree的属性支持比较完善，我们可以基于Antd树来实现支持编辑功能的`EditableTree`组件。\n\n源码：[nojsja/EditableTree](https://github.com/nojsja/react-nojsja/tree/master/components/EditableTree)，克隆整个仓库下来后可以直接运行起来。\n\n已经发布为npm组件，可以直接安装：\n```bash\n$: npm install editable-tree-antd\n# or\n$: yarn add editable-tree-antd\n\n```\n#### 预览\n\n![editable_tree](./editable_tree.png)\n\n### II 功能分析\n-------------\n\n- [x] 非叶子节点的节点名不为空，节点值为空或数组\n- [x] 叶子节点的节点名可为空，节点值不可为空\n- [x] 点击树节点进入节点编辑状态，提交后实现节点数据更新\n- [x] 非叶子节点各层级支持临节点添加/子节点添加/节点删除/节点名和值编辑\n- [x] 叶子节点只支持当前节点删除和当前节点的节点名/节点值编辑\n- [x] 树的各层级的节点名和节点值可否编辑支持配置，默认可编辑\n- [x] 树的各层级的节点是否可删除支持配置，默认可删除\n- [x] 树的层级深度支持属性配置，子节点深度不能超过树的最大深度值，默认为50层子级\n- [x] 新增支持：将一段yaml字符串解析为多个树节点\n\n### III 实现解析\n--------------\n\n基于React / Antd / Mobx\n\n[Antd Tree文档](https://ant.design/components/tree-cn/)\n\n#### 文件结构\n\n--- index.js -- 入口文件，数据初始化、组件生命周期控制、递归调用`TreeNode`进行数据渲染  \n--- Tree.js -- Tree类用于抽象化树形数据的增删查改操作，相当于`Model`层  \n--- lang.js -- 多语言文件  \n--- TreeNode.jsx -- 单层树节点组件，用于隔离每层节点状态显示和操作  \n------- TreeNodeDisplay.jsx -- 非编辑状态下树数据的展示  \n------- TreeNodeNormalEditing.jsx -- 普通节点处于编辑状态下时  \n------- TreeNodeYamlEditing.jsx -- yaml节点处于编辑状态下时  \n------- TreeNodeActions.jsx -- 该层级树节点的所有功能按钮组  \n--- styles / editable-tree.css -- 树样式  \n--- styles / icon-font / *  -- 图标依赖的iconfont文件  \n\n#### 实现原理\n\n* 先来看下Antd原生需要`Tree`数据格式：\n```json\n[\n  {\n    title: 'parent 1',\n    key: '0-0',\n    children: [\n      {\n        title: 'parent 1-0',\n        key: '0-0-0',\n        disabled: true,\n        children: [\n          {\n            title: 'leaf',\n            key: '0-0-0-0',\n            disableCheckbox: true,\n          },\n          {\n            title: 'leaf',\n            key: '0-0-0-1',\n          }\n        ]\n      },\n      {\n        title: 'parent 1-1',\n        key: '0-0-1',\n        children: [{ title: <span style={{ color: '#1890ff' }}>sss</span>, key: '0-0-1-0' }]\n      }\n    ]\n  }\n]\n```\n\n* 每一层级节点除了需要基本的`title`(文字label)、`key`(节点唯一标识)、`children`(子结点列表)属性外，还有其它很多自定义参数比如配置节点是否选中等等，这里就不对其它功能配置项做细研究了，感兴趣可以查看官方文档。  \n\n* 在官方说明中`title`值其实不只是一个字符串，还可以是一个ReactNode，也就是说Antd官方为我们提供了一个树改造的后门，我们可以用自己的渲染逻辑来替换官方的`title`渲染逻辑，所以关键点就是分离这个`title`渲染为一个独立的React组件，在这个组件里我们独立管理每一层级的树节点数据展示，同时又向这个组件暴露操作整个树形数据的方法。另一方面Tree型数据一般都需要使用递归逻辑来进行节点渲染和数据增删查改，这里`TreeNode.js`就是递归渲染的Component对象，而增删查改逻辑我们把它分离到`Tree.js`Model里面进行管理，这样子思路就比较清晰了。\n\n#### 关键点说明：index.js\n\n>入口文件，用于：数据初始化、组件生命周期控制、递归调用`TreeNode`进行数据渲染、加载lang文件等等\n\n* 在生命周期`componentDidMount`中我们初始化一个Tree Model，并设置初始化state数据。\n\n* 在`componentWillReceiveProps`中我们更新这个Model和state以控制界面状态更新，注意使用的Js数据深比较函数`deepComparison`用来避免不必要的数据渲染，数据深比较时要使用与树显示相关的节点属性`裸数据`(见方法`getNudeTreeData`)，比如`nodeName`，`nodeValue`等属性，其它的无关属性比如`id`和`depth`需要忽略。\n\n* `formatNodeData`主要功能是将我们传入的自定义树数据递归 “翻译” 成Antd Tree渲染需要的原生树数据。\n```json\n[\n  {\n    nodeName: '出版者',\n    id: '出版者', // unique id, required\n    nameEditable: true, // is level editable (name), default true\n    valueEditable: true, // is level editable (value), default true\n    nodeDeletable: false, // is level deletable, default true\n    nodeValue: [\n      {\n        nodeName: '出版者描述',\n        isInEdit: true, // is level in edit status\n        id: '出版者描述',\n        nodeValue: [\n          {\n            nodeName: '出版者名称',\n            id: '出版者名称',\n            nodeValue: '出版者A',\n          },\n          {\n            nodeName: '出版者地',\n            id: '出版者地',\n            valueEditable: false,\n            nodeValue: '出版地B1',\n          },\n        ],\n      }\n    ],\n  },\n  ...\n];\n```\n\n* 代码逻辑：\n```js\n...\nclass EditableTree extends Component {\n  state = {\n    treeData: [], // Antd Tree 需要的结构化数据\n    expandedKeys: [], // 将树的节点展开/折叠状态纳入控制\n    maxLevel: 50, ；// 默认最大树深度\n    enableYaml: false,\n    lang: 'zh_CN'\n  };\n  dataOrigin = []\n  treeModel = null\n  key=getRandomString()\n\n  /* 组件挂载后初始化树数据，生成treeModel，更新state */\n  componentDidMount() {\n    const { data, maxLevel = 50, enableYaml, lang=\"zh_CN\" } = this.props;\n\n    if (data) {\n      this.dataOrigin = data;\n      TreeClass.defaultTreeValueWrapper(this.dataOrigin); // 树节点添加默认值\n      TreeClass.levelDepthWrapper(this.dataOrigin); // 添加层级深度属性\n      const formattedData = this.formatTreeData(this.dataOrigin); // 生成格式化后的Antd Tree数据\n      this.updateTreeModel({ data: this.dataOrigin, key: this.key }); // 更新model\n      const keys = TreeClass.getTreeKeys(this.dataOrigin); // 获取各个层级的key，默认展开所有层级\n      this.setState({\n        treeData: formattedData,\n        expandedKeys: keys,\n        enableYaml: !!enableYaml,\n        maxLevel,\n        lang,\n      });\n    }\n  }\n\n  /* 组件props数据更新后更新treeModel和state */\n  componentWillReceiveProps(nextProps) {\n    const { data, maxLevel = 50, enableYaml, lang=\"zh_CN\" } = nextProps;\n    this.setState({ enableYaml: !!enableYaml, lang, maxLevel });\n    // 深比较函数避免不必要的树更新\n    if (\n      !deepComparison(\n          TreeClass.getNudeTreeData(deepClone(this.dataOrigin)),\n          TreeClass.getNudeTreeData(deepClone(data))\n        )\n    ) {\n      this.dataOrigin = data;\n      TreeClass.defaultTreeValueWrapper(this.dataOrigin);\n      TreeClass.levelDepthWrapper(this.dataOrigin);\n      const formattedData = this.formatTreeData(this.dataOrigin);\n      this.updateTreeModel({ data: this.dataOrigin, key: this.key });\n      const keys = TreeClass.getTreeKeys(this.dataOrigin);\n      this.onDataChange(this.dataOrigin); // 触发onChange回调钩子\n      this.setState({\n        treeData: formattedData,\n        expandedKeys: keys\n      });\n    }\n  }\n\n  /* 修改节点 */\n  modifyNode = (key, treeNode) => {\n    const modifiedData = this.treeModel.modifyNode(key, treeNode); // 更新model\n    this.setState({\n      treeData: this.formatTreeData(modifiedData), // 更新state,触发数据回调钩子\n    }, () => this.onDataChange(this.dataOrigin));\n  }\n\n  /**\n   * 以下省略的方法具有跟modifyNode相似的逻辑\n   * 调用treeModel修改数据然后更新state\n   **/\n\n  /* 进入编辑模式 */\n  getInToEditable = (key, treeNode) => { ... }\n  /* 添加一个兄弟节点 */\n  addSisterNode = (key) => { ... }\n  /* 添加一个子结点 */\n  addSubNode = (key) => { ... }\n  /* 移除一个节点 */\n  removeNode = (key) => { ... }\n\n  /* 递归生成树节点数据 */\n  formatNodeData = (treeData) => {\n    let tree = {};\n    const key = `${this.key}_${treeData.id}`;\n    if (treeData.toString() === '[object Object]' && tree !== null) {\n      tree.key = key;\n      treeData.key = key;\n      tree.title = /* 关键点 */\n        (<TreeNode\n          maxLevel={this.maxLevel}\n          focusKey={this.state.focusKey}\n          treeData={treeData}\n          enableYaml={this.state.enableYaml}\n          modifyNode={this.modifyNode}\n          addSisterNode={this.addSisterNode}\n          addExpandedKey={this.addExpandedKey}\n          getInToEditable={this.getInToEditable}\n          addSubNode={this.addSubNode}\n          addNodeFragment={this.addNodeFragment}\n          removeNode={this.removeNode}\n          lang={lang(this.state.lang)}\n        />);\n      if (treeData.nodeValue instanceof Array) tree.children = treeData.nodeValue.map(d => this.formatNodeData(d));\n    } else {\n      tree = '';\n    }\n    return tree;\n  }\n\n  /* 生成树数据 */\n  formatTreeData = (treeData) => {\n    let tree = [];\n    if (treeData instanceof Array) tree = treeData.map(treeNode => this.formatNodeData(treeNode));\n    return tree;\n  }\n\n  /* 更新 tree model */\n  updateTreeModel = (props) => {\n    if (this.treeModel) {\n      this.treeModel.update(props);\n    } else {\n      const _lang = lang(this.state.lang);\n      this.treeModel = new TreeClass(\n        props.data,\n        props.key,\n        {\n          maxLevel: this.state.maxLevel,\n          overLevelTips: _lang.template_tree_max_level_tips,\n          completeEditingNodeTips: _lang.pleaseCompleteTheNodeBeingEdited,\n          addSameLevelTips: _lang.extendedMetadata_same_level_name_cannot_be_added,\n        }\n      );\n    }\n  }\n\n\n  /* 树数据更新钩子，提供给上一层级调用 */\n  onDataChange = (modifiedData) => {\n    const { onDataChange = () => {} } = this.props;\n    onDataChange(modifiedData);\n  }\n\n  ...\n\n  render() {\n    const { treeData } = this.state;\n    return (\n      <div className=\"editable-tree-wrapper\">\n      {\n        (treeData && treeData.length) ?\n          <Tree\n            showLine\n            onExpand={this.onExpand}\n            expandedKeys={this.state.expandedKeys}\n            // defaultExpandedKeys={this.state.expandedKeys}\n            defaultExpandAll\n            treeData={treeData}\n          />\n        : null\n      }\n      </div>\n    );\n  }\n}\n\nEditableTree.propTypes = {\n  data: PropTypes.array.isRequired, // tree data, required\n  onDataChange: PropTypes.func, // data change callback, default none\n  maxLevel: PropTypes.number, // tree max level, default 50\n  lang: PropTypes.string, // lang - zh_CN/en_US, default zh_CN\n  enableYaml: PropTypes.bool // enable it if you want to parse yaml string when adding a new node, default false\n};\n\n```\n\n#### 关键点说明：Tree.js\n\n>Tree类用于抽象化树形数据的增删查改操作，相当于`Model`层\n\n逻辑不算复杂，很多都是递归树数据修改节点，具体代码不予赘述：\n```js\nexport default class Tree {\n  constructor(data, treeKey, {\n    maxLevel,\n    overLevelTips = '已经限制模板树的最大深度为：',\n    addSameLevelTips = '同层级已经有同名节点被添加！',\n    completeEditingNodeTips = '请完善当前正在编辑的节点数据！',\n  }) {\n    this.treeData = data;\n    this.treeKey = treeKey;\n    this.maxLevel = maxLevel;\n    this.overLevelTips = overLevelTips;\n    this.completeEditingNodeTips = completeEditingNodeTips;\n    this.addSameLevelTips = addSameLevelTips;\n  }\n\n  ...\n\n  /* 为输入数据覆盖默认值 */\n  static defaultTreeValueWrapper() { ... }\n\n  /* 查询是否有节点正在编辑 */\n  static findInEdit(items) { ... }\n\n  /* 进入编辑模式 */\n  getInToEditable(key, { nodeName, nodeValue, id, isInEdit } = {}) { ... }\n\n  /* 修改一个节点数据 */\n  modifyNode(key, {\n    nodeName = '', nodeValue = '', nameEditable = true,\n    valueEditable = true, nodeDeletable = true, isInEdit = false,\n  } = {}) { ... }\n\n  /* 添加一个目标节点的兄弟结点 */\n  addSisterNode(key, {\n    nodeName = '', nameEditable = true, valueEditable = true,\n    nodeDeletable = true, isInEdit = true, nodeValue = '',\n  } = {}) { ... }\n\n  /* 添加一个目标节点的子结点 */\n  addSubNode(key, {\n    nodeName = '', nameEditable = true, valueEditable = true,\n    nodeDeletable = true, isInEdit = true, nodeValue = '',\n  } = {}) { ... }\n\n  /* 移除节点 */\n  removeNode(key) { ... }\n\n  /* 获取树数据 */\n  getTreeData() {\n    return deepClone(this.treeData);\n  }\n\n  /* 更新树数据 */\n  update({ data, key }) {\n    this.treeData = data;\n    this.treeKey = key;\n  }\n}\n\n```\n\n#### 关键点说明：TreeNode.jsx\n>表示单个树节点的React组件，以下均为其子组件，用于展示各个状态下的树层级  \n\n* TreeNodeDisplay.jsx -- 非编辑状态下树数据的展示\n\n* TreeNodeNormalEditing.jsx -- 普通节点处于编辑状态下时\n\n* TreeNodeYamlEditing.jsx -- yaml节点处于编辑状态下时\n\n* TreeNodeActions.jsx -- 该层级树节点的所有功能按钮组\n\n每个层级节点都可以添加子节点、添加同级节点、编辑节点名、编辑节点值、删除当前节点(一并删除子节点)，`nameEditable`属性控制节点名是否可编辑，`valueEditable`树形控制节点值是否可编辑，`nodeDeletable`属性控制节点是否可以删除，默认值都是为`true`。  \n\n![tree_add_sister](./tree_add_sister.png)\n\n![tree_add_sub](./tree_add_sub.png)\n\n`isInEdit`属性表明当前节点是否处于编辑状态，处于编辑状态时显示输入框，否则显示文字，当点击文字时当前节点变成编辑状态。\n\n![tree_in_edit](./tree_in_edit.png)\n\n简单的页面展示组件，具体实现见 [源码：TreeNode.jsx](https://github.com/nojsja/react-nojsja/blob/master/components/EditableTree/src/TreeNode.jsx)\n\n### IV 遇到的问题&解决办法\n------------------------------\n\n#### 树数据更新渲染导致的节点折叠状态重置\n\n* 想象我们打开了树的中间某个层级进行节点名编辑，编辑完成后点击提交，树重新渲染刷新，然后之前编辑的节点又重新折叠起来了，我们需要重新打开那个层级看是否编辑成功，这种使用体验无疑是痛苦的。\n\n* 造成树节点折叠状态重置的原因就是树的重新渲染，且这个折叠状态的控制数据并没有暴露到每个TreeNode上，所以在我们自己实现的TreeNode中无法独立控制树节点的折叠/展开。\n\n* 查看官方文档，传入树的`expandedKeys`属性可以显式指定整颗树中需要展开的节点，`expandedKeys`即需要展开节点的key值数组，为了将每个树节点折叠状态变成受控状态，我们将`expandedKeys`存在state或mobx store中，并在树节点折叠状态改变后更新这个值。\n```js\n...\nrender() {\n    const { treeData } = this.state;\n    return (\n      <div className=\"editable-tree-wrapper\">\n      {\n        (treeData && treeData.length) ?\n          <Tree\n            showLine\n            onExpand={this.onExpand}\n            expandedKeys={this.state.expandedKeys}\n            treeData={treeData}\n          />\n        : null\n      }\n      </div>\n    );\n  }\n```\n\n#### Antd格子布局塌陷\n\n* 在`TreeNode.jsx`组件中有一个比较严重的问题，如上文提到的`EditableTree`的某一层级处于编辑状态时，该层级中的文字展示组件`<span>`会变成输入组件`<input>`，我发现在编辑模式下Antd的`Row/Col`格子布局正常工作，在非编辑模式下由于节点内容从块元素`input`变成了内联元素`span`，格子布局塌陷了，这种情况下即使声明了Col占用的格子数量，内容依旧使用最小宽度展示，即文字占用的宽度。\n\n* 推测原因是Antd的`Row/Col`格子布局自身的问题，没有深究，这边只是将`<span>`元素换成了`<div>`元素，并且在样式中声明`div`占用的最小宽度`min-width`，同时设置`max-width`和`overflow`避免文字元素超出边界。\n\n![tree_in_edit](./tree_in_edit.png)\n\n### V 结语\n---------\n\n其实Tree组件已经不止写过一次了，之前基于`Semantic UI`写过一次，不过因为`Semantic UI`没有Tree的基础实现，所以基本上是完全自己重写的，基本思路其实跟这篇文章写的大致相同，也是递归更新渲染节点，将各个节点的折叠状态放入state进行受控管理，不过这次实现的`EditableTree`最主要一点是分离了`treeModel`的数据管理逻辑，让界面操作层`TreeNode.jsx`、数据管理层`Tree.js`和控制层`index.jsx`完全分离开来，结构明了，后期即使想扩展功能也未尝不可。又是跟`Antd`斗智斗勇的一次😕... \n","slug":"基于Antd库实现可编辑树组件","published":1,"updated":"2020-12-21T02:16:14.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmurf001lkl9594og7clm","content":"<h3 id=\"I-前言\">I 前言</h3><hr><p><mark>Antd</mark>是基于Ant Design设计体系的React UI组件库，主要用于研发企业级中后台产品，在前端很多项目中都有使用。除了提供一些比较基础的例如<code>Button</code>、<code>Form</code>、<code>Input</code>、<code>Modal</code>、<code>List</code>…组件，还有<code>Tree</code>、<code>Upload</code>、<code>Table</code>这几个功能集成度比较高的复杂组件，其中<code>Tree</code>组件的应用场景挺多的，在一些涉及显示树形结构数据的功能中可以体现：目录结构展示、族谱关系图…，总之在需要呈现多个父子层级之间结构关系的场景中就可能用到这种Tree组件，Antd虽然官方提供了Tree组件但是它的功能比较有限，定位是主要负责对数据的展示工作，树数据的增删查改这些功能基本没有支持，但是Antd Tree的属性支持比较完善，我们可以基于Antd树来实现支持编辑功能的<code>EditableTree</code>组件。</p><p>源码：<a href=\"https://github.com/nojsja/react-nojsja/tree/master/components/EditableTree\" target=\"_blank\" rel=\"noopener\">nojsja/EditableTree</a>，克隆整个仓库下来后可以直接运行起来。</p><p>已经发布为npm组件，可以直接安装：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: npm install editable-tree-antd</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">$: yarn add editable-tree-antd</span><br></pre></td></tr></table></figure><h4 id=\"预览\">预览</h4><p><img src=\"./editable_tree.png\" alt=\"editable_tree\"></p><h3 id=\"II-功能分析\">II 功能分析</h3><hr><ul class=\"contains-task-list\"><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 非叶子节点的节点名不为空，节点值为空或数组</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 叶子节点的节点名可为空，节点值不可为空</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 点击树节点进入节点编辑状态，提交后实现节点数据更新</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 非叶子节点各层级支持临节点添加/子节点添加/节点删除/节点名和值编辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 叶子节点只支持当前节点删除和当前节点的节点名/节点值编辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 树的各层级的节点名和节点值可否编辑支持配置，默认可编辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 树的各层级的节点是否可删除支持配置，默认可删除</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 树的层级深度支持属性配置，子节点深度不能超过树的最大深度值，默认为50层子级</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 新增支持：将一段yaml字符串解析为多个树节点</label></li></ul><h3 id=\"III-实现解析\">III 实现解析</h3><hr><p>基于React / Antd / Mobx</p><p><a href=\"https://ant.design/components/tree-cn/\" target=\"_blank\" rel=\"noopener\">Antd Tree文档</a></p><h4 id=\"文件结构\">文件结构</h4><p>— index.js – 入口文件，数据初始化、组件生命周期控制、递归调用<code>TreeNode</code>进行数据渲染<br>— Tree.js – Tree类用于抽象化树形数据的增删查改操作，相当于<code>Model</code>层<br>— lang.js – 多语言文件<br>— TreeNode.jsx – 单层树节点组件，用于隔离每层节点状态显示和操作<br>------- TreeNodeDisplay.jsx – 非编辑状态下树数据的展示<br>------- TreeNodeNormalEditing.jsx – 普通节点处于编辑状态下时<br>------- TreeNodeYamlEditing.jsx – yaml节点处于编辑状态下时<br>------- TreeNodeActions.jsx – 该层级树节点的所有功能按钮组<br>— styles / editable-tree.css – 树样式<br>— styles / icon-font / * – 图标依赖的iconfont文件</p><h4 id=\"实现原理\">实现原理</h4><ul><li>先来看下Antd原生需要<code>Tree</code>数据格式：</li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: 'parent 1',</span><br><span class=\"line\">    key: '0-0',</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        title: 'parent 1-0',</span><br><span class=\"line\">        key: '0-0-0',</span><br><span class=\"line\">        disabled: true,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            title: 'leaf',</span><br><span class=\"line\">            key: '0-0-0-0',</span><br><span class=\"line\">            disableCheckbox: true,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            title: 'leaf',</span><br><span class=\"line\">            key: '0-0-0-1',</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        title: 'parent 1-1',</span><br><span class=\"line\">        key: '0-0-1',</span><br><span class=\"line\">        children: [&#123; title: &lt;span style=&#123;&#123; color: '#1890ff' &#125;&#125;&gt;sss&lt;/span&gt;, key: '0-0-1-0' &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><ul><li><p>每一层级节点除了需要基本的<code>title</code>(文字label)、<code>key</code>(节点唯一标识)、<code>children</code>(子结点列表)属性外，还有其它很多自定义参数比如配置节点是否选中等等，这里就不对其它功能配置项做细研究了，感兴趣可以查看官方文档。</p></li><li><p>在官方说明中<code>title</code>值其实不只是一个字符串，还可以是一个ReactNode，也就是说Antd官方为我们提供了一个树改造的后门，我们可以用自己的渲染逻辑来替换官方的<code>title</code>渲染逻辑，所以关键点就是分离这个<code>title</code>渲染为一个独立的React组件，在这个组件里我们独立管理每一层级的树节点数据展示，同时又向这个组件暴露操作整个树形数据的方法。另一方面Tree型数据一般都需要使用递归逻辑来进行节点渲染和数据增删查改，这里<code>TreeNode.js</code>就是递归渲染的Component对象，而增删查改逻辑我们把它分离到<code>Tree.js</code>Model里面进行管理，这样子思路就比较清晰了。</p></li></ul><h4 id=\"关键点说明：index-js\">关键点说明：index.js</h4><blockquote><p>入口文件，用于：数据初始化、组件生命周期控制、递归调用<code>TreeNode</code>进行数据渲染、加载lang文件等等</p></blockquote><ul><li><p>在生命周期<code>componentDidMount</code>中我们初始化一个Tree Model，并设置初始化state数据。</p></li><li><p>在<code>componentWillReceiveProps</code>中我们更新这个Model和state以控制界面状态更新，注意使用的Js数据深比较函数<code>deepComparison</code>用来避免不必要的数据渲染，数据深比较时要使用与树显示相关的节点属性<code>裸数据</code>(见方法<code>getNudeTreeData</code>)，比如<code>nodeName</code>，<code>nodeValue</code>等属性，其它的无关属性比如<code>id</code>和<code>depth</code>需要忽略。</p></li><li><p><code>formatNodeData</code>主要功能是将我们传入的自定义树数据递归 “翻译” 成Antd Tree渲染需要的原生树数据。</p></li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    nodeName: '出版者',</span><br><span class=\"line\">    id: '出版者', // unique id, required</span><br><span class=\"line\">    nameEditable: true, // is level editable (name), default true</span><br><span class=\"line\">    valueEditable: true, // is level editable (value), default true</span><br><span class=\"line\">    nodeDeletable: false, // is level deletable, default true</span><br><span class=\"line\">    nodeValue: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        nodeName: '出版者描述',</span><br><span class=\"line\">        isInEdit: true, // is level in edit status</span><br><span class=\"line\">        id: '出版者描述',</span><br><span class=\"line\">        nodeValue: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            nodeName: '出版者名称',</span><br><span class=\"line\">            id: '出版者名称',</span><br><span class=\"line\">            nodeValue: '出版者A',</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            nodeName: '出版者地',</span><br><span class=\"line\">            id: '出版者地',</span><br><span class=\"line\">            valueEditable: false,</span><br><span class=\"line\">            nodeValue: '出版地B1',</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><ul><li>代码逻辑：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditableTree</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    treeData: [], <span class=\"comment\">// Antd Tree 需要的结构化数据</span></span><br><span class=\"line\">    expandedKeys: [], <span class=\"comment\">// 将树的节点展开/折叠状态纳入控制</span></span><br><span class=\"line\">    maxLevel: <span class=\"number\">50</span>, ；<span class=\"comment\">// 默认最大树深度</span></span><br><span class=\"line\">    enableYaml: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    lang: <span class=\"string\">'zh_CN'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dataOrigin = []</span><br><span class=\"line\">  treeModel = <span class=\"literal\">null</span></span><br><span class=\"line\">  key=getRandomString()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 组件挂载后初始化树数据，生成treeModel，更新state */</span></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, maxLevel = <span class=\"number\">50</span>, enableYaml, lang=<span class=\"string\">\"zh_CN\"</span> &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataOrigin = data;</span><br><span class=\"line\">      TreeClass.defaultTreeValueWrapper(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 树节点添加默认值</span></span><br><span class=\"line\">      TreeClass.levelDepthWrapper(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 添加层级深度属性</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> formattedData = <span class=\"keyword\">this</span>.formatTreeData(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 生成格式化后的Antd Tree数据</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.updateTreeModel(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.dataOrigin, <span class=\"attr\">key</span>: <span class=\"keyword\">this</span>.key &#125;); <span class=\"comment\">// 更新model</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys = TreeClass.getTreeKeys(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 获取各个层级的key，默认展开所有层级</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        treeData: formattedData,</span><br><span class=\"line\">        expandedKeys: keys,</span><br><span class=\"line\">        enableYaml: !!enableYaml,</span><br><span class=\"line\">        maxLevel,</span><br><span class=\"line\">        lang,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 组件props数据更新后更新treeModel和state */</span></span><br><span class=\"line\">  componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, maxLevel = <span class=\"number\">50</span>, enableYaml, lang=<span class=\"string\">\"zh_CN\"</span> &#125; = nextProps;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">enableYaml</span>: !!enableYaml, lang, maxLevel &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 深比较函数避免不必要的树更新</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !deepComparison(</span><br><span class=\"line\">          TreeClass.getNudeTreeData(deepClone(<span class=\"keyword\">this</span>.dataOrigin)),</span><br><span class=\"line\">          TreeClass.getNudeTreeData(deepClone(data))</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataOrigin = data;</span><br><span class=\"line\">      TreeClass.defaultTreeValueWrapper(<span class=\"keyword\">this</span>.dataOrigin);</span><br><span class=\"line\">      TreeClass.levelDepthWrapper(<span class=\"keyword\">this</span>.dataOrigin);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> formattedData = <span class=\"keyword\">this</span>.formatTreeData(<span class=\"keyword\">this</span>.dataOrigin);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.updateTreeModel(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.dataOrigin, <span class=\"attr\">key</span>: <span class=\"keyword\">this</span>.key &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys = TreeClass.getTreeKeys(<span class=\"keyword\">this</span>.dataOrigin);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onDataChange(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 触发onChange回调钩子</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        treeData: formattedData,</span><br><span class=\"line\">        expandedKeys: keys</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 修改节点 */</span></span><br><span class=\"line\">  modifyNode = <span class=\"function\">(<span class=\"params\">key, treeNode</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> modifiedData = <span class=\"keyword\">this</span>.treeModel.modifyNode(key, treeNode); <span class=\"comment\">// 更新model</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      treeData: <span class=\"keyword\">this</span>.formatTreeData(modifiedData), <span class=\"comment\">// 更新state,触发数据回调钩子</span></span><br><span class=\"line\">    &#125;, () =&gt; <span class=\"keyword\">this</span>.onDataChange(<span class=\"keyword\">this</span>.dataOrigin));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 以下省略的方法具有跟modifyNode相似的逻辑</span></span><br><span class=\"line\"><span class=\"comment\">   * 调用treeModel修改数据然后更新state</span></span><br><span class=\"line\"><span class=\"comment\">   **/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 进入编辑模式 */</span></span><br><span class=\"line\">  getInToEditable = <span class=\"function\">(<span class=\"params\">key, treeNode</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 添加一个兄弟节点 */</span></span><br><span class=\"line\">  addSisterNode = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 添加一个子结点 */</span></span><br><span class=\"line\">  addSubNode = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 移除一个节点 */</span></span><br><span class=\"line\">  removeNode = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 递归生成树节点数据 */</span></span><br><span class=\"line\">  formatNodeData = <span class=\"function\">(<span class=\"params\">treeData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tree = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.key&#125;</span>_<span class=\"subst\">$&#123;treeData.id&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeData.toString() === <span class=\"string\">'[object Object]'</span> &amp;&amp; tree !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      tree.key = key;</span><br><span class=\"line\">      treeData.key = key;</span><br><span class=\"line\">      tree.title = <span class=\"comment\">/* 关键点 */</span></span><br><span class=\"line\">        (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TreeNode</span></span></span></span><br><span class=\"line\"><span class=\"xml\">          maxLevel=&#123;this.maxLevel&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          focusKey=&#123;this.state.focusKey&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          treeData=&#123;treeData&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          enableYaml=&#123;this.state.enableYaml&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          modifyNode=&#123;this.modifyNode&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          addSisterNode=&#123;this.addSisterNode&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          addExpandedKey=&#123;this.addExpandedKey&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          getInToEditable=&#123;this.getInToEditable&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          addSubNode=&#123;this.addSubNode&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          addNodeFragment=&#123;this.addNodeFragment&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          removeNode=&#123;this.removeNode&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          lang=&#123;lang(this.state.lang)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (treeData.nodeValue <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) tree.children = treeData.nodeValue.map(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> <span class=\"keyword\">this</span>.formatNodeData(d));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      tree = <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 生成树数据 */</span></span><br><span class=\"line\">  formatTreeData = <span class=\"function\">(<span class=\"params\">treeData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tree = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeData <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) tree = treeData.map(<span class=\"function\"><span class=\"params\">treeNode</span> =&gt;</span> <span class=\"keyword\">this</span>.formatNodeData(treeNode));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 更新 tree model */</span></span><br><span class=\"line\">  updateTreeModel = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.treeModel) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.treeModel.update(props);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _lang = lang(<span class=\"keyword\">this</span>.state.lang);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.treeModel = <span class=\"keyword\">new</span> TreeClass(</span><br><span class=\"line\">        props.data,</span><br><span class=\"line\">        props.key,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          maxLevel: <span class=\"keyword\">this</span>.state.maxLevel,</span><br><span class=\"line\">          overLevelTips: _lang.template_tree_max_level_tips,</span><br><span class=\"line\">          completeEditingNodeTips: _lang.pleaseCompleteTheNodeBeingEdited,</span><br><span class=\"line\">          addSameLevelTips: _lang.extendedMetadata_same_level_name_cannot_be_added,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 树数据更新钩子，提供给上一层级调用 */</span></span><br><span class=\"line\">  onDataChange = <span class=\"function\">(<span class=\"params\">modifiedData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; onDataChange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125; &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    onDataChange(modifiedData);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"editable-tree-wrapper\"</span>&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        (treeData &amp;&amp; treeData.length) ?</span><br><span class=\"line\">          &lt;Tree</span><br><span class=\"line\">            showLine</span><br><span class=\"line\">            onExpand=&#123;<span class=\"keyword\">this</span>.onExpand&#125;</span><br><span class=\"line\">            expandedKeys=&#123;<span class=\"keyword\">this</span>.state.expandedKeys&#125;</span><br><span class=\"line\">            <span class=\"comment\">// defaultExpandedKeys=&#123;this.state.expandedKeys&#125;</span></span><br><span class=\"line\">            defaultExpandAll</span><br><span class=\"line\">            treeData=&#123;treeData&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        : <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">EditableTree.propTypes = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data: PropTypes.array.isRequired, /</span><span class=\"regexp\">/ tree data, required</span></span><br><span class=\"line\"><span class=\"regexp\">  onDataChange: PropTypes.func, /</span><span class=\"regexp\">/ data change callback, default none</span></span><br><span class=\"line\"><span class=\"regexp\">  maxLevel: PropTypes.number, /</span><span class=\"regexp\">/ tree max level, default 50</span></span><br><span class=\"line\"><span class=\"regexp\">  lang: PropTypes.string, /</span><span class=\"regexp\">/ lang - zh_CN/</span>en_US, <span class=\"keyword\">default</span> zh_CN</span><br><span class=\"line\">  enableYaml: PropTypes.bool <span class=\"comment\">// enable it if you want to parse yaml string when adding a new node, default false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"关键点说明：Tree-js\">关键点说明：Tree.js</h4><blockquote><p>Tree类用于抽象化树形数据的增删查改操作，相当于<code>Model</code>层</p></blockquote><p>逻辑不算复杂，很多都是递归树数据修改节点，具体代码不予赘述：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(data, treeKey, &#123;</span><br><span class=\"line\">    maxLevel,</span><br><span class=\"line\">    overLevelTips = <span class=\"string\">'已经限制模板树的最大深度为：'</span>,</span><br><span class=\"line\">    addSameLevelTips = <span class=\"string\">'同层级已经有同名节点被添加！'</span>,</span><br><span class=\"line\">    completeEditingNodeTips = <span class=\"string\">'请完善当前正在编辑的节点数据！'</span>,</span><br><span class=\"line\">  &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeData = data;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeKey = treeKey;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxLevel = maxLevel;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.overLevelTips = overLevelTips;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.completeEditingNodeTips = completeEditingNodeTips;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addSameLevelTips = addSameLevelTips;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 为输入数据覆盖默认值 */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultTreeValueWrapper() &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 查询是否有节点正在编辑 */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> findInEdit(items) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 进入编辑模式 */</span></span><br><span class=\"line\">  getInToEditable(key, &#123; nodeName, nodeValue, id, isInEdit &#125; = &#123;&#125;) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 修改一个节点数据 */</span></span><br><span class=\"line\">  modifyNode(key, &#123;</span><br><span class=\"line\">    nodeName = <span class=\"string\">''</span>, nodeValue = <span class=\"string\">''</span>, nameEditable = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    valueEditable = <span class=\"literal\">true</span>, nodeDeletable = <span class=\"literal\">true</span>, isInEdit = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125; = &#123;&#125;) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 添加一个目标节点的兄弟结点 */</span></span><br><span class=\"line\">  addSisterNode(key, &#123;</span><br><span class=\"line\">    nodeName = <span class=\"string\">''</span>, nameEditable = <span class=\"literal\">true</span>, valueEditable = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    nodeDeletable = <span class=\"literal\">true</span>, isInEdit = <span class=\"literal\">true</span>, nodeValue = <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125; = &#123;&#125;) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 添加一个目标节点的子结点 */</span></span><br><span class=\"line\">  addSubNode(key, &#123;</span><br><span class=\"line\">    nodeName = <span class=\"string\">''</span>, nameEditable = <span class=\"literal\">true</span>, valueEditable = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    nodeDeletable = <span class=\"literal\">true</span>, isInEdit = <span class=\"literal\">true</span>, nodeValue = <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125; = &#123;&#125;) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 移除节点 */</span></span><br><span class=\"line\">  removeNode(key) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 获取树数据 */</span></span><br><span class=\"line\">  getTreeData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deepClone(<span class=\"keyword\">this</span>.treeData);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 更新树数据 */</span></span><br><span class=\"line\">  update(&#123; data, key &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeData = data;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeKey = key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"关键点说明：TreeNode-jsx\">关键点说明：TreeNode.jsx</h4><blockquote><p>表示单个树节点的React组件，以下均为其子组件，用于展示各个状态下的树层级</p></blockquote><ul><li><p>TreeNodeDisplay.jsx – 非编辑状态下树数据的展示</p></li><li><p>TreeNodeNormalEditing.jsx – 普通节点处于编辑状态下时</p></li><li><p>TreeNodeYamlEditing.jsx – yaml节点处于编辑状态下时</p></li><li><p>TreeNodeActions.jsx – 该层级树节点的所有功能按钮组</p></li></ul><p>每个层级节点都可以添加子节点、添加同级节点、编辑节点名、编辑节点值、删除当前节点(一并删除子节点)，<code>nameEditable</code>属性控制节点名是否可编辑，<code>valueEditable</code>树形控制节点值是否可编辑，<code>nodeDeletable</code>属性控制节点是否可以删除，默认值都是为<code>true</code>。</p><p><img src=\"./tree_add_sister.png\" alt=\"tree_add_sister\"></p><p><img src=\"./tree_add_sub.png\" alt=\"tree_add_sub\"></p><p><code>isInEdit</code>属性表明当前节点是否处于编辑状态，处于编辑状态时显示输入框，否则显示文字，当点击文字时当前节点变成编辑状态。</p><p><img src=\"./tree_in_edit.png\" alt=\"tree_in_edit\"></p><p>简单的页面展示组件，具体实现见 <a href=\"https://github.com/nojsja/react-nojsja/blob/master/components/EditableTree/src/TreeNode.jsx\" target=\"_blank\" rel=\"noopener\">源码：TreeNode.jsx</a></p><h3 id=\"IV-遇到的问题-解决办法\">IV 遇到的问题&amp;解决办法</h3><hr><h4 id=\"树数据更新渲染导致的节点折叠状态重置\">树数据更新渲染导致的节点折叠状态重置</h4><ul><li><p>想象我们打开了树的中间某个层级进行节点名编辑，编辑完成后点击提交，树重新渲染刷新，然后之前编辑的节点又重新折叠起来了，我们需要重新打开那个层级看是否编辑成功，这种使用体验无疑是痛苦的。</p></li><li><p>造成树节点折叠状态重置的原因就是树的重新渲染，且这个折叠状态的控制数据并没有暴露到每个TreeNode上，所以在我们自己实现的TreeNode中无法独立控制树节点的折叠/展开。</p></li><li><p>查看官方文档，传入树的<code>expandedKeys</code>属性可以显式指定整颗树中需要展开的节点，<code>expandedKeys</code>即需要展开节点的key值数组，为了将每个树节点折叠状态变成受控状态，我们将<code>expandedKeys</code>存在state或mobx store中，并在树节点折叠状态改变后更新这个值。</p></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"editable-tree-wrapper\"</span>&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        (treeData &amp;&amp; treeData.length) ?</span><br><span class=\"line\">          &lt;Tree</span><br><span class=\"line\">            showLine</span><br><span class=\"line\">            onExpand=&#123;<span class=\"keyword\">this</span>.onExpand&#125;</span><br><span class=\"line\">            expandedKeys=&#123;<span class=\"keyword\">this</span>.state.expandedKeys&#125;</span><br><span class=\"line\">            treeData=&#123;treeData&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        : <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure><h4 id=\"Antd格子布局塌陷\">Antd格子布局塌陷</h4><ul><li><p>在<code>TreeNode.jsx</code>组件中有一个比较严重的问题，如上文提到的<code>EditableTree</code>的某一层级处于编辑状态时，该层级中的文字展示组件<code>&lt;span&gt;</code>会变成输入组件<code>&lt;input&gt;</code>，我发现在编辑模式下Antd的<code>Row/Col</code>格子布局正常工作，在非编辑模式下由于节点内容从块元素<code>input</code>变成了内联元素<code>span</code>，格子布局塌陷了，这种情况下即使声明了Col占用的格子数量，内容依旧使用最小宽度展示，即文字占用的宽度。</p></li><li><p>推测原因是Antd的<code>Row/Col</code>格子布局自身的问题，没有深究，这边只是将<code>&lt;span&gt;</code>元素换成了<code>&lt;div&gt;</code>元素，并且在样式中声明<code>div</code>占用的最小宽度<code>min-width</code>，同时设置<code>max-width</code>和<code>overflow</code>避免文字元素超出边界。</p></li></ul><p><img src=\"./tree_in_edit.png\" alt=\"tree_in_edit\"></p><h3 id=\"V-结语\">V 结语</h3><hr><p>其实Tree组件已经不止写过一次了，之前基于<code>Semantic UI</code>写过一次，不过因为<code>Semantic UI</code>没有Tree的基础实现，所以基本上是完全自己重写的，基本思路其实跟这篇文章写的大致相同，也是递归更新渲染节点，将各个节点的折叠状态放入state进行受控管理，不过这次实现的<code>EditableTree</code>最主要一点是分离了<code>treeModel</code>的数据管理逻辑，让界面操作层<code>TreeNode.jsx</code>、数据管理层<code>Tree.js</code>和控制层<code>index.jsx</code>完全分离开来，结构明了，后期即使想扩展功能也未尝不可。又是跟<code>Antd</code>斗智斗勇的一次😕…</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"I-前言\">I 前言</h3><hr><p><mark>Antd</mark>是基于Ant Design设计体系的React UI组件库，主要用于研发企业级中后台产品，在前端很多项目中都有使用。除了提供一些比较基础的例如<code>Button</code>、<code>Form</code>、<code>Input</code>、<code>Modal</code>、<code>List</code>…组件，还有<code>Tree</code>、<code>Upload</code>、<code>Table</code>这几个功能集成度比较高的复杂组件，其中<code>Tree</code>组件的应用场景挺多的，在一些涉及显示树形结构数据的功能中可以体现：目录结构展示、族谱关系图…，总之在需要呈现多个父子层级之间结构关系的场景中就可能用到这种Tree组件，Antd虽然官方提供了Tree组件但是它的功能比较有限，定位是主要负责对数据的展示工作，树数据的增删查改这些功能基本没有支持，但是Antd Tree的属性支持比较完善，我们可以基于Antd树来实现支持编辑功能的<code>EditableTree</code>组件。</p><p>源码：<a href=\"https://github.com/nojsja/react-nojsja/tree/master/components/EditableTree\" target=\"_blank\" rel=\"noopener\">nojsja/EditableTree</a>，克隆整个仓库下来后可以直接运行起来。</p><p>已经发布为npm组件，可以直接安装：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: npm install editable-tree-antd</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">$: yarn add editable-tree-antd</span><br></pre></td></tr></table></figure><h4 id=\"预览\">预览</h4><p><img src=\"./editable_tree.png\" alt=\"editable_tree\"></p><h3 id=\"II-功能分析\">II 功能分析</h3><hr><ul class=\"contains-task-list\"><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 非叶子节点的节点名不为空，节点值为空或数组</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 叶子节点的节点名可为空，节点值不可为空</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 点击树节点进入节点编辑状态，提交后实现节点数据更新</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 非叶子节点各层级支持临节点添加/子节点添加/节点删除/节点名和值编辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 叶子节点只支持当前节点删除和当前节点的节点名/节点值编辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 树的各层级的节点名和节点值可否编辑支持配置，默认可编辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 树的各层级的节点是否可删除支持配置，默认可删除</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 树的层级深度支持属性配置，子节点深度不能超过树的最大深度值，默认为50层子级</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 新增支持：将一段yaml字符串解析为多个树节点</label></li></ul><h3 id=\"III-实现解析\">III 实现解析</h3><hr><p>基于React / Antd / Mobx</p><p><a href=\"https://ant.design/components/tree-cn/\" target=\"_blank\" rel=\"noopener\">Antd Tree文档</a></p><h4 id=\"文件结构\">文件结构</h4><p>— index.js – 入口文件，数据初始化、组件生命周期控制、递归调用<code>TreeNode</code>进行数据渲染<br>— Tree.js – Tree类用于抽象化树形数据的增删查改操作，相当于<code>Model</code>层<br>— lang.js – 多语言文件<br>— TreeNode.jsx – 单层树节点组件，用于隔离每层节点状态显示和操作<br>------- TreeNodeDisplay.jsx – 非编辑状态下树数据的展示<br>------- TreeNodeNormalEditing.jsx – 普通节点处于编辑状态下时<br>------- TreeNodeYamlEditing.jsx – yaml节点处于编辑状态下时<br>------- TreeNodeActions.jsx – 该层级树节点的所有功能按钮组<br>— styles / editable-tree.css – 树样式<br>— styles / icon-font / * – 图标依赖的iconfont文件</p><h4 id=\"实现原理\">实现原理</h4><ul><li>先来看下Antd原生需要<code>Tree</code>数据格式：</li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: 'parent 1',</span><br><span class=\"line\">    key: '0-0',</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        title: 'parent 1-0',</span><br><span class=\"line\">        key: '0-0-0',</span><br><span class=\"line\">        disabled: true,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            title: 'leaf',</span><br><span class=\"line\">            key: '0-0-0-0',</span><br><span class=\"line\">            disableCheckbox: true,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            title: 'leaf',</span><br><span class=\"line\">            key: '0-0-0-1',</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        title: 'parent 1-1',</span><br><span class=\"line\">        key: '0-0-1',</span><br><span class=\"line\">        children: [&#123; title: &lt;span style=&#123;&#123; color: '#1890ff' &#125;&#125;&gt;sss&lt;/span&gt;, key: '0-0-1-0' &#125;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><ul><li><p>每一层级节点除了需要基本的<code>title</code>(文字label)、<code>key</code>(节点唯一标识)、<code>children</code>(子结点列表)属性外，还有其它很多自定义参数比如配置节点是否选中等等，这里就不对其它功能配置项做细研究了，感兴趣可以查看官方文档。</p></li><li><p>在官方说明中<code>title</code>值其实不只是一个字符串，还可以是一个ReactNode，也就是说Antd官方为我们提供了一个树改造的后门，我们可以用自己的渲染逻辑来替换官方的<code>title</code>渲染逻辑，所以关键点就是分离这个<code>title</code>渲染为一个独立的React组件，在这个组件里我们独立管理每一层级的树节点数据展示，同时又向这个组件暴露操作整个树形数据的方法。另一方面Tree型数据一般都需要使用递归逻辑来进行节点渲染和数据增删查改，这里<code>TreeNode.js</code>就是递归渲染的Component对象，而增删查改逻辑我们把它分离到<code>Tree.js</code>Model里面进行管理，这样子思路就比较清晰了。</p></li></ul><h4 id=\"关键点说明：index-js\">关键点说明：index.js</h4><blockquote><p>入口文件，用于：数据初始化、组件生命周期控制、递归调用<code>TreeNode</code>进行数据渲染、加载lang文件等等</p></blockquote><ul><li><p>在生命周期<code>componentDidMount</code>中我们初始化一个Tree Model，并设置初始化state数据。</p></li><li><p>在<code>componentWillReceiveProps</code>中我们更新这个Model和state以控制界面状态更新，注意使用的Js数据深比较函数<code>deepComparison</code>用来避免不必要的数据渲染，数据深比较时要使用与树显示相关的节点属性<code>裸数据</code>(见方法<code>getNudeTreeData</code>)，比如<code>nodeName</code>，<code>nodeValue</code>等属性，其它的无关属性比如<code>id</code>和<code>depth</code>需要忽略。</p></li><li><p><code>formatNodeData</code>主要功能是将我们传入的自定义树数据递归 “翻译” 成Antd Tree渲染需要的原生树数据。</p></li></ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    nodeName: '出版者',</span><br><span class=\"line\">    id: '出版者', // unique id, required</span><br><span class=\"line\">    nameEditable: true, // is level editable (name), default true</span><br><span class=\"line\">    valueEditable: true, // is level editable (value), default true</span><br><span class=\"line\">    nodeDeletable: false, // is level deletable, default true</span><br><span class=\"line\">    nodeValue: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        nodeName: '出版者描述',</span><br><span class=\"line\">        isInEdit: true, // is level in edit status</span><br><span class=\"line\">        id: '出版者描述',</span><br><span class=\"line\">        nodeValue: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            nodeName: '出版者名称',</span><br><span class=\"line\">            id: '出版者名称',</span><br><span class=\"line\">            nodeValue: '出版者A',</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            nodeName: '出版者地',</span><br><span class=\"line\">            id: '出版者地',</span><br><span class=\"line\">            valueEditable: false,</span><br><span class=\"line\">            nodeValue: '出版地B1',</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure><ul><li>代码逻辑：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EditableTree</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    treeData: [], <span class=\"comment\">// Antd Tree 需要的结构化数据</span></span><br><span class=\"line\">    expandedKeys: [], <span class=\"comment\">// 将树的节点展开/折叠状态纳入控制</span></span><br><span class=\"line\">    maxLevel: <span class=\"number\">50</span>, ；<span class=\"comment\">// 默认最大树深度</span></span><br><span class=\"line\">    enableYaml: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    lang: <span class=\"string\">'zh_CN'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dataOrigin = []</span><br><span class=\"line\">  treeModel = <span class=\"literal\">null</span></span><br><span class=\"line\">  key=getRandomString()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 组件挂载后初始化树数据，生成treeModel，更新state */</span></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, maxLevel = <span class=\"number\">50</span>, enableYaml, lang=<span class=\"string\">\"zh_CN\"</span> &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataOrigin = data;</span><br><span class=\"line\">      TreeClass.defaultTreeValueWrapper(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 树节点添加默认值</span></span><br><span class=\"line\">      TreeClass.levelDepthWrapper(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 添加层级深度属性</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> formattedData = <span class=\"keyword\">this</span>.formatTreeData(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 生成格式化后的Antd Tree数据</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.updateTreeModel(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.dataOrigin, <span class=\"attr\">key</span>: <span class=\"keyword\">this</span>.key &#125;); <span class=\"comment\">// 更新model</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys = TreeClass.getTreeKeys(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 获取各个层级的key，默认展开所有层级</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        treeData: formattedData,</span><br><span class=\"line\">        expandedKeys: keys,</span><br><span class=\"line\">        enableYaml: !!enableYaml,</span><br><span class=\"line\">        maxLevel,</span><br><span class=\"line\">        lang,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 组件props数据更新后更新treeModel和state */</span></span><br><span class=\"line\">  componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data, maxLevel = <span class=\"number\">50</span>, enableYaml, lang=<span class=\"string\">\"zh_CN\"</span> &#125; = nextProps;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">enableYaml</span>: !!enableYaml, lang, maxLevel &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 深比较函数避免不必要的树更新</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !deepComparison(</span><br><span class=\"line\">          TreeClass.getNudeTreeData(deepClone(<span class=\"keyword\">this</span>.dataOrigin)),</span><br><span class=\"line\">          TreeClass.getNudeTreeData(deepClone(data))</span><br><span class=\"line\">        )</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataOrigin = data;</span><br><span class=\"line\">      TreeClass.defaultTreeValueWrapper(<span class=\"keyword\">this</span>.dataOrigin);</span><br><span class=\"line\">      TreeClass.levelDepthWrapper(<span class=\"keyword\">this</span>.dataOrigin);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> formattedData = <span class=\"keyword\">this</span>.formatTreeData(<span class=\"keyword\">this</span>.dataOrigin);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.updateTreeModel(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.dataOrigin, <span class=\"attr\">key</span>: <span class=\"keyword\">this</span>.key &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys = TreeClass.getTreeKeys(<span class=\"keyword\">this</span>.dataOrigin);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.onDataChange(<span class=\"keyword\">this</span>.dataOrigin); <span class=\"comment\">// 触发onChange回调钩子</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">        treeData: formattedData,</span><br><span class=\"line\">        expandedKeys: keys</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 修改节点 */</span></span><br><span class=\"line\">  modifyNode = <span class=\"function\">(<span class=\"params\">key, treeNode</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> modifiedData = <span class=\"keyword\">this</span>.treeModel.modifyNode(key, treeNode); <span class=\"comment\">// 更新model</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      treeData: <span class=\"keyword\">this</span>.formatTreeData(modifiedData), <span class=\"comment\">// 更新state,触发数据回调钩子</span></span><br><span class=\"line\">    &#125;, () =&gt; <span class=\"keyword\">this</span>.onDataChange(<span class=\"keyword\">this</span>.dataOrigin));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 以下省略的方法具有跟modifyNode相似的逻辑</span></span><br><span class=\"line\"><span class=\"comment\">   * 调用treeModel修改数据然后更新state</span></span><br><span class=\"line\"><span class=\"comment\">   **/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 进入编辑模式 */</span></span><br><span class=\"line\">  getInToEditable = <span class=\"function\">(<span class=\"params\">key, treeNode</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 添加一个兄弟节点 */</span></span><br><span class=\"line\">  addSisterNode = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 添加一个子结点 */</span></span><br><span class=\"line\">  addSubNode = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 移除一个节点 */</span></span><br><span class=\"line\">  removeNode = <span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 递归生成树节点数据 */</span></span><br><span class=\"line\">  formatNodeData = <span class=\"function\">(<span class=\"params\">treeData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tree = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.key&#125;</span>_<span class=\"subst\">$&#123;treeData.id&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeData.toString() === <span class=\"string\">'[object Object]'</span> &amp;&amp; tree !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      tree.key = key;</span><br><span class=\"line\">      treeData.key = key;</span><br><span class=\"line\">      tree.title = <span class=\"comment\">/* 关键点 */</span></span><br><span class=\"line\">        (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TreeNode</span></span></span></span><br><span class=\"line\"><span class=\"xml\">          maxLevel=&#123;this.maxLevel&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          focusKey=&#123;this.state.focusKey&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          treeData=&#123;treeData&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          enableYaml=&#123;this.state.enableYaml&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          modifyNode=&#123;this.modifyNode&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          addSisterNode=&#123;this.addSisterNode&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          addExpandedKey=&#123;this.addExpandedKey&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          getInToEditable=&#123;this.getInToEditable&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          addSubNode=&#123;this.addSubNode&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          addNodeFragment=&#123;this.addNodeFragment&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          removeNode=&#123;this.removeNode&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          lang=&#123;lang(this.state.lang)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (treeData.nodeValue <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) tree.children = treeData.nodeValue.map(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> <span class=\"keyword\">this</span>.formatNodeData(d));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      tree = <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 生成树数据 */</span></span><br><span class=\"line\">  formatTreeData = <span class=\"function\">(<span class=\"params\">treeData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tree = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (treeData <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>) tree = treeData.map(<span class=\"function\"><span class=\"params\">treeNode</span> =&gt;</span> <span class=\"keyword\">this</span>.formatNodeData(treeNode));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 更新 tree model */</span></span><br><span class=\"line\">  updateTreeModel = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.treeModel) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.treeModel.update(props);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> _lang = lang(<span class=\"keyword\">this</span>.state.lang);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.treeModel = <span class=\"keyword\">new</span> TreeClass(</span><br><span class=\"line\">        props.data,</span><br><span class=\"line\">        props.key,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          maxLevel: <span class=\"keyword\">this</span>.state.maxLevel,</span><br><span class=\"line\">          overLevelTips: _lang.template_tree_max_level_tips,</span><br><span class=\"line\">          completeEditingNodeTips: _lang.pleaseCompleteTheNodeBeingEdited,</span><br><span class=\"line\">          addSameLevelTips: _lang.extendedMetadata_same_level_name_cannot_be_added,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 树数据更新钩子，提供给上一层级调用 */</span></span><br><span class=\"line\">  onDataChange = <span class=\"function\">(<span class=\"params\">modifiedData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; onDataChange = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125; &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    onDataChange(modifiedData);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"editable-tree-wrapper\"</span>&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        (treeData &amp;&amp; treeData.length) ?</span><br><span class=\"line\">          &lt;Tree</span><br><span class=\"line\">            showLine</span><br><span class=\"line\">            onExpand=&#123;<span class=\"keyword\">this</span>.onExpand&#125;</span><br><span class=\"line\">            expandedKeys=&#123;<span class=\"keyword\">this</span>.state.expandedKeys&#125;</span><br><span class=\"line\">            <span class=\"comment\">// defaultExpandedKeys=&#123;this.state.expandedKeys&#125;</span></span><br><span class=\"line\">            defaultExpandAll</span><br><span class=\"line\">            treeData=&#123;treeData&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        : <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">EditableTree.propTypes = &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  data: PropTypes.array.isRequired, /</span><span class=\"regexp\">/ tree data, required</span></span><br><span class=\"line\"><span class=\"regexp\">  onDataChange: PropTypes.func, /</span><span class=\"regexp\">/ data change callback, default none</span></span><br><span class=\"line\"><span class=\"regexp\">  maxLevel: PropTypes.number, /</span><span class=\"regexp\">/ tree max level, default 50</span></span><br><span class=\"line\"><span class=\"regexp\">  lang: PropTypes.string, /</span><span class=\"regexp\">/ lang - zh_CN/</span>en_US, <span class=\"keyword\">default</span> zh_CN</span><br><span class=\"line\">  enableYaml: PropTypes.bool <span class=\"comment\">// enable it if you want to parse yaml string when adding a new node, default false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"关键点说明：Tree-js\">关键点说明：Tree.js</h4><blockquote><p>Tree类用于抽象化树形数据的增删查改操作，相当于<code>Model</code>层</p></blockquote><p>逻辑不算复杂，很多都是递归树数据修改节点，具体代码不予赘述：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(data, treeKey, &#123;</span><br><span class=\"line\">    maxLevel,</span><br><span class=\"line\">    overLevelTips = <span class=\"string\">'已经限制模板树的最大深度为：'</span>,</span><br><span class=\"line\">    addSameLevelTips = <span class=\"string\">'同层级已经有同名节点被添加！'</span>,</span><br><span class=\"line\">    completeEditingNodeTips = <span class=\"string\">'请完善当前正在编辑的节点数据！'</span>,</span><br><span class=\"line\">  &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeData = data;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeKey = treeKey;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxLevel = maxLevel;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.overLevelTips = overLevelTips;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.completeEditingNodeTips = completeEditingNodeTips;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addSameLevelTips = addSameLevelTips;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 为输入数据覆盖默认值 */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> defaultTreeValueWrapper() &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 查询是否有节点正在编辑 */</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> findInEdit(items) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 进入编辑模式 */</span></span><br><span class=\"line\">  getInToEditable(key, &#123; nodeName, nodeValue, id, isInEdit &#125; = &#123;&#125;) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 修改一个节点数据 */</span></span><br><span class=\"line\">  modifyNode(key, &#123;</span><br><span class=\"line\">    nodeName = <span class=\"string\">''</span>, nodeValue = <span class=\"string\">''</span>, nameEditable = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    valueEditable = <span class=\"literal\">true</span>, nodeDeletable = <span class=\"literal\">true</span>, isInEdit = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125; = &#123;&#125;) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 添加一个目标节点的兄弟结点 */</span></span><br><span class=\"line\">  addSisterNode(key, &#123;</span><br><span class=\"line\">    nodeName = <span class=\"string\">''</span>, nameEditable = <span class=\"literal\">true</span>, valueEditable = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    nodeDeletable = <span class=\"literal\">true</span>, isInEdit = <span class=\"literal\">true</span>, nodeValue = <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125; = &#123;&#125;) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 添加一个目标节点的子结点 */</span></span><br><span class=\"line\">  addSubNode(key, &#123;</span><br><span class=\"line\">    nodeName = <span class=\"string\">''</span>, nameEditable = <span class=\"literal\">true</span>, valueEditable = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    nodeDeletable = <span class=\"literal\">true</span>, isInEdit = <span class=\"literal\">true</span>, nodeValue = <span class=\"string\">''</span>,</span><br><span class=\"line\">  &#125; = &#123;&#125;) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 移除节点 */</span></span><br><span class=\"line\">  removeNode(key) &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 获取树数据 */</span></span><br><span class=\"line\">  getTreeData() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deepClone(<span class=\"keyword\">this</span>.treeData);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 更新树数据 */</span></span><br><span class=\"line\">  update(&#123; data, key &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeData = data;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.treeKey = key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"关键点说明：TreeNode-jsx\">关键点说明：TreeNode.jsx</h4><blockquote><p>表示单个树节点的React组件，以下均为其子组件，用于展示各个状态下的树层级</p></blockquote><ul><li><p>TreeNodeDisplay.jsx – 非编辑状态下树数据的展示</p></li><li><p>TreeNodeNormalEditing.jsx – 普通节点处于编辑状态下时</p></li><li><p>TreeNodeYamlEditing.jsx – yaml节点处于编辑状态下时</p></li><li><p>TreeNodeActions.jsx – 该层级树节点的所有功能按钮组</p></li></ul><p>每个层级节点都可以添加子节点、添加同级节点、编辑节点名、编辑节点值、删除当前节点(一并删除子节点)，<code>nameEditable</code>属性控制节点名是否可编辑，<code>valueEditable</code>树形控制节点值是否可编辑，<code>nodeDeletable</code>属性控制节点是否可以删除，默认值都是为<code>true</code>。</p><p><img src=\"./tree_add_sister.png\" alt=\"tree_add_sister\"></p><p><img src=\"./tree_add_sub.png\" alt=\"tree_add_sub\"></p><p><code>isInEdit</code>属性表明当前节点是否处于编辑状态，处于编辑状态时显示输入框，否则显示文字，当点击文字时当前节点变成编辑状态。</p><p><img src=\"./tree_in_edit.png\" alt=\"tree_in_edit\"></p><p>简单的页面展示组件，具体实现见 <a href=\"https://github.com/nojsja/react-nojsja/blob/master/components/EditableTree/src/TreeNode.jsx\" target=\"_blank\" rel=\"noopener\">源码：TreeNode.jsx</a></p><h3 id=\"IV-遇到的问题-解决办法\">IV 遇到的问题&amp;解决办法</h3><hr><h4 id=\"树数据更新渲染导致的节点折叠状态重置\">树数据更新渲染导致的节点折叠状态重置</h4><ul><li><p>想象我们打开了树的中间某个层级进行节点名编辑，编辑完成后点击提交，树重新渲染刷新，然后之前编辑的节点又重新折叠起来了，我们需要重新打开那个层级看是否编辑成功，这种使用体验无疑是痛苦的。</p></li><li><p>造成树节点折叠状态重置的原因就是树的重新渲染，且这个折叠状态的控制数据并没有暴露到每个TreeNode上，所以在我们自己实现的TreeNode中无法独立控制树节点的折叠/展开。</p></li><li><p>查看官方文档，传入树的<code>expandedKeys</code>属性可以显式指定整颗树中需要展开的节点，<code>expandedKeys</code>即需要展开节点的key值数组，为了将每个树节点折叠状态变成受控状态，我们将<code>expandedKeys</code>存在state或mobx store中，并在树节点折叠状态改变后更新这个值。</p></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=<span class=\"string\">\"editable-tree-wrapper\"</span>&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        (treeData &amp;&amp; treeData.length) ?</span><br><span class=\"line\">          &lt;Tree</span><br><span class=\"line\">            showLine</span><br><span class=\"line\">            onExpand=&#123;<span class=\"keyword\">this</span>.onExpand&#125;</span><br><span class=\"line\">            expandedKeys=&#123;<span class=\"keyword\">this</span>.state.expandedKeys&#125;</span><br><span class=\"line\">            treeData=&#123;treeData&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        : <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br></pre></td></tr></table></figure><h4 id=\"Antd格子布局塌陷\">Antd格子布局塌陷</h4><ul><li><p>在<code>TreeNode.jsx</code>组件中有一个比较严重的问题，如上文提到的<code>EditableTree</code>的某一层级处于编辑状态时，该层级中的文字展示组件<code>&lt;span&gt;</code>会变成输入组件<code>&lt;input&gt;</code>，我发现在编辑模式下Antd的<code>Row/Col</code>格子布局正常工作，在非编辑模式下由于节点内容从块元素<code>input</code>变成了内联元素<code>span</code>，格子布局塌陷了，这种情况下即使声明了Col占用的格子数量，内容依旧使用最小宽度展示，即文字占用的宽度。</p></li><li><p>推测原因是Antd的<code>Row/Col</code>格子布局自身的问题，没有深究，这边只是将<code>&lt;span&gt;</code>元素换成了<code>&lt;div&gt;</code>元素，并且在样式中声明<code>div</code>占用的最小宽度<code>min-width</code>，同时设置<code>max-width</code>和<code>overflow</code>避免文字元素超出边界。</p></li></ul><p><img src=\"./tree_in_edit.png\" alt=\"tree_in_edit\"></p><h3 id=\"V-结语\">V 结语</h3><hr><p>其实Tree组件已经不止写过一次了，之前基于<code>Semantic UI</code>写过一次，不过因为<code>Semantic UI</code>没有Tree的基础实现，所以基本上是完全自己重写的，基本思路其实跟这篇文章写的大致相同，也是递归更新渲染节点，将各个节点的折叠状态放入state进行受控管理，不过这次实现的<code>EditableTree</code>最主要一点是分离了<code>treeModel</code>的数据管理逻辑，让界面操作层<code>TreeNode.jsx</code>、数据管理层<code>Tree.js</code>和控制层<code>index.jsx</code>完全分离开来，结构明了，后期即使想扩展功能也未尝不可。又是跟<code>Antd</code>斗智斗勇的一次😕…</p>"},{"title":"基于deepin-wine在Ubuntu20.04上安装新版微信","catalog":true,"header-img":"/blogs/img/article_header/article_header.png","top":false,"toc_nav_num":true,"updateDate":"2020-10-23T06:49:56.000Z","subtitle":"wechat on ubuntu20.04","_content":"\n#### 预览\n\n![wechat3.0](wechat3.0.png)\n\n> 操作系统：ubuntu 20.04.1 LTS (Kernel: 5.4.0-47-generic )\n\n> 支持微信(2.9.5+)以及3.0版本\n\n#### 运行`deepin-wine-depends.sh`安装依赖\n```bash\n#!/bin/bash\nmkdir /tmp/deepintemp\ncd /tmp/deepintemp\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine_2.18-19_all.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine32_2.18-19_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine32-preloader_2.18-19_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-helper/deepin-wine-helper_1.2deepin8_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-plugin/deepin-wine-plugin_1.0deepin2_amd64.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-plugin-virtual/deepin-wine-plugin-virtual_1.0deepin3_all.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-uninstaller/deepin-wine-uninstaller_0.1deepin2_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/u/udis86/udis86_1.72-2_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-fonts-wine_2.18-19_all.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-libwine_2.18-19_i386.deb\nwget https://mirrors.aliyun.com/deepin/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.5.1-2_amd64.deb\nwget https://mirrors.aliyun.com/deepin/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.5.1-2_i386.deb\n\necho '准备添加32位支持'\nsudo dpkg --add-architecture i386\necho '添加成功，准备刷新apt缓存信息...'\nsudo apt update\necho '即将开始安装...'\nsudo dpkg -i *.deb\necho '安装完成，正在自动安装依赖...'\nsudo apt install -fy\n\nrm -vfr /tmp/deepintemp\n```\n\n#### 安装deepin-wine环境\n\n下载 https://community-packages.deepin.com/deepin/pool/main/d/deepin-wine5/ 里几个deb，并安装 (备用下载链接: https://pan.baidu.com/s/1aENeezzyRrxW_b5U5e0s8w  密码: t2cr)\n\n#### 建立软链接\n```bash\n$: sudo ln -s  /usr/lib/i386-linux-gnu/deepin-wine5/wine* /usr/bin/ -f\n```\n\n#### 建立32位的wine环境\n\n* 创建WINEPREFIX\n```bash\n$: WINEARCH=win32 WINEPREFIX=~/.wine wine wineboot\n```\n\n* 安装winetricks图形工具安装`msls31 msxml6 riched20 riched30 ole32`等dll依赖，`msxml6`下载失败时亦可手动安装：\n```bash\n$: wget -P /tmp https://download.microsoft.com/download/e/a/f/eafb8ee7-667d-4e30-bb39-4694b5b3006f/msxml6_x86.msi\n$: wine msiexec /i /tmp/msxml6_x86.msi\n```\n\n#### 安装新版微信 2.9.5+\n```bash\n$: wine WechatSetup.exe\n```\n\n#### 解决字体问题  \n从 windows 中系统盘所在的位置 `C:\\windows\\Fonts` 中拷贝全部的字体，\n将拷贝的字体数据放在 ubuntu 系统中 `~/.wine/drive_c/windows/Fonts 中`.\n\n#### 配置wineconfig  \n\n终端运行`winecfg`，选择`Windows 版本：Windows 7`\n\n#### 创建应用程序列表启动图标  \n\n* 创建Wechat启动脚本`wechat`，内容如下：\n```bash\n#!/bin/bash\nLC_ALL=zh_CN.UTF-8 wine /home/nojsja/.wine/drive_c/Program\\ Files/Tencent/WeChat/WeChat.exe > $&\n```\n\n* 同文件夹放入`wechat.png`作为图标\n\n* 使用[makeIconLink](https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/application/makeIconLink)脚本创建启动图标，使用帮助`bash makeIconLink --help`，相关命令如下：\n```bash\n$: sudo makeIconLink --directory /home/nojsja/software/wechat --icon wechat.png --target wechat\n```\n\n微信安装后使用正常，能发图片(之前的方法装新版会有大图片发不出去，一直转圈的问题)、文件，阴影框也不见了，剪贴板也好用了(可直接粘贴图片、url)\n","source":"_posts/2020-10-23-基于deepin-wine在Ubuntu20-04上安装新版微信.md","raw":"---\ntitle: 基于deepin-wine在Ubuntu20.04上安装新版微信\ncatalog: true\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntop: false\ntoc_nav_num: true\nupdateDate: 2020-10-23 14:49:56\nsubtitle: \"wechat on ubuntu20.04\"\ntags:\n- ubuntu20.04\ncategories:\n- Linux\n---\n\n#### 预览\n\n![wechat3.0](wechat3.0.png)\n\n> 操作系统：ubuntu 20.04.1 LTS (Kernel: 5.4.0-47-generic )\n\n> 支持微信(2.9.5+)以及3.0版本\n\n#### 运行`deepin-wine-depends.sh`安装依赖\n```bash\n#!/bin/bash\nmkdir /tmp/deepintemp\ncd /tmp/deepintemp\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine_2.18-19_all.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine32_2.18-19_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine32-preloader_2.18-19_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-helper/deepin-wine-helper_1.2deepin8_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-plugin/deepin-wine-plugin_1.0deepin2_amd64.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-plugin-virtual/deepin-wine-plugin-virtual_1.0deepin3_all.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-uninstaller/deepin-wine-uninstaller_0.1deepin2_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/u/udis86/udis86_1.72-2_i386.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-fonts-wine_2.18-19_all.deb\nwget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-libwine_2.18-19_i386.deb\nwget https://mirrors.aliyun.com/deepin/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.5.1-2_amd64.deb\nwget https://mirrors.aliyun.com/deepin/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.5.1-2_i386.deb\n\necho '准备添加32位支持'\nsudo dpkg --add-architecture i386\necho '添加成功，准备刷新apt缓存信息...'\nsudo apt update\necho '即将开始安装...'\nsudo dpkg -i *.deb\necho '安装完成，正在自动安装依赖...'\nsudo apt install -fy\n\nrm -vfr /tmp/deepintemp\n```\n\n#### 安装deepin-wine环境\n\n下载 https://community-packages.deepin.com/deepin/pool/main/d/deepin-wine5/ 里几个deb，并安装 (备用下载链接: https://pan.baidu.com/s/1aENeezzyRrxW_b5U5e0s8w  密码: t2cr)\n\n#### 建立软链接\n```bash\n$: sudo ln -s  /usr/lib/i386-linux-gnu/deepin-wine5/wine* /usr/bin/ -f\n```\n\n#### 建立32位的wine环境\n\n* 创建WINEPREFIX\n```bash\n$: WINEARCH=win32 WINEPREFIX=~/.wine wine wineboot\n```\n\n* 安装winetricks图形工具安装`msls31 msxml6 riched20 riched30 ole32`等dll依赖，`msxml6`下载失败时亦可手动安装：\n```bash\n$: wget -P /tmp https://download.microsoft.com/download/e/a/f/eafb8ee7-667d-4e30-bb39-4694b5b3006f/msxml6_x86.msi\n$: wine msiexec /i /tmp/msxml6_x86.msi\n```\n\n#### 安装新版微信 2.9.5+\n```bash\n$: wine WechatSetup.exe\n```\n\n#### 解决字体问题  \n从 windows 中系统盘所在的位置 `C:\\windows\\Fonts` 中拷贝全部的字体，\n将拷贝的字体数据放在 ubuntu 系统中 `~/.wine/drive_c/windows/Fonts 中`.\n\n#### 配置wineconfig  \n\n终端运行`winecfg`，选择`Windows 版本：Windows 7`\n\n#### 创建应用程序列表启动图标  \n\n* 创建Wechat启动脚本`wechat`，内容如下：\n```bash\n#!/bin/bash\nLC_ALL=zh_CN.UTF-8 wine /home/nojsja/.wine/drive_c/Program\\ Files/Tencent/WeChat/WeChat.exe > $&\n```\n\n* 同文件夹放入`wechat.png`作为图标\n\n* 使用[makeIconLink](https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/application/makeIconLink)脚本创建启动图标，使用帮助`bash makeIconLink --help`，相关命令如下：\n```bash\n$: sudo makeIconLink --directory /home/nojsja/software/wechat --icon wechat.png --target wechat\n```\n\n微信安装后使用正常，能发图片(之前的方法装新版会有大图片发不出去，一直转圈的问题)、文件，阴影框也不见了，剪贴板也好用了(可直接粘贴图片、url)\n","slug":"基于deepin-wine在Ubuntu20-04上安装新版微信","published":1,"date":"2020-10-22T16:00:00.000Z","updated":"2020-12-06T10:54:03.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmurg001okl95726p988q","content":"<h4 id=\"预览\">预览</h4><p><img src=\"wechat3.0.png\" alt=\"wechat3.0\"></p><blockquote><p>操作系统：ubuntu 20.04.1 LTS (Kernel: 5.4.0-47-generic )</p></blockquote><blockquote><p>支持微信(2.9.5+)以及3.0版本</p></blockquote><h4 id=\"运行deepin-wine-depends-sh安装依赖\">运行<code>deepin-wine-depends.sh</code>安装依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">mkdir /tmp/deepintemp</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/deepintemp</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine_2.18-19_all.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine32_2.18-19_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine32-preloader_2.18-19_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-helper/deepin-wine-helper_1.2deepin8_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-plugin/deepin-wine-plugin_1.0deepin2_amd64.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-plugin-virtual/deepin-wine-plugin-virtual_1.0deepin3_all.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-uninstaller/deepin-wine-uninstaller_0.1deepin2_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/u/udis86/udis86_1.72-2_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-fonts-wine_2.18-19_all.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-libwine_2.18-19_i386.deb</span><br><span class=\"line\">wget https://mirrors.aliyun.com/deepin/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.5.1-2_amd64.deb</span><br><span class=\"line\">wget https://mirrors.aliyun.com/deepin/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.5.1-2_i386.deb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'准备添加32位支持'</span></span><br><span class=\"line\">sudo dpkg --add-architecture i386</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'添加成功，准备刷新apt缓存信息...'</span></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'即将开始安装...'</span></span><br><span class=\"line\">sudo dpkg -i *.deb</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'安装完成，正在自动安装依赖...'</span></span><br><span class=\"line\">sudo apt install -fy</span><br><span class=\"line\"></span><br><span class=\"line\">rm -vfr /tmp/deepintemp</span><br></pre></td></tr></table></figure><h4 id=\"安装deepin-wine环境\">安装deepin-wine环境</h4><p>下载 <a href=\"https://community-packages.deepin.com/deepin/pool/main/d/deepin-wine5/\" target=\"_blank\" rel=\"noopener\">https://community-packages.deepin.com/deepin/pool/main/d/deepin-wine5/</a> 里几个deb，并安装 (备用下载链接: <a href=\"https://pan.baidu.com/s/1aENeezzyRrxW_b5U5e0s8w\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1aENeezzyRrxW_b5U5e0s8w</a> 密码: t2cr)</p><h4 id=\"建立软链接\">建立软链接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo ln -s  /usr/lib/i386-linux-gnu/deepin-wine5/wine* /usr/bin/ -f</span><br></pre></td></tr></table></figure><h4 id=\"建立32位的wine环境\">建立32位的wine环境</h4><ul><li>创建WINEPREFIX</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: WINEARCH=win32 WINEPREFIX=~/.wine wine wineboot</span><br></pre></td></tr></table></figure><ul><li>安装winetricks图形工具安装<code>msls31 msxml6 riched20 riched30 ole32</code>等dll依赖，<code>msxml6</code>下载失败时亦可手动安装：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: wget -P /tmp https://download.microsoft.com/download/e/a/f/eafb8ee7-667d-4e30-bb39-4694b5b3006f/msxml6_x86.msi</span><br><span class=\"line\">$: wine msiexec /i /tmp/msxml6_x86.msi</span><br></pre></td></tr></table></figure><h4 id=\"安装新版微信-2-9-5\">安装新版微信 2.9.5+</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: wine WechatSetup.exe</span><br></pre></td></tr></table></figure><h4 id=\"解决字体问题\">解决字体问题</h4><p>从 windows 中系统盘所在的位置 <code>C:\\windows\\Fonts</code> 中拷贝全部的字体，<br>将拷贝的字体数据放在 ubuntu 系统中 <code>~/.wine/drive_c/windows/Fonts 中</code>.</p><h4 id=\"配置wineconfig\">配置wineconfig</h4><p>终端运行<code>winecfg</code>，选择<code>Windows 版本：Windows 7</code></p><h4 id=\"创建应用程序列表启动图标\">创建应用程序列表启动图标</h4><ul><li>创建Wechat启动脚本<code>wechat</code>，内容如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">LC_ALL=zh_CN.UTF-8 wine /home/nojsja/.wine/drive_c/Program\\ Files/Tencent/WeChat/WeChat.exe &gt; $&amp;</span><br></pre></td></tr></table></figure><ul><li><p>同文件夹放入<code>wechat.png</code>作为图标</p></li><li><p>使用<a href=\"https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/application/makeIconLink\" target=\"_blank\" rel=\"noopener\">makeIconLink</a>脚本创建启动图标，使用帮助<code>bash makeIconLink --help</code>，相关命令如下：</p></li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo makeIconLink --directory /home/nojsja/software/wechat --icon wechat.png --target wechat</span><br></pre></td></tr></table></figure><p>微信安装后使用正常，能发图片(之前的方法装新版会有大图片发不出去，一直转圈的问题)、文件，阴影框也不见了，剪贴板也好用了(可直接粘贴图片、url)</p>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"预览\">预览</h4><p><img src=\"wechat3.0.png\" alt=\"wechat3.0\"></p><blockquote><p>操作系统：ubuntu 20.04.1 LTS (Kernel: 5.4.0-47-generic )</p></blockquote><blockquote><p>支持微信(2.9.5+)以及3.0版本</p></blockquote><h4 id=\"运行deepin-wine-depends-sh安装依赖\">运行<code>deepin-wine-depends.sh</code>安装依赖</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">mkdir /tmp/deepintemp</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /tmp/deepintemp</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine_2.18-19_all.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine32_2.18-19_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-wine32-preloader_2.18-19_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-helper/deepin-wine-helper_1.2deepin8_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-plugin/deepin-wine-plugin_1.0deepin2_amd64.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-plugin-virtual/deepin-wine-plugin-virtual_1.0deepin3_all.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine-uninstaller/deepin-wine-uninstaller_0.1deepin2_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/u/udis86/udis86_1.72-2_i386.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-fonts-wine_2.18-19_all.deb</span><br><span class=\"line\">wget http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin-wine/deepin-libwine_2.18-19_i386.deb</span><br><span class=\"line\">wget https://mirrors.aliyun.com/deepin/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.5.1-2_amd64.deb</span><br><span class=\"line\">wget https://mirrors.aliyun.com/deepin/pool/main/libj/libjpeg-turbo/libjpeg62-turbo_1.5.1-2_i386.deb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'准备添加32位支持'</span></span><br><span class=\"line\">sudo dpkg --add-architecture i386</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'添加成功，准备刷新apt缓存信息...'</span></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'即将开始安装...'</span></span><br><span class=\"line\">sudo dpkg -i *.deb</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'安装完成，正在自动安装依赖...'</span></span><br><span class=\"line\">sudo apt install -fy</span><br><span class=\"line\"></span><br><span class=\"line\">rm -vfr /tmp/deepintemp</span><br></pre></td></tr></table></figure><h4 id=\"安装deepin-wine环境\">安装deepin-wine环境</h4><p>下载 <a href=\"https://community-packages.deepin.com/deepin/pool/main/d/deepin-wine5/\" target=\"_blank\" rel=\"noopener\">https://community-packages.deepin.com/deepin/pool/main/d/deepin-wine5/</a> 里几个deb，并安装 (备用下载链接: <a href=\"https://pan.baidu.com/s/1aENeezzyRrxW_b5U5e0s8w\" target=\"_blank\" rel=\"noopener\">https://pan.baidu.com/s/1aENeezzyRrxW_b5U5e0s8w</a> 密码: t2cr)</p><h4 id=\"建立软链接\">建立软链接</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo ln -s  /usr/lib/i386-linux-gnu/deepin-wine5/wine* /usr/bin/ -f</span><br></pre></td></tr></table></figure><h4 id=\"建立32位的wine环境\">建立32位的wine环境</h4><ul><li>创建WINEPREFIX</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: WINEARCH=win32 WINEPREFIX=~/.wine wine wineboot</span><br></pre></td></tr></table></figure><ul><li>安装winetricks图形工具安装<code>msls31 msxml6 riched20 riched30 ole32</code>等dll依赖，<code>msxml6</code>下载失败时亦可手动安装：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: wget -P /tmp https://download.microsoft.com/download/e/a/f/eafb8ee7-667d-4e30-bb39-4694b5b3006f/msxml6_x86.msi</span><br><span class=\"line\">$: wine msiexec /i /tmp/msxml6_x86.msi</span><br></pre></td></tr></table></figure><h4 id=\"安装新版微信-2-9-5\">安装新版微信 2.9.5+</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: wine WechatSetup.exe</span><br></pre></td></tr></table></figure><h4 id=\"解决字体问题\">解决字体问题</h4><p>从 windows 中系统盘所在的位置 <code>C:\\windows\\Fonts</code> 中拷贝全部的字体，<br>将拷贝的字体数据放在 ubuntu 系统中 <code>~/.wine/drive_c/windows/Fonts 中</code>.</p><h4 id=\"配置wineconfig\">配置wineconfig</h4><p>终端运行<code>winecfg</code>，选择<code>Windows 版本：Windows 7</code></p><h4 id=\"创建应用程序列表启动图标\">创建应用程序列表启动图标</h4><ul><li>创建Wechat启动脚本<code>wechat</code>，内容如下：</li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">LC_ALL=zh_CN.UTF-8 wine /home/nojsja/.wine/drive_c/Program\\ Files/Tencent/WeChat/WeChat.exe &gt; $&amp;</span><br></pre></td></tr></table></figure><ul><li><p>同文件夹放入<code>wechat.png</code>作为图标</p></li><li><p>使用<a href=\"https://github.com/nojsja/maintenance/blob/master/code/shell/desktop/application/makeIconLink\" target=\"_blank\" rel=\"noopener\">makeIconLink</a>脚本创建启动图标，使用帮助<code>bash makeIconLink --help</code>，相关命令如下：</p></li></ul><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: sudo makeIconLink --directory /home/nojsja/software/wechat --icon wechat.png --target wechat</span><br></pre></td></tr></table></figure><p>微信安装后使用正常，能发图片(之前的方法装新版会有大图片发不出去，一直转圈的问题)、文件，阴影框也不见了，剪贴板也好用了(可直接粘贴图片、url)</p>"},{"title":"LeetCode探险记：递归和栈","catalog":true,"header-img":"/blogs/img/article_header/article_header.png","top":false,"toc_nav_num":true,"updateDate":"2020-10-25T13:59:37.000Z","subtitle":"dynamic programming, stack and backtracking","_content":"\n### 前言\n-------\n最近刷LeetCode，遇到一个题目感觉挺有意思：\n```\n描述:\n  给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。\n\n  示例 1:\n    输入: \"(()\"\n    输出: 2\n    解释: 最长有效括号子串为 \"()\"\n\n  示例 2:\n    输入: \")()())\"\n    输出: 4\n    解释: 最长有效括号子串为 \"()()\"\n```\n\n题目中让求解一串字符中所有含`有效括号子串`的最大长度，所谓有效括号示例中没说明完全，其实还有一种情况就是`(())()`括号相互包含以及并列的情况。\n\n刚开始看到题目也是有点蒙，因为似乎不能用一般的`穷解法`来进行抽象(穷解法最佳代表：冒泡排序和选择排序，23333)，俗话说的好，遇事不绝穷举法！(其实算法优化也可以看作是让计算机以更快的时间拿到所有符合规范的结果，广义上的穷举)，这可咋个搞？\n\n最后使用了`递归`和`栈`两种方法来解决。\n\n### 解题思路1：递归\n-------------------------\n\n#### 递归的概念\n一种便于理解的心理模型是认为递归定义对对象的定义是按照“先前定义的”同类对象来定义的。例如：你怎样才能移动100个箱子？答案：你首先移动一个箱子，并记下它移动到的位置，然后再去解决较小的问题：你怎样才能移动99个箱子？最终，你的问题将变为怎样移动一个箱子，而这时你已经知道该怎么做的。\n\n\n斐波那契函数属于典型的递归问题：\n```js\nfunction fn(n) {\n  if (n == 0 || n == 1)\n    return n\n  \n  return fn(n-1) + fn(n-2)\n}\n```\n#### 题目分析\n\n1. 求解所有包含有效括号子串时可以从最短有效括号\"()\"开始然后同时从左括号和右括号开始自底向上往两边匹配字符串，每一次匹配之后判断有没有相邻有效括号字串，如果有就合并两个子串\n2. 由于无法预知所有匹配情况，在每次子串向外扩张匹配和合并子串时，都需要进行再次判断，需要对所有可能的子问题进行递归处理求解\n\n#### 题解图示\n\n![动态规划](drawio-1.png)\n\n#### 题解算法\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nfunction longestValidParentheses(s) {\n  var matchArray = [];\n  var done = false;\n  var i = 0;\n  var maxLength = 0;\n\n  /* 获取所有()的位置索引 */\n  for (i; i < s.length - 1; i++) {\n    if (s[i] === '(' && s[i + 1] === ')') {\n      matchArray.push([i, i + 1]);\n      i++;\n    }\n  }\n  \n  /* 合并相邻有效括号数组 */\n  var doConcat = function() {\n    var find = false;\n    for (i = 0; i < matchArray.length - 1; i++) {\n      if (matchArray[i][matchArray[i].length - 1] + 1 === matchArray[i + 1][0]) {\n        find = true;\n        matchArray[i] = matchArray[i].concat(matchArray[i + 1]);\n        matchArray.splice(i + 1, 1);\n        i--;\n      }\n    }\n    if (find) doConcat();\n  };\n\n  while(!done) {\n    doConcat();\n    done = true;\n    matchArray.map(function(item) {\n      // 经匹配括号从内至外扩张合并新的有效括号\n      if (s[item[0] - 1] === '(' && s[item[item.length - 1] + 1] === ')') {\n        item.unshift(item[0] - 1);\n        item.push(item[item.length - 1] + 1);\n        done = false;\n      }\n      maxLength = Math.max(item.length, maxLength);\n    });\n  }\n\n  return maxLength;\n};\n```\n\n### 解题思路2：栈和回溯\n-------------------\n\n#### 栈的概念\n\n堆栈的基本特点：\n- 先入后出，后入先出的数据结构。\n- 除头尾节点之外，每个元素有一个前驱，一个后继。\n\n#### 题目分析\n\n1. 确定限制条件  \n一个`有效括号`子串至少需要包含左括号和右括号两个字符'()'，且多个有效括号具有`包含关系`或`相邻关系`\n\n2. 分析限制条件  \n分析条件，`相邻关系`很好判断，只要第`n`个括号和第`n+1`个括号能匹配就满足了，已经满足匹配的字符对可以从回溯范围中去掉(剪枝)。`包含关系`诸如'((()))'这种，其实可以借助栈这种数据后入先出的存储结构，先存储连续的'('，当尝试访问的下一个字符与栈顶字符'('满足匹配关系时，将栈顶字符弹出，以便判断接下来的字符与栈顶字符的匹配情况。\n\n3. 减少查找路径  \n在左到右搜索整个字符串的过程中，我们需要存储已经搜索过的字符，因为无法预知接下来未遍历的字符的匹配情况。但我们是不是需要存储所有已经遍历过的字符呢？不是，只需要存储`接下来可能形成匹配结构`的已遍历字符，不具有形成可匹配字符可能性的字符会被过滤掉，比如如果第一个字符是')'，那么之后无论出现哪种括号，都无法与这个字符形成有效匹配字符了，所以这个字符就需要过滤掉。\n\n4. 确定回溯范围  \n以上第2点提到的用于存储已经遍历过的字符存储结构即为回溯范围，且这个回溯范围动态变化。\n\n5. 确定回退点  \n向右搜索选择时如果下一个字符与栈顶字符存在有效括号匹配，那么表明我们已经找到另一个匹配情况但是还可能找到更多匹配情况，所以需要回退回到上一个点(下图中执行`stack2.pop()`)，回退时根据记录的字符索引计算当前已经`连续匹配`的有效括号字符的长度，最后记录有效括号字符长度的最大值即可。\n\n#### 题解图示\n\n* stack1 -- 栈1用于存储所有遍历过的并且存在匹配可能性的左括号(回溯范围)\n* stack2 -- 栈2用于存储所有栈顶字符的'索引值-1'\n* 红色方块 -- 连续有效字符匹配中断的情况\n* 绿色方块 -- 向回溯范围中存入的各个可回溯点\n* 蓝色方块 -- 执行回溯\n* MAX -- 有效括号字符长度的最大值\n\n![动态规划](drawio-2.png)\n\n#### 题解算法\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nfunction longestValidParentheses(s) {\n  var indexArray = [-1]; //动态存储左括号索引值，\n  var maxLength = 0;\n  var stack = []; // 栈存储已经遍历的左括号索引\n  var i = 0; // 头指针\n\n  for (i; i < s.length; i++) {\n    if (s[i] === '(') {\n      stack.push(i);\n    } else {\n      if (stack.length) {\n        // 括号匹配的情况从栈顶弹出\n        tmp = stack.pop();\n        // 索引数组同步弹出(至少保留一个索引)\n        if (indexArray.length > 1) indexArray.pop();\n        // 栈不为空，则将栈顶索引(尾指针)存入索引数组以便之后回溯计算最大字符串长度\n        if (stack.length) indexArray.push(stack[stack.length - 1]);\n        maxLength = Math.max(maxLength, i - indexArray[indexArray.length - 1]);\n      } else {\n        // 首个匹配到的字符为')'的非法情况，重置尾指针\n        indexArray = [i];\n      }\n    }\n  }\n\n  return maxLength;\n};\n```\n\n### 结语\n-------\n\n本题中虽然栈的解法图示很长，但是相比递归解法，时间和内存消耗都更少，时间复杂度O(n)，空间复杂度为O(2n)。","source":"_posts/2020-10-25-LeetCode探险记：动态规划、栈和回溯.md","raw":"---\ntitle: LeetCode探险记：递归和栈\ncatalog: true\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntop: false\ntoc_nav_num: true\nupdateDate: 2020-10-25 21:59:37\nsubtitle: \"dynamic programming, stack and backtracking\"\ntags:\n- leetcode\ncategories:\n- Javascript\n---\n\n### 前言\n-------\n最近刷LeetCode，遇到一个题目感觉挺有意思：\n```\n描述:\n  给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。\n\n  示例 1:\n    输入: \"(()\"\n    输出: 2\n    解释: 最长有效括号子串为 \"()\"\n\n  示例 2:\n    输入: \")()())\"\n    输出: 4\n    解释: 最长有效括号子串为 \"()()\"\n```\n\n题目中让求解一串字符中所有含`有效括号子串`的最大长度，所谓有效括号示例中没说明完全，其实还有一种情况就是`(())()`括号相互包含以及并列的情况。\n\n刚开始看到题目也是有点蒙，因为似乎不能用一般的`穷解法`来进行抽象(穷解法最佳代表：冒泡排序和选择排序，23333)，俗话说的好，遇事不绝穷举法！(其实算法优化也可以看作是让计算机以更快的时间拿到所有符合规范的结果，广义上的穷举)，这可咋个搞？\n\n最后使用了`递归`和`栈`两种方法来解决。\n\n### 解题思路1：递归\n-------------------------\n\n#### 递归的概念\n一种便于理解的心理模型是认为递归定义对对象的定义是按照“先前定义的”同类对象来定义的。例如：你怎样才能移动100个箱子？答案：你首先移动一个箱子，并记下它移动到的位置，然后再去解决较小的问题：你怎样才能移动99个箱子？最终，你的问题将变为怎样移动一个箱子，而这时你已经知道该怎么做的。\n\n\n斐波那契函数属于典型的递归问题：\n```js\nfunction fn(n) {\n  if (n == 0 || n == 1)\n    return n\n  \n  return fn(n-1) + fn(n-2)\n}\n```\n#### 题目分析\n\n1. 求解所有包含有效括号子串时可以从最短有效括号\"()\"开始然后同时从左括号和右括号开始自底向上往两边匹配字符串，每一次匹配之后判断有没有相邻有效括号字串，如果有就合并两个子串\n2. 由于无法预知所有匹配情况，在每次子串向外扩张匹配和合并子串时，都需要进行再次判断，需要对所有可能的子问题进行递归处理求解\n\n#### 题解图示\n\n![动态规划](drawio-1.png)\n\n#### 题解算法\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nfunction longestValidParentheses(s) {\n  var matchArray = [];\n  var done = false;\n  var i = 0;\n  var maxLength = 0;\n\n  /* 获取所有()的位置索引 */\n  for (i; i < s.length - 1; i++) {\n    if (s[i] === '(' && s[i + 1] === ')') {\n      matchArray.push([i, i + 1]);\n      i++;\n    }\n  }\n  \n  /* 合并相邻有效括号数组 */\n  var doConcat = function() {\n    var find = false;\n    for (i = 0; i < matchArray.length - 1; i++) {\n      if (matchArray[i][matchArray[i].length - 1] + 1 === matchArray[i + 1][0]) {\n        find = true;\n        matchArray[i] = matchArray[i].concat(matchArray[i + 1]);\n        matchArray.splice(i + 1, 1);\n        i--;\n      }\n    }\n    if (find) doConcat();\n  };\n\n  while(!done) {\n    doConcat();\n    done = true;\n    matchArray.map(function(item) {\n      // 经匹配括号从内至外扩张合并新的有效括号\n      if (s[item[0] - 1] === '(' && s[item[item.length - 1] + 1] === ')') {\n        item.unshift(item[0] - 1);\n        item.push(item[item.length - 1] + 1);\n        done = false;\n      }\n      maxLength = Math.max(item.length, maxLength);\n    });\n  }\n\n  return maxLength;\n};\n```\n\n### 解题思路2：栈和回溯\n-------------------\n\n#### 栈的概念\n\n堆栈的基本特点：\n- 先入后出，后入先出的数据结构。\n- 除头尾节点之外，每个元素有一个前驱，一个后继。\n\n#### 题目分析\n\n1. 确定限制条件  \n一个`有效括号`子串至少需要包含左括号和右括号两个字符'()'，且多个有效括号具有`包含关系`或`相邻关系`\n\n2. 分析限制条件  \n分析条件，`相邻关系`很好判断，只要第`n`个括号和第`n+1`个括号能匹配就满足了，已经满足匹配的字符对可以从回溯范围中去掉(剪枝)。`包含关系`诸如'((()))'这种，其实可以借助栈这种数据后入先出的存储结构，先存储连续的'('，当尝试访问的下一个字符与栈顶字符'('满足匹配关系时，将栈顶字符弹出，以便判断接下来的字符与栈顶字符的匹配情况。\n\n3. 减少查找路径  \n在左到右搜索整个字符串的过程中，我们需要存储已经搜索过的字符，因为无法预知接下来未遍历的字符的匹配情况。但我们是不是需要存储所有已经遍历过的字符呢？不是，只需要存储`接下来可能形成匹配结构`的已遍历字符，不具有形成可匹配字符可能性的字符会被过滤掉，比如如果第一个字符是')'，那么之后无论出现哪种括号，都无法与这个字符形成有效匹配字符了，所以这个字符就需要过滤掉。\n\n4. 确定回溯范围  \n以上第2点提到的用于存储已经遍历过的字符存储结构即为回溯范围，且这个回溯范围动态变化。\n\n5. 确定回退点  \n向右搜索选择时如果下一个字符与栈顶字符存在有效括号匹配，那么表明我们已经找到另一个匹配情况但是还可能找到更多匹配情况，所以需要回退回到上一个点(下图中执行`stack2.pop()`)，回退时根据记录的字符索引计算当前已经`连续匹配`的有效括号字符的长度，最后记录有效括号字符长度的最大值即可。\n\n#### 题解图示\n\n* stack1 -- 栈1用于存储所有遍历过的并且存在匹配可能性的左括号(回溯范围)\n* stack2 -- 栈2用于存储所有栈顶字符的'索引值-1'\n* 红色方块 -- 连续有效字符匹配中断的情况\n* 绿色方块 -- 向回溯范围中存入的各个可回溯点\n* 蓝色方块 -- 执行回溯\n* MAX -- 有效括号字符长度的最大值\n\n![动态规划](drawio-2.png)\n\n#### 题解算法\n\n```js\n/**\n * @param {string} s\n * @return {number}\n */\nfunction longestValidParentheses(s) {\n  var indexArray = [-1]; //动态存储左括号索引值，\n  var maxLength = 0;\n  var stack = []; // 栈存储已经遍历的左括号索引\n  var i = 0; // 头指针\n\n  for (i; i < s.length; i++) {\n    if (s[i] === '(') {\n      stack.push(i);\n    } else {\n      if (stack.length) {\n        // 括号匹配的情况从栈顶弹出\n        tmp = stack.pop();\n        // 索引数组同步弹出(至少保留一个索引)\n        if (indexArray.length > 1) indexArray.pop();\n        // 栈不为空，则将栈顶索引(尾指针)存入索引数组以便之后回溯计算最大字符串长度\n        if (stack.length) indexArray.push(stack[stack.length - 1]);\n        maxLength = Math.max(maxLength, i - indexArray[indexArray.length - 1]);\n      } else {\n        // 首个匹配到的字符为')'的非法情况，重置尾指针\n        indexArray = [i];\n      }\n    }\n  }\n\n  return maxLength;\n};\n```\n\n### 结语\n-------\n\n本题中虽然栈的解法图示很长，但是相比递归解法，时间和内存消耗都更少，时间复杂度O(n)，空间复杂度为O(2n)。","slug":"LeetCode探险记：动态规划、栈和回溯","published":1,"date":"2020-10-24T16:00:00.000Z","updated":"2021-02-02T05:29:24.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmurh001rkl950jswd9m8","content":"<h3 id=\"前言\">前言</h3><hr><p>最近刷LeetCode，遇到一个题目感觉挺有意思：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">描述:</span><br><span class=\"line\">  给定一个只包含 &#39;(&#39; 和 &#39;)&#39; 的字符串，找出最长的包含有效括号的子串的长度。</span><br><span class=\"line\"></span><br><span class=\"line\">  示例 1:</span><br><span class=\"line\">    输入: &quot;(()&quot;</span><br><span class=\"line\">    输出: 2</span><br><span class=\"line\">    解释: 最长有效括号子串为 &quot;()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  示例 2:</span><br><span class=\"line\">    输入: &quot;)()())&quot;</span><br><span class=\"line\">    输出: 4</span><br><span class=\"line\">    解释: 最长有效括号子串为 &quot;()()&quot;</span><br></pre></td></tr></table></figure><p>题目中让求解一串字符中所有含<code>有效括号子串</code>的最大长度，所谓有效括号示例中没说明完全，其实还有一种情况就是<code>(())()</code>括号相互包含以及并列的情况。</p><p>刚开始看到题目也是有点蒙，因为似乎不能用一般的<code>穷解法</code>来进行抽象(穷解法最佳代表：冒泡排序和选择排序，23333)，俗话说的好，遇事不绝穷举法！(其实算法优化也可以看作是让计算机以更快的时间拿到所有符合规范的结果，广义上的穷举)，这可咋个搞？</p><p>最后使用了<code>递归</code>和<code>栈</code>两种方法来解决。</p><h3 id=\"解题思路1：递归\">解题思路1：递归</h3><hr><h4 id=\"递归的概念\">递归的概念</h4><p>一种便于理解的心理模型是认为递归定义对对象的定义是按照“先前定义的”同类对象来定义的。例如：你怎样才能移动100个箱子？答案：你首先移动一个箱子，并记下它移动到的位置，然后再去解决较小的问题：你怎样才能移动99个箱子？最终，你的问题将变为怎样移动一个箱子，而这时你已经知道该怎么做的。</p><p>斐波那契函数属于典型的递归问题：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn(n<span class=\"number\">-1</span>) + fn(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"题目分析\">题目分析</h4><ol><li>求解所有包含有效括号子串时可以从最短有效括号&quot;()&quot;开始然后同时从左括号和右括号开始自底向上往两边匹配字符串，每一次匹配之后判断有没有相邻有效括号字串，如果有就合并两个子串</li><li>由于无法预知所有匹配情况，在每次子串向外扩张匹配和合并子串时，都需要进行再次判断，需要对所有可能的子问题进行递归处理求解</li></ol><h4 id=\"题解图示\">题解图示</h4><p><img src=\"drawio-1.png\" alt=\"动态规划\"></p><h4 id=\"题解算法\">题解算法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">longestValidParentheses</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> matchArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> done = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> maxLength = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 获取所有()的位置索引 */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt; s.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] === <span class=\"string\">'('</span> &amp;&amp; s[i + <span class=\"number\">1</span>] === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      matchArray.push([i, i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 合并相邻有效括号数组 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> doConcat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> find = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; matchArray.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (matchArray[i][matchArray[i].length - <span class=\"number\">1</span>] + <span class=\"number\">1</span> === matchArray[i + <span class=\"number\">1</span>][<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        find = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        matchArray[i] = matchArray[i].concat(matchArray[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        matchArray.splice(i + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (find) doConcat();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!done) &#123;</span><br><span class=\"line\">    doConcat();</span><br><span class=\"line\">    done = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    matchArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 经匹配括号从内至外扩张合并新的有效括号</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s[item[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] === <span class=\"string\">'('</span> &amp;&amp; s[item[item.length - <span class=\"number\">1</span>] + <span class=\"number\">1</span>] === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">        item.unshift(item[<span class=\"number\">0</span>] - <span class=\"number\">1</span>);</span><br><span class=\"line\">        item.push(item[item.length - <span class=\"number\">1</span>] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        done = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      maxLength = <span class=\"built_in\">Math</span>.max(item.length, maxLength);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"解题思路2：栈和回溯\">解题思路2：栈和回溯</h3><hr><h4 id=\"栈的概念\">栈的概念</h4><p>堆栈的基本特点：</p><ul><li>先入后出，后入先出的数据结构。</li><li>除头尾节点之外，每个元素有一个前驱，一个后继。</li></ul><h4 id=\"题目分析-2\">题目分析</h4><ol><li><p>确定限制条件<br>一个<code>有效括号</code>子串至少需要包含左括号和右括号两个字符’()'，且多个有效括号具有<code>包含关系</code>或<code>相邻关系</code></p></li><li><p>分析限制条件<br>分析条件，<code>相邻关系</code>很好判断，只要第<code>n</code>个括号和第<code>n+1</code>个括号能匹配就满足了，已经满足匹配的字符对可以从回溯范围中去掉(剪枝)。<code>包含关系</code>诸如’((()))‘这种，其实可以借助栈这种数据后入先出的存储结构，先存储连续的’(‘，当尝试访问的下一个字符与栈顶字符’('满足匹配关系时，将栈顶字符弹出，以便判断接下来的字符与栈顶字符的匹配情况。</p></li><li><p>减少查找路径<br>在左到右搜索整个字符串的过程中，我们需要存储已经搜索过的字符，因为无法预知接下来未遍历的字符的匹配情况。但我们是不是需要存储所有已经遍历过的字符呢？不是，只需要存储<code>接下来可能形成匹配结构</code>的已遍历字符，不具有形成可匹配字符可能性的字符会被过滤掉，比如如果第一个字符是’)'，那么之后无论出现哪种括号，都无法与这个字符形成有效匹配字符了，所以这个字符就需要过滤掉。</p></li><li><p>确定回溯范围<br>以上第2点提到的用于存储已经遍历过的字符存储结构即为回溯范围，且这个回溯范围动态变化。</p></li><li><p>确定回退点<br>向右搜索选择时如果下一个字符与栈顶字符存在有效括号匹配，那么表明我们已经找到另一个匹配情况但是还可能找到更多匹配情况，所以需要回退回到上一个点(下图中执行<code>stack2.pop()</code>)，回退时根据记录的字符索引计算当前已经<code>连续匹配</code>的有效括号字符的长度，最后记录有效括号字符长度的最大值即可。</p></li></ol><h4 id=\"题解图示-2\">题解图示</h4><ul><li>stack1 – 栈1用于存储所有遍历过的并且存在匹配可能性的左括号(回溯范围)</li><li>stack2 – 栈2用于存储所有栈顶字符的’索引值-1’</li><li>红色方块 – 连续有效字符匹配中断的情况</li><li>绿色方块 – 向回溯范围中存入的各个可回溯点</li><li>蓝色方块 – 执行回溯</li><li>MAX – 有效括号字符长度的最大值</li></ul><p><img src=\"drawio-2.png\" alt=\"动态规划\"></p><h4 id=\"题解算法-2\">题解算法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">longestValidParentheses</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> indexArray = [<span class=\"number\">-1</span>]; <span class=\"comment\">//动态存储左括号索引值，</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> maxLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stack = []; <span class=\"comment\">// 栈存储已经遍历的左括号索引</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; <span class=\"comment\">// 头指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] === <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">      stack.push(i);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 括号匹配的情况从栈顶弹出</span></span><br><span class=\"line\">        tmp = stack.pop();</span><br><span class=\"line\">        <span class=\"comment\">// 索引数组同步弹出(至少保留一个索引)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (indexArray.length &gt; <span class=\"number\">1</span>) indexArray.pop();</span><br><span class=\"line\">        <span class=\"comment\">// 栈不为空，则将栈顶索引(尾指针)存入索引数组以便之后回溯计算最大字符串长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack.length) indexArray.push(stack[stack.length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        maxLength = <span class=\"built_in\">Math</span>.max(maxLength, i - indexArray[indexArray.length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 首个匹配到的字符为')'的非法情况，重置尾指针</span></span><br><span class=\"line\">        indexArray = [i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"结语\">结语</h3><hr><p>本题中虽然栈的解法图示很长，但是相比递归解法，时间和内存消耗都更少，时间复杂度O(n)，空间复杂度为O(2n)。</p>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\">前言</h3><hr><p>最近刷LeetCode，遇到一个题目感觉挺有意思：</p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">描述:</span><br><span class=\"line\">  给定一个只包含 &#39;(&#39; 和 &#39;)&#39; 的字符串，找出最长的包含有效括号的子串的长度。</span><br><span class=\"line\"></span><br><span class=\"line\">  示例 1:</span><br><span class=\"line\">    输入: &quot;(()&quot;</span><br><span class=\"line\">    输出: 2</span><br><span class=\"line\">    解释: 最长有效括号子串为 &quot;()&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  示例 2:</span><br><span class=\"line\">    输入: &quot;)()())&quot;</span><br><span class=\"line\">    输出: 4</span><br><span class=\"line\">    解释: 最长有效括号子串为 &quot;()()&quot;</span><br></pre></td></tr></table></figure><p>题目中让求解一串字符中所有含<code>有效括号子串</code>的最大长度，所谓有效括号示例中没说明完全，其实还有一种情况就是<code>(())()</code>括号相互包含以及并列的情况。</p><p>刚开始看到题目也是有点蒙，因为似乎不能用一般的<code>穷解法</code>来进行抽象(穷解法最佳代表：冒泡排序和选择排序，23333)，俗话说的好，遇事不绝穷举法！(其实算法优化也可以看作是让计算机以更快的时间拿到所有符合规范的结果，广义上的穷举)，这可咋个搞？</p><p>最后使用了<code>递归</code>和<code>栈</code>两种方法来解决。</p><h3 id=\"解题思路1：递归\">解题思路1：递归</h3><hr><h4 id=\"递归的概念\">递归的概念</h4><p>一种便于理解的心理模型是认为递归定义对对象的定义是按照“先前定义的”同类对象来定义的。例如：你怎样才能移动100个箱子？答案：你首先移动一个箱子，并记下它移动到的位置，然后再去解决较小的问题：你怎样才能移动99个箱子？最终，你的问题将变为怎样移动一个箱子，而这时你已经知道该怎么做的。</p><p>斐波那契函数属于典型的递归问题：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn(n<span class=\"number\">-1</span>) + fn(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h4 id=\"题目分析\">题目分析</h4><ol><li>求解所有包含有效括号子串时可以从最短有效括号&quot;()&quot;开始然后同时从左括号和右括号开始自底向上往两边匹配字符串，每一次匹配之后判断有没有相邻有效括号字串，如果有就合并两个子串</li><li>由于无法预知所有匹配情况，在每次子串向外扩张匹配和合并子串时，都需要进行再次判断，需要对所有可能的子问题进行递归处理求解</li></ol><h4 id=\"题解图示\">题解图示</h4><p><img src=\"drawio-1.png\" alt=\"动态规划\"></p><h4 id=\"题解算法\">题解算法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">longestValidParentheses</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> matchArray = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> done = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> maxLength = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 获取所有()的位置索引 */</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt; s.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] === <span class=\"string\">'('</span> &amp;&amp; s[i + <span class=\"number\">1</span>] === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      matchArray.push([i, i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* 合并相邻有效括号数组 */</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> doConcat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> find = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; matchArray.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (matchArray[i][matchArray[i].length - <span class=\"number\">1</span>] + <span class=\"number\">1</span> === matchArray[i + <span class=\"number\">1</span>][<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        find = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        matchArray[i] = matchArray[i].concat(matchArray[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        matchArray.splice(i + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (find) doConcat();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(!done) &#123;</span><br><span class=\"line\">    doConcat();</span><br><span class=\"line\">    done = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    matchArray.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 经匹配括号从内至外扩张合并新的有效括号</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (s[item[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] === <span class=\"string\">'('</span> &amp;&amp; s[item[item.length - <span class=\"number\">1</span>] + <span class=\"number\">1</span>] === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">        item.unshift(item[<span class=\"number\">0</span>] - <span class=\"number\">1</span>);</span><br><span class=\"line\">        item.push(item[item.length - <span class=\"number\">1</span>] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        done = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      maxLength = <span class=\"built_in\">Math</span>.max(item.length, maxLength);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"解题思路2：栈和回溯\">解题思路2：栈和回溯</h3><hr><h4 id=\"栈的概念\">栈的概念</h4><p>堆栈的基本特点：</p><ul><li>先入后出，后入先出的数据结构。</li><li>除头尾节点之外，每个元素有一个前驱，一个后继。</li></ul><h4 id=\"题目分析-2\">题目分析</h4><ol><li><p>确定限制条件<br>一个<code>有效括号</code>子串至少需要包含左括号和右括号两个字符’()'，且多个有效括号具有<code>包含关系</code>或<code>相邻关系</code></p></li><li><p>分析限制条件<br>分析条件，<code>相邻关系</code>很好判断，只要第<code>n</code>个括号和第<code>n+1</code>个括号能匹配就满足了，已经满足匹配的字符对可以从回溯范围中去掉(剪枝)。<code>包含关系</code>诸如’((()))‘这种，其实可以借助栈这种数据后入先出的存储结构，先存储连续的’(‘，当尝试访问的下一个字符与栈顶字符’('满足匹配关系时，将栈顶字符弹出，以便判断接下来的字符与栈顶字符的匹配情况。</p></li><li><p>减少查找路径<br>在左到右搜索整个字符串的过程中，我们需要存储已经搜索过的字符，因为无法预知接下来未遍历的字符的匹配情况。但我们是不是需要存储所有已经遍历过的字符呢？不是，只需要存储<code>接下来可能形成匹配结构</code>的已遍历字符，不具有形成可匹配字符可能性的字符会被过滤掉，比如如果第一个字符是’)'，那么之后无论出现哪种括号，都无法与这个字符形成有效匹配字符了，所以这个字符就需要过滤掉。</p></li><li><p>确定回溯范围<br>以上第2点提到的用于存储已经遍历过的字符存储结构即为回溯范围，且这个回溯范围动态变化。</p></li><li><p>确定回退点<br>向右搜索选择时如果下一个字符与栈顶字符存在有效括号匹配，那么表明我们已经找到另一个匹配情况但是还可能找到更多匹配情况，所以需要回退回到上一个点(下图中执行<code>stack2.pop()</code>)，回退时根据记录的字符索引计算当前已经<code>连续匹配</code>的有效括号字符的长度，最后记录有效括号字符长度的最大值即可。</p></li></ol><h4 id=\"题解图示-2\">题解图示</h4><ul><li>stack1 – 栈1用于存储所有遍历过的并且存在匹配可能性的左括号(回溯范围)</li><li>stack2 – 栈2用于存储所有栈顶字符的’索引值-1’</li><li>红色方块 – 连续有效字符匹配中断的情况</li><li>绿色方块 – 向回溯范围中存入的各个可回溯点</li><li>蓝色方块 – 执行回溯</li><li>MAX – 有效括号字符长度的最大值</li></ul><p><img src=\"drawio-2.png\" alt=\"动态规划\"></p><h4 id=\"题解算法-2\">题解算法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">longestValidParentheses</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> indexArray = [<span class=\"number\">-1</span>]; <span class=\"comment\">//动态存储左括号索引值，</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> maxLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> stack = []; <span class=\"comment\">// 栈存储已经遍历的左括号索引</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; <span class=\"comment\">// 头指针</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] === <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">      stack.push(i);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack.length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 括号匹配的情况从栈顶弹出</span></span><br><span class=\"line\">        tmp = stack.pop();</span><br><span class=\"line\">        <span class=\"comment\">// 索引数组同步弹出(至少保留一个索引)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (indexArray.length &gt; <span class=\"number\">1</span>) indexArray.pop();</span><br><span class=\"line\">        <span class=\"comment\">// 栈不为空，则将栈顶索引(尾指针)存入索引数组以便之后回溯计算最大字符串长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack.length) indexArray.push(stack[stack.length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        maxLength = <span class=\"built_in\">Math</span>.max(maxLength, i - indexArray[indexArray.length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 首个匹配到的字符为')'的非法情况，重置尾指针</span></span><br><span class=\"line\">        indexArray = [i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h3 id=\"结语\">结语</h3><hr><p>本题中虽然栈的解法图示很长，但是相比递归解法，时间和内存消耗都更少，时间复杂度O(n)，空间复杂度为O(2n)。</p>"},{"title":"基于Electron的smb客户端文件上传优化探索","catalog":true,"toc_nav_num":true,"date":"2020-08-16T14:30:00.000Z","subtitle":"smb samba client upload","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-08-16T14:30:00.000Z","_content":"\n> 文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考...\n\n### I 前言\n---------------\n\n![RhinoDisk](smb_upload_now.jpg)\n\n上一篇文章[《基于Electron的smb客户端开发记录》](https://nojsja.gitee.io/blogs/2020/07/17/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/)，大致描述了整个SMB客户端开发的核心功能、实现难点、项目打包这些内容，这篇文章呢单独把其中的`文件分片上传模块`拿出来进行分享，提及一些与Electron主进程、渲染进程和文件上传优化相关的功能点。  \n\n### II Demo运行\n-----------------\n项目精简版 [DEMO地址](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload)，删除了smb处理的多余逻辑，使用文件复制模拟上传流程，可直接运行体验。\n>demo运行时需要分别开启两个开发环境view -> service，然后才能预览界面，由于没有后端，文件默认上传(复制)到electron数据目录(在Ubuntu上是`~/.config/FileSliceUpload/runtime/upload`)\n```bash\n# 进入view目录\n$: npm install\n$: npm start\n# 进入service目录\n$: npm install\n$: npm start\n# 一键打包脚本 - 查看帮助\n$: node build.js --help\n# 应用打包 - 为linux/mac/win平台打包\n$: node build.js build-linux\n$: node build.js build-mac\n$: node build.js build-win\n```\n\n### III Electron进程架构\n-------------------\n\n#### 主进程和渲染进程的区别\n\n![electron](electron1.png)\n\nElectron 运行 package.json 的 main 脚本的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面，一个 Electron 应用总是有且只有一个主进程。  \n主进程使用 BrowserWindow 实例创建页面，每个 BrowserWindow 实例都在自己的渲染进程里运行页面，当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有的web页面和它们对应的渲染进程，每个渲染进程都是独立的，它只关心它所运行的 web 页面。  \n\n在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。\n在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n\n#### 主进程和渲染进程之间的通信\n>1/2-自带方法，3-外部扩展方法\n\n__1. 使用remote远程调用__\n\nremote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：  \n```js\n/* 渲染进程中(web端代码) */\nconst { BrowserWindow } = require('electron').remote\nlet win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n```\n注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用于主进程和渲染进程频繁通信以及耗时请求的情况，否则会引起严重的程序性能问题。\n\n__2. 使用ipc信号通信__\n\n基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。  \nElectron进程之间通信最常用的一系列方法，但是在向其它子进程发送消息之前需要知道目标进程的`webContentsId`或者能够直接拿到目标进程的实例，使用方式不太灵活。\n```js\n/* 主进程 */\nipcMain.on(channel, listener) // 监听信道 - 异步触发\nipcMain.once(channel, listener) // 监听一次信道，监听器触发后即删除 - 异步触发\nipcMain.handle(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器\nipcMain.handleOnce(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听\nbrowserWindow.webContents.send(channel, args); // 显式地向某个渲染进程发送信息 - 异步触发\n\n\n/* 渲染进程 */\nipcRenderer.on(channel, listener); // 监听信道 - 异步触发\nipcRenderer.once(channel, listener); // 监听一次信道，监听器触发后即删除 - 异步触发\nipcRenderer.sendSync(channel, args); // 向主进程一个信道发送信息 - 同步触发\nipcRenderer.invoke(channel, args); // 向主进程一个信道发送信息 - 返回Promise对象等待触发\nipcRenderer.sendTo(webContentsId, channel, ...args); // 向某个渲染进程发送消息 - 异步触发\nipcRenderer.sendToHost(channel, ...args) // 向host页面的webview发送消息 - 异步触发\n```\n\n__3. 使用==electron-re==进行多向通信__\n\n[electron-re](https://github.com/nojsja/electron-re) 是之前开发的一个处理electron进程间通信的工具，基于自带的ipc信号通信进行了封装，已经发布为npm组件。主要功能是在Electron已有的`Main Process`主进程 和 `Renderer Process`渲染进程概念的基础上独立出一个单独的==Service==逻辑。Service即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许`node注入`和`remote调用`的渲染窗口进程。\n\n比如在你看过一些Electron`最佳实践`中，耗费cpu的操作是不建议被放到主进程中处理的，这时候就可以将这部分耗费cpu的操作编写成一个单独的js文件，然后使用Service构造函数以这个js文件的地址`path`为参数构造一个Service实例，并通过`electron-re`提供的`MessageChannel`通信工具在主进程、渲染进程、service进程之间任意发送消息，可以参考以下示例代码：\n* 1）main process\n```js\nconst {\n  BrowserService,\n  MessageChannel // must required in main.js even if you don't use it\n} = require('electron-re');\nconst isInDev = process.env.NODE_ENV === 'dev';\n...\n\n// after app is ready in main process\napp.whenReady().then(async () => {\n    const myService = new BrowserService('app', 'path/to/app.service.js');\n    const myService2 = new BrowserService('app2', 'path/to/app2.service.js');\n\n    await myService.connected();\n    await myService2.connected();\n\n    // open devtools in dev mode for debugging\n    if (isInDev) myService.openDevTools();\n    // send data to a service - like the build-in ipcMain.send\n    MessageChannel.send('app', 'channel1', { value: 'test1' });\n    // send data to a service and return a Promise - extension method\n    MessageChannel.invoke('app', 'channel2', { value: 'test2' }).then((response) => {\n      console.log(response);\n    });\n    // listen a channel, same as ipcMain.on\n    MessageChannel.on('channel3', (event, response) => {\n      console.log(response);\n    });\n\n    // handle a channel signal, same as ipcMain.handle\n    // you can return data directly or return a Promise instance\n    MessageChannel.handle('channel4', (event, response) => {\n      console.log(response);\n      return { res: 'channel4-res' };\n    });\n});\n```\n\n* 2）app.service.js\n```js\nconst { ipcRenderer } = require('electron');\nconst { MessageChannel } = require('electron-re');\n\n// listen a channel, same as ipcRenderer.on\nMessageChannel.on('channel1', (event, result) => {\n  console.log(result);\n});\n\n// handle a channel signal, just like ipcMain.handle\nMessageChannel.handle('channel2', (event, result) => {\n  console.log(result);\n  return { response: 'channel2-response' }\n});\n\n// send data to another service and return a promise , just like ipcRenderer.invoke\nMessageChannel.invoke('app2', 'channel3', { value: 'channel3' }).then((event, result) => {\n  console.log(result);\n});\n\n// send data to a service - like the build-in ipcRenderer.send\nMessageChannel.send('app', 'channel4', { value: 'channel4' });\n```\n\n* 3）app2.service.js\n```js\n// handle a channel signal, just like ipcMain.handle\nMessageChannel.handle('channel3', (event, result) => {\n  console.log(result);\n  return { response: 'channel3-response' }\n});\n// listen a channel, same as ipcRenderer.once\nMessageChannel.once('channel4', (event, result) => {\n  console.log(result);\n});\n// send data to main process, just like ipcRenderer.send\nMessageChannel.send('main', 'channel3', { value: 'channel3' });\n// send data to main process and return a Promise, just like ipcRenderer.invoke\nMessageChannel.invoke('main', 'channel4', { value: 'channel4' });\n```\n\n* 4）renderer process window\n```js\nconst { ipcRenderer } = require('electron');\nconst { MessageChannel } = require('electron-re');\n// send data to a service\nMessageChannel.send('app', ...);\nMessageChannel.invoke('app2', ...);\n// send data to main process\nMessageChannel.send('main', ...);\nMessageChannel.invoke('main', ...);\n```\n\n### IV 文件上传架构\n---------------\n文件上传主要逻辑控制部分是前端的JS脚本代码，位于主窗口所在的render渲染进程，负责用户获取系统目录文件、生成上传任务队列、动态展示上传任务列表详情、任务列表的增删查改等；主进程Electron端的Node.js代码主要负责响应render进程的控制命令进行文件上传任务队列数据的增删查改、上传任务在内存和磁盘的同步、文件系统的交互、系统原生组件调用等。\n\n#### 文件上传源和上传目标\n\n* 在用户界面上使用`Input`组件获取到的FileList(HTML5 API，用于web端的简单文件操作)即为上传源；\n\n* 上传目标地址是远端集群某个节点的smb服务，因为Node.js NPM生态对smb的支持有限，目前并未发现一个可以支持通过smb协议进行文件分片上传的npm库，所以考虑使用Node.js的FS API进行文件分段读取然后将分片数据逐步增量写入目标地址来模拟文件分片上传过程，从而实现在界面上单个大文件上传任务的启动、暂停、终止和续传等操作，所以这里的解决方案是使用Windows UNC命令连接后端共享后，可以像访问本地文件系统一样访问远程一个远程smb共享路径，比如文件路径`\\\\[host]\\[sharename]\\file1`上的file1在执行了unc连接后就可以通过Node.js FS API进行操作，跟操作本地文件完全一致。整个必须依赖smb协议的上传流程即精简为将本地拿到的文件数据复制到可以在本地访问的另一个smb共享路径这一流程，而这一切都得益于Windows `UNC`命令。\n\n```js\n/* 使用unc命令连接远程smb共享 */\n_uncCommandConnect_Windows_NT({ host, username, pwd }) {\n    const { isThirdUser, nickname, isLocalUser } = global.ipcMainProcess.userModel.info;\n    const commandUse = `net use \\\\\\\\${host}\\\\ipc$ \"${pwd}\" /user:\"${username}\"`;\n    return new Promise((resolve) => {\n      this.sudo.exec(commandUse).then((res) => {\n        resolve({\n          code: 200,\n        });\n      }).catch((err) => {\n        resolve({\n          code: 600,\n          result: global.lang.upload.unc_connection_failed\n        });\n      });\n    });\n  }\n```\n\n#### 上传流程概述\n\n下图描述了整个前端部分的控制逻辑：\n\n![upload](shards_upload.jpg)\n\n1. 页面上使用`<Input />`组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个`path`属性指明文件位于系统的绝对路径)  \n2. 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息  \n3. 页面调用init请求附带上选中的文件信息初始化文件上传任务  \n4. Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作，最后返回给页面上传任务ID，Node.js端完成初始化处理  \n5. 页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)  \n6. Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置，即本地可直接访问的SMB共享路径  \n7. upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID  \n8. Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传任务为上传完成状态  \n9. 界面上传任务列表全部完成后，向后端发送sync请求，把当前任务上传列表同步到历史任务(磁盘存储)中，表明当前列表中所有任务已经完成  \n10. Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传  \n\n#### Node.js实现的文件分片管理工厂\n\n* 文件初始化的时候调用`open`方法临时存储文件描述符和文件绝对路径的映射关系；\n* 文件上传的时候调用`read`方法根据文件读取位置、读取容量大小进行分片切割；\n* 文件上传完成的时候调用`close`关闭文件描述符；\n\n三个方法均通过文件绝对路径`path`参数建立关联：\n\n```js\n/**\n  * readFileBlock [读取文件块]\n  */\nexports.readFileBlock = () => {\n\n  const fdStore = {};\n  const smallFileMap = {};\n\n  return {\n    /* 打开文件描述符 */\n    open: (path, size, minSize=1024*2) => {\n      return new Promise((resolve) => {\n        try {\n          // 小文件不打开文件描述符，直接读取写入\n          if (size <= minSize) {\n            smallFileMap[path] = true;\n            return resolve({\n              code: 200,\n              result: {\n                fd: null\n              }\n            });\n          }\n          // 打开文件描述符，建议绝对路径和fd的映射关系\n          fs.open(path, 'r', (err, fd) => {\n            if (err) {\n              console.trace(err);\n              resolve({\n                code: 601,\n                result: err.toString()\n              });\n            } else {\n              fdStore[path] = fd;\n              resolve({\n                code: 200,\n                result: {\n                  fd: fdStore[path]\n                }\n              });\n            }\n          });\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      })\n    },\n  \n    /* 读取文件块 */\n    read: (path, position, length) => {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          if (err) {\n            resolve({\n              code: 600,\n              result: err.toString()\n            });\n          } else {\n            resolve({\n              code: 200,\n              result: data\n            });\n          }\n        };\n        try {\n          // 小文件直接读取，大文件使用文件描述符和偏移量读取\n          if (smallFileMap[path]) {\n            fs.readFile(path, (err, buffer) => {\n              callback(err, buffer);\n            });\n          } else {\n            // 空文件处理\n            if (length === 0) return callback(null, '');\n            fs.read(fdStore[path], Buffer.alloc(length), 0, length, position, function(err, readByte, readResult){\n              callback(err, readResult);\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    /* 关闭文件描述符 */\n    close: (path) => {\n      return new Promise((resolve) => {\n        try {\n          if (smallFileMap[path]) {\n            delete smallFileMap[path];\n            resolve({\n              code: 200\n            });\n          } else {\n            fs.close(fdStore[path], () => {\n              resolve({code: 200});\n              delete fdStore[path];\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    fdStore\n\n  }\n\n}\n\n```\n\n### V 基于Electron的文件上传卡顿优化踩坑\n----------------------\n\n优化是一件头大的事儿，因为你需要先通过很多测试手法找到现有代码的性能瓶颈，然后编写优化解决方案。我觉得找到性能瓶颈这一点就比较难，因为是自己写的代码所以容易陷入一些先入为主的刻板思考模式。不过最最主要的一点还是你如果自己都弄不清楚你使用的技术栈的话，那就无从谈起优化，所以前面有很大篇幅分析了Electron进程方面的知识以及梳理了整个上传流程。\n\n#### 使用Electron自带的Devtools进行性能分析\n\n在文件上传过程中打开性能检测工具`Performance`进行录制，分析整个流程：\n\n![upload_performance.jpg](upload_performance.jpg)\n\n在文件上传过程中打开内存工具`Memory`进行快照截取分析一个时刻的内存占用情况：\n\n![upload_memory.jpg](upload_memory.jpg)\n\n#### 第一次尝试解决问题：替换Antd Table组件\n\n在编写完成文件上传模块后，初步进行了压力测试，结果发现添加1000个文件上传任务到任务队列，且同时上传的文件上传任务数量为6时，上下滑动查看文件上传列表时出现了卡顿的情况，这种卡顿不局限于某个界面组件的卡顿，而且当前窗口的所有操作都卡了起来，初步怀疑是Antd Table组件引起的卡顿，因为Antd Table组件是个很复杂的高阶组件，在处理大量的数据时可能会有性能问题，遂我将Antd Table组件换成了原生的table组件，且Table列表只显示每个上传任务的任务名，其余的诸如上传进度这些都不予显示，从而想避开这个问题。令人吃惊的是测试结果是即使换用了原生Table组件，卡顿情况仍然毫无改善！\n\n#### 第二次尝试解决问题：改造Electron主进程同步阻塞代码\n\n先看下chromium的架构图，每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。\n\n![upload_memory.jpg](chromium.jpg)\n\n综上所述：如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，主进程就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，自然渲染界面的UI绘制和更新就会呈现卡顿的状态。\n\n我分析了一下Node.js端的文件任务管理的代码逻辑，把一些操作诸如获取文件大小、获取文件类型和删除文件这类的同步阻塞IO调用都换成了Node.js提倡的异步调用模式，即FS callback或Fs Promise链式调用。改动后发现卡顿情况改善不明显，遂进行了第三次尝试。\n\n#### 第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑\n这次是大改😕\n\n__1. 简单实现了node.js进程池__  \n源码：[ChildProcessPool.class.js](https://github.com/nojsja/javascript-learning/blob/master/file-slice-upload/service/app/services/child/libs/ChildProcessPool.class.js)，主要逻辑是使用Node.js的`child_process`模块(具体使用请看[文档](http://nodejs.cn/api/child_process.html)) 创建指定数量的多个子进程，外部通过进程池获取一个可用的进程，在进程中执行需要的代码逻辑，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用，省略代码如下：\n```js\n...\nclass ChildProcessPool {\n  constructor({ path, max=6, cwd, env }) {\n    this.cwd = cwd || process.cwd();\n    this.env = env || process.env;\n    this.inspectStartIndex = 5858;\n    this.callbacks = {};\n    this.pidMap = new Map();\n    this.collaborationMap = new Map();\n    this.forked = [];\n    this.forkedPath = path;\n    this.forkIndex = 0;\n    this.forkMaxIndex = max;\n  }\n  /* Received data from a child process */\n  dataRespond = (data, id) => { ... }\n\n  /* Received data from all child processes */\n  dataRespondAll = (data, id) => { ... }\n\n  /* Get a process instance from the pool */\n  getForkedFromPool(id=\"default\") {\n    let forked;\n\n    if (!this.pidMap.get(id)) {\n      // create new process\n      if (this.forked.length < this.forkMaxIndex) {\n        this.inspectStartIndex ++;\n        forked = fork(\n          this.forkedPath,\n          this.env.NODE_ENV === \"development\" ? [`--inspect=${this.inspectStartIndex}`] : [],\n          {\n            cwd: this.cwd,\n            env: { ...this.env, id },\n          }\n        );\n        this.forked.push(forked);\n        forked.on('message', (data) => {\n          const id = data.id;\n          delete data.id;\n          delete data.action;\n          this.onMessage({ data, id });\n        });\n      } else {\n        this.forkIndex = this.forkIndex % this.forkMaxIndex;\n        forked = this.forked[this.forkIndex];\n      }\n\n      if(id !== 'default')\n        this.pidMap.set(id, forked.pid);\n      if(this.pidMap.values.length === 1000)\n        console.warn('ChildProcessPool: The count of pidMap is over than 1000, suggest to use unique id!');\n\n      this.forkIndex += 1;\n    } else {\n      // use existing processes\n      forked = this.forked.filter(f => f.pid === this.pidMap.get(id))[0];\n      if (!forked) throw new Error(`Get forked process from pool failed! the process pid: ${this.pidMap.get(id)}.`);\n    }\n\n    return forked;\n  }\n\n  /**\n    * onMessage [Received data from a process]\n    * @param  {[Any]} data [response data]\n    * @param  {[String]} id [process tmp id]\n    */\n  onMessage({ data, id }) {...}\n\n  /* Send request to a process */\n  send(taskName, params, givenId=\"default\") {\n    if (givenId === 'default') throw new Error('ChildProcessPool: Prohibit the use of this id value: [default] !')\n\n    const id = getRandomString();\n    const forked = this.getForkedFromPool(givenId);\n    return new Promise(resolve => {\n      this.callbacks[id] = resolve;\n      forked.send({action: taskName, params, id });\n    });\n  }\n\n  /* Send requests to all processes */\n  sendToAll(taskName, params) {...}\n}\n```\n\n- 1）使用`send`和`sendToAll`方法向子进程发送消息，前者是向某个进程发送，如果请求参数指定了id则表明需要明确使用之前与此id建立过映射的某个进程，并期望拿到此进程的回应结果；后者是向进程池中的所有进程发送信号，并期望拿到所有进程返回的结果(==供调用者外部调用==)。\n\n- 2）其中`dataRespond`和`dataRespondAll`方法对应上面的两个信号发送方法的进程返回数据回调函数，前者拿到进程池中指定的某个进程的回调结果，后者拿到进程池中所有进程的回调结果(==进程池内部方法，调用者无需关注==)。\n\n- 3）`getForkedFromPool`方法是从进程池中拿到一个进程，如果进程池还没有一个子进程或是已经创建的子进程数量小于设置的可创建子进程数最大值，那么会优先新创建一个子进程放入进程池，然后返回这个子进程以供调用(==进程池内部方法，调用者无需关注==)。\n\n- 4）`getForkedFromPool`方法中值得注意的是这行代码：```this.env.NODE_ENV === \"development\" ? [`--inspect=${this.inspectStartIndex}`] : []```，使用Node.js运行js脚本时加上`- -inspect=端口号` 参数可以开启所运行进程的远程调试端口，多进程程序状态追踪往往比较困难，所以采取这种方式后可以使用浏览器Devtools单独调试每个进程(具体可以在浏览器输入地址：`chrome://inspect/#devices`然后打开调试配置项，配置我们这边指定的调试端口号，最后点击蓝字`Open dedicated DevTools for Node`就能打开一个调试窗口，可以对代码进程断点调试、单步调试、步进步出、运行变量查看等操作，十分便利！)。\n![inject.jpg](inspect.jpg)\n\n\n__2. 分离子进程通信逻辑和业务逻辑__  \n另外被作为子进程执行文件载入的js文件中可以使用我封装的[ProcessHost.class.js](https://github.com/nojsja/javascript-learning/blob/master/file-slice-upload/service/app/services/child/libs/ProcessHost.class.js)，我把它称为`进程事务管理中心`，主要功能是使用api诸如 - `ProcessHost.registry(taskName, func)`来注册多种`任务`，然后在主进程中可以直接使用进程池获取某个进程后向某个`任务`发送请求并取得`Promise`对象以拿到进程回调返回的数据，从而避免在我们的子进程执行文件中编写代码时过度关注进程之间数据的通信。  \n如果不使用`进程事务管理中心`的话我们就需要使用`process.send`来向一个进程发送消息并在另一个进程中使用`process.on('message', processor)`处理消息。需要注意的是如果注册的`task`任务是异步的则需要返回一个Promise对象而不是直接`return`数据，简略代码如下：  \n- 1）registry用于子进程向事务中心注册自己的任务\n- 2）unregistry用于取消任务注册\n- 3）handleMessage处理进程接收到的消息并根据`action`参数调用某个任务\n\n```js\nclass ProcessHost {\n  constructor() {\n    this.tasks = { };\n    this.handleEvents();\n    process.on('message', this.handleMessage.bind(this));\n  }\n\n  /* events listener */\n  handleEvents() {...}\n\n  /* received message */\n  handleMessage({ action, params, id }) {\n    if (this.tasks[action]) {\n      this.tasks[action](params)\n      .then(rsp => {\n        process.send({ action, error: null, result: rsp || {}, id });\n      })\n      .catch(error => {\n        process.send({ action, error, result: error || {}, id });\n      });\n    } else {\n      process.send({\n        action,\n        error: new Error(`ProcessHost: processor for action-[${action}] is not found!`),\n        result: null,\n        id,\n      });\n    }\n  }\n\n  /* registry a task */\n  registry(taskName, processor) {\n    if (this.tasks[taskName]) console.warn(`ProcesHost: the task-${taskName} is registered!`);\n    if (typeof processor !== 'function') throw new Error('ProcessHost: the processor must be a function!');\n    this.tasks[taskName] = function(params) {\n      return new Promise((resolve, reject) => {\n        Promise.resolve(processor(params))\n          .then(rsp => {\n            resolve(rsp);\n          })\n          .catch(error => {\n            reject(error);\n          });\n      })\n    }\n\n    return this;\n  };\n\n  /* unregistry a task */\n  unregistry(taskName) {...};\n\n  /* disconnect */\n  disconnect() { process.disconnect(); }\n\n  /* exit */\n  exit() { process.exit(); }\n}\n\nglobal.processHost = global.processHost || new ProcessHost();\nmodule.exports = global.processHost;\n```\n\n__3. ChildProcessPool和ProcessHost的配合使用__  \n具体使用请查看上文完整[demo](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload)  \n1）main.js (in main process)\n主进程中引入进程池类，并创建进程池实例\n* |——`path`参数为可执行文件路径\n* |——`max`指明进程池创建的最大子进程实例数量\n* |——`env`为传递给子进程的环境变量\n```js\n/* main.js */\n...\nconst ChildProcessPool = require('path/to/ChildProcessPool.class');\n\nglobal.ipcUploadProcess = new ChildProcessPool({\n  path: path.join(app.getAppPath(), 'app/services/child/upload.js'),\n  max: 3, // process instance\n  env: { lang: global.lang, NODE_ENV: nodeEnv }\n});\n...\n```\n\n2）service.js (in main processs) 例子：使用进程池来发送`初始化分片上传`请求\n```js\n /**\n    * init [初始化上传]\n    * @param  {[String]} host [主机名]\n    * @param  {[String]} username [用户名]\n    * @param  {[Object]} file [文件描述对象]\n    * @param  {[String]} abspath [绝对路径]\n    * @param  {[String]} sharename [共享名]\n    * @param  {[String]} fragsize [分片大小]\n    * @param  {[String]} prefix [目标上传地址前缀]\n    */\n  init({ username, host, file, abspath, sharename, fragsize, prefix = '' }) {\n    const date = Date.now();\n    const uploadId = getStringMd5(date + file.name + file.type + file.size);\n    let size = 0;\n\n    return new Promise((resolve) => {\n        this.getUploadPrepath\n        .then((pre) => {\n          /* 看这里看这里！look here! */\n          return global.ipcUploadProcess.send(\n            /* 进程事务名 */\n            'init-works',\n            /* 携带的参数 */\n            {\n              username, host, sharename, pre, prefix, size: file.size, name: file.name, abspath, fragsize, record: \n              {\n                host, // 主机\n                filename: path.join(prefix, file.name), // 文件名\n                size, // 文件大小\n                fragsize, // 分片大小\n                abspath, // 绝对路径\n                startime: getTime(new Date().getTime()), // 上传日期\n                endtime: '', // 上传日期\n                uploadId, // 任务id\n                index: 0,\n                total: Math.ceil(size / fragsize),\n                status: 'uploading' // 上传状态\n              }\n            },\n            /* 指定一个进程调用id */\n            uploadId\n          )\n        })\n      .then((rsp) => {\n        resolve({\n          code: rsp.error ? 600 : 200,\n          result: rsp.result,\n        });\n      }).catch(err => {\n        resolve({\n          code: 600,\n          result: err.toString()\n        });\n      });\n    });\n  }\n```\n\n3）child.js (in child process) 使用事务管理中心处理消息  \n`child.js`即为创建进程池时传入的`path`参数所在的nodejs脚本代码，在此脚本中我们注册多个任务来处理从进程池发送过来的消息。  \n这段代码逻辑被单独分离到子进程中处理，其中：\n- uploadStore - 主要用于在内存中维护整个文件上传列表，对上传任务列表进行增删查改操作(cpu耗时操作)\n- fileBlock - 利用FS API操作文件，比如打开某个文件的文件描述符、根据描述符和分片索引值读取一个文件的某一段Buffer数据、关闭文件描述符等等。虽然都是异步IO读写，对性能影响不大，不过为了整合nodejs端上传处理流程也将其一同纳入了子进程中管理，具体可以查看源码进行了解：[源码](https://github.com/nojsja/electron-react-template/blob/master/service/app/services/child/upload.js)\n```js\n  const fs = require('fs');\n  const fsPromise = fs.promises;\n  const path = require('path');\n\n  const utils = require('./child.utils');\n  const { readFileBlock, uploadRecordStore, unlink } = utils;\n  const ProcessHost = require('./libs/ProcessHost.class');\n\n  // read a file block from a path\n  const fileBlock = readFileBlock();\n  // maintain a shards upload queue\n  const uploadStore = uploadRecordStore();\n\n  global.lang = process.env.lang;\n\n  /* *************** registry all tasks *************** */\n\n  ProcessHost\n    .registry('init-works', (params) => {\n      return initWorks(params);\n    })\n    .registry('upload-works', (params) => {\n      return uploadWorks(params);\n    })\n    .registry('close', (params) => {\n      return close(params);\n    })\n    .registry('record-set', (params) => {\n      uploadStore.set(params);\n      return { result: null };\n    })\n    .registry('record-get', (params) => {\n      return uploadStore.get(params);\n    })\n    .registry('record-get-all', (params) => {\n      return (uploadStore.getAll(params));\n    })\n    .registry('record-update', (params) => {\n      uploadStore.update(params);\n      return ({result: null});\n    })\n    .registry('record-remove', (params) => {\n      uploadStore.remove(params);\n      return { result: null };\n    })\n    .registry('record-reset', (params) => {\n      uploadStore.reset(params);\n      return { result: null };\n    })\n    .registry('unlink', (params) => {\n      return unlink(params);\n    });\n\n\n  /* *************** upload logic *************** */\n\n  /* 上传初始化工作 */\n  function initWorks({username, host, sharename, pre, prefix, name, abspath, size, fragsize, record }) {\n    const remotePath = path.join(pre, prefix, name);\n    return new Promise((resolve, reject) => {\n      new Promise((reso) => fsPromise.unlink(remotePath).then(reso).catch(reso))\n      .then(() => {\n        const dirs = utils.getFileDirs([path.join(prefix, name)]);\n        return utils.mkdirs(pre, dirs);\n      })\n      .then(() => fileBlock.open(abspath, size))\n      .then((rsp) => {\n        if (rsp.code === 200) {\n          const newRecord = {\n            ...record,\n            size, // 文件大小\n            remotePath,\n            username,\n            host,\n            sharename,\n            startime: utils.getTime(new Date().getTime()), // 上传日期\n            total: Math.ceil(size / fragsize),\n          };\n          uploadStore.set(newRecord);\n          return newRecord;\n        } else {\n          throw new Error(rsp.result);\n        }\n     })\n     .then(resolve)\n     .catch(error => {\n      reject(error.toString());\n     });\n    })\n  }\n\n  ...\n```\n\n#### 第四次尝试解决问题：重新审视渲染进程前端代码\n\n* 很遗憾，第三次优化对卡顿的改善依然不明显，我开始怀疑是否是前端代码直接影响的渲染进程卡顿，毕竟前端并非采用懒加载模式进行文件载入上传的(这一怀疑之前被我否定，因为前端代码完全沿用了之前浏览器端对象存储文件分片上传开发时的逻辑，而在对象存储文件上传中并未察觉到界面卡顿，属实奇怪)。摒弃了先入为主的思想，其实Electron跟浏览器环境还是有些不同，不能排除前端代码就没有问题。  \n* 在详细查看了可能耗费CPU计算的代码逻辑后，发现有一段关于刷新上传任务的函数`refreshTasks`，主要逻辑是遍历所有未经上传文件原始对象数组，然后选取固定某个数量的文件(数量取决于设置的同时上传任务个数)放入待上传文件列表中，我发现如果`待上传文件列表的文件数量 = 设置的同时上传任务个数` 的情况下就不用继续遍历剩下的文件原始对象数组了。就是少写了这个判断条件导致`refreshTasks`这个频繁操作的函数在每次执行时可能多执行数千遍for循环内层判断逻辑(具体执行次数呈O(n)次增长，n为当前任务列表任务数量)。\n* 加上一行检测逻辑代码后，之前1000个上传任务增长到10000个左右都不会太卡了，虽然还有略微卡顿，但没有到不能使用的程度，后续还有优化空间！\n\n![refreshTasks](refreshTasks.jpg)\n\n### 总结\n--------\n\n第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题... 总之获得了很多经验，也整理出了一些通用解决方法。  \nElectron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！\n","source":"_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索.md","raw":"---\ntitle: \"基于Electron的smb客户端文件上传优化探索\"\ncatalog: true\ntoc_nav_num: true\ndate: 2020-08-16 22:30:00\nsubtitle: \"smb samba client upload\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- upload\n- smb\ncategories:\n- Electron\nupdateDate: 2020-08-16 22:30:00\n---\n\n> 文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考...\n\n### I 前言\n---------------\n\n![RhinoDisk](smb_upload_now.jpg)\n\n上一篇文章[《基于Electron的smb客户端开发记录》](https://nojsja.gitee.io/blogs/2020/07/17/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/)，大致描述了整个SMB客户端开发的核心功能、实现难点、项目打包这些内容，这篇文章呢单独把其中的`文件分片上传模块`拿出来进行分享，提及一些与Electron主进程、渲染进程和文件上传优化相关的功能点。  \n\n### II Demo运行\n-----------------\n项目精简版 [DEMO地址](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload)，删除了smb处理的多余逻辑，使用文件复制模拟上传流程，可直接运行体验。\n>demo运行时需要分别开启两个开发环境view -> service，然后才能预览界面，由于没有后端，文件默认上传(复制)到electron数据目录(在Ubuntu上是`~/.config/FileSliceUpload/runtime/upload`)\n```bash\n# 进入view目录\n$: npm install\n$: npm start\n# 进入service目录\n$: npm install\n$: npm start\n# 一键打包脚本 - 查看帮助\n$: node build.js --help\n# 应用打包 - 为linux/mac/win平台打包\n$: node build.js build-linux\n$: node build.js build-mac\n$: node build.js build-win\n```\n\n### III Electron进程架构\n-------------------\n\n#### 主进程和渲染进程的区别\n\n![electron](electron1.png)\n\nElectron 运行 package.json 的 main 脚本的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面，一个 Electron 应用总是有且只有一个主进程。  \n主进程使用 BrowserWindow 实例创建页面，每个 BrowserWindow 实例都在自己的渲染进程里运行页面，当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。\n主进程管理所有的web页面和它们对应的渲染进程，每个渲染进程都是独立的，它只关心它所运行的 web 页面。  \n\n在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。\n在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。\n\n#### 主进程和渲染进程之间的通信\n>1/2-自带方法，3-外部扩展方法\n\n__1. 使用remote远程调用__\n\nremote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：  \n```js\n/* 渲染进程中(web端代码) */\nconst { BrowserWindow } = require('electron').remote\nlet win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n```\n注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用于主进程和渲染进程频繁通信以及耗时请求的情况，否则会引起严重的程序性能问题。\n\n__2. 使用ipc信号通信__\n\n基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。  \nElectron进程之间通信最常用的一系列方法，但是在向其它子进程发送消息之前需要知道目标进程的`webContentsId`或者能够直接拿到目标进程的实例，使用方式不太灵活。\n```js\n/* 主进程 */\nipcMain.on(channel, listener) // 监听信道 - 异步触发\nipcMain.once(channel, listener) // 监听一次信道，监听器触发后即删除 - 异步触发\nipcMain.handle(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器\nipcMain.handleOnce(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听\nbrowserWindow.webContents.send(channel, args); // 显式地向某个渲染进程发送信息 - 异步触发\n\n\n/* 渲染进程 */\nipcRenderer.on(channel, listener); // 监听信道 - 异步触发\nipcRenderer.once(channel, listener); // 监听一次信道，监听器触发后即删除 - 异步触发\nipcRenderer.sendSync(channel, args); // 向主进程一个信道发送信息 - 同步触发\nipcRenderer.invoke(channel, args); // 向主进程一个信道发送信息 - 返回Promise对象等待触发\nipcRenderer.sendTo(webContentsId, channel, ...args); // 向某个渲染进程发送消息 - 异步触发\nipcRenderer.sendToHost(channel, ...args) // 向host页面的webview发送消息 - 异步触发\n```\n\n__3. 使用==electron-re==进行多向通信__\n\n[electron-re](https://github.com/nojsja/electron-re) 是之前开发的一个处理electron进程间通信的工具，基于自带的ipc信号通信进行了封装，已经发布为npm组件。主要功能是在Electron已有的`Main Process`主进程 和 `Renderer Process`渲染进程概念的基础上独立出一个单独的==Service==逻辑。Service即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许`node注入`和`remote调用`的渲染窗口进程。\n\n比如在你看过一些Electron`最佳实践`中，耗费cpu的操作是不建议被放到主进程中处理的，这时候就可以将这部分耗费cpu的操作编写成一个单独的js文件，然后使用Service构造函数以这个js文件的地址`path`为参数构造一个Service实例，并通过`electron-re`提供的`MessageChannel`通信工具在主进程、渲染进程、service进程之间任意发送消息，可以参考以下示例代码：\n* 1）main process\n```js\nconst {\n  BrowserService,\n  MessageChannel // must required in main.js even if you don't use it\n} = require('electron-re');\nconst isInDev = process.env.NODE_ENV === 'dev';\n...\n\n// after app is ready in main process\napp.whenReady().then(async () => {\n    const myService = new BrowserService('app', 'path/to/app.service.js');\n    const myService2 = new BrowserService('app2', 'path/to/app2.service.js');\n\n    await myService.connected();\n    await myService2.connected();\n\n    // open devtools in dev mode for debugging\n    if (isInDev) myService.openDevTools();\n    // send data to a service - like the build-in ipcMain.send\n    MessageChannel.send('app', 'channel1', { value: 'test1' });\n    // send data to a service and return a Promise - extension method\n    MessageChannel.invoke('app', 'channel2', { value: 'test2' }).then((response) => {\n      console.log(response);\n    });\n    // listen a channel, same as ipcMain.on\n    MessageChannel.on('channel3', (event, response) => {\n      console.log(response);\n    });\n\n    // handle a channel signal, same as ipcMain.handle\n    // you can return data directly or return a Promise instance\n    MessageChannel.handle('channel4', (event, response) => {\n      console.log(response);\n      return { res: 'channel4-res' };\n    });\n});\n```\n\n* 2）app.service.js\n```js\nconst { ipcRenderer } = require('electron');\nconst { MessageChannel } = require('electron-re');\n\n// listen a channel, same as ipcRenderer.on\nMessageChannel.on('channel1', (event, result) => {\n  console.log(result);\n});\n\n// handle a channel signal, just like ipcMain.handle\nMessageChannel.handle('channel2', (event, result) => {\n  console.log(result);\n  return { response: 'channel2-response' }\n});\n\n// send data to another service and return a promise , just like ipcRenderer.invoke\nMessageChannel.invoke('app2', 'channel3', { value: 'channel3' }).then((event, result) => {\n  console.log(result);\n});\n\n// send data to a service - like the build-in ipcRenderer.send\nMessageChannel.send('app', 'channel4', { value: 'channel4' });\n```\n\n* 3）app2.service.js\n```js\n// handle a channel signal, just like ipcMain.handle\nMessageChannel.handle('channel3', (event, result) => {\n  console.log(result);\n  return { response: 'channel3-response' }\n});\n// listen a channel, same as ipcRenderer.once\nMessageChannel.once('channel4', (event, result) => {\n  console.log(result);\n});\n// send data to main process, just like ipcRenderer.send\nMessageChannel.send('main', 'channel3', { value: 'channel3' });\n// send data to main process and return a Promise, just like ipcRenderer.invoke\nMessageChannel.invoke('main', 'channel4', { value: 'channel4' });\n```\n\n* 4）renderer process window\n```js\nconst { ipcRenderer } = require('electron');\nconst { MessageChannel } = require('electron-re');\n// send data to a service\nMessageChannel.send('app', ...);\nMessageChannel.invoke('app2', ...);\n// send data to main process\nMessageChannel.send('main', ...);\nMessageChannel.invoke('main', ...);\n```\n\n### IV 文件上传架构\n---------------\n文件上传主要逻辑控制部分是前端的JS脚本代码，位于主窗口所在的render渲染进程，负责用户获取系统目录文件、生成上传任务队列、动态展示上传任务列表详情、任务列表的增删查改等；主进程Electron端的Node.js代码主要负责响应render进程的控制命令进行文件上传任务队列数据的增删查改、上传任务在内存和磁盘的同步、文件系统的交互、系统原生组件调用等。\n\n#### 文件上传源和上传目标\n\n* 在用户界面上使用`Input`组件获取到的FileList(HTML5 API，用于web端的简单文件操作)即为上传源；\n\n* 上传目标地址是远端集群某个节点的smb服务，因为Node.js NPM生态对smb的支持有限，目前并未发现一个可以支持通过smb协议进行文件分片上传的npm库，所以考虑使用Node.js的FS API进行文件分段读取然后将分片数据逐步增量写入目标地址来模拟文件分片上传过程，从而实现在界面上单个大文件上传任务的启动、暂停、终止和续传等操作，所以这里的解决方案是使用Windows UNC命令连接后端共享后，可以像访问本地文件系统一样访问远程一个远程smb共享路径，比如文件路径`\\\\[host]\\[sharename]\\file1`上的file1在执行了unc连接后就可以通过Node.js FS API进行操作，跟操作本地文件完全一致。整个必须依赖smb协议的上传流程即精简为将本地拿到的文件数据复制到可以在本地访问的另一个smb共享路径这一流程，而这一切都得益于Windows `UNC`命令。\n\n```js\n/* 使用unc命令连接远程smb共享 */\n_uncCommandConnect_Windows_NT({ host, username, pwd }) {\n    const { isThirdUser, nickname, isLocalUser } = global.ipcMainProcess.userModel.info;\n    const commandUse = `net use \\\\\\\\${host}\\\\ipc$ \"${pwd}\" /user:\"${username}\"`;\n    return new Promise((resolve) => {\n      this.sudo.exec(commandUse).then((res) => {\n        resolve({\n          code: 200,\n        });\n      }).catch((err) => {\n        resolve({\n          code: 600,\n          result: global.lang.upload.unc_connection_failed\n        });\n      });\n    });\n  }\n```\n\n#### 上传流程概述\n\n下图描述了整个前端部分的控制逻辑：\n\n![upload](shards_upload.jpg)\n\n1. 页面上使用`<Input />`组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个`path`属性指明文件位于系统的绝对路径)  \n2. 缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息  \n3. 页面调用init请求附带上选中的文件信息初始化文件上传任务  \n4. Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作，最后返回给页面上传任务ID，Node.js端完成初始化处理  \n5. 页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)  \n6. Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置，即本地可直接访问的SMB共享路径  \n7. upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID  \n8. Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传任务为上传完成状态  \n9. 界面上传任务列表全部完成后，向后端发送sync请求，把当前任务上传列表同步到历史任务(磁盘存储)中，表明当前列表中所有任务已经完成  \n10. Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传  \n\n#### Node.js实现的文件分片管理工厂\n\n* 文件初始化的时候调用`open`方法临时存储文件描述符和文件绝对路径的映射关系；\n* 文件上传的时候调用`read`方法根据文件读取位置、读取容量大小进行分片切割；\n* 文件上传完成的时候调用`close`关闭文件描述符；\n\n三个方法均通过文件绝对路径`path`参数建立关联：\n\n```js\n/**\n  * readFileBlock [读取文件块]\n  */\nexports.readFileBlock = () => {\n\n  const fdStore = {};\n  const smallFileMap = {};\n\n  return {\n    /* 打开文件描述符 */\n    open: (path, size, minSize=1024*2) => {\n      return new Promise((resolve) => {\n        try {\n          // 小文件不打开文件描述符，直接读取写入\n          if (size <= minSize) {\n            smallFileMap[path] = true;\n            return resolve({\n              code: 200,\n              result: {\n                fd: null\n              }\n            });\n          }\n          // 打开文件描述符，建议绝对路径和fd的映射关系\n          fs.open(path, 'r', (err, fd) => {\n            if (err) {\n              console.trace(err);\n              resolve({\n                code: 601,\n                result: err.toString()\n              });\n            } else {\n              fdStore[path] = fd;\n              resolve({\n                code: 200,\n                result: {\n                  fd: fdStore[path]\n                }\n              });\n            }\n          });\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      })\n    },\n  \n    /* 读取文件块 */\n    read: (path, position, length) => {\n      return new Promise((resolve, reject) => {\n        const callback = (err, data) => {\n          if (err) {\n            resolve({\n              code: 600,\n              result: err.toString()\n            });\n          } else {\n            resolve({\n              code: 200,\n              result: data\n            });\n          }\n        };\n        try {\n          // 小文件直接读取，大文件使用文件描述符和偏移量读取\n          if (smallFileMap[path]) {\n            fs.readFile(path, (err, buffer) => {\n              callback(err, buffer);\n            });\n          } else {\n            // 空文件处理\n            if (length === 0) return callback(null, '');\n            fs.read(fdStore[path], Buffer.alloc(length), 0, length, position, function(err, readByte, readResult){\n              callback(err, readResult);\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    /* 关闭文件描述符 */\n    close: (path) => {\n      return new Promise((resolve) => {\n        try {\n          if (smallFileMap[path]) {\n            delete smallFileMap[path];\n            resolve({\n              code: 200\n            });\n          } else {\n            fs.close(fdStore[path], () => {\n              resolve({code: 200});\n              delete fdStore[path];\n            });\n          }\n        } catch (err) {\n          console.trace(err);\n          resolve({\n            code: 600,\n            result: err.toString()\n          });\n        }\n      });\n    },\n\n    fdStore\n\n  }\n\n}\n\n```\n\n### V 基于Electron的文件上传卡顿优化踩坑\n----------------------\n\n优化是一件头大的事儿，因为你需要先通过很多测试手法找到现有代码的性能瓶颈，然后编写优化解决方案。我觉得找到性能瓶颈这一点就比较难，因为是自己写的代码所以容易陷入一些先入为主的刻板思考模式。不过最最主要的一点还是你如果自己都弄不清楚你使用的技术栈的话，那就无从谈起优化，所以前面有很大篇幅分析了Electron进程方面的知识以及梳理了整个上传流程。\n\n#### 使用Electron自带的Devtools进行性能分析\n\n在文件上传过程中打开性能检测工具`Performance`进行录制，分析整个流程：\n\n![upload_performance.jpg](upload_performance.jpg)\n\n在文件上传过程中打开内存工具`Memory`进行快照截取分析一个时刻的内存占用情况：\n\n![upload_memory.jpg](upload_memory.jpg)\n\n#### 第一次尝试解决问题：替换Antd Table组件\n\n在编写完成文件上传模块后，初步进行了压力测试，结果发现添加1000个文件上传任务到任务队列，且同时上传的文件上传任务数量为6时，上下滑动查看文件上传列表时出现了卡顿的情况，这种卡顿不局限于某个界面组件的卡顿，而且当前窗口的所有操作都卡了起来，初步怀疑是Antd Table组件引起的卡顿，因为Antd Table组件是个很复杂的高阶组件，在处理大量的数据时可能会有性能问题，遂我将Antd Table组件换成了原生的table组件，且Table列表只显示每个上传任务的任务名，其余的诸如上传进度这些都不予显示，从而想避开这个问题。令人吃惊的是测试结果是即使换用了原生Table组件，卡顿情况仍然毫无改善！\n\n#### 第二次尝试解决问题：改造Electron主进程同步阻塞代码\n\n先看下chromium的架构图，每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。\n\n![upload_memory.jpg](chromium.jpg)\n\n综上所述：如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，主进程就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，自然渲染界面的UI绘制和更新就会呈现卡顿的状态。\n\n我分析了一下Node.js端的文件任务管理的代码逻辑，把一些操作诸如获取文件大小、获取文件类型和删除文件这类的同步阻塞IO调用都换成了Node.js提倡的异步调用模式，即FS callback或Fs Promise链式调用。改动后发现卡顿情况改善不明显，遂进行了第三次尝试。\n\n#### 第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑\n这次是大改😕\n\n__1. 简单实现了node.js进程池__  \n源码：[ChildProcessPool.class.js](https://github.com/nojsja/javascript-learning/blob/master/file-slice-upload/service/app/services/child/libs/ChildProcessPool.class.js)，主要逻辑是使用Node.js的`child_process`模块(具体使用请看[文档](http://nodejs.cn/api/child_process.html)) 创建指定数量的多个子进程，外部通过进程池获取一个可用的进程，在进程中执行需要的代码逻辑，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用，省略代码如下：\n```js\n...\nclass ChildProcessPool {\n  constructor({ path, max=6, cwd, env }) {\n    this.cwd = cwd || process.cwd();\n    this.env = env || process.env;\n    this.inspectStartIndex = 5858;\n    this.callbacks = {};\n    this.pidMap = new Map();\n    this.collaborationMap = new Map();\n    this.forked = [];\n    this.forkedPath = path;\n    this.forkIndex = 0;\n    this.forkMaxIndex = max;\n  }\n  /* Received data from a child process */\n  dataRespond = (data, id) => { ... }\n\n  /* Received data from all child processes */\n  dataRespondAll = (data, id) => { ... }\n\n  /* Get a process instance from the pool */\n  getForkedFromPool(id=\"default\") {\n    let forked;\n\n    if (!this.pidMap.get(id)) {\n      // create new process\n      if (this.forked.length < this.forkMaxIndex) {\n        this.inspectStartIndex ++;\n        forked = fork(\n          this.forkedPath,\n          this.env.NODE_ENV === \"development\" ? [`--inspect=${this.inspectStartIndex}`] : [],\n          {\n            cwd: this.cwd,\n            env: { ...this.env, id },\n          }\n        );\n        this.forked.push(forked);\n        forked.on('message', (data) => {\n          const id = data.id;\n          delete data.id;\n          delete data.action;\n          this.onMessage({ data, id });\n        });\n      } else {\n        this.forkIndex = this.forkIndex % this.forkMaxIndex;\n        forked = this.forked[this.forkIndex];\n      }\n\n      if(id !== 'default')\n        this.pidMap.set(id, forked.pid);\n      if(this.pidMap.values.length === 1000)\n        console.warn('ChildProcessPool: The count of pidMap is over than 1000, suggest to use unique id!');\n\n      this.forkIndex += 1;\n    } else {\n      // use existing processes\n      forked = this.forked.filter(f => f.pid === this.pidMap.get(id))[0];\n      if (!forked) throw new Error(`Get forked process from pool failed! the process pid: ${this.pidMap.get(id)}.`);\n    }\n\n    return forked;\n  }\n\n  /**\n    * onMessage [Received data from a process]\n    * @param  {[Any]} data [response data]\n    * @param  {[String]} id [process tmp id]\n    */\n  onMessage({ data, id }) {...}\n\n  /* Send request to a process */\n  send(taskName, params, givenId=\"default\") {\n    if (givenId === 'default') throw new Error('ChildProcessPool: Prohibit the use of this id value: [default] !')\n\n    const id = getRandomString();\n    const forked = this.getForkedFromPool(givenId);\n    return new Promise(resolve => {\n      this.callbacks[id] = resolve;\n      forked.send({action: taskName, params, id });\n    });\n  }\n\n  /* Send requests to all processes */\n  sendToAll(taskName, params) {...}\n}\n```\n\n- 1）使用`send`和`sendToAll`方法向子进程发送消息，前者是向某个进程发送，如果请求参数指定了id则表明需要明确使用之前与此id建立过映射的某个进程，并期望拿到此进程的回应结果；后者是向进程池中的所有进程发送信号，并期望拿到所有进程返回的结果(==供调用者外部调用==)。\n\n- 2）其中`dataRespond`和`dataRespondAll`方法对应上面的两个信号发送方法的进程返回数据回调函数，前者拿到进程池中指定的某个进程的回调结果，后者拿到进程池中所有进程的回调结果(==进程池内部方法，调用者无需关注==)。\n\n- 3）`getForkedFromPool`方法是从进程池中拿到一个进程，如果进程池还没有一个子进程或是已经创建的子进程数量小于设置的可创建子进程数最大值，那么会优先新创建一个子进程放入进程池，然后返回这个子进程以供调用(==进程池内部方法，调用者无需关注==)。\n\n- 4）`getForkedFromPool`方法中值得注意的是这行代码：```this.env.NODE_ENV === \"development\" ? [`--inspect=${this.inspectStartIndex}`] : []```，使用Node.js运行js脚本时加上`- -inspect=端口号` 参数可以开启所运行进程的远程调试端口，多进程程序状态追踪往往比较困难，所以采取这种方式后可以使用浏览器Devtools单独调试每个进程(具体可以在浏览器输入地址：`chrome://inspect/#devices`然后打开调试配置项，配置我们这边指定的调试端口号，最后点击蓝字`Open dedicated DevTools for Node`就能打开一个调试窗口，可以对代码进程断点调试、单步调试、步进步出、运行变量查看等操作，十分便利！)。\n![inject.jpg](inspect.jpg)\n\n\n__2. 分离子进程通信逻辑和业务逻辑__  \n另外被作为子进程执行文件载入的js文件中可以使用我封装的[ProcessHost.class.js](https://github.com/nojsja/javascript-learning/blob/master/file-slice-upload/service/app/services/child/libs/ProcessHost.class.js)，我把它称为`进程事务管理中心`，主要功能是使用api诸如 - `ProcessHost.registry(taskName, func)`来注册多种`任务`，然后在主进程中可以直接使用进程池获取某个进程后向某个`任务`发送请求并取得`Promise`对象以拿到进程回调返回的数据，从而避免在我们的子进程执行文件中编写代码时过度关注进程之间数据的通信。  \n如果不使用`进程事务管理中心`的话我们就需要使用`process.send`来向一个进程发送消息并在另一个进程中使用`process.on('message', processor)`处理消息。需要注意的是如果注册的`task`任务是异步的则需要返回一个Promise对象而不是直接`return`数据，简略代码如下：  \n- 1）registry用于子进程向事务中心注册自己的任务\n- 2）unregistry用于取消任务注册\n- 3）handleMessage处理进程接收到的消息并根据`action`参数调用某个任务\n\n```js\nclass ProcessHost {\n  constructor() {\n    this.tasks = { };\n    this.handleEvents();\n    process.on('message', this.handleMessage.bind(this));\n  }\n\n  /* events listener */\n  handleEvents() {...}\n\n  /* received message */\n  handleMessage({ action, params, id }) {\n    if (this.tasks[action]) {\n      this.tasks[action](params)\n      .then(rsp => {\n        process.send({ action, error: null, result: rsp || {}, id });\n      })\n      .catch(error => {\n        process.send({ action, error, result: error || {}, id });\n      });\n    } else {\n      process.send({\n        action,\n        error: new Error(`ProcessHost: processor for action-[${action}] is not found!`),\n        result: null,\n        id,\n      });\n    }\n  }\n\n  /* registry a task */\n  registry(taskName, processor) {\n    if (this.tasks[taskName]) console.warn(`ProcesHost: the task-${taskName} is registered!`);\n    if (typeof processor !== 'function') throw new Error('ProcessHost: the processor must be a function!');\n    this.tasks[taskName] = function(params) {\n      return new Promise((resolve, reject) => {\n        Promise.resolve(processor(params))\n          .then(rsp => {\n            resolve(rsp);\n          })\n          .catch(error => {\n            reject(error);\n          });\n      })\n    }\n\n    return this;\n  };\n\n  /* unregistry a task */\n  unregistry(taskName) {...};\n\n  /* disconnect */\n  disconnect() { process.disconnect(); }\n\n  /* exit */\n  exit() { process.exit(); }\n}\n\nglobal.processHost = global.processHost || new ProcessHost();\nmodule.exports = global.processHost;\n```\n\n__3. ChildProcessPool和ProcessHost的配合使用__  \n具体使用请查看上文完整[demo](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload)  \n1）main.js (in main process)\n主进程中引入进程池类，并创建进程池实例\n* |——`path`参数为可执行文件路径\n* |——`max`指明进程池创建的最大子进程实例数量\n* |——`env`为传递给子进程的环境变量\n```js\n/* main.js */\n...\nconst ChildProcessPool = require('path/to/ChildProcessPool.class');\n\nglobal.ipcUploadProcess = new ChildProcessPool({\n  path: path.join(app.getAppPath(), 'app/services/child/upload.js'),\n  max: 3, // process instance\n  env: { lang: global.lang, NODE_ENV: nodeEnv }\n});\n...\n```\n\n2）service.js (in main processs) 例子：使用进程池来发送`初始化分片上传`请求\n```js\n /**\n    * init [初始化上传]\n    * @param  {[String]} host [主机名]\n    * @param  {[String]} username [用户名]\n    * @param  {[Object]} file [文件描述对象]\n    * @param  {[String]} abspath [绝对路径]\n    * @param  {[String]} sharename [共享名]\n    * @param  {[String]} fragsize [分片大小]\n    * @param  {[String]} prefix [目标上传地址前缀]\n    */\n  init({ username, host, file, abspath, sharename, fragsize, prefix = '' }) {\n    const date = Date.now();\n    const uploadId = getStringMd5(date + file.name + file.type + file.size);\n    let size = 0;\n\n    return new Promise((resolve) => {\n        this.getUploadPrepath\n        .then((pre) => {\n          /* 看这里看这里！look here! */\n          return global.ipcUploadProcess.send(\n            /* 进程事务名 */\n            'init-works',\n            /* 携带的参数 */\n            {\n              username, host, sharename, pre, prefix, size: file.size, name: file.name, abspath, fragsize, record: \n              {\n                host, // 主机\n                filename: path.join(prefix, file.name), // 文件名\n                size, // 文件大小\n                fragsize, // 分片大小\n                abspath, // 绝对路径\n                startime: getTime(new Date().getTime()), // 上传日期\n                endtime: '', // 上传日期\n                uploadId, // 任务id\n                index: 0,\n                total: Math.ceil(size / fragsize),\n                status: 'uploading' // 上传状态\n              }\n            },\n            /* 指定一个进程调用id */\n            uploadId\n          )\n        })\n      .then((rsp) => {\n        resolve({\n          code: rsp.error ? 600 : 200,\n          result: rsp.result,\n        });\n      }).catch(err => {\n        resolve({\n          code: 600,\n          result: err.toString()\n        });\n      });\n    });\n  }\n```\n\n3）child.js (in child process) 使用事务管理中心处理消息  \n`child.js`即为创建进程池时传入的`path`参数所在的nodejs脚本代码，在此脚本中我们注册多个任务来处理从进程池发送过来的消息。  \n这段代码逻辑被单独分离到子进程中处理，其中：\n- uploadStore - 主要用于在内存中维护整个文件上传列表，对上传任务列表进行增删查改操作(cpu耗时操作)\n- fileBlock - 利用FS API操作文件，比如打开某个文件的文件描述符、根据描述符和分片索引值读取一个文件的某一段Buffer数据、关闭文件描述符等等。虽然都是异步IO读写，对性能影响不大，不过为了整合nodejs端上传处理流程也将其一同纳入了子进程中管理，具体可以查看源码进行了解：[源码](https://github.com/nojsja/electron-react-template/blob/master/service/app/services/child/upload.js)\n```js\n  const fs = require('fs');\n  const fsPromise = fs.promises;\n  const path = require('path');\n\n  const utils = require('./child.utils');\n  const { readFileBlock, uploadRecordStore, unlink } = utils;\n  const ProcessHost = require('./libs/ProcessHost.class');\n\n  // read a file block from a path\n  const fileBlock = readFileBlock();\n  // maintain a shards upload queue\n  const uploadStore = uploadRecordStore();\n\n  global.lang = process.env.lang;\n\n  /* *************** registry all tasks *************** */\n\n  ProcessHost\n    .registry('init-works', (params) => {\n      return initWorks(params);\n    })\n    .registry('upload-works', (params) => {\n      return uploadWorks(params);\n    })\n    .registry('close', (params) => {\n      return close(params);\n    })\n    .registry('record-set', (params) => {\n      uploadStore.set(params);\n      return { result: null };\n    })\n    .registry('record-get', (params) => {\n      return uploadStore.get(params);\n    })\n    .registry('record-get-all', (params) => {\n      return (uploadStore.getAll(params));\n    })\n    .registry('record-update', (params) => {\n      uploadStore.update(params);\n      return ({result: null});\n    })\n    .registry('record-remove', (params) => {\n      uploadStore.remove(params);\n      return { result: null };\n    })\n    .registry('record-reset', (params) => {\n      uploadStore.reset(params);\n      return { result: null };\n    })\n    .registry('unlink', (params) => {\n      return unlink(params);\n    });\n\n\n  /* *************** upload logic *************** */\n\n  /* 上传初始化工作 */\n  function initWorks({username, host, sharename, pre, prefix, name, abspath, size, fragsize, record }) {\n    const remotePath = path.join(pre, prefix, name);\n    return new Promise((resolve, reject) => {\n      new Promise((reso) => fsPromise.unlink(remotePath).then(reso).catch(reso))\n      .then(() => {\n        const dirs = utils.getFileDirs([path.join(prefix, name)]);\n        return utils.mkdirs(pre, dirs);\n      })\n      .then(() => fileBlock.open(abspath, size))\n      .then((rsp) => {\n        if (rsp.code === 200) {\n          const newRecord = {\n            ...record,\n            size, // 文件大小\n            remotePath,\n            username,\n            host,\n            sharename,\n            startime: utils.getTime(new Date().getTime()), // 上传日期\n            total: Math.ceil(size / fragsize),\n          };\n          uploadStore.set(newRecord);\n          return newRecord;\n        } else {\n          throw new Error(rsp.result);\n        }\n     })\n     .then(resolve)\n     .catch(error => {\n      reject(error.toString());\n     });\n    })\n  }\n\n  ...\n```\n\n#### 第四次尝试解决问题：重新审视渲染进程前端代码\n\n* 很遗憾，第三次优化对卡顿的改善依然不明显，我开始怀疑是否是前端代码直接影响的渲染进程卡顿，毕竟前端并非采用懒加载模式进行文件载入上传的(这一怀疑之前被我否定，因为前端代码完全沿用了之前浏览器端对象存储文件分片上传开发时的逻辑，而在对象存储文件上传中并未察觉到界面卡顿，属实奇怪)。摒弃了先入为主的思想，其实Electron跟浏览器环境还是有些不同，不能排除前端代码就没有问题。  \n* 在详细查看了可能耗费CPU计算的代码逻辑后，发现有一段关于刷新上传任务的函数`refreshTasks`，主要逻辑是遍历所有未经上传文件原始对象数组，然后选取固定某个数量的文件(数量取决于设置的同时上传任务个数)放入待上传文件列表中，我发现如果`待上传文件列表的文件数量 = 设置的同时上传任务个数` 的情况下就不用继续遍历剩下的文件原始对象数组了。就是少写了这个判断条件导致`refreshTasks`这个频繁操作的函数在每次执行时可能多执行数千遍for循环内层判断逻辑(具体执行次数呈O(n)次增长，n为当前任务列表任务数量)。\n* 加上一行检测逻辑代码后，之前1000个上传任务增长到10000个左右都不会太卡了，虽然还有略微卡顿，但没有到不能使用的程度，后续还有优化空间！\n\n![refreshTasks](refreshTasks.jpg)\n\n### 总结\n--------\n\n第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题... 总之获得了很多经验，也整理出了一些通用解决方法。  \nElectron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！\n","slug":"基于Electron的smb客户端文件上传优化探索","published":1,"updated":"2020-12-21T02:15:37.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmuri001skl95hku9fve8","content":"<blockquote><p>文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考…</p></blockquote><h3 id=\"I-前言\">I 前言</h3><hr><p><img src=\"smb_upload_now.jpg\" alt=\"RhinoDisk\"></p><p>上一篇文章<a href=\"https://nojsja.gitee.io/blogs/2020/07/17/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/\" target=\"_blank\" rel=\"noopener\">《基于Electron的smb客户端开发记录》</a>，大致描述了整个SMB客户端开发的核心功能、实现难点、项目打包这些内容，这篇文章呢单独把其中的<code>文件分片上传模块</code>拿出来进行分享，提及一些与Electron主进程、渲染进程和文件上传优化相关的功能点。</p><h3 id=\"II-Demo运行\">II Demo运行</h3><hr><p>项目精简版 <a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">DEMO地址</a>，删除了smb处理的多余逻辑，使用文件复制模拟上传流程，可直接运行体验。</p><blockquote><p>demo运行时需要分别开启两个开发环境view -&gt; service，然后才能预览界面，由于没有后端，文件默认上传(复制)到electron数据目录(在Ubuntu上是<code>~/.config/FileSliceUpload/runtime/upload</code>)</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入view目录</span></span><br><span class=\"line\">$: npm install</span><br><span class=\"line\">$: npm start</span><br><span class=\"line\"><span class=\"comment\"># 进入service目录</span></span><br><span class=\"line\">$: npm install</span><br><span class=\"line\">$: npm start</span><br><span class=\"line\"><span class=\"comment\"># 一键打包脚本 - 查看帮助</span></span><br><span class=\"line\">$: node build.js --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 应用打包 - 为linux/mac/win平台打包</span></span><br><span class=\"line\">$: node build.js build-linux</span><br><span class=\"line\">$: node build.js build-mac</span><br><span class=\"line\">$: node build.js build-win</span><br></pre></td></tr></table></figure><h3 id=\"III-Electron进程架构\">III Electron进程架构</h3><hr><h4 id=\"主进程和渲染进程的区别\">主进程和渲染进程的区别</h4><p><img src=\"electron1.png\" alt=\"electron\"></p><p>Electron 运行 package.json 的 main 脚本的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面，一个 Electron 应用总是有且只有一个主进程。<br>主进程使用 BrowserWindow 实例创建页面，每个 BrowserWindow 实例都在自己的渲染进程里运行页面，当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有的web页面和它们对应的渲染进程，每个渲染进程都是独立的，它只关心它所运行的 web 页面。</p><p>在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。<br>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p><h4 id=\"主进程和渲染进程之间的通信\">主进程和渲染进程之间的通信</h4><blockquote><p>1/2-自带方法，3-外部扩展方法</p></blockquote><p><strong>1. 使用remote远程调用</strong></p><p>remote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 渲染进程中(web端代码) */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserWindow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>).remote</span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123; <span class=\"attr\">width</span>: <span class=\"number\">800</span>, <span class=\"attr\">height</span>: <span class=\"number\">600</span> &#125;)</span><br><span class=\"line\">win.loadURL(<span class=\"string\">'https://github.com'</span>)</span><br></pre></td></tr></table></figure><p>注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用于主进程和渲染进程频繁通信以及耗时请求的情况，否则会引起严重的程序性能问题。</p><p><strong>2. 使用ipc信号通信</strong></p><p>基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。<br>Electron进程之间通信最常用的一系列方法，但是在向其它子进程发送消息之前需要知道目标进程的<code>webContentsId</code>或者能够直接拿到目标进程的实例，使用方式不太灵活。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 主进程 */</span></span><br><span class=\"line\">ipcMain.on(channel, listener) <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcMain.once(channel, listener) <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcMain.handle(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器</span></span><br><span class=\"line\">ipcMain.handleOnce(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听</span></span><br><span class=\"line\">browserWindow.webContents.send(channel, args); <span class=\"comment\">// 显式地向某个渲染进程发送信息 - 异步触发</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 渲染进程 */</span></span><br><span class=\"line\">ipcRenderer.on(channel, listener); <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.once(channel, listener); <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendSync(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 同步触发</span></span><br><span class=\"line\">ipcRenderer.invoke(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 返回Promise对象等待触发</span></span><br><span class=\"line\">ipcRenderer.sendTo(webContentsId, channel, ...args); <span class=\"comment\">// 向某个渲染进程发送消息 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendToHost(channel, ...args) <span class=\"comment\">// 向host页面的webview发送消息 - 异步触发</span></span><br></pre></td></tr></table></figure><p><strong>3. 使用<mark>electron-re</mark>进行多向通信</strong></p><p><a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">electron-re</a> 是之前开发的一个处理electron进程间通信的工具，基于自带的ipc信号通信进行了封装，已经发布为npm组件。主要功能是在Electron已有的<code>Main Process</code>主进程 和 <code>Renderer Process</code>渲染进程概念的基础上独立出一个单独的<mark>Service</mark>逻辑。Service即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许<code>node注入</code>和<code>remote调用</code>的渲染窗口进程。</p><p>比如在你看过一些Electron<code>最佳实践</code>中，耗费cpu的操作是不建议被放到主进程中处理的，这时候就可以将这部分耗费cpu的操作编写成一个单独的js文件，然后使用Service构造函数以这个js文件的地址<code>path</code>为参数构造一个Service实例，并通过<code>electron-re</code>提供的<code>MessageChannel</code>通信工具在主进程、渲染进程、service进程之间任意发送消息，可以参考以下示例代码：</p><ul><li>1）main process</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  BrowserService,</span><br><span class=\"line\">  MessageChannel <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isInDev = process.env.NODE_ENV === <span class=\"string\">'dev'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after app is ready in main process</span></span><br><span class=\"line\">app.whenReady().then(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, <span class=\"string\">'path/to/app.service.js'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService2 = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app2'</span>, <span class=\"string\">'path/to/app2.service.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService.connected();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService2.connected();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// open devtools in dev mode for debugging</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInDev) myService.openDevTools();</span><br><span class=\"line\">    <span class=\"comment\">// send data to a service - like the build-in ipcMain.send</span></span><br><span class=\"line\">    MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span> &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// send data to a service and return a Promise - extension method</span></span><br><span class=\"line\">    MessageChannel.invoke(<span class=\"string\">'app'</span>, <span class=\"string\">'channel2'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test2'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// listen a channel, same as ipcMain.on</span></span><br><span class=\"line\">    MessageChannel.on(<span class=\"string\">'channel3'</span>, (event, response) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// handle a channel signal, same as ipcMain.handle</span></span><br><span class=\"line\">    <span class=\"comment\">// you can return data directly or return a Promise instance</span></span><br><span class=\"line\">    MessageChannel.handle(<span class=\"string\">'channel4'</span>, (event, response) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">res</span>: <span class=\"string\">'channel4-res'</span> &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ul><li>2）app.service.js</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MessageChannel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// listen a channel, same as ipcRenderer.on</span></span><br><span class=\"line\">MessageChannel.on(<span class=\"string\">'channel1'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// handle a channel signal, just like ipcMain.handle</span></span><br><span class=\"line\">MessageChannel.handle(<span class=\"string\">'channel2'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">'channel2-response'</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// send data to another service and return a promise , just like ipcRenderer.invoke</span></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'app2'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel3'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">event, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// send data to a service - like the build-in ipcRenderer.send</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel4'</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>3）app2.service.js</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// handle a channel signal, just like ipcMain.handle</span></span><br><span class=\"line\">MessageChannel.handle(<span class=\"string\">'channel3'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">'channel3-response'</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// listen a channel, same as ipcRenderer.once</span></span><br><span class=\"line\">MessageChannel.once(<span class=\"string\">'channel4'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// send data to main process, just like ipcRenderer.send</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel3'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// send data to main process and return a Promise, just like ipcRenderer.invoke</span></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel4'</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>4）renderer process window</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MessageChannel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"comment\">// send data to a service</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, ...);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'app2'</span>, ...);</span><br><span class=\"line\"><span class=\"comment\">// send data to main process</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, ...);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, ...);</span><br></pre></td></tr></table></figure><h3 id=\"IV-文件上传架构\">IV 文件上传架构</h3><hr><p>文件上传主要逻辑控制部分是前端的JS脚本代码，位于主窗口所在的render渲染进程，负责用户获取系统目录文件、生成上传任务队列、动态展示上传任务列表详情、任务列表的增删查改等；主进程Electron端的Node.js代码主要负责响应render进程的控制命令进行文件上传任务队列数据的增删查改、上传任务在内存和磁盘的同步、文件系统的交互、系统原生组件调用等。</p><h4 id=\"文件上传源和上传目标\">文件上传源和上传目标</h4><ul><li><p>在用户界面上使用<code>Input</code>组件获取到的FileList(HTML5 API，用于web端的简单文件操作)即为上传源；</p></li><li><p>上传目标地址是远端集群某个节点的smb服务，因为Node.js NPM生态对smb的支持有限，目前并未发现一个可以支持通过smb协议进行文件分片上传的npm库，所以考虑使用Node.js的FS API进行文件分段读取然后将分片数据逐步增量写入目标地址来模拟文件分片上传过程，从而实现在界面上单个大文件上传任务的启动、暂停、终止和续传等操作，所以这里的解决方案是使用Windows UNC命令连接后端共享后，可以像访问本地文件系统一样访问远程一个远程smb共享路径，比如文件路径<code>\\\\[host]\\[sharename]\\file1</code>上的file1在执行了unc连接后就可以通过Node.js FS API进行操作，跟操作本地文件完全一致。整个必须依赖smb协议的上传流程即精简为将本地拿到的文件数据复制到可以在本地访问的另一个smb共享路径这一流程，而这一切都得益于Windows <code>UNC</code>命令。</p></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用unc命令连接远程smb共享 */</span></span><br><span class=\"line\">_uncCommandConnect_Windows_NT(&#123; host, username, pwd &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isThirdUser, nickname, isLocalUser &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUse = <span class=\"string\">`net use \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\ipc$ \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sudo.exec(commandUse).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: global.lang.upload.unc_connection_failed</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"上传流程概述\">上传流程概述</h4><p>下图描述了整个前端部分的控制逻辑：</p><p><img src=\"shards_upload.jpg\" alt=\"upload\"></p><ol><li>页面上使用<code>&lt;Input /&gt;</code>组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个<code>path</code>属性指明文件位于系统的绝对路径)</li><li>缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息</li><li>页面调用init请求附带上选中的文件信息初始化文件上传任务</li><li>Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作，最后返回给页面上传任务ID，Node.js端完成初始化处理</li><li>页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)</li><li>Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置，即本地可直接访问的SMB共享路径</li><li>upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID</li><li>Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传任务为上传完成状态</li><li>界面上传任务列表全部完成后，向后端发送sync请求，把当前任务上传列表同步到历史任务(磁盘存储)中，表明当前列表中所有任务已经完成</li><li>Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传</li></ol><h4 id=\"Node-js实现的文件分片管理工厂\">Node.js实现的文件分片管理工厂</h4><ul><li>文件初始化的时候调用<code>open</code>方法临时存储文件描述符和文件绝对路径的映射关系；</li><li>文件上传的时候调用<code>read</code>方法根据文件读取位置、读取容量大小进行分片切割；</li><li>文件上传完成的时候调用<code>close</code>关闭文件描述符；</li></ul><p>三个方法均通过文件绝对路径<code>path</code>参数建立关联：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * readFileBlock [读取文件块]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.readFileBlock = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fdStore = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> smallFileMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 打开文件描述符 */</span></span><br><span class=\"line\">    open: <span class=\"function\">(<span class=\"params\">path, size, minSize=<span class=\"number\">1024</span>*<span class=\"number\">2</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件不打开文件描述符，直接读取写入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size &lt;= minSize) &#123;</span><br><span class=\"line\">            smallFileMap[path] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: &#123;</span><br><span class=\"line\">                fd: <span class=\"literal\">null</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符，建议绝对路径和fd的映射关系</span></span><br><span class=\"line\">          fs.open(path, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">601</span>,</span><br><span class=\"line\">                result: err.toString()</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              fdStore[path] = fd;</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                result: &#123;</span><br><span class=\"line\">                  fd: fdStore[path]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* 读取文件块 */</span></span><br><span class=\"line\">    read: <span class=\"function\">(<span class=\"params\">path, position, length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">600</span>,</span><br><span class=\"line\">              result: err.toString()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件直接读取，大文件使用文件描述符和偏移量读取</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            fs.readFile(path, (err, buffer) =&gt; &#123;</span><br><span class=\"line\">              callback(err, buffer);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空文件处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            fs.read(fdStore[path], Buffer.alloc(length), <span class=\"number\">0</span>, length, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, readByte, readResult</span>)</span>&#123;</span><br><span class=\"line\">              callback(err, readResult);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 关闭文件描述符 */</span></span><br><span class=\"line\">    close: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> smallFileMap[path];</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fs.close(fdStore[path], () =&gt; &#123;</span><br><span class=\"line\">              resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">200</span>&#125;);</span><br><span class=\"line\">              <span class=\"keyword\">delete</span> fdStore[path];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    fdStore</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"V-基于Electron的文件上传卡顿优化踩坑\">V 基于Electron的文件上传卡顿优化踩坑</h3><hr><p>优化是一件头大的事儿，因为你需要先通过很多测试手法找到现有代码的性能瓶颈，然后编写优化解决方案。我觉得找到性能瓶颈这一点就比较难，因为是自己写的代码所以容易陷入一些先入为主的刻板思考模式。不过最最主要的一点还是你如果自己都弄不清楚你使用的技术栈的话，那就无从谈起优化，所以前面有很大篇幅分析了Electron进程方面的知识以及梳理了整个上传流程。</p><h4 id=\"使用Electron自带的Devtools进行性能分析\">使用Electron自带的Devtools进行性能分析</h4><p>在文件上传过程中打开性能检测工具<code>Performance</code>进行录制，分析整个流程：</p><p><img src=\"upload_performance.jpg\" alt=\"upload_performance.jpg\"></p><p>在文件上传过程中打开内存工具<code>Memory</code>进行快照截取分析一个时刻的内存占用情况：</p><p><img src=\"upload_memory.jpg\" alt=\"upload_memory.jpg\"></p><h4 id=\"第一次尝试解决问题：替换Antd-Table组件\">第一次尝试解决问题：替换Antd Table组件</h4><p>在编写完成文件上传模块后，初步进行了压力测试，结果发现添加1000个文件上传任务到任务队列，且同时上传的文件上传任务数量为6时，上下滑动查看文件上传列表时出现了卡顿的情况，这种卡顿不局限于某个界面组件的卡顿，而且当前窗口的所有操作都卡了起来，初步怀疑是Antd Table组件引起的卡顿，因为Antd Table组件是个很复杂的高阶组件，在处理大量的数据时可能会有性能问题，遂我将Antd Table组件换成了原生的table组件，且Table列表只显示每个上传任务的任务名，其余的诸如上传进度这些都不予显示，从而想避开这个问题。令人吃惊的是测试结果是即使换用了原生Table组件，卡顿情况仍然毫无改善！</p><h4 id=\"第二次尝试解决问题：改造Electron主进程同步阻塞代码\">第二次尝试解决问题：改造Electron主进程同步阻塞代码</h4><p>先看下chromium的架构图，每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。</p><p><img src=\"chromium.jpg\" alt=\"upload_memory.jpg\"></p><p>综上所述：如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，主进程就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，自然渲染界面的UI绘制和更新就会呈现卡顿的状态。</p><p>我分析了一下Node.js端的文件任务管理的代码逻辑，把一些操作诸如获取文件大小、获取文件类型和删除文件这类的同步阻塞IO调用都换成了Node.js提倡的异步调用模式，即FS callback或Fs Promise链式调用。改动后发现卡顿情况改善不明显，遂进行了第三次尝试。</p><h4 id=\"第三次尝试解决问题：编写Node-js进程池分离上传任务管理逻辑\">第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑</h4><p>这次是大改😕</p><p><strong>1. 简单实现了node.js进程池</strong><br>源码：<a href=\"https://github.com/nojsja/javascript-learning/blob/master/file-slice-upload/service/app/services/child/libs/ChildProcessPool.class.js\" target=\"_blank\" rel=\"noopener\">ChildProcessPool.class.js</a>，主要逻辑是使用Node.js的<code>child_process</code>模块(具体使用请看<a href=\"http://nodejs.cn/api/child_process.html\" target=\"_blank\" rel=\"noopener\">文档</a>) 创建指定数量的多个子进程，外部通过进程池获取一个可用的进程，在进程中执行需要的代码逻辑，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用，省略代码如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildProcessPool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; path, max=<span class=\"number\">6</span>, cwd, env &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cwd = cwd || process.cwd();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.env = env || process.env;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.inspectStartIndex = <span class=\"number\">5858</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacks = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pidMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collaborationMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forked = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkedPath = path;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkMaxIndex = max;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* Received data from a child process */</span></span><br><span class=\"line\">  dataRespond = <span class=\"function\">(<span class=\"params\">data, id</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Received data from all child processes */</span></span><br><span class=\"line\">  dataRespondAll = <span class=\"function\">(<span class=\"params\">data, id</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Get a process instance from the pool */</span></span><br><span class=\"line\">  getForkedFromPool(id=<span class=\"string\">\"default\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> forked;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.pidMap.get(id)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create new process</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.forked.length &lt; <span class=\"keyword\">this</span>.forkMaxIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inspectStartIndex ++;</span><br><span class=\"line\">        forked = fork(</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.forkedPath,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.env.NODE_ENV === <span class=\"string\">\"development\"</span> ? [<span class=\"string\">`--inspect=<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.inspectStartIndex&#125;</span>`</span>] : [],</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            cwd: <span class=\"keyword\">this</span>.cwd,</span><br><span class=\"line\">            env: &#123; ...this.env, id &#125;,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forked.push(forked);</span><br><span class=\"line\">        forked.on(<span class=\"string\">'message'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> id = data.id;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> data.id;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> data.action;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.onMessage(&#123; data, id &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forkIndex = <span class=\"keyword\">this</span>.forkIndex % <span class=\"keyword\">this</span>.forkMaxIndex;</span><br><span class=\"line\">        forked = <span class=\"keyword\">this</span>.forked[<span class=\"keyword\">this</span>.forkIndex];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(id !== <span class=\"string\">'default'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pidMap.set(id, forked.pid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.pidMap.values.length === <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.warn(<span class=\"string\">'ChildProcessPool: The count of pidMap is over than 1000, suggest to use unique id!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.forkIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// use existing processes</span></span><br><span class=\"line\">      forked = <span class=\"keyword\">this</span>.forked.filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.pid === <span class=\"keyword\">this</span>.pidMap.get(id))[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!forked) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Get forked process from pool failed! the process pid: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.pidMap.get(id)&#125;</span>.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> forked;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * onMessage [Received data from a process]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>data [response data]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>id [process tmp id]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  onMessage(&#123; data, id &#125;) &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Send request to a process */</span></span><br><span class=\"line\">  send(taskName, params, givenId=<span class=\"string\">\"default\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (givenId === <span class=\"string\">'default'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'ChildProcessPool: Prohibit the use of this id value: [default] !'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = getRandomString();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forked = <span class=\"keyword\">this</span>.getForkedFromPool(givenId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[id] = resolve;</span><br><span class=\"line\">      forked.send(&#123;<span class=\"attr\">action</span>: taskName, params, id &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Send requests to all processes */</span></span><br><span class=\"line\">  sendToAll(taskName, params) &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>1）使用<code>send</code>和<code>sendToAll</code>方法向子进程发送消息，前者是向某个进程发送，如果请求参数指定了id则表明需要明确使用之前与此id建立过映射的某个进程，并期望拿到此进程的回应结果；后者是向进程池中的所有进程发送信号，并期望拿到所有进程返回的结果(<mark>供调用者外部调用</mark>)。</p></li><li><p>2）其中<code>dataRespond</code>和<code>dataRespondAll</code>方法对应上面的两个信号发送方法的进程返回数据回调函数，前者拿到进程池中指定的某个进程的回调结果，后者拿到进程池中所有进程的回调结果(<mark>进程池内部方法，调用者无需关注</mark>)。</p></li><li><p>3）<code>getForkedFromPool</code>方法是从进程池中拿到一个进程，如果进程池还没有一个子进程或是已经创建的子进程数量小于设置的可创建子进程数最大值，那么会优先新创建一个子进程放入进程池，然后返回这个子进程以供调用(<mark>进程池内部方法，调用者无需关注</mark>)。</p></li><li><p>4）<code>getForkedFromPool</code>方法中值得注意的是这行代码：<code>this.env.NODE_ENV === &quot;development&quot; ? [`--inspect=${this.inspectStartIndex}`] : []</code>，使用Node.js运行js脚本时加上<code>- -inspect=端口号</code> 参数可以开启所运行进程的远程调试端口，多进程程序状态追踪往往比较困难，所以采取这种方式后可以使用浏览器Devtools单独调试每个进程(具体可以在浏览器输入地址：<code>chrome://inspect/#devices</code>然后打开调试配置项，配置我们这边指定的调试端口号，最后点击蓝字<code>Open dedicated DevTools for Node</code>就能打开一个调试窗口，可以对代码进程断点调试、单步调试、步进步出、运行变量查看等操作，十分便利！)。<br><img src=\"inspect.jpg\" alt=\"inject.jpg\"></p></li></ul><p><strong>2. 分离子进程通信逻辑和业务逻辑</strong><br>另外被作为子进程执行文件载入的js文件中可以使用我封装的<a href=\"https://github.com/nojsja/javascript-learning/blob/master/file-slice-upload/service/app/services/child/libs/ProcessHost.class.js\" target=\"_blank\" rel=\"noopener\">ProcessHost.class.js</a>，我把它称为<code>进程事务管理中心</code>，主要功能是使用api诸如 - <code>ProcessHost.registry(taskName, func)</code>来注册多种<code>任务</code>，然后在主进程中可以直接使用进程池获取某个进程后向某个<code>任务</code>发送请求并取得<code>Promise</code>对象以拿到进程回调返回的数据，从而避免在我们的子进程执行文件中编写代码时过度关注进程之间数据的通信。<br>如果不使用<code>进程事务管理中心</code>的话我们就需要使用<code>process.send</code>来向一个进程发送消息并在另一个进程中使用<code>process.on('message', processor)</code>处理消息。需要注意的是如果注册的<code>task</code>任务是异步的则需要返回一个Promise对象而不是直接<code>return</code>数据，简略代码如下：</p><ul><li>1）registry用于子进程向事务中心注册自己的任务</li><li>2）unregistry用于取消任务注册</li><li>3）handleMessage处理进程接收到的消息并根据<code>action</code>参数调用某个任务</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessHost</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tasks = &#123; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleEvents();</span><br><span class=\"line\">    process.on(<span class=\"string\">'message'</span>, <span class=\"keyword\">this</span>.handleMessage.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* events listener */</span></span><br><span class=\"line\">  handleEvents() &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* received message */</span></span><br><span class=\"line\">  handleMessage(&#123; action, params, id &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tasks[action]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.tasks[action](params)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123; action, <span class=\"attr\">error</span>: <span class=\"literal\">null</span>, <span class=\"attr\">result</span>: rsp || &#123;&#125;, id &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123; action, error, <span class=\"attr\">result</span>: error || &#123;&#125;, id &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      process.send(&#123;</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        error: <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`ProcessHost: processor for action-[<span class=\"subst\">$&#123;action&#125;</span>] is not found!`</span>),</span><br><span class=\"line\">        result: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        id,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* registry a task */</span></span><br><span class=\"line\">  registry(taskName, processor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tasks[taskName]) <span class=\"built_in\">console</span>.warn(<span class=\"string\">`ProcesHost: the task-<span class=\"subst\">$&#123;taskName&#125;</span> is registered!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> processor !== <span class=\"string\">'function'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'ProcessHost: the processor must be a function!'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tasks[taskName] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve(processor(params))</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* unregistry a task */</span></span><br><span class=\"line\">  unregistry(taskName) &#123;...&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* disconnect */</span></span><br><span class=\"line\">  disconnect() &#123; process.disconnect(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* exit */</span></span><br><span class=\"line\">  exit() &#123; process.exit(); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">global.processHost = global.processHost || <span class=\"keyword\">new</span> ProcessHost();</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = global.processHost;</span><br></pre></td></tr></table></figure><p><strong>3. ChildProcessPool和ProcessHost的配合使用</strong><br>具体使用请查看上文完整<a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">demo</a><br>1）main.js (in main process)<br>主进程中引入进程池类，并创建进程池实例</p><ul><li>|——<code>path</code>参数为可执行文件路径</li><li>|——<code>max</code>指明进程池创建的最大子进程实例数量</li><li>|——<code>env</code>为传递给子进程的环境变量</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.js */</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> ChildProcessPool = <span class=\"built_in\">require</span>(<span class=\"string\">'path/to/ChildProcessPool.class'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">global.ipcUploadProcess = <span class=\"keyword\">new</span> ChildProcessPool(&#123;</span><br><span class=\"line\">  path: path.join(app.getAppPath(), <span class=\"string\">'app/services/child/upload.js'</span>),</span><br><span class=\"line\">  max: <span class=\"number\">3</span>, <span class=\"comment\">// process instance</span></span><br><span class=\"line\">  env: &#123; <span class=\"attr\">lang</span>: global.lang, <span class=\"attr\">NODE_ENV</span>: nodeEnv &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p>2）service.js (in main processs) 例子：使用进程池来发送<code>初始化分片上传</code>请求</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * init [初始化上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>host [主机名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>username [用户名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件描述对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>abspath [绝对路径]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>sharename [共享名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>fragsize [分片大小]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>prefix [目标上传地址前缀]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"> init(&#123; username, host, file, abspath, sharename, fragsize, prefix = <span class=\"string\">''</span> &#125;) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> date = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">   <span class=\"keyword\">const</span> uploadId = getStringMd5(date + file.name + file.type + file.size);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.getUploadPrepath</span><br><span class=\"line\">       .then(<span class=\"function\">(<span class=\"params\">pre</span>) =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">/* 看这里看这里！look here! */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> global.ipcUploadProcess.send(</span><br><span class=\"line\">           <span class=\"comment\">/* 进程事务名 */</span></span><br><span class=\"line\">           <span class=\"string\">'init-works'</span>,</span><br><span class=\"line\">           <span class=\"comment\">/* 携带的参数 */</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             username, host, sharename, pre, prefix, <span class=\"attr\">size</span>: file.size, <span class=\"attr\">name</span>: file.name, abspath, fragsize, <span class=\"attr\">record</span>: </span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">               host, <span class=\"comment\">// 主机</span></span><br><span class=\"line\">               filename: path.join(prefix, file.name), <span class=\"comment\">// 文件名</span></span><br><span class=\"line\">               size, <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">               fragsize, <span class=\"comment\">// 分片大小</span></span><br><span class=\"line\">               abspath, <span class=\"comment\">// 绝对路径</span></span><br><span class=\"line\">               startime: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()), <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">               endtime: <span class=\"string\">''</span>, <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">               uploadId, <span class=\"comment\">// 任务id</span></span><br><span class=\"line\">               index: <span class=\"number\">0</span>,</span><br><span class=\"line\">               total: <span class=\"built_in\">Math</span>.ceil(size / fragsize),</span><br><span class=\"line\">               status: <span class=\"string\">'uploading'</span> <span class=\"comment\">// 上传状态</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"comment\">/* 指定一个进程调用id */</span></span><br><span class=\"line\">           uploadId</span><br><span class=\"line\">         )</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(&#123;</span><br><span class=\"line\">         code: rsp.error ? <span class=\"number\">600</span> : <span class=\"number\">200</span>,</span><br><span class=\"line\">         result: rsp.result,</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(&#123;</span><br><span class=\"line\">         code: <span class=\"number\">600</span>,</span><br><span class=\"line\">         result: err.toString()</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p>3）child.js (in child process) 使用事务管理中心处理消息<br><code>child.js</code>即为创建进程池时传入的<code>path</code>参数所在的nodejs脚本代码，在此脚本中我们注册多个任务来处理从进程池发送过来的消息。<br>这段代码逻辑被单独分离到子进程中处理，其中：</p><ul><li>uploadStore - 主要用于在内存中维护整个文件上传列表，对上传任务列表进行增删查改操作(cpu耗时操作)</li><li>fileBlock - 利用FS API操作文件，比如打开某个文件的文件描述符、根据描述符和分片索引值读取一个文件的某一段Buffer数据、关闭文件描述符等等。虽然都是异步IO读写，对性能影响不大，不过为了整合nodejs端上传处理流程也将其一同纳入了子进程中管理，具体可以查看源码进行了解：<a href=\"https://github.com/nojsja/electron-react-template/blob/master/service/app/services/child/upload.js\" target=\"_blank\" rel=\"noopener\">源码</a></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fsPromise = fs.promises;</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./child.utils'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; readFileBlock, uploadRecordStore, unlink &#125; = utils;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ProcessHost = <span class=\"built_in\">require</span>(<span class=\"string\">'./libs/ProcessHost.class'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read a file block from a path</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileBlock = readFileBlock();</span><br><span class=\"line\"><span class=\"comment\">// maintain a shards upload queue</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadStore = uploadRecordStore();</span><br><span class=\"line\"></span><br><span class=\"line\">global.lang = process.env.lang;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* *************** registry all tasks *************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .registry(<span class=\"string\">'init-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initWorks(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'upload-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uploadWorks(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'close'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> close(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-set'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    uploadStore.set(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">result</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-get'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uploadStore.get(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-get-all'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (uploadStore.getAll(params));</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-update'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    uploadStore.update(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>&#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-remove'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    uploadStore.remove(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">result</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-reset'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    uploadStore.reset(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">result</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'unlink'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unlink(params);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* *************** upload logic *************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上传初始化工作 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initWorks</span>(<span class=\"params\">&#123;username, host, sharename, pre, prefix, name, abspath, size, fragsize, record &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> remotePath = path.join(pre, prefix, name);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reso</span>) =&gt;</span> fsPromise.unlink(remotePath).then(reso).catch(reso))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dirs = utils.getFileDirs([path.join(prefix, name)]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> utils.mkdirs(pre, dirs);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fileBlock.open(abspath, size))</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newRecord = &#123;</span><br><span class=\"line\">          ...record,</span><br><span class=\"line\">          size, <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">          remotePath,</span><br><span class=\"line\">          username,</span><br><span class=\"line\">          host,</span><br><span class=\"line\">          sharename,</span><br><span class=\"line\">          startime: utils.getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()), <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">          total: <span class=\"built_in\">Math</span>.ceil(size / fragsize),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        uploadStore.set(newRecord);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newRecord;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(rsp.result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   .then(resolve)</span><br><span class=\"line\">   .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(error.toString());</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h4 id=\"第四次尝试解决问题：重新审视渲染进程前端代码\">第四次尝试解决问题：重新审视渲染进程前端代码</h4><ul><li>很遗憾，第三次优化对卡顿的改善依然不明显，我开始怀疑是否是前端代码直接影响的渲染进程卡顿，毕竟前端并非采用懒加载模式进行文件载入上传的(这一怀疑之前被我否定，因为前端代码完全沿用了之前浏览器端对象存储文件分片上传开发时的逻辑，而在对象存储文件上传中并未察觉到界面卡顿，属实奇怪)。摒弃了先入为主的思想，其实Electron跟浏览器环境还是有些不同，不能排除前端代码就没有问题。</li><li>在详细查看了可能耗费CPU计算的代码逻辑后，发现有一段关于刷新上传任务的函数<code>refreshTasks</code>，主要逻辑是遍历所有未经上传文件原始对象数组，然后选取固定某个数量的文件(数量取决于设置的同时上传任务个数)放入待上传文件列表中，我发现如果<code>待上传文件列表的文件数量 = 设置的同时上传任务个数</code> 的情况下就不用继续遍历剩下的文件原始对象数组了。就是少写了这个判断条件导致<code>refreshTasks</code>这个频繁操作的函数在每次执行时可能多执行数千遍for循环内层判断逻辑(具体执行次数呈O(n)次增长，n为当前任务列表任务数量)。</li><li>加上一行检测逻辑代码后，之前1000个上传任务增长到10000个左右都不会太卡了，虽然还有略微卡顿，但没有到不能使用的程度，后续还有优化空间！</li></ul><p><img src=\"refreshTasks.jpg\" alt=\"refreshTasks\"></p><h3 id=\"总结\">总结</h3><hr><p>第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题… 总之获得了很多经验，也整理出了一些通用解决方法。<br>Electron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！</p>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考…</p></blockquote><h3 id=\"I-前言\">I 前言</h3><hr><p><img src=\"smb_upload_now.jpg\" alt=\"RhinoDisk\"></p><p>上一篇文章<a href=\"https://nojsja.gitee.io/blogs/2020/07/17/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/\" target=\"_blank\" rel=\"noopener\">《基于Electron的smb客户端开发记录》</a>，大致描述了整个SMB客户端开发的核心功能、实现难点、项目打包这些内容，这篇文章呢单独把其中的<code>文件分片上传模块</code>拿出来进行分享，提及一些与Electron主进程、渲染进程和文件上传优化相关的功能点。</p><h3 id=\"II-Demo运行\">II Demo运行</h3><hr><p>项目精简版 <a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">DEMO地址</a>，删除了smb处理的多余逻辑，使用文件复制模拟上传流程，可直接运行体验。</p><blockquote><p>demo运行时需要分别开启两个开发环境view -&gt; service，然后才能预览界面，由于没有后端，文件默认上传(复制)到electron数据目录(在Ubuntu上是<code>~/.config/FileSliceUpload/runtime/upload</code>)</p></blockquote><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入view目录</span></span><br><span class=\"line\">$: npm install</span><br><span class=\"line\">$: npm start</span><br><span class=\"line\"><span class=\"comment\"># 进入service目录</span></span><br><span class=\"line\">$: npm install</span><br><span class=\"line\">$: npm start</span><br><span class=\"line\"><span class=\"comment\"># 一键打包脚本 - 查看帮助</span></span><br><span class=\"line\">$: node build.js --<span class=\"built_in\">help</span></span><br><span class=\"line\"><span class=\"comment\"># 应用打包 - 为linux/mac/win平台打包</span></span><br><span class=\"line\">$: node build.js build-linux</span><br><span class=\"line\">$: node build.js build-mac</span><br><span class=\"line\">$: node build.js build-win</span><br></pre></td></tr></table></figure><h3 id=\"III-Electron进程架构\">III Electron进程架构</h3><hr><h4 id=\"主进程和渲染进程的区别\">主进程和渲染进程的区别</h4><p><img src=\"electron1.png\" alt=\"electron\"></p><p>Electron 运行 package.json 的 main 脚本的进程被称为主进程。在主进程中运行的脚本通过创建web页面来展示用户界面，一个 Electron 应用总是有且只有一个主进程。<br>主进程使用 BrowserWindow 实例创建页面，每个 BrowserWindow 实例都在自己的渲染进程里运行页面，当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。<br>主进程管理所有的web页面和它们对应的渲染进程，每个渲染进程都是独立的，它只关心它所运行的 web 页面。</p><p>在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。<br>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p><h4 id=\"主进程和渲染进程之间的通信\">主进程和渲染进程之间的通信</h4><blockquote><p>1/2-自带方法，3-外部扩展方法</p></blockquote><p><strong>1. 使用remote远程调用</strong></p><p>remote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 渲染进程中(web端代码) */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserWindow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>).remote</span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123; <span class=\"attr\">width</span>: <span class=\"number\">800</span>, <span class=\"attr\">height</span>: <span class=\"number\">600</span> &#125;)</span><br><span class=\"line\">win.loadURL(<span class=\"string\">'https://github.com'</span>)</span><br></pre></td></tr></table></figure><p>注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用于主进程和渲染进程频繁通信以及耗时请求的情况，否则会引起严重的程序性能问题。</p><p><strong>2. 使用ipc信号通信</strong></p><p>基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。<br>Electron进程之间通信最常用的一系列方法，但是在向其它子进程发送消息之前需要知道目标进程的<code>webContentsId</code>或者能够直接拿到目标进程的实例，使用方式不太灵活。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 主进程 */</span></span><br><span class=\"line\">ipcMain.on(channel, listener) <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcMain.once(channel, listener) <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcMain.handle(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器</span></span><br><span class=\"line\">ipcMain.handleOnce(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听</span></span><br><span class=\"line\">browserWindow.webContents.send(channel, args); <span class=\"comment\">// 显式地向某个渲染进程发送信息 - 异步触发</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 渲染进程 */</span></span><br><span class=\"line\">ipcRenderer.on(channel, listener); <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.once(channel, listener); <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendSync(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 同步触发</span></span><br><span class=\"line\">ipcRenderer.invoke(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 返回Promise对象等待触发</span></span><br><span class=\"line\">ipcRenderer.sendTo(webContentsId, channel, ...args); <span class=\"comment\">// 向某个渲染进程发送消息 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendToHost(channel, ...args) <span class=\"comment\">// 向host页面的webview发送消息 - 异步触发</span></span><br></pre></td></tr></table></figure><p><strong>3. 使用<mark>electron-re</mark>进行多向通信</strong></p><p><a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">electron-re</a> 是之前开发的一个处理electron进程间通信的工具，基于自带的ipc信号通信进行了封装，已经发布为npm组件。主要功能是在Electron已有的<code>Main Process</code>主进程 和 <code>Renderer Process</code>渲染进程概念的基础上独立出一个单独的<mark>Service</mark>逻辑。Service即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许<code>node注入</code>和<code>remote调用</code>的渲染窗口进程。</p><p>比如在你看过一些Electron<code>最佳实践</code>中，耗费cpu的操作是不建议被放到主进程中处理的，这时候就可以将这部分耗费cpu的操作编写成一个单独的js文件，然后使用Service构造函数以这个js文件的地址<code>path</code>为参数构造一个Service实例，并通过<code>electron-re</code>提供的<code>MessageChannel</code>通信工具在主进程、渲染进程、service进程之间任意发送消息，可以参考以下示例代码：</p><ul><li>1）main process</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  BrowserService,</span><br><span class=\"line\">  MessageChannel <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isInDev = process.env.NODE_ENV === <span class=\"string\">'dev'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after app is ready in main process</span></span><br><span class=\"line\">app.whenReady().then(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, <span class=\"string\">'path/to/app.service.js'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService2 = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app2'</span>, <span class=\"string\">'path/to/app2.service.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService.connected();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService2.connected();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// open devtools in dev mode for debugging</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInDev) myService.openDevTools();</span><br><span class=\"line\">    <span class=\"comment\">// send data to a service - like the build-in ipcMain.send</span></span><br><span class=\"line\">    MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span> &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// send data to a service and return a Promise - extension method</span></span><br><span class=\"line\">    MessageChannel.invoke(<span class=\"string\">'app'</span>, <span class=\"string\">'channel2'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test2'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// listen a channel, same as ipcMain.on</span></span><br><span class=\"line\">    MessageChannel.on(<span class=\"string\">'channel3'</span>, (event, response) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// handle a channel signal, same as ipcMain.handle</span></span><br><span class=\"line\">    <span class=\"comment\">// you can return data directly or return a Promise instance</span></span><br><span class=\"line\">    MessageChannel.handle(<span class=\"string\">'channel4'</span>, (event, response) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">res</span>: <span class=\"string\">'channel4-res'</span> &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ul><li>2）app.service.js</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MessageChannel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// listen a channel, same as ipcRenderer.on</span></span><br><span class=\"line\">MessageChannel.on(<span class=\"string\">'channel1'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// handle a channel signal, just like ipcMain.handle</span></span><br><span class=\"line\">MessageChannel.handle(<span class=\"string\">'channel2'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">'channel2-response'</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// send data to another service and return a promise , just like ipcRenderer.invoke</span></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'app2'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel3'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">event, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// send data to a service - like the build-in ipcRenderer.send</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel4'</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>3）app2.service.js</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// handle a channel signal, just like ipcMain.handle</span></span><br><span class=\"line\">MessageChannel.handle(<span class=\"string\">'channel3'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">'channel3-response'</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// listen a channel, same as ipcRenderer.once</span></span><br><span class=\"line\">MessageChannel.once(<span class=\"string\">'channel4'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// send data to main process, just like ipcRenderer.send</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel3'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// send data to main process and return a Promise, just like ipcRenderer.invoke</span></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel4'</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>4）renderer process window</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MessageChannel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"comment\">// send data to a service</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, ...);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'app2'</span>, ...);</span><br><span class=\"line\"><span class=\"comment\">// send data to main process</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, ...);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, ...);</span><br></pre></td></tr></table></figure><h3 id=\"IV-文件上传架构\">IV 文件上传架构</h3><hr><p>文件上传主要逻辑控制部分是前端的JS脚本代码，位于主窗口所在的render渲染进程，负责用户获取系统目录文件、生成上传任务队列、动态展示上传任务列表详情、任务列表的增删查改等；主进程Electron端的Node.js代码主要负责响应render进程的控制命令进行文件上传任务队列数据的增删查改、上传任务在内存和磁盘的同步、文件系统的交互、系统原生组件调用等。</p><h4 id=\"文件上传源和上传目标\">文件上传源和上传目标</h4><ul><li><p>在用户界面上使用<code>Input</code>组件获取到的FileList(HTML5 API，用于web端的简单文件操作)即为上传源；</p></li><li><p>上传目标地址是远端集群某个节点的smb服务，因为Node.js NPM生态对smb的支持有限，目前并未发现一个可以支持通过smb协议进行文件分片上传的npm库，所以考虑使用Node.js的FS API进行文件分段读取然后将分片数据逐步增量写入目标地址来模拟文件分片上传过程，从而实现在界面上单个大文件上传任务的启动、暂停、终止和续传等操作，所以这里的解决方案是使用Windows UNC命令连接后端共享后，可以像访问本地文件系统一样访问远程一个远程smb共享路径，比如文件路径<code>\\\\[host]\\[sharename]\\file1</code>上的file1在执行了unc连接后就可以通过Node.js FS API进行操作，跟操作本地文件完全一致。整个必须依赖smb协议的上传流程即精简为将本地拿到的文件数据复制到可以在本地访问的另一个smb共享路径这一流程，而这一切都得益于Windows <code>UNC</code>命令。</p></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用unc命令连接远程smb共享 */</span></span><br><span class=\"line\">_uncCommandConnect_Windows_NT(&#123; host, username, pwd &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; isThirdUser, nickname, isLocalUser &#125; = global.ipcMainProcess.userModel.info;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> commandUse = <span class=\"string\">`net use \\\\\\\\<span class=\"subst\">$&#123;host&#125;</span>\\\\ipc$ \"<span class=\"subst\">$&#123;pwd&#125;</span>\" /user:\"<span class=\"subst\">$&#123;username&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sudo.exec(commandUse).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">200</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(&#123;</span><br><span class=\"line\">          code: <span class=\"number\">600</span>,</span><br><span class=\"line\">          result: global.lang.upload.unc_connection_failed</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><h4 id=\"上传流程概述\">上传流程概述</h4><p>下图描述了整个前端部分的控制逻辑：</p><p><img src=\"shards_upload.jpg\" alt=\"upload\"></p><ol><li>页面上使用<code>&lt;Input /&gt;</code>组件拿到FileList对象(Electron环境下拿到的File对象会额外附加一个<code>path</code>属性指明文件位于系统的绝对路径)</li><li>缓存拿到的FileList，等待点击上传按钮后开始读取FileList列表并生成自定义的File文件对象数组用于存储上传任务列表信息</li><li>页面调用init请求附带上选中的文件信息初始化文件上传任务</li><li>Node.js拿到init请求附带的文件信息后，将所有信息存入临时存放在内存中的文件上传列表中，并尝试打开待上传文件的文件描述符用于即将开始的文件切片分段上传工作，最后返回给页面上传任务ID，Node.js端完成初始化处理</li><li>页面拿到init请求成功的回调后，存储返回的上传任务ID，并将该文件加入文件待上传队列，在合适的时机开始上传，开始上传的时候向Node.js端发送upload请求，同时请求附带上任务ID和当前的分片索引值(表示需要上传第几个文件分片)</li><li>Node.js拿到upload请求后根据携带的任务ID读取内存中的上传任务信息，然后使用第二步打开的文件描述符和分片索引对本地磁盘中的目标文件进行分片切割，最后使用FS API将分片递增写入目标位置，即本地可直接访问的SMB共享路径</li><li>upload请求成功后页面判断是否已经上传完所有分片，如果完成则向Node.js发送complete请求，同时携带上任务ID</li><li>Node.js根据任务ID获取文件信息，关闭文件描述符，更新文件上传任务为上传完成状态</li><li>界面上传任务列表全部完成后，向后端发送sync请求，把当前任务上传列表同步到历史任务(磁盘存储)中，表明当前列表中所有任务已经完成</li><li>Node.js拿到sync请求后，把内存中存储的所有文件上传列表信息写入磁盘，同时释放内存占用，完成一次列表任务上传</li></ol><h4 id=\"Node-js实现的文件分片管理工厂\">Node.js实现的文件分片管理工厂</h4><ul><li>文件初始化的时候调用<code>open</code>方法临时存储文件描述符和文件绝对路径的映射关系；</li><li>文件上传的时候调用<code>read</code>方法根据文件读取位置、读取容量大小进行分片切割；</li><li>文件上传完成的时候调用<code>close</code>关闭文件描述符；</li></ul><p>三个方法均通过文件绝对路径<code>path</code>参数建立关联：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * readFileBlock [读取文件块]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">exports.readFileBlock = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fdStore = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> smallFileMap = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 打开文件描述符 */</span></span><br><span class=\"line\">    open: <span class=\"function\">(<span class=\"params\">path, size, minSize=<span class=\"number\">1024</span>*<span class=\"number\">2</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件不打开文件描述符，直接读取写入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size &lt;= minSize) &#123;</span><br><span class=\"line\">            smallFileMap[path] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: &#123;</span><br><span class=\"line\">                fd: <span class=\"literal\">null</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 打开文件描述符，建议绝对路径和fd的映射关系</span></span><br><span class=\"line\">          fs.open(path, <span class=\"string\">'r'</span>, (err, fd) =&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">              <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">601</span>,</span><br><span class=\"line\">                result: err.toString()</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              fdStore[path] = fd;</span><br><span class=\"line\">              resolve(&#123;</span><br><span class=\"line\">                code: <span class=\"number\">200</span>,</span><br><span class=\"line\">                result: &#123;</span><br><span class=\"line\">                  fd: fdStore[path]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">/* 读取文件块 */</span></span><br><span class=\"line\">    read: <span class=\"function\">(<span class=\"params\">path, position, length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> callback = <span class=\"function\">(<span class=\"params\">err, data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">600</span>,</span><br><span class=\"line\">              result: err.toString()</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span>,</span><br><span class=\"line\">              result: data</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 小文件直接读取，大文件使用文件描述符和偏移量读取</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            fs.readFile(path, (err, buffer) =&gt; &#123;</span><br><span class=\"line\">              callback(err, buffer);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空文件处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (length === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> callback(<span class=\"literal\">null</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">            fs.read(fdStore[path], Buffer.alloc(length), <span class=\"number\">0</span>, length, position, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, readByte, readResult</span>)</span>&#123;</span><br><span class=\"line\">              callback(err, readResult);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 关闭文件描述符 */</span></span><br><span class=\"line\">    close: <span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (smallFileMap[path]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">delete</span> smallFileMap[path];</span><br><span class=\"line\">            resolve(&#123;</span><br><span class=\"line\">              code: <span class=\"number\">200</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fs.close(fdStore[path], () =&gt; &#123;</span><br><span class=\"line\">              resolve(&#123;<span class=\"attr\">code</span>: <span class=\"number\">200</span>&#125;);</span><br><span class=\"line\">              <span class=\"keyword\">delete</span> fdStore[path];</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.trace(err);</span><br><span class=\"line\">          resolve(&#123;</span><br><span class=\"line\">            code: <span class=\"number\">600</span>,</span><br><span class=\"line\">            result: err.toString()</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    fdStore</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"V-基于Electron的文件上传卡顿优化踩坑\">V 基于Electron的文件上传卡顿优化踩坑</h3><hr><p>优化是一件头大的事儿，因为你需要先通过很多测试手法找到现有代码的性能瓶颈，然后编写优化解决方案。我觉得找到性能瓶颈这一点就比较难，因为是自己写的代码所以容易陷入一些先入为主的刻板思考模式。不过最最主要的一点还是你如果自己都弄不清楚你使用的技术栈的话，那就无从谈起优化，所以前面有很大篇幅分析了Electron进程方面的知识以及梳理了整个上传流程。</p><h4 id=\"使用Electron自带的Devtools进行性能分析\">使用Electron自带的Devtools进行性能分析</h4><p>在文件上传过程中打开性能检测工具<code>Performance</code>进行录制，分析整个流程：</p><p><img src=\"upload_performance.jpg\" alt=\"upload_performance.jpg\"></p><p>在文件上传过程中打开内存工具<code>Memory</code>进行快照截取分析一个时刻的内存占用情况：</p><p><img src=\"upload_memory.jpg\" alt=\"upload_memory.jpg\"></p><h4 id=\"第一次尝试解决问题：替换Antd-Table组件\">第一次尝试解决问题：替换Antd Table组件</h4><p>在编写完成文件上传模块后，初步进行了压力测试，结果发现添加1000个文件上传任务到任务队列，且同时上传的文件上传任务数量为6时，上下滑动查看文件上传列表时出现了卡顿的情况，这种卡顿不局限于某个界面组件的卡顿，而且当前窗口的所有操作都卡了起来，初步怀疑是Antd Table组件引起的卡顿，因为Antd Table组件是个很复杂的高阶组件，在处理大量的数据时可能会有性能问题，遂我将Antd Table组件换成了原生的table组件，且Table列表只显示每个上传任务的任务名，其余的诸如上传进度这些都不予显示，从而想避开这个问题。令人吃惊的是测试结果是即使换用了原生Table组件，卡顿情况仍然毫无改善！</p><h4 id=\"第二次尝试解决问题：改造Electron主进程同步阻塞代码\">第二次尝试解决问题：改造Electron主进程同步阻塞代码</h4><p>先看下chromium的架构图，每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。</p><p><img src=\"chromium.jpg\" alt=\"upload_memory.jpg\"></p><p>综上所述：如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，主进程就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，自然渲染界面的UI绘制和更新就会呈现卡顿的状态。</p><p>我分析了一下Node.js端的文件任务管理的代码逻辑，把一些操作诸如获取文件大小、获取文件类型和删除文件这类的同步阻塞IO调用都换成了Node.js提倡的异步调用模式，即FS callback或Fs Promise链式调用。改动后发现卡顿情况改善不明显，遂进行了第三次尝试。</p><h4 id=\"第三次尝试解决问题：编写Node-js进程池分离上传任务管理逻辑\">第三次尝试解决问题：编写Node.js进程池分离上传任务管理逻辑</h4><p>这次是大改😕</p><p><strong>1. 简单实现了node.js进程池</strong><br>源码：<a href=\"https://github.com/nojsja/javascript-learning/blob/master/file-slice-upload/service/app/services/child/libs/ChildProcessPool.class.js\" target=\"_blank\" rel=\"noopener\">ChildProcessPool.class.js</a>，主要逻辑是使用Node.js的<code>child_process</code>模块(具体使用请看<a href=\"http://nodejs.cn/api/child_process.html\" target=\"_blank\" rel=\"noopener\">文档</a>) 创建指定数量的多个子进程，外部通过进程池获取一个可用的进程，在进程中执行需要的代码逻辑，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用，省略代码如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildProcessPool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; path, max=<span class=\"number\">6</span>, cwd, env &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cwd = cwd || process.cwd();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.env = env || process.env;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.inspectStartIndex = <span class=\"number\">5858</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callbacks = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pidMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collaborationMap = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forked = [];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkedPath = path;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forkMaxIndex = max;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* Received data from a child process */</span></span><br><span class=\"line\">  dataRespond = <span class=\"function\">(<span class=\"params\">data, id</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Received data from all child processes */</span></span><br><span class=\"line\">  dataRespondAll = <span class=\"function\">(<span class=\"params\">data, id</span>) =&gt;</span> &#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Get a process instance from the pool */</span></span><br><span class=\"line\">  getForkedFromPool(id=<span class=\"string\">\"default\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> forked;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.pidMap.get(id)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create new process</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.forked.length &lt; <span class=\"keyword\">this</span>.forkMaxIndex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.inspectStartIndex ++;</span><br><span class=\"line\">        forked = fork(</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.forkedPath,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.env.NODE_ENV === <span class=\"string\">\"development\"</span> ? [<span class=\"string\">`--inspect=<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.inspectStartIndex&#125;</span>`</span>] : [],</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            cwd: <span class=\"keyword\">this</span>.cwd,</span><br><span class=\"line\">            env: &#123; ...this.env, id &#125;,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forked.push(forked);</span><br><span class=\"line\">        forked.on(<span class=\"string\">'message'</span>, (data) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> id = data.id;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> data.id;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> data.action;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.onMessage(&#123; data, id &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.forkIndex = <span class=\"keyword\">this</span>.forkIndex % <span class=\"keyword\">this</span>.forkMaxIndex;</span><br><span class=\"line\">        forked = <span class=\"keyword\">this</span>.forked[<span class=\"keyword\">this</span>.forkIndex];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(id !== <span class=\"string\">'default'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.pidMap.set(id, forked.pid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.pidMap.values.length === <span class=\"number\">1000</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.warn(<span class=\"string\">'ChildProcessPool: The count of pidMap is over than 1000, suggest to use unique id!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.forkIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// use existing processes</span></span><br><span class=\"line\">      forked = <span class=\"keyword\">this</span>.forked.filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.pid === <span class=\"keyword\">this</span>.pidMap.get(id))[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!forked) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`Get forked process from pool failed! the process pid: <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.pidMap.get(id)&#125;</span>.`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> forked;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * onMessage [Received data from a process]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>data [response data]</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>id [process tmp id]</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  onMessage(&#123; data, id &#125;) &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Send request to a process */</span></span><br><span class=\"line\">  send(taskName, params, givenId=<span class=\"string\">\"default\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (givenId === <span class=\"string\">'default'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'ChildProcessPool: Prohibit the use of this id value: [default] !'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> id = getRandomString();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forked = <span class=\"keyword\">this</span>.getForkedFromPool(givenId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.callbacks[id] = resolve;</span><br><span class=\"line\">      forked.send(&#123;<span class=\"attr\">action</span>: taskName, params, id &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Send requests to all processes */</span></span><br><span class=\"line\">  sendToAll(taskName, params) &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>1）使用<code>send</code>和<code>sendToAll</code>方法向子进程发送消息，前者是向某个进程发送，如果请求参数指定了id则表明需要明确使用之前与此id建立过映射的某个进程，并期望拿到此进程的回应结果；后者是向进程池中的所有进程发送信号，并期望拿到所有进程返回的结果(<mark>供调用者外部调用</mark>)。</p></li><li><p>2）其中<code>dataRespond</code>和<code>dataRespondAll</code>方法对应上面的两个信号发送方法的进程返回数据回调函数，前者拿到进程池中指定的某个进程的回调结果，后者拿到进程池中所有进程的回调结果(<mark>进程池内部方法，调用者无需关注</mark>)。</p></li><li><p>3）<code>getForkedFromPool</code>方法是从进程池中拿到一个进程，如果进程池还没有一个子进程或是已经创建的子进程数量小于设置的可创建子进程数最大值，那么会优先新创建一个子进程放入进程池，然后返回这个子进程以供调用(<mark>进程池内部方法，调用者无需关注</mark>)。</p></li><li><p>4）<code>getForkedFromPool</code>方法中值得注意的是这行代码：<code>this.env.NODE_ENV === &quot;development&quot; ? [`--inspect=${this.inspectStartIndex}`] : []</code>，使用Node.js运行js脚本时加上<code>- -inspect=端口号</code> 参数可以开启所运行进程的远程调试端口，多进程程序状态追踪往往比较困难，所以采取这种方式后可以使用浏览器Devtools单独调试每个进程(具体可以在浏览器输入地址：<code>chrome://inspect/#devices</code>然后打开调试配置项，配置我们这边指定的调试端口号，最后点击蓝字<code>Open dedicated DevTools for Node</code>就能打开一个调试窗口，可以对代码进程断点调试、单步调试、步进步出、运行变量查看等操作，十分便利！)。<br><img src=\"inspect.jpg\" alt=\"inject.jpg\"></p></li></ul><p><strong>2. 分离子进程通信逻辑和业务逻辑</strong><br>另外被作为子进程执行文件载入的js文件中可以使用我封装的<a href=\"https://github.com/nojsja/javascript-learning/blob/master/file-slice-upload/service/app/services/child/libs/ProcessHost.class.js\" target=\"_blank\" rel=\"noopener\">ProcessHost.class.js</a>，我把它称为<code>进程事务管理中心</code>，主要功能是使用api诸如 - <code>ProcessHost.registry(taskName, func)</code>来注册多种<code>任务</code>，然后在主进程中可以直接使用进程池获取某个进程后向某个<code>任务</code>发送请求并取得<code>Promise</code>对象以拿到进程回调返回的数据，从而避免在我们的子进程执行文件中编写代码时过度关注进程之间数据的通信。<br>如果不使用<code>进程事务管理中心</code>的话我们就需要使用<code>process.send</code>来向一个进程发送消息并在另一个进程中使用<code>process.on('message', processor)</code>处理消息。需要注意的是如果注册的<code>task</code>任务是异步的则需要返回一个Promise对象而不是直接<code>return</code>数据，简略代码如下：</p><ul><li>1）registry用于子进程向事务中心注册自己的任务</li><li>2）unregistry用于取消任务注册</li><li>3）handleMessage处理进程接收到的消息并根据<code>action</code>参数调用某个任务</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessHost</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tasks = &#123; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handleEvents();</span><br><span class=\"line\">    process.on(<span class=\"string\">'message'</span>, <span class=\"keyword\">this</span>.handleMessage.bind(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* events listener */</span></span><br><span class=\"line\">  handleEvents() &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* received message */</span></span><br><span class=\"line\">  handleMessage(&#123; action, params, id &#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tasks[action]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.tasks[action](params)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123; action, <span class=\"attr\">error</span>: <span class=\"literal\">null</span>, <span class=\"attr\">result</span>: rsp || &#123;&#125;, id &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">        process.send(&#123; action, error, <span class=\"attr\">result</span>: error || &#123;&#125;, id &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      process.send(&#123;</span><br><span class=\"line\">        action,</span><br><span class=\"line\">        error: <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`ProcessHost: processor for action-[<span class=\"subst\">$&#123;action&#125;</span>] is not found!`</span>),</span><br><span class=\"line\">        result: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        id,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* registry a task */</span></span><br><span class=\"line\">  registry(taskName, processor) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.tasks[taskName]) <span class=\"built_in\">console</span>.warn(<span class=\"string\">`ProcesHost: the task-<span class=\"subst\">$&#123;taskName&#125;</span> is registered!`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> processor !== <span class=\"string\">'function'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'ProcessHost: the processor must be a function!'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tasks[taskName] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">Promise</span>.resolve(processor(params))</span><br><span class=\"line\">          .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> &#123;</span><br><span class=\"line\">            resolve(rsp);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">            reject(error);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* unregistry a task */</span></span><br><span class=\"line\">  unregistry(taskName) &#123;...&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* disconnect */</span></span><br><span class=\"line\">  disconnect() &#123; process.disconnect(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* exit */</span></span><br><span class=\"line\">  exit() &#123; process.exit(); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">global.processHost = global.processHost || <span class=\"keyword\">new</span> ProcessHost();</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = global.processHost;</span><br></pre></td></tr></table></figure><p><strong>3. ChildProcessPool和ProcessHost的配合使用</strong><br>具体使用请查看上文完整<a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">demo</a><br>1）main.js (in main process)<br>主进程中引入进程池类，并创建进程池实例</p><ul><li>|——<code>path</code>参数为可执行文件路径</li><li>|——<code>max</code>指明进程池创建的最大子进程实例数量</li><li>|——<code>env</code>为传递给子进程的环境变量</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.js */</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> ChildProcessPool = <span class=\"built_in\">require</span>(<span class=\"string\">'path/to/ChildProcessPool.class'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">global.ipcUploadProcess = <span class=\"keyword\">new</span> ChildProcessPool(&#123;</span><br><span class=\"line\">  path: path.join(app.getAppPath(), <span class=\"string\">'app/services/child/upload.js'</span>),</span><br><span class=\"line\">  max: <span class=\"number\">3</span>, <span class=\"comment\">// process instance</span></span><br><span class=\"line\">  env: &#123; <span class=\"attr\">lang</span>: global.lang, <span class=\"attr\">NODE_ENV</span>: nodeEnv &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p>2）service.js (in main processs) 例子：使用进程池来发送<code>初始化分片上传</code>请求</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * init [初始化上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>host [主机名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>username [用户名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件描述对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>abspath [绝对路径]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>sharename [共享名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>fragsize [分片大小]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>prefix [目标上传地址前缀]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"> init(&#123; username, host, file, abspath, sharename, fragsize, prefix = <span class=\"string\">''</span> &#125;) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> date = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">   <span class=\"keyword\">const</span> uploadId = getStringMd5(date + file.name + file.type + file.size);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.getUploadPrepath</span><br><span class=\"line\">       .then(<span class=\"function\">(<span class=\"params\">pre</span>) =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">/* 看这里看这里！look here! */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> global.ipcUploadProcess.send(</span><br><span class=\"line\">           <span class=\"comment\">/* 进程事务名 */</span></span><br><span class=\"line\">           <span class=\"string\">'init-works'</span>,</span><br><span class=\"line\">           <span class=\"comment\">/* 携带的参数 */</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             username, host, sharename, pre, prefix, <span class=\"attr\">size</span>: file.size, <span class=\"attr\">name</span>: file.name, abspath, fragsize, <span class=\"attr\">record</span>: </span><br><span class=\"line\">             &#123;</span><br><span class=\"line\">               host, <span class=\"comment\">// 主机</span></span><br><span class=\"line\">               filename: path.join(prefix, file.name), <span class=\"comment\">// 文件名</span></span><br><span class=\"line\">               size, <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">               fragsize, <span class=\"comment\">// 分片大小</span></span><br><span class=\"line\">               abspath, <span class=\"comment\">// 绝对路径</span></span><br><span class=\"line\">               startime: getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()), <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">               endtime: <span class=\"string\">''</span>, <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">               uploadId, <span class=\"comment\">// 任务id</span></span><br><span class=\"line\">               index: <span class=\"number\">0</span>,</span><br><span class=\"line\">               total: <span class=\"built_in\">Math</span>.ceil(size / fragsize),</span><br><span class=\"line\">               status: <span class=\"string\">'uploading'</span> <span class=\"comment\">// 上传状态</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"comment\">/* 指定一个进程调用id */</span></span><br><span class=\"line\">           uploadId</span><br><span class=\"line\">         )</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(&#123;</span><br><span class=\"line\">         code: rsp.error ? <span class=\"number\">600</span> : <span class=\"number\">200</span>,</span><br><span class=\"line\">         result: rsp.result,</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(&#123;</span><br><span class=\"line\">         code: <span class=\"number\">600</span>,</span><br><span class=\"line\">         result: err.toString()</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p>3）child.js (in child process) 使用事务管理中心处理消息<br><code>child.js</code>即为创建进程池时传入的<code>path</code>参数所在的nodejs脚本代码，在此脚本中我们注册多个任务来处理从进程池发送过来的消息。<br>这段代码逻辑被单独分离到子进程中处理，其中：</p><ul><li>uploadStore - 主要用于在内存中维护整个文件上传列表，对上传任务列表进行增删查改操作(cpu耗时操作)</li><li>fileBlock - 利用FS API操作文件，比如打开某个文件的文件描述符、根据描述符和分片索引值读取一个文件的某一段Buffer数据、关闭文件描述符等等。虽然都是异步IO读写，对性能影响不大，不过为了整合nodejs端上传处理流程也将其一同纳入了子进程中管理，具体可以查看源码进行了解：<a href=\"https://github.com/nojsja/electron-react-template/blob/master/service/app/services/child/upload.js\" target=\"_blank\" rel=\"noopener\">源码</a></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fsPromise = fs.promises;</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./child.utils'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; readFileBlock, uploadRecordStore, unlink &#125; = utils;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ProcessHost = <span class=\"built_in\">require</span>(<span class=\"string\">'./libs/ProcessHost.class'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read a file block from a path</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileBlock = readFileBlock();</span><br><span class=\"line\"><span class=\"comment\">// maintain a shards upload queue</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadStore = uploadRecordStore();</span><br><span class=\"line\"></span><br><span class=\"line\">global.lang = process.env.lang;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* *************** registry all tasks *************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .registry(<span class=\"string\">'init-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initWorks(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'upload-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uploadWorks(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'close'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> close(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-set'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    uploadStore.set(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">result</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-get'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uploadStore.get(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-get-all'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (uploadStore.getAll(params));</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-update'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    uploadStore.update(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (&#123;<span class=\"attr\">result</span>: <span class=\"literal\">null</span>&#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-remove'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    uploadStore.remove(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">result</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'record-reset'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    uploadStore.reset(params);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">result</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'unlink'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unlink(params);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* *************** upload logic *************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上传初始化工作 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initWorks</span>(<span class=\"params\">&#123;username, host, sharename, pre, prefix, name, abspath, size, fragsize, record &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> remotePath = path.join(pre, prefix, name);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reso</span>) =&gt;</span> fsPromise.unlink(remotePath).then(reso).catch(reso))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dirs = utils.getFileDirs([path.join(prefix, name)]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> utils.mkdirs(pre, dirs);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fileBlock.open(abspath, size))</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newRecord = &#123;</span><br><span class=\"line\">          ...record,</span><br><span class=\"line\">          size, <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">          remotePath,</span><br><span class=\"line\">          username,</span><br><span class=\"line\">          host,</span><br><span class=\"line\">          sharename,</span><br><span class=\"line\">          startime: utils.getTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()), <span class=\"comment\">// 上传日期</span></span><br><span class=\"line\">          total: <span class=\"built_in\">Math</span>.ceil(size / fragsize),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        uploadStore.set(newRecord);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newRecord;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(rsp.result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   .then(resolve)</span><br><span class=\"line\">   .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(error.toString());</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h4 id=\"第四次尝试解决问题：重新审视渲染进程前端代码\">第四次尝试解决问题：重新审视渲染进程前端代码</h4><ul><li>很遗憾，第三次优化对卡顿的改善依然不明显，我开始怀疑是否是前端代码直接影响的渲染进程卡顿，毕竟前端并非采用懒加载模式进行文件载入上传的(这一怀疑之前被我否定，因为前端代码完全沿用了之前浏览器端对象存储文件分片上传开发时的逻辑，而在对象存储文件上传中并未察觉到界面卡顿，属实奇怪)。摒弃了先入为主的思想，其实Electron跟浏览器环境还是有些不同，不能排除前端代码就没有问题。</li><li>在详细查看了可能耗费CPU计算的代码逻辑后，发现有一段关于刷新上传任务的函数<code>refreshTasks</code>，主要逻辑是遍历所有未经上传文件原始对象数组，然后选取固定某个数量的文件(数量取决于设置的同时上传任务个数)放入待上传文件列表中，我发现如果<code>待上传文件列表的文件数量 = 设置的同时上传任务个数</code> 的情况下就不用继续遍历剩下的文件原始对象数组了。就是少写了这个判断条件导致<code>refreshTasks</code>这个频繁操作的函数在每次执行时可能多执行数千遍for循环内层判断逻辑(具体执行次数呈O(n)次增长，n为当前任务列表任务数量)。</li><li>加上一行检测逻辑代码后，之前1000个上传任务增长到10000个左右都不会太卡了，虽然还有略微卡顿，但没有到不能使用的程度，后续还有优化空间！</li></ul><p><img src=\"refreshTasks.jpg\" alt=\"refreshTasks\"></p><h3 id=\"总结\">总结</h3><hr><p>第一次把Electron技术应用到实际项目中，踩了挺多坑：render进程和主进程通信的问题、跨平台兼容的问题、多平台打包的问题、窗口管理的问题… 总之获得了很多经验，也整理出了一些通用解决方法。<br>Electron现在应用的项目还是挺多的，是前端同学跨足桌面软件开发领域的又一里程碑，不过需要转换一下思维模式，单纯写前端代码多是处理一些简单的界面逻辑和少量的数据，涉及到文件、系统操作、进程线程、原生交互方面的知识比较少，可以多了解一下计算机操作系统方面的知识、掌握代码设计模式和一些基本的算法优化方面的知识能让你更加胜任Electron桌面软件开发任务！</p>"},{"title":"32个手撕JS，彻底摆脱初级前端","catalog":true,"toc_nav_num":true,"header-img":"/blogs/img/article_header/article_header.png","date":"2020-09-25T03:19:34.000Z","subtitle":"js native development","_content":"\n[32个手撕JS，彻底摆脱初级前端（面试高频）](https://juejin.im/post/6875152247714480136#heading-20)\n # 32个手撕JS，彻底摆脱初级前端（面试高频）\n \n 作为前端开发，JS是重中之重，最近结束了面试的高峰期，基本上offer也定下来了就等开奖，趁着这个时间总结下32个手撕JS问题，这些都是高频面试题，完全理解之后定能彻底摆脱初级前端。\n \n 关于源码都紧遵规范，都可跑通MDN示例，其余的大多会涉及一些关于JS的应用题和本人面试过程\n \n ## 01.数组扁平化\n \n 数组扁平化是指将一个多维数组变为一个一维数组\n \n     const arr = [1, [2, [3, [4, 5]]], 6];\n     // => [1, 2, 3, 4, 5, 6]\n     复制代码\n \n ### 方法一：使用flat()\n \n     const res1 = arr.flat(Infinity);\n     复制代码\n \n ### 方法二：利用正则\n \n     const res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',');\n     复制代码\n \n 但数据类型都会变为字符串\n \n ### 方法三：正则改良版本\n \n     const res3 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']');\n     复制代码\n \n ### 方法四：使用reduce\n \n     const flatten = arr => {\n       return arr.reduce((pre, cur) => {\n         return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n       }, [])\n     }\n     const res4 = flatten(arr);\n     复制代码\n \n ### 方法五：函数递归\n \n     const res5 = [];\n     const fn = arr => {\n       for (let i = 0; i < arr.length; i++) {\n         if (Array.isArray(arr[i])) {\n           fn(arr[i]);\n         } else {\n           res5.push(arr[i]);\n         }\n       }\n     }\n     fn(arr);\n     复制代码\n \n ## 02.数组去重\n \n     const arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n     // => [1, '1', 17, true, false, 'true', 'a', {}, {}]\n     复制代码\n \n ### 方法一：利用Set\n \n     const res1 = Array.from(new Set(arr));\n     复制代码\n \n ### 方法二：两层for循环+splice\n \n     const unique1 = arr => {\n       let len = arr.length;\n       for (let i = 0; i < len; i++) {\n         for (let j = i + 1; j < len; j++) {\n           if (arr[i] === arr[j]) {\n             arr.splice(j, 1);\n             // 每删除一个树，j--保证j的值经过自加后不变。同时，len--，减少循环次数提升性能\n             len--;\n             j--;\n           }\n         }\n       }\n       return arr;\n     }\n     复制代码\n \n ### 方法三：利用indexOf\n \n     const unique2 = arr => {\n       const res = [];\n       for (let i = 0; i < arr.length; i++) {\n         if (res.indexOf(arr[i]) === -1) res.push(arr[i]);\n       }\n       return res;\n     }\n     复制代码\n \n 当然也可以用include、filter，思路大同小异。\n \n ### 方法四：利用include\n \n     const unique3 = arr => {\n       const res = [];\n       for (let i = 0; i < arr.length; i++) {\n         if (!res.includes(arr[i])) res.push(arr[i]);\n       }\n       return res;\n     }\n     复制代码\n \n ### 方法五：利用filter\n \n     const unique4 = arr => {\n       return arr.filter((item, index) => {\n         return arr.indexOf(item) === index;\n       });\n     }\n     复制代码\n \n ### 方法六：利用Map\n \n     const unique5 = arr => {\n       const map = new Map();\n       const res = [];\n       for (let i = 0; i < arr.length; i++) {\n         if (!map.has(arr[i])) {\n           map.set(arr[i], true)\n           res.push(arr[i]);\n         }\n       }\n       return res;\n     }\n     复制代码\n \n ## 03.类数组转化为数组\n \n 类数组是具有**length**属性，但不具有数组原型上的方法。常见的类数组有**arguments**、DOM操作方法返回的结果。\n \n ### 方法一：Array.from\n \n     Array.from(document.querySelectorAll('div'))\n     复制代码\n \n ### 方法二：Array.prototype.slice.call()\n \n     Array.prototype.slice.call(document.querySelectorAll('div'))\n     复制代码\n \n ### 方法三：扩展运算符\n \n     [...document.querySelectorAll('div')]\n     复制代码\n \n ### 方法四：利用concat\n \n     Array.prototype.concat.apply([], document.querySelectorAll('div'));\n     复制代码\n \n ## 04.Array.prototype.filter()\n \n ![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/804ee51d522746c3b219548d038413c2~tplv-k3u1fbpfcp-zoom-1.image)\n \n     Array.prototype.filter = function(callback, thisArg) {\n       if (this == undefined) {\n         throw new TypeError('this is null or not undefined');\n       }\n       if (typeof callback !== 'function') {\n         throw new TypeError(callback + 'is not a function');\n       }\n       const res = [];\n       // 让O成为回调函数的对象传递（强制转换对象）\n       const O = Object(this);\n       // >>>0 保证len为number，且为正整数\n       const len = O.length >>> 0;\n       for (let i = 0; i < len; i++) {\n         // 检查i是否在O的属性（会检查原型链）\n         if (i in O) {\n           // 回调函数调用传参\n           if (callback.call(thisArg, O[i], i, O)) {\n             res.push(O[i]);\n           }\n         }\n       }\n       return res;\n     }\n     复制代码\n \n 对于`>>>0`有疑问的：[解释>>>0的作用](https://zhuanlan.zhihu.com/p/100790268)\n \n ## 05.Array.prototype.map()\n \n ![](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b099cf3e06bc4421abac4dc460a13c17~tplv-k3u1fbpfcp-zoom-1.image)\n \n     Array.prototype.map = function(callback, thisArg) {\n       if (this == undefined) {\n         throw new TypeError('this is null or not defined');\n       }\n       if (typeof callback !== 'function') {\n         throw new TypeError(callback + ' is not a function');\n       }\n       const res = [];\n       // 同理\n       const O = Object(this);\n       const len = O.length >>> 0;\n       for (let i = 0; i < len; i++) {\n         if (i in O) {\n           // 调用回调函数并传入新数组\n           res[i] = callback.call(thisArg, O[i], i, this);\n         }\n       }\n       return res;\n     }\n     复制代码\n \n ## 06.Array.prototype.forEach()\n \n ![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c3819fb0c404ae5a8f4cddc4e80731e~tplv-k3u1fbpfcp-zoom-1.image)\n \n `forEach`跟map类似，唯一不同的是`forEach`是没有返回值的。\n \n     Array.prototype.forEach = function(callback, thisArg) {\n       if (this == null) {\n         throw new TypeError('this is null or not defined');\n       }\n       if (typeof callback !== \"function\") {\n         throw new TypeError(callback + ' is not a function');\n       }\n       const O = Object(this);\n       const len = O.length >>> 0;\n       let k = 0;\n       while (k < len) {\n         if (k in O) {\n           callback.call(thisArg, O[k], k, O);\n         }\n         k++;\n       }\n     }\n     复制代码\n \n ## 07.Array.prototype.reduce()\n \n ![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e51625eb9e2d47799ff39c5956139af7~tplv-k3u1fbpfcp-zoom-1.image)\n \n     Array.prototype.reduce = function(callback, initialValue) {\n       if (this == undefined) {\n         throw new TypeError('this is null or not defined');\n       }\n       if (typeof callback !== 'function') {\n         throw new TypeError(callbackfn + ' is not a function');\n       }\n       const O = Object(this);\n       const len = this.length >>> 0;\n       let accumulator = initialValue;\n       let k = 0;\n       // 如果第二个参数为undefined的情况下\n       // 则数组的第一个有效值作为累加器的初始值\n       if (accumulator === undefined) {\n         while (k < len && !(k in O)) {\n           k++;\n         }\n         // 如果超出数组界限还没有找到累加器的初始值，则TypeError\n         if (k >= len) {\n           throw new TypeError('Reduce of empty array with no initial value');\n         }\n         accumulator = O[k++];\n       }\n       while (k < len) {\n         if (k in O) {\n           accumulator = callback.call(undefined, accumulator, O[k], k, O);\n         }\n         k++;\n       }\n       return accumulator;\n     }\n     复制代码\n \n ## 08.Function.prototype.apply()\n \n 第一个参数是绑定的this，默认为`window`，第二个参数是数组或类数组\n \n     Function.prototype.apply = function(context = window, args) {\n       if (typeof this !== 'function') {\n         throw new TypeError('Type Error');\n       }\n       const fn = Symbol('fn');\n       context[fn] = this;\n     \n       const res = context[fn](...args);\n       delete context[fn];\n       return res;\n     }\n     复制代码\n \n ## 09.Function.prototype.call\n \n 于`call`唯一不同的是，`call()`方法接受的是一个参数列表\n \n     Function.prototype.call = function(context = window, ...args) {\n       if (typeof this !== 'function') {\n         throw new TypeError('Type Error');\n       }\n       const fn = Symbol('fn');\n       context[fn] = this;\n     \n       const res = this[fn](...args);\n       delete this.fn;\n       return res;\n     }\n     复制代码\n \n ## 10.Function.prototype.bind\n \n     Function.prototype.bind = function(context, ...args) {\n       if (typeof this !== 'function') {\n         throw new Error(\"Type Error\");\n       }\n       // 保存this的值\n       var self = this;\n     \n       return function F() {\n         // 考虑new的情况\n         if(this instanceof F) {\n           return new self(...args, ...arguments)\n         }\n         return self.apply(context, [...args, ...arguments])\n       }\n     }\n     复制代码\n \n ## 11.debounce（防抖）\n \n 触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。\n \n     const debounce = (fn, time) => {\n       let timeout = null;\n       return function() {\n         clearTimeout(timeout)\n         timeout = setTimeout(() => {\n           fn.apply(this, arguments);\n         }, time);\n       }\n     };\n     复制代码\n \n 防抖常应用于用户进行搜索输入节约请求资源，`window`触发`resize`事件时进行防抖只触发一次。\n \n ## 12.throttle（节流）\n \n 高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。\n \n     const throttle = (fn, time) => {\n       let flag = true;\n       return function() {\n         if (!flag) return;\n         flag = false;\n         setTimeout(() => {\n           fn.apply(this, arguments);\n           flag = true;\n         }, time);\n       }\n     }\n     复制代码\n \n 节流常应用于鼠标不断点击触发、监听滚动事件。\n \n ## 13.函数珂里化\n \n > 指的是将一个接受多个参数的函数 变为 接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)\n \n 经典面试题：实现`add(1)(2)(3)(4)=10;` 、 `add(1)(1,2,3)(2)=9;`\n \n     function add() {\n       const _args = [...arguments];\n       function fn() {\n         _args.push(...arguments);\n         return fn;\n       }\n       fn.toString = function() {\n         return _args.reduce((sum, cur) => sum + cur);\n       }\n       return fn;\n     }\n     复制代码\n \n ## 14.模拟new操作\n \n 3个步骤：\n \n 1.  以`ctor.prototype`为原型创建一个对象。\n 2.  执行构造函数并将this绑定到新创建的对象上。\n 3.  判断构造函数执行返回的结果是否是引用数据类型，若是则返回构造函数执行的结果，否则返回创建的对象。\n \n     function newOperator(ctor, ...args) {\n       if (typeof ctor !== 'function') {\n         throw new TypeError('Type Error');\n       }\n       const obj = Object.create(ctor.prototype);\n       const res = ctor.apply(obj, args);\n     \n       const isObject = typeof res === 'object' && res !== null;\n       const isFunction = typeof res === 'function';\n       return isObject || isFunction ? res : obj;\n     }\n     复制代码\n \n ## 15.instanceof\n \n `instanceof`运算符用于检测构造函数的`prototype`属性是否出现在某个实例对象的原型链上。\n \n     const myInstanceof = (left, right) => {\n       // 基本数据类型都返回false\n       if (typeof left !== 'object' || left === null) return false;\n       let proto = Object.getPrototypeOf(left);\n       while (true) {\n         if (proto === null) return false;\n         if (proto === right.prototype) return true;\n         proto = Object.getPrototypeOf(proto);\n       }\n     }\n     复制代码\n \n ## 16.原型继承\n \n 这里只写寄生组合继承了，中间还有几个演变过来的继承但都有一些缺陷\n \n     function Parent() {\n       this.name = 'parent';\n     }\n     function Child() {\n       Parent.call(this);\n       this.type = 'children';\n     }\n     Child.prototype = Object.create(Parent.prototype);\n     Child.prototype.constructor = Child;\n     复制代码\n \n ## 17.Object.is\n \n `Object.is`解决的主要是这两个问题：\n \n     +0 === -0  // true\n     NaN === NaN // false\n     复制代码\n \n     const is= (x, y) => {\n       if (x === y) {\n         // +0和-0应该不相等\n         return x !== 0 || y !== 0 || 1/x === 1/y;\n       } else {\n         return x !== x && y !== y;\n       }\n     }\n     复制代码\n \n ## 18.Object.assign\n \n `Object.assign()`方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）\n \n     Object.defineProperty(Object, 'assign', {\n       value: function(target, ...args) {\n         if (target == null) {\n           return new TypeError('Cannot convert undefined or null to object');\n         }\n         \n         // 目标对象需要统一是引用数据类型，若不是会自动转换\n         const to = Object(target);\n     \n         for (let i = 0; i < args.length; i++) {\n           // 每一个源对象\n           const nextSource = args[i];\n           if (nextSource !== null) {\n             // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n             for (const nextKey in nextSource) {\n               if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                 to[nextKey] = nextSource[nextKey];\n               }\n             }\n           }\n         }\n         return to;\n       },\n       // 不可枚举\n       enumerable: false,\n       writable: true,\n       configurable: true,\n     })\n     复制代码\n \n ## 19.深拷贝\n \n 递归的完整版本（考虑到了Symbol属性）：\n \n     const cloneDeep1 = (target, hash = new WeakMap()) => {\n       // 对于传入参数处理\n       if (typeof target !== 'object' || target === null) {\n         return target;\n       }\n       // 哈希表中存在直接返回\n       if (hash.has(target)) return hash.get(target);\n     \n       const cloneTarget = Array.isArray(target) ? [] : {};\n       hash.set(target, cloneTarget);\n     \n       // 针对Symbol属性\n       const symKeys = Object.getOwnPropertySymbols(target);\n       if (symKeys.length) {\n         symKeys.forEach(symKey => {\n           if (typeof target[symKey] === 'object' && target[symKey] !== null) {\n             cloneTarget[symKey] = cloneDeep1(target[symKey]);\n           } else {\n             cloneTarget[symKey] = target[symKey];\n           }\n         })\n       }\n     \n       for (const i in target) {\n         if (Object.prototype.hasOwnProperty.call(target, i)) {\n           cloneTarget[i] =\n             typeof target[i] === 'object' && target[i] !== null\n             ? cloneDeep1(target[i], hash)\n             : target[i];\n         }\n       }\n       return cloneTarget;\n     }\n     复制代码\n \n ## 20.Promise\n \n 实现思路：[Promise源码实现](https://juejin.im/post/6860037916622913550)\n \n     const PENDING = 'PENDING';      // 进行中\n     const FULFILLED = 'FULFILLED';  // 已成功\n     const REJECTED = 'REJECTED';    // 已失败\n     \n     class Promise {\n       constructor(exector) {\n         // 初始化状态\n         this.status = PENDING;\n         // 将成功、失败结果放在this上，便于then、catch访问\n         this.value = undefined;\n         this.reason = undefined;\n         // 成功态回调函数队列\n         this.onFulfilledCallbacks = [];\n         // 失败态回调函数队列\n         this.onRejectedCallbacks = [];\n     \n         const resolve = value => {\n           // 只有进行中状态才能更改状态\n           if (this.status === PENDING) {\n             this.status = FULFILLED;\n             this.value = value;\n             // 成功态函数依次执行\n             this.onFulfilledCallbacks.forEach(fn => fn(this.value));\n           }\n         }\n         const reject = reason => {\n           // 只有进行中状态才能更改状态\n           if (this.status === PENDING) {\n             this.status = REJECTED;\n             this.reason = reason;\n             // 失败态函数依次执行\n             this.onRejectedCallbacks.forEach(fn => fn(this.reason))\n           }\n         }\n         try {\n           // 立即执行executor\n           // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n           exector(resolve, reject);\n         } catch(e) {\n           // executor执行出错，将错误内容reject抛出去\n           reject(e);\n         }\n       }\n       then(onFulfilled, onRejected) {\n         onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n         onRejected = typeof onRejected === 'function'? onRejected:\n           reason => { throw new Error(reason instanceof Error ? reason.message:reason) }\n         // 保存this\n         const self = this;\n         return new Promise((resolve, reject) => {\n           if (self.status === PENDING) {\n             self.onFulfilledCallbacks.push(() => {\n               // try捕获错误\n               try {\n                 // 模拟微任务\n                 setTimeout(() => {\n                   const result = onFulfilled(self.value);\n                   // 分两种情况：\n                   // 1. 回调函数返回值是Promise，执行then操作\n                   // 2. 如果不是Promise，调用新Promise的resolve函数\n                   result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n                 })\n               } catch(e) {\n                 reject(e);\n               }\n             });\n             self.onRejectedCallbacks.push(() => {\n               // 以下同理\n               try {\n                 setTimeout(() => {\n                   const result = onRejected(self.reason);\n                   // 不同点：此时是reject\n                   result instanceof Promise ? result.then(resolve, reject) : reject(result);\n                 })\n               } catch(e) {\n                 reject(e);\n               }\n             })\n           } else if (self.status === FULFILLED) {\n             try {\n               setTimeout(() => {\n                 const result = onFulfilled(self.value);\n                 result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n               });\n             } catch(e) {\n               reject(e);\n             }\n           } else if (self.status === REJECTED){\n             try {\n               setTimeout(() => {\n                 const result = onRejected(self.reason);\n                 result instanceof Promise ? result.then(resolve, reject) : reject(result);\n               })\n             } catch(e) {\n               reject(e);\n             }\n           }\n         });\n       }\n       catch(onRejected) {\n         return this.then(null, onRejected);\n       }\n       static resolve(value) {\n         if (value instanceof Promise) {\n           // 如果是Promise实例，直接返回\n           return value;\n         } else {\n           // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED\n           return new Promise((resolve, reject) => resolve(value));\n         }\n       }\n       static reject(reason) {\n         return new Promise((resolve, reject) => {\n           reject(reason);\n         })\n       }\n     }\n     复制代码\n \n ## 21.Promise.all\n \n `Promise.all`是支持链式调用的，本质上就是返回了一个Promise实例，通过`resolve`和`reject`来改变实例状态。\n \n     Promise.myAll = function(promiseArr) {\n       return new Promise((resolve, reject) => {\n         const ans = [];\n         let index = 0;\n         for (let i = 0; i < promiseArr.length; i++) {\n           promiseArr[i]\n           .then(res => {\n             ans[i] = res;\n             index++;\n             if (index === promiseArr.length) {\n               resolve(ans);\n             }\n           })\n           .catch(err => reject(err));\n         }\n       })\n     }\n     复制代码\n \n ## 22.Promise.race\n \n     Promise.race = function(promiseArr) {\n       return new Promise((resolve, reject) => {\n         promiseArr.forEach(p => {\n           // 如果不是Promise实例需要转化为Promise实例\n           Promise.resolve(p).then(\n             val => resolve(val),\n             err => reject(err),\n           )\n         })\n       })\n     }\n     复制代码\n \n ## 23.Promise并行限制\n \n 就是实现有并行限制的Promise调度器问题。\n \n 详细实现思路：[某条高频面试原题：实现有并行限制的Promise调度器](https://juejin.im/post/6854573217013563405)\n \n     class Scheduler {\n       constructor() {\n         this.queue = [];\n         this.maxCount = 2;\n         this.runCounts = 0;\n       }\n       add(promiseCreator) {\n         this.queue.push(promiseCreator);\n       }\n       taskStart() {\n         for (let i = 0; i < this.maxCount; i++) {\n           this.request();\n         }\n       }\n       request() {\n         if (!this.queue || !this.queue.length || this.runCounts >= this.maxCount) {\n           return;\n         }\n         this.runCounts++;\n     \n         this.queue.shift()().then(() => {\n           this.runCounts--;\n           this.request();\n         });\n       }\n     }\n        \n     const timeout = time => new Promise(resolve => {\n       setTimeout(resolve, time);\n     })\n       \n     const scheduler = new Scheduler();\n       \n     const addTask = (time,order) => {\n       scheduler.add(() => timeout(time).then(()=>console.log(order)))\n     }\n       \n       \n     addTask(1000, '1');\n     addTask(500, '2');\n     addTask(300, '3');\n     addTask(400, '4');\n     scheduler.taskStart()\n     // 2\n     // 3\n     // 1\n     // 4\n     复制代码\n \n ## 24.JSONP\n \n script标签不遵循同源协议，可以用来进行**跨域请求**，优点就是兼容性好但仅限于GET请求\n \n     const jsonp = ({ url, params, callbackName }) => {\n       const generateUrl = () => {\n         let dataSrc = '';\n         for (let key in params) {\n           if (Object.prototype.hasOwnProperty.call(params, key)) {\n             dataSrc += `${key}=${params[key]}&`;\n           }\n         }\n         dataSrc += `callback=${callbackName}`;\n         return `${url}?${dataSrc}`;\n       }\n       return new Promise((resolve, reject) => {\n         const scriptEle = document.createElement('script');\n         scriptEle.src = generateUrl();\n         document.body.appendChild(scriptEle);\n         window[callbackName] = data => {\n           resolve(data);\n           document.removeChild(scriptEle);\n         }\n       })\n     }\n     复制代码\n \n ## 25.AJAX\n \n     const getJSON = function(url) {\n       return new Promise((resolve, reject) => {\n         const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Mscrosoft.XMLHttp');\n         xhr.open('GET', url, false);\n         xhr.setRequestHeader('Accept', 'application/json');\n         xhr.onreadystatechange = function() {\n           if (xhr.readyState !== 4) return;\n           if (xhr.status === 200 || xhr.status === 304) {\n             resolve(xhr.responseText);\n           } else {\n             reject(new Error(xhr.responseText));\n           }\n         }\n         xhr.send();\n       })\n     }\n     复制代码\n \n ## 26.event模块\n \n 实现node中回调函数的机制，node中回调函数其实是内部使用了**观察者模式**。\n \n > 观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。\n \n     function EventEmitter() {\n       this.events = new Map();\n     }\n     \n     // 需要实现的一些方法：\n     // addListener、removeListener、once、removeAllListeners、emit\n     \n     // 模拟实现addlistener方法\n     const wrapCallback = (fn, once = false) => ({ callback: fn, once });\n     EventEmitter.prototype.addListener = function(type, fn, once = false) {\n       const hanlder = this.events.get(type);\n       if (!hanlder) {\n         // 没有type绑定事件\n         this.events.set(type, wrapCallback(fn, once));\n       } else if (hanlder && typeof hanlder.callback === 'function') {\n         // 目前type事件只有一个回调\n         this.events.set(type, [hanlder, wrapCallback(fn, once)]);\n       } else {\n         // 目前type事件数>=2\n         hanlder.push(wrapCallback(fn, once));\n       }\n     }\n     // 模拟实现removeListener\n     EventEmitter.prototype.removeListener = function(type, listener) {\n       const hanlder = this.events.get(type);\n       if (!hanlder) return;\n       if (!Array.isArray(this.events)) {\n         if (hanlder.callback === listener.callback) this.events.delete(type);\n         else return;\n       }\n       for (let i = 0; i < hanlder.length; i++) {\n         const item = hanlder[i];\n         if (item.callback === listener.callback) {\n           hanlder.splice(i, 1);\n           i--;\n           if (hanlder.length === 1) {\n             this.events.set(type, hanlder[0]);\n           }\n         }\n       }\n     }\n     // 模拟实现once方法\n     EventEmitter.prototype.once = function(type, listener) {\n       this.addListener(type, listener, true);\n     }\n     // 模拟实现emit方法\n     EventEmitter.prototype.emit = function(type, ...args) {\n       const hanlder = this.events.get(type);\n       if (!hanlder) return;\n       if (Array.isArray(hanlder)) {\n         hanlder.forEach(item => {\n           item.callback.apply(this, args);\n           if (item.once) {\n             this.removeListener(type, item);\n           }\n         })\n       } else {\n         hanlder.callback.apply(this, args);\n         if (hanlder.once) {\n           this.events.delete(type);\n         }\n       }\n       return true;\n     }\n     EventEmitter.prototype.removeAllListeners = function(type) {\n       const hanlder = this.events.get(type);\n       if (!hanlder) return;\n       this.events.delete(type);\n     }\n     复制代码\n \n ## 27.图片懒加载\n \n 可以给img标签统一自定义属性`data-src='default.png'`，当检测到图片出现在窗口之后再补充**src**属性，此时才会进行图片资源加载。\n \n     function lazyload() {\n       const imgs = document.getElementsByTagName('img');\n       const len = imgs.length;\n       // 视口的高度\n       const viewHeight = document.documentElement.clientHeight;\n       // 滚动条高度\n       const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;\n       for (let i = 0; i < len; i++) {\n         const offsetHeight = imgs[i].offsetTop;\n         if (offsetHeight < viewHeight + scrollHeight) {\n           const src = imgs[i].dataset.src;\n           imgs[i].src = src;\n         }\n       }\n     }\n     \n     // 可以使用节流优化一下\n     window.addEventListener('scroll', lazyload);\n     复制代码\n \n ## 28.滚动加载\n \n 原理就是监听页面滚动事件，**分析clientHeight**、**scrollTop**、**scrollHeight**三者的属性关系。\n \n     window.addEventListener('scroll', function() {\n       const clientHeight = document.documentElement.clientHeight;\n       const scrollTop = document.documentElement.scrollTop;\n       const scrollHeight = document.documentElement.scrollHeight;\n       if (clientHeight + scrollTop >= scrollHeight) {\n         // 检测到滚动至页面底部，进行后续操作\n         // ...\n       }\n     }, false);\n     复制代码\n \n 一个Demo：[页面滚动加载的Demo](https://github.com/SherrybabyOne/Demos/blob/master/Interview/JavaScript/%E6%BB%9A%E5%8A%A8%E5%8A%A0%E8%BD%BD.html)\n \n ## 29.渲染几万条数据不卡住页面\n \n 渲染大数据时，合理使用**createDocumentFragment**和**requestAnimationFrame**，将操作切分为一小段一小段执行。\n \n     setTimeout(() => {\n       // 插入十万条数据\n       const total = 100000;\n       // 一次插入的数据\n       const once = 20;\n       // 插入数据需要的次数\n       const loopCount = Math.ceil(total / once);\n       let countOfRender = 0;\n       const ul = document.querySelector('ul');\n       // 添加数据的方法\n       function add() {\n         const fragment = document.createDocumentFragment();\n         for(let i = 0; i < once; i++) {\n           const li = document.createElement('li');\n           li.innerText = Math.floor(Math.random() * total);\n           fragment.appendChild(li);\n         }\n         ul.appendChild(fragment);\n         countOfRender += 1;\n         loop();\n       }\n       function loop() {\n         if(countOfRender < loopCount) {\n           window.requestAnimationFrame(add);\n         }\n       }\n       loop();\n     }, 0)\n     复制代码\n \n ## 30.打印出当前网页使用了多少种HTML元素\n \n 一行代码可以解决：\n \n     const fn = () => {\n       return [...new Set([...document.querySelectorAll('*')].map(el => el.tagName))].length;\n     }\n     复制代码\n \n 值得注意的是：DOM操作返回的是**类数组**，需要转换为数组之后才可以调用数组的方法。\n \n ## 31.将VirtualDom转化为真实DOM结构\n \n 这是当前SPA应用的核心概念之一\n \n     // vnode结构：\n     // {\n     //   tag,\n     //   attrs,\n     //   children,\n     // }\n     \n     //Virtual DOM => DOM\n     function render(vnode, container) {\n       container.appendChild(_render(vnode));\n     }\n     function _render(vnode) {\n       // 如果是数字类型转化为字符串\n       if (typeof vnode === 'number') {\n         vnode = String(vnode);\n       }\n       // 字符串类型直接就是文本节点\n       if (typeof vnode === 'string') {\n         return document.createTextNode(vnode);\n       }\n       // 普通DOM\n       const dom = document.createElement(vnode.tag);\n       if (vnode.attrs) {\n         // 遍历属性\n         Object.keys(vnode.attrs).forEach(key => {\n           const value = vnode.attrs[key];\n           dom.setAttribute(key, value);\n         })\n       }\n       // 子数组进行递归操作\n       vnode.children.forEach(child => render(child, dom));\n       return dom;\n     }\n     复制代码\n \n ## 32.字符串解析问题\n \n     var a = {\n         b: 123,\n         c: '456',\n         e: '789',\n     }\n     var str=`a{a.b}aa{a.c}aa {a.d}aaaa`;\n     // => 'a123aa456aa {a.d}aaaa'\n     复制代码\n \n 实现函数使得将str字符串中的`{}`内的变量替换，如果属性不存在保持原样（比如`{a.d}`）\n \n 类似于模版字符串，但有一点出入，实际上原理大差不差\n \n     const fn1 = (str, obj) => {\n         let res = '';\n         // 标志位，标志前面是否有{\n         let flag = false;\n         let start;\n         for (let i = 0; i < str.length; i++) {\n             if (str[i] === '{') {\n                 flag = true;\n                 start = i + 1;\n                 continue;\n             }\n             if (!flag) res += str[i];\n             else {\n                 if (str[i] === '}') {\n                     flag = false;\n                     res += match(str.slice(start, i), obj);\n                 }\n             }\n         }\n         return res;\n     }\n     // 对象匹配操作\n     const match = (str, obj) => {\n         const keys = str.split('.').slice(1);\n         let index = 0;\n         let o = obj;\n         while (index < keys.length) {\n             const key = keys[index];\n             if (!o[key]) {\n                 return `{${str}}`;\n             } else {\n                 o = o[key];\n             }\n             index++;\n         }\n         return o;\n     }","source":"_posts/2020-09-25-32个手撕JS（转）.md","raw":"---\ntitle: 32个手撕JS，彻底摆脱初级前端\ncatalog: true\ntoc_nav_num: true\nheader-img: \"/blogs/img/article_header/article_header.png\"\ndate: 2020-09-25 11:19:34\nsubtitle: \"js native development\"\ntags:\n- js\ncategories:\n- Js\n---\n\n[32个手撕JS，彻底摆脱初级前端（面试高频）](https://juejin.im/post/6875152247714480136#heading-20)\n # 32个手撕JS，彻底摆脱初级前端（面试高频）\n \n 作为前端开发，JS是重中之重，最近结束了面试的高峰期，基本上offer也定下来了就等开奖，趁着这个时间总结下32个手撕JS问题，这些都是高频面试题，完全理解之后定能彻底摆脱初级前端。\n \n 关于源码都紧遵规范，都可跑通MDN示例，其余的大多会涉及一些关于JS的应用题和本人面试过程\n \n ## 01.数组扁平化\n \n 数组扁平化是指将一个多维数组变为一个一维数组\n \n     const arr = [1, [2, [3, [4, 5]]], 6];\n     // => [1, 2, 3, 4, 5, 6]\n     复制代码\n \n ### 方法一：使用flat()\n \n     const res1 = arr.flat(Infinity);\n     复制代码\n \n ### 方法二：利用正则\n \n     const res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',');\n     复制代码\n \n 但数据类型都会变为字符串\n \n ### 方法三：正则改良版本\n \n     const res3 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']');\n     复制代码\n \n ### 方法四：使用reduce\n \n     const flatten = arr => {\n       return arr.reduce((pre, cur) => {\n         return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n       }, [])\n     }\n     const res4 = flatten(arr);\n     复制代码\n \n ### 方法五：函数递归\n \n     const res5 = [];\n     const fn = arr => {\n       for (let i = 0; i < arr.length; i++) {\n         if (Array.isArray(arr[i])) {\n           fn(arr[i]);\n         } else {\n           res5.push(arr[i]);\n         }\n       }\n     }\n     fn(arr);\n     复制代码\n \n ## 02.数组去重\n \n     const arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n     // => [1, '1', 17, true, false, 'true', 'a', {}, {}]\n     复制代码\n \n ### 方法一：利用Set\n \n     const res1 = Array.from(new Set(arr));\n     复制代码\n \n ### 方法二：两层for循环+splice\n \n     const unique1 = arr => {\n       let len = arr.length;\n       for (let i = 0; i < len; i++) {\n         for (let j = i + 1; j < len; j++) {\n           if (arr[i] === arr[j]) {\n             arr.splice(j, 1);\n             // 每删除一个树，j--保证j的值经过自加后不变。同时，len--，减少循环次数提升性能\n             len--;\n             j--;\n           }\n         }\n       }\n       return arr;\n     }\n     复制代码\n \n ### 方法三：利用indexOf\n \n     const unique2 = arr => {\n       const res = [];\n       for (let i = 0; i < arr.length; i++) {\n         if (res.indexOf(arr[i]) === -1) res.push(arr[i]);\n       }\n       return res;\n     }\n     复制代码\n \n 当然也可以用include、filter，思路大同小异。\n \n ### 方法四：利用include\n \n     const unique3 = arr => {\n       const res = [];\n       for (let i = 0; i < arr.length; i++) {\n         if (!res.includes(arr[i])) res.push(arr[i]);\n       }\n       return res;\n     }\n     复制代码\n \n ### 方法五：利用filter\n \n     const unique4 = arr => {\n       return arr.filter((item, index) => {\n         return arr.indexOf(item) === index;\n       });\n     }\n     复制代码\n \n ### 方法六：利用Map\n \n     const unique5 = arr => {\n       const map = new Map();\n       const res = [];\n       for (let i = 0; i < arr.length; i++) {\n         if (!map.has(arr[i])) {\n           map.set(arr[i], true)\n           res.push(arr[i]);\n         }\n       }\n       return res;\n     }\n     复制代码\n \n ## 03.类数组转化为数组\n \n 类数组是具有**length**属性，但不具有数组原型上的方法。常见的类数组有**arguments**、DOM操作方法返回的结果。\n \n ### 方法一：Array.from\n \n     Array.from(document.querySelectorAll('div'))\n     复制代码\n \n ### 方法二：Array.prototype.slice.call()\n \n     Array.prototype.slice.call(document.querySelectorAll('div'))\n     复制代码\n \n ### 方法三：扩展运算符\n \n     [...document.querySelectorAll('div')]\n     复制代码\n \n ### 方法四：利用concat\n \n     Array.prototype.concat.apply([], document.querySelectorAll('div'));\n     复制代码\n \n ## 04.Array.prototype.filter()\n \n ![](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/804ee51d522746c3b219548d038413c2~tplv-k3u1fbpfcp-zoom-1.image)\n \n     Array.prototype.filter = function(callback, thisArg) {\n       if (this == undefined) {\n         throw new TypeError('this is null or not undefined');\n       }\n       if (typeof callback !== 'function') {\n         throw new TypeError(callback + 'is not a function');\n       }\n       const res = [];\n       // 让O成为回调函数的对象传递（强制转换对象）\n       const O = Object(this);\n       // >>>0 保证len为number，且为正整数\n       const len = O.length >>> 0;\n       for (let i = 0; i < len; i++) {\n         // 检查i是否在O的属性（会检查原型链）\n         if (i in O) {\n           // 回调函数调用传参\n           if (callback.call(thisArg, O[i], i, O)) {\n             res.push(O[i]);\n           }\n         }\n       }\n       return res;\n     }\n     复制代码\n \n 对于`>>>0`有疑问的：[解释>>>0的作用](https://zhuanlan.zhihu.com/p/100790268)\n \n ## 05.Array.prototype.map()\n \n ![](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b099cf3e06bc4421abac4dc460a13c17~tplv-k3u1fbpfcp-zoom-1.image)\n \n     Array.prototype.map = function(callback, thisArg) {\n       if (this == undefined) {\n         throw new TypeError('this is null or not defined');\n       }\n       if (typeof callback !== 'function') {\n         throw new TypeError(callback + ' is not a function');\n       }\n       const res = [];\n       // 同理\n       const O = Object(this);\n       const len = O.length >>> 0;\n       for (let i = 0; i < len; i++) {\n         if (i in O) {\n           // 调用回调函数并传入新数组\n           res[i] = callback.call(thisArg, O[i], i, this);\n         }\n       }\n       return res;\n     }\n     复制代码\n \n ## 06.Array.prototype.forEach()\n \n ![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c3819fb0c404ae5a8f4cddc4e80731e~tplv-k3u1fbpfcp-zoom-1.image)\n \n `forEach`跟map类似，唯一不同的是`forEach`是没有返回值的。\n \n     Array.prototype.forEach = function(callback, thisArg) {\n       if (this == null) {\n         throw new TypeError('this is null or not defined');\n       }\n       if (typeof callback !== \"function\") {\n         throw new TypeError(callback + ' is not a function');\n       }\n       const O = Object(this);\n       const len = O.length >>> 0;\n       let k = 0;\n       while (k < len) {\n         if (k in O) {\n           callback.call(thisArg, O[k], k, O);\n         }\n         k++;\n       }\n     }\n     复制代码\n \n ## 07.Array.prototype.reduce()\n \n ![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e51625eb9e2d47799ff39c5956139af7~tplv-k3u1fbpfcp-zoom-1.image)\n \n     Array.prototype.reduce = function(callback, initialValue) {\n       if (this == undefined) {\n         throw new TypeError('this is null or not defined');\n       }\n       if (typeof callback !== 'function') {\n         throw new TypeError(callbackfn + ' is not a function');\n       }\n       const O = Object(this);\n       const len = this.length >>> 0;\n       let accumulator = initialValue;\n       let k = 0;\n       // 如果第二个参数为undefined的情况下\n       // 则数组的第一个有效值作为累加器的初始值\n       if (accumulator === undefined) {\n         while (k < len && !(k in O)) {\n           k++;\n         }\n         // 如果超出数组界限还没有找到累加器的初始值，则TypeError\n         if (k >= len) {\n           throw new TypeError('Reduce of empty array with no initial value');\n         }\n         accumulator = O[k++];\n       }\n       while (k < len) {\n         if (k in O) {\n           accumulator = callback.call(undefined, accumulator, O[k], k, O);\n         }\n         k++;\n       }\n       return accumulator;\n     }\n     复制代码\n \n ## 08.Function.prototype.apply()\n \n 第一个参数是绑定的this，默认为`window`，第二个参数是数组或类数组\n \n     Function.prototype.apply = function(context = window, args) {\n       if (typeof this !== 'function') {\n         throw new TypeError('Type Error');\n       }\n       const fn = Symbol('fn');\n       context[fn] = this;\n     \n       const res = context[fn](...args);\n       delete context[fn];\n       return res;\n     }\n     复制代码\n \n ## 09.Function.prototype.call\n \n 于`call`唯一不同的是，`call()`方法接受的是一个参数列表\n \n     Function.prototype.call = function(context = window, ...args) {\n       if (typeof this !== 'function') {\n         throw new TypeError('Type Error');\n       }\n       const fn = Symbol('fn');\n       context[fn] = this;\n     \n       const res = this[fn](...args);\n       delete this.fn;\n       return res;\n     }\n     复制代码\n \n ## 10.Function.prototype.bind\n \n     Function.prototype.bind = function(context, ...args) {\n       if (typeof this !== 'function') {\n         throw new Error(\"Type Error\");\n       }\n       // 保存this的值\n       var self = this;\n     \n       return function F() {\n         // 考虑new的情况\n         if(this instanceof F) {\n           return new self(...args, ...arguments)\n         }\n         return self.apply(context, [...args, ...arguments])\n       }\n     }\n     复制代码\n \n ## 11.debounce（防抖）\n \n 触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。\n \n     const debounce = (fn, time) => {\n       let timeout = null;\n       return function() {\n         clearTimeout(timeout)\n         timeout = setTimeout(() => {\n           fn.apply(this, arguments);\n         }, time);\n       }\n     };\n     复制代码\n \n 防抖常应用于用户进行搜索输入节约请求资源，`window`触发`resize`事件时进行防抖只触发一次。\n \n ## 12.throttle（节流）\n \n 高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。\n \n     const throttle = (fn, time) => {\n       let flag = true;\n       return function() {\n         if (!flag) return;\n         flag = false;\n         setTimeout(() => {\n           fn.apply(this, arguments);\n           flag = true;\n         }, time);\n       }\n     }\n     复制代码\n \n 节流常应用于鼠标不断点击触发、监听滚动事件。\n \n ## 13.函数珂里化\n \n > 指的是将一个接受多个参数的函数 变为 接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)\n \n 经典面试题：实现`add(1)(2)(3)(4)=10;` 、 `add(1)(1,2,3)(2)=9;`\n \n     function add() {\n       const _args = [...arguments];\n       function fn() {\n         _args.push(...arguments);\n         return fn;\n       }\n       fn.toString = function() {\n         return _args.reduce((sum, cur) => sum + cur);\n       }\n       return fn;\n     }\n     复制代码\n \n ## 14.模拟new操作\n \n 3个步骤：\n \n 1.  以`ctor.prototype`为原型创建一个对象。\n 2.  执行构造函数并将this绑定到新创建的对象上。\n 3.  判断构造函数执行返回的结果是否是引用数据类型，若是则返回构造函数执行的结果，否则返回创建的对象。\n \n     function newOperator(ctor, ...args) {\n       if (typeof ctor !== 'function') {\n         throw new TypeError('Type Error');\n       }\n       const obj = Object.create(ctor.prototype);\n       const res = ctor.apply(obj, args);\n     \n       const isObject = typeof res === 'object' && res !== null;\n       const isFunction = typeof res === 'function';\n       return isObject || isFunction ? res : obj;\n     }\n     复制代码\n \n ## 15.instanceof\n \n `instanceof`运算符用于检测构造函数的`prototype`属性是否出现在某个实例对象的原型链上。\n \n     const myInstanceof = (left, right) => {\n       // 基本数据类型都返回false\n       if (typeof left !== 'object' || left === null) return false;\n       let proto = Object.getPrototypeOf(left);\n       while (true) {\n         if (proto === null) return false;\n         if (proto === right.prototype) return true;\n         proto = Object.getPrototypeOf(proto);\n       }\n     }\n     复制代码\n \n ## 16.原型继承\n \n 这里只写寄生组合继承了，中间还有几个演变过来的继承但都有一些缺陷\n \n     function Parent() {\n       this.name = 'parent';\n     }\n     function Child() {\n       Parent.call(this);\n       this.type = 'children';\n     }\n     Child.prototype = Object.create(Parent.prototype);\n     Child.prototype.constructor = Child;\n     复制代码\n \n ## 17.Object.is\n \n `Object.is`解决的主要是这两个问题：\n \n     +0 === -0  // true\n     NaN === NaN // false\n     复制代码\n \n     const is= (x, y) => {\n       if (x === y) {\n         // +0和-0应该不相等\n         return x !== 0 || y !== 0 || 1/x === 1/y;\n       } else {\n         return x !== x && y !== y;\n       }\n     }\n     复制代码\n \n ## 18.Object.assign\n \n `Object.assign()`方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）\n \n     Object.defineProperty(Object, 'assign', {\n       value: function(target, ...args) {\n         if (target == null) {\n           return new TypeError('Cannot convert undefined or null to object');\n         }\n         \n         // 目标对象需要统一是引用数据类型，若不是会自动转换\n         const to = Object(target);\n     \n         for (let i = 0; i < args.length; i++) {\n           // 每一个源对象\n           const nextSource = args[i];\n           if (nextSource !== null) {\n             // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n             for (const nextKey in nextSource) {\n               if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                 to[nextKey] = nextSource[nextKey];\n               }\n             }\n           }\n         }\n         return to;\n       },\n       // 不可枚举\n       enumerable: false,\n       writable: true,\n       configurable: true,\n     })\n     复制代码\n \n ## 19.深拷贝\n \n 递归的完整版本（考虑到了Symbol属性）：\n \n     const cloneDeep1 = (target, hash = new WeakMap()) => {\n       // 对于传入参数处理\n       if (typeof target !== 'object' || target === null) {\n         return target;\n       }\n       // 哈希表中存在直接返回\n       if (hash.has(target)) return hash.get(target);\n     \n       const cloneTarget = Array.isArray(target) ? [] : {};\n       hash.set(target, cloneTarget);\n     \n       // 针对Symbol属性\n       const symKeys = Object.getOwnPropertySymbols(target);\n       if (symKeys.length) {\n         symKeys.forEach(symKey => {\n           if (typeof target[symKey] === 'object' && target[symKey] !== null) {\n             cloneTarget[symKey] = cloneDeep1(target[symKey]);\n           } else {\n             cloneTarget[symKey] = target[symKey];\n           }\n         })\n       }\n     \n       for (const i in target) {\n         if (Object.prototype.hasOwnProperty.call(target, i)) {\n           cloneTarget[i] =\n             typeof target[i] === 'object' && target[i] !== null\n             ? cloneDeep1(target[i], hash)\n             : target[i];\n         }\n       }\n       return cloneTarget;\n     }\n     复制代码\n \n ## 20.Promise\n \n 实现思路：[Promise源码实现](https://juejin.im/post/6860037916622913550)\n \n     const PENDING = 'PENDING';      // 进行中\n     const FULFILLED = 'FULFILLED';  // 已成功\n     const REJECTED = 'REJECTED';    // 已失败\n     \n     class Promise {\n       constructor(exector) {\n         // 初始化状态\n         this.status = PENDING;\n         // 将成功、失败结果放在this上，便于then、catch访问\n         this.value = undefined;\n         this.reason = undefined;\n         // 成功态回调函数队列\n         this.onFulfilledCallbacks = [];\n         // 失败态回调函数队列\n         this.onRejectedCallbacks = [];\n     \n         const resolve = value => {\n           // 只有进行中状态才能更改状态\n           if (this.status === PENDING) {\n             this.status = FULFILLED;\n             this.value = value;\n             // 成功态函数依次执行\n             this.onFulfilledCallbacks.forEach(fn => fn(this.value));\n           }\n         }\n         const reject = reason => {\n           // 只有进行中状态才能更改状态\n           if (this.status === PENDING) {\n             this.status = REJECTED;\n             this.reason = reason;\n             // 失败态函数依次执行\n             this.onRejectedCallbacks.forEach(fn => fn(this.reason))\n           }\n         }\n         try {\n           // 立即执行executor\n           // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n           exector(resolve, reject);\n         } catch(e) {\n           // executor执行出错，将错误内容reject抛出去\n           reject(e);\n         }\n       }\n       then(onFulfilled, onRejected) {\n         onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value => value;\n         onRejected = typeof onRejected === 'function'? onRejected:\n           reason => { throw new Error(reason instanceof Error ? reason.message:reason) }\n         // 保存this\n         const self = this;\n         return new Promise((resolve, reject) => {\n           if (self.status === PENDING) {\n             self.onFulfilledCallbacks.push(() => {\n               // try捕获错误\n               try {\n                 // 模拟微任务\n                 setTimeout(() => {\n                   const result = onFulfilled(self.value);\n                   // 分两种情况：\n                   // 1. 回调函数返回值是Promise，执行then操作\n                   // 2. 如果不是Promise，调用新Promise的resolve函数\n                   result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n                 })\n               } catch(e) {\n                 reject(e);\n               }\n             });\n             self.onRejectedCallbacks.push(() => {\n               // 以下同理\n               try {\n                 setTimeout(() => {\n                   const result = onRejected(self.reason);\n                   // 不同点：此时是reject\n                   result instanceof Promise ? result.then(resolve, reject) : reject(result);\n                 })\n               } catch(e) {\n                 reject(e);\n               }\n             })\n           } else if (self.status === FULFILLED) {\n             try {\n               setTimeout(() => {\n                 const result = onFulfilled(self.value);\n                 result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n               });\n             } catch(e) {\n               reject(e);\n             }\n           } else if (self.status === REJECTED){\n             try {\n               setTimeout(() => {\n                 const result = onRejected(self.reason);\n                 result instanceof Promise ? result.then(resolve, reject) : reject(result);\n               })\n             } catch(e) {\n               reject(e);\n             }\n           }\n         });\n       }\n       catch(onRejected) {\n         return this.then(null, onRejected);\n       }\n       static resolve(value) {\n         if (value instanceof Promise) {\n           // 如果是Promise实例，直接返回\n           return value;\n         } else {\n           // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED\n           return new Promise((resolve, reject) => resolve(value));\n         }\n       }\n       static reject(reason) {\n         return new Promise((resolve, reject) => {\n           reject(reason);\n         })\n       }\n     }\n     复制代码\n \n ## 21.Promise.all\n \n `Promise.all`是支持链式调用的，本质上就是返回了一个Promise实例，通过`resolve`和`reject`来改变实例状态。\n \n     Promise.myAll = function(promiseArr) {\n       return new Promise((resolve, reject) => {\n         const ans = [];\n         let index = 0;\n         for (let i = 0; i < promiseArr.length; i++) {\n           promiseArr[i]\n           .then(res => {\n             ans[i] = res;\n             index++;\n             if (index === promiseArr.length) {\n               resolve(ans);\n             }\n           })\n           .catch(err => reject(err));\n         }\n       })\n     }\n     复制代码\n \n ## 22.Promise.race\n \n     Promise.race = function(promiseArr) {\n       return new Promise((resolve, reject) => {\n         promiseArr.forEach(p => {\n           // 如果不是Promise实例需要转化为Promise实例\n           Promise.resolve(p).then(\n             val => resolve(val),\n             err => reject(err),\n           )\n         })\n       })\n     }\n     复制代码\n \n ## 23.Promise并行限制\n \n 就是实现有并行限制的Promise调度器问题。\n \n 详细实现思路：[某条高频面试原题：实现有并行限制的Promise调度器](https://juejin.im/post/6854573217013563405)\n \n     class Scheduler {\n       constructor() {\n         this.queue = [];\n         this.maxCount = 2;\n         this.runCounts = 0;\n       }\n       add(promiseCreator) {\n         this.queue.push(promiseCreator);\n       }\n       taskStart() {\n         for (let i = 0; i < this.maxCount; i++) {\n           this.request();\n         }\n       }\n       request() {\n         if (!this.queue || !this.queue.length || this.runCounts >= this.maxCount) {\n           return;\n         }\n         this.runCounts++;\n     \n         this.queue.shift()().then(() => {\n           this.runCounts--;\n           this.request();\n         });\n       }\n     }\n        \n     const timeout = time => new Promise(resolve => {\n       setTimeout(resolve, time);\n     })\n       \n     const scheduler = new Scheduler();\n       \n     const addTask = (time,order) => {\n       scheduler.add(() => timeout(time).then(()=>console.log(order)))\n     }\n       \n       \n     addTask(1000, '1');\n     addTask(500, '2');\n     addTask(300, '3');\n     addTask(400, '4');\n     scheduler.taskStart()\n     // 2\n     // 3\n     // 1\n     // 4\n     复制代码\n \n ## 24.JSONP\n \n script标签不遵循同源协议，可以用来进行**跨域请求**，优点就是兼容性好但仅限于GET请求\n \n     const jsonp = ({ url, params, callbackName }) => {\n       const generateUrl = () => {\n         let dataSrc = '';\n         for (let key in params) {\n           if (Object.prototype.hasOwnProperty.call(params, key)) {\n             dataSrc += `${key}=${params[key]}&`;\n           }\n         }\n         dataSrc += `callback=${callbackName}`;\n         return `${url}?${dataSrc}`;\n       }\n       return new Promise((resolve, reject) => {\n         const scriptEle = document.createElement('script');\n         scriptEle.src = generateUrl();\n         document.body.appendChild(scriptEle);\n         window[callbackName] = data => {\n           resolve(data);\n           document.removeChild(scriptEle);\n         }\n       })\n     }\n     复制代码\n \n ## 25.AJAX\n \n     const getJSON = function(url) {\n       return new Promise((resolve, reject) => {\n         const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Mscrosoft.XMLHttp');\n         xhr.open('GET', url, false);\n         xhr.setRequestHeader('Accept', 'application/json');\n         xhr.onreadystatechange = function() {\n           if (xhr.readyState !== 4) return;\n           if (xhr.status === 200 || xhr.status === 304) {\n             resolve(xhr.responseText);\n           } else {\n             reject(new Error(xhr.responseText));\n           }\n         }\n         xhr.send();\n       })\n     }\n     复制代码\n \n ## 26.event模块\n \n 实现node中回调函数的机制，node中回调函数其实是内部使用了**观察者模式**。\n \n > 观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。\n \n     function EventEmitter() {\n       this.events = new Map();\n     }\n     \n     // 需要实现的一些方法：\n     // addListener、removeListener、once、removeAllListeners、emit\n     \n     // 模拟实现addlistener方法\n     const wrapCallback = (fn, once = false) => ({ callback: fn, once });\n     EventEmitter.prototype.addListener = function(type, fn, once = false) {\n       const hanlder = this.events.get(type);\n       if (!hanlder) {\n         // 没有type绑定事件\n         this.events.set(type, wrapCallback(fn, once));\n       } else if (hanlder && typeof hanlder.callback === 'function') {\n         // 目前type事件只有一个回调\n         this.events.set(type, [hanlder, wrapCallback(fn, once)]);\n       } else {\n         // 目前type事件数>=2\n         hanlder.push(wrapCallback(fn, once));\n       }\n     }\n     // 模拟实现removeListener\n     EventEmitter.prototype.removeListener = function(type, listener) {\n       const hanlder = this.events.get(type);\n       if (!hanlder) return;\n       if (!Array.isArray(this.events)) {\n         if (hanlder.callback === listener.callback) this.events.delete(type);\n         else return;\n       }\n       for (let i = 0; i < hanlder.length; i++) {\n         const item = hanlder[i];\n         if (item.callback === listener.callback) {\n           hanlder.splice(i, 1);\n           i--;\n           if (hanlder.length === 1) {\n             this.events.set(type, hanlder[0]);\n           }\n         }\n       }\n     }\n     // 模拟实现once方法\n     EventEmitter.prototype.once = function(type, listener) {\n       this.addListener(type, listener, true);\n     }\n     // 模拟实现emit方法\n     EventEmitter.prototype.emit = function(type, ...args) {\n       const hanlder = this.events.get(type);\n       if (!hanlder) return;\n       if (Array.isArray(hanlder)) {\n         hanlder.forEach(item => {\n           item.callback.apply(this, args);\n           if (item.once) {\n             this.removeListener(type, item);\n           }\n         })\n       } else {\n         hanlder.callback.apply(this, args);\n         if (hanlder.once) {\n           this.events.delete(type);\n         }\n       }\n       return true;\n     }\n     EventEmitter.prototype.removeAllListeners = function(type) {\n       const hanlder = this.events.get(type);\n       if (!hanlder) return;\n       this.events.delete(type);\n     }\n     复制代码\n \n ## 27.图片懒加载\n \n 可以给img标签统一自定义属性`data-src='default.png'`，当检测到图片出现在窗口之后再补充**src**属性，此时才会进行图片资源加载。\n \n     function lazyload() {\n       const imgs = document.getElementsByTagName('img');\n       const len = imgs.length;\n       // 视口的高度\n       const viewHeight = document.documentElement.clientHeight;\n       // 滚动条高度\n       const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;\n       for (let i = 0; i < len; i++) {\n         const offsetHeight = imgs[i].offsetTop;\n         if (offsetHeight < viewHeight + scrollHeight) {\n           const src = imgs[i].dataset.src;\n           imgs[i].src = src;\n         }\n       }\n     }\n     \n     // 可以使用节流优化一下\n     window.addEventListener('scroll', lazyload);\n     复制代码\n \n ## 28.滚动加载\n \n 原理就是监听页面滚动事件，**分析clientHeight**、**scrollTop**、**scrollHeight**三者的属性关系。\n \n     window.addEventListener('scroll', function() {\n       const clientHeight = document.documentElement.clientHeight;\n       const scrollTop = document.documentElement.scrollTop;\n       const scrollHeight = document.documentElement.scrollHeight;\n       if (clientHeight + scrollTop >= scrollHeight) {\n         // 检测到滚动至页面底部，进行后续操作\n         // ...\n       }\n     }, false);\n     复制代码\n \n 一个Demo：[页面滚动加载的Demo](https://github.com/SherrybabyOne/Demos/blob/master/Interview/JavaScript/%E6%BB%9A%E5%8A%A8%E5%8A%A0%E8%BD%BD.html)\n \n ## 29.渲染几万条数据不卡住页面\n \n 渲染大数据时，合理使用**createDocumentFragment**和**requestAnimationFrame**，将操作切分为一小段一小段执行。\n \n     setTimeout(() => {\n       // 插入十万条数据\n       const total = 100000;\n       // 一次插入的数据\n       const once = 20;\n       // 插入数据需要的次数\n       const loopCount = Math.ceil(total / once);\n       let countOfRender = 0;\n       const ul = document.querySelector('ul');\n       // 添加数据的方法\n       function add() {\n         const fragment = document.createDocumentFragment();\n         for(let i = 0; i < once; i++) {\n           const li = document.createElement('li');\n           li.innerText = Math.floor(Math.random() * total);\n           fragment.appendChild(li);\n         }\n         ul.appendChild(fragment);\n         countOfRender += 1;\n         loop();\n       }\n       function loop() {\n         if(countOfRender < loopCount) {\n           window.requestAnimationFrame(add);\n         }\n       }\n       loop();\n     }, 0)\n     复制代码\n \n ## 30.打印出当前网页使用了多少种HTML元素\n \n 一行代码可以解决：\n \n     const fn = () => {\n       return [...new Set([...document.querySelectorAll('*')].map(el => el.tagName))].length;\n     }\n     复制代码\n \n 值得注意的是：DOM操作返回的是**类数组**，需要转换为数组之后才可以调用数组的方法。\n \n ## 31.将VirtualDom转化为真实DOM结构\n \n 这是当前SPA应用的核心概念之一\n \n     // vnode结构：\n     // {\n     //   tag,\n     //   attrs,\n     //   children,\n     // }\n     \n     //Virtual DOM => DOM\n     function render(vnode, container) {\n       container.appendChild(_render(vnode));\n     }\n     function _render(vnode) {\n       // 如果是数字类型转化为字符串\n       if (typeof vnode === 'number') {\n         vnode = String(vnode);\n       }\n       // 字符串类型直接就是文本节点\n       if (typeof vnode === 'string') {\n         return document.createTextNode(vnode);\n       }\n       // 普通DOM\n       const dom = document.createElement(vnode.tag);\n       if (vnode.attrs) {\n         // 遍历属性\n         Object.keys(vnode.attrs).forEach(key => {\n           const value = vnode.attrs[key];\n           dom.setAttribute(key, value);\n         })\n       }\n       // 子数组进行递归操作\n       vnode.children.forEach(child => render(child, dom));\n       return dom;\n     }\n     复制代码\n \n ## 32.字符串解析问题\n \n     var a = {\n         b: 123,\n         c: '456',\n         e: '789',\n     }\n     var str=`a{a.b}aa{a.c}aa {a.d}aaaa`;\n     // => 'a123aa456aa {a.d}aaaa'\n     复制代码\n \n 实现函数使得将str字符串中的`{}`内的变量替换，如果属性不存在保持原样（比如`{a.d}`）\n \n 类似于模版字符串，但有一点出入，实际上原理大差不差\n \n     const fn1 = (str, obj) => {\n         let res = '';\n         // 标志位，标志前面是否有{\n         let flag = false;\n         let start;\n         for (let i = 0; i < str.length; i++) {\n             if (str[i] === '{') {\n                 flag = true;\n                 start = i + 1;\n                 continue;\n             }\n             if (!flag) res += str[i];\n             else {\n                 if (str[i] === '}') {\n                     flag = false;\n                     res += match(str.slice(start, i), obj);\n                 }\n             }\n         }\n         return res;\n     }\n     // 对象匹配操作\n     const match = (str, obj) => {\n         const keys = str.split('.').slice(1);\n         let index = 0;\n         let o = obj;\n         while (index < keys.length) {\n             const key = keys[index];\n             if (!o[key]) {\n                 return `{${str}}`;\n             } else {\n                 o = o[key];\n             }\n             index++;\n         }\n         return o;\n     }","slug":"32个手撕JS（转）","published":1,"updated":"2020-12-06T10:53:56.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmurj001xkl95gq8nfhvu","content":"<p><a href=\"https://juejin.im/post/6875152247714480136#heading-20\" target=\"_blank\" rel=\"noopener\">32个手撕JS，彻底摆脱初级前端（面试高频）</a></p><h1>32个手撕JS，彻底摆脱初级前端（面试高频）</h1><p>作为前端开发，JS是重中之重，最近结束了面试的高峰期，基本上offer也定下来了就等开奖，趁着这个时间总结下32个手撕JS问题，这些都是高频面试题，完全理解之后定能彻底摆脱初级前端。</p><p>关于源码都紧遵规范，都可跑通MDN示例，其余的大多会涉及一些关于JS的应用题和本人面试过程</p><h2 id=\"01-数组扁平化\">01.数组扁平化</h2><p>数组扁平化是指将一个多维数组变为一个一维数组</p><pre><code> const arr = [1, [2, [3, [4, 5]]], 6];\n // =&gt; [1, 2, 3, 4, 5, 6]\n 复制代码\n</code></pre><h3 id=\"方法一：使用flat\">方法一：使用flat()</h3><pre><code> const res1 = arr.flat(Infinity);\n 复制代码\n</code></pre><h3 id=\"方法二：利用正则\">方法二：利用正则</h3><pre><code> const res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',');\n 复制代码\n</code></pre><p>但数据类型都会变为字符串</p><h3 id=\"方法三：正则改良版本\">方法三：正则改良版本</h3><pre><code> const res3 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']');\n 复制代码\n</code></pre><h3 id=\"方法四：使用reduce\">方法四：使用reduce</h3><pre><code> const flatten = arr =&gt; {\n   return arr.reduce((pre, cur) =&gt; {\n     return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n   }, [])\n }\n const res4 = flatten(arr);\n 复制代码\n</code></pre><h3 id=\"方法五：函数递归\">方法五：函数递归</h3><pre><code> const res5 = [];\n const fn = arr =&gt; {\n   for (let i = 0; i &lt; arr.length; i++) {\n     if (Array.isArray(arr[i])) {\n       fn(arr[i]);\n     } else {\n       res5.push(arr[i]);\n     }\n   }\n }\n fn(arr);\n 复制代码\n</code></pre><h2 id=\"02-数组去重\">02.数组去重</h2><pre><code> const arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n // =&gt; [1, '1', 17, true, false, 'true', 'a', {}, {}]\n 复制代码\n</code></pre><h3 id=\"方法一：利用Set\">方法一：利用Set</h3><pre><code> const res1 = Array.from(new Set(arr));\n 复制代码\n</code></pre><h3 id=\"方法二：两层for循环-splice\">方法二：两层for循环+splice</h3><pre><code> const unique1 = arr =&gt; {\n   let len = arr.length;\n   for (let i = 0; i &lt; len; i++) {\n     for (let j = i + 1; j &lt; len; j++) {\n       if (arr[i] === arr[j]) {\n         arr.splice(j, 1);\n         // 每删除一个树，j--保证j的值经过自加后不变。同时，len--，减少循环次数提升性能\n         len--;\n         j--;\n       }\n     }\n   }\n   return arr;\n }\n 复制代码\n</code></pre><h3 id=\"方法三：利用indexOf\">方法三：利用indexOf</h3><pre><code> const unique2 = arr =&gt; {\n   const res = [];\n   for (let i = 0; i &lt; arr.length; i++) {\n     if (res.indexOf(arr[i]) === -1) res.push(arr[i]);\n   }\n   return res;\n }\n 复制代码\n</code></pre><p>当然也可以用include、filter，思路大同小异。</p><h3 id=\"方法四：利用include\">方法四：利用include</h3><pre><code> const unique3 = arr =&gt; {\n   const res = [];\n   for (let i = 0; i &lt; arr.length; i++) {\n     if (!res.includes(arr[i])) res.push(arr[i]);\n   }\n   return res;\n }\n 复制代码\n</code></pre><h3 id=\"方法五：利用filter\">方法五：利用filter</h3><pre><code> const unique4 = arr =&gt; {\n   return arr.filter((item, index) =&gt; {\n     return arr.indexOf(item) === index;\n   });\n }\n 复制代码\n</code></pre><h3 id=\"方法六：利用Map\">方法六：利用Map</h3><pre><code> const unique5 = arr =&gt; {\n   const map = new Map();\n   const res = [];\n   for (let i = 0; i &lt; arr.length; i++) {\n     if (!map.has(arr[i])) {\n       map.set(arr[i], true)\n       res.push(arr[i]);\n     }\n   }\n   return res;\n }\n 复制代码\n</code></pre><h2 id=\"03-类数组转化为数组\">03.类数组转化为数组</h2><p>类数组是具有<strong>length</strong>属性，但不具有数组原型上的方法。常见的类数组有<strong>arguments</strong>、DOM操作方法返回的结果。</p><h3 id=\"方法一：Array-from\">方法一：Array.from</h3><pre><code> Array.from(document.querySelectorAll('div'))\n 复制代码\n</code></pre><h3 id=\"方法二：Array-prototype-slice-call\">方法二：Array.prototype.slice.call()</h3><pre><code> Array.prototype.slice.call(document.querySelectorAll('div'))\n 复制代码\n</code></pre><h3 id=\"方法三：扩展运算符\">方法三：扩展运算符</h3><pre><code> [...document.querySelectorAll('div')]\n 复制代码\n</code></pre><h3 id=\"方法四：利用concat\">方法四：利用concat</h3><pre><code> Array.prototype.concat.apply([], document.querySelectorAll('div'));\n 复制代码\n</code></pre><h2 id=\"04-Array-prototype-filter\">04.Array.prototype.filter()</h2><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/804ee51d522746c3b219548d038413c2~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p><pre><code> Array.prototype.filter = function(callback, thisArg) {\n   if (this == undefined) {\n     throw new TypeError('this is null or not undefined');\n   }\n   if (typeof callback !== 'function') {\n     throw new TypeError(callback + 'is not a function');\n   }\n   const res = [];\n   // 让O成为回调函数的对象传递（强制转换对象）\n   const O = Object(this);\n   // &gt;&gt;&gt;0 保证len为number，且为正整数\n   const len = O.length &gt;&gt;&gt; 0;\n   for (let i = 0; i &lt; len; i++) {\n     // 检查i是否在O的属性（会检查原型链）\n     if (i in O) {\n       // 回调函数调用传参\n       if (callback.call(thisArg, O[i], i, O)) {\n         res.push(O[i]);\n       }\n     }\n   }\n   return res;\n }\n 复制代码\n</code></pre><p>对于<code>&gt;&gt;&gt;0</code>有疑问的：<a href=\"https://zhuanlan.zhihu.com/p/100790268\" target=\"_blank\" rel=\"noopener\">解释&gt;&gt;&gt;0的作用</a></p><h2 id=\"05-Array-prototype-map\">05.Array.prototype.map()</h2><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b099cf3e06bc4421abac4dc460a13c17~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p><pre><code> Array.prototype.map = function(callback, thisArg) {\n   if (this == undefined) {\n     throw new TypeError('this is null or not defined');\n   }\n   if (typeof callback !== 'function') {\n     throw new TypeError(callback + ' is not a function');\n   }\n   const res = [];\n   // 同理\n   const O = Object(this);\n   const len = O.length &gt;&gt;&gt; 0;\n   for (let i = 0; i &lt; len; i++) {\n     if (i in O) {\n       // 调用回调函数并传入新数组\n       res[i] = callback.call(thisArg, O[i], i, this);\n     }\n   }\n   return res;\n }\n 复制代码\n</code></pre><h2 id=\"06-Array-prototype-forEach\">06.Array.prototype.forEach()</h2><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c3819fb0c404ae5a8f4cddc4e80731e~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p><p><code>forEach</code>跟map类似，唯一不同的是<code>forEach</code>是没有返回值的。</p><pre><code> Array.prototype.forEach = function(callback, thisArg) {\n   if (this == null) {\n     throw new TypeError('this is null or not defined');\n   }\n   if (typeof callback !== &quot;function&quot;) {\n     throw new TypeError(callback + ' is not a function');\n   }\n   const O = Object(this);\n   const len = O.length &gt;&gt;&gt; 0;\n   let k = 0;\n   while (k &lt; len) {\n     if (k in O) {\n       callback.call(thisArg, O[k], k, O);\n     }\n     k++;\n   }\n }\n 复制代码\n</code></pre><h2 id=\"07-Array-prototype-reduce\">07.Array.prototype.reduce()</h2><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e51625eb9e2d47799ff39c5956139af7~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p><pre><code> Array.prototype.reduce = function(callback, initialValue) {\n   if (this == undefined) {\n     throw new TypeError('this is null or not defined');\n   }\n   if (typeof callback !== 'function') {\n     throw new TypeError(callbackfn + ' is not a function');\n   }\n   const O = Object(this);\n   const len = this.length &gt;&gt;&gt; 0;\n   let accumulator = initialValue;\n   let k = 0;\n   // 如果第二个参数为undefined的情况下\n   // 则数组的第一个有效值作为累加器的初始值\n   if (accumulator === undefined) {\n     while (k &lt; len &amp;&amp; !(k in O)) {\n       k++;\n     }\n     // 如果超出数组界限还没有找到累加器的初始值，则TypeError\n     if (k &gt;= len) {\n       throw new TypeError('Reduce of empty array with no initial value');\n     }\n     accumulator = O[k++];\n   }\n   while (k &lt; len) {\n     if (k in O) {\n       accumulator = callback.call(undefined, accumulator, O[k], k, O);\n     }\n     k++;\n   }\n   return accumulator;\n }\n 复制代码\n</code></pre><h2 id=\"08-Function-prototype-apply\">08.Function.prototype.apply()</h2><p>第一个参数是绑定的this，默认为<code>window</code>，第二个参数是数组或类数组</p><pre><code> Function.prototype.apply = function(context = window, args) {\n   if (typeof this !== 'function') {\n     throw new TypeError('Type Error');\n   }\n   const fn = Symbol('fn');\n   context[fn] = this;\n \n   const res = context[fn](...args);\n   delete context[fn];\n   return res;\n }\n 复制代码\n</code></pre><h2 id=\"09-Function-prototype-call\">09.Function.prototype.call</h2><p>于<code>call</code>唯一不同的是，<code>call()</code>方法接受的是一个参数列表</p><pre><code> Function.prototype.call = function(context = window, ...args) {\n   if (typeof this !== 'function') {\n     throw new TypeError('Type Error');\n   }\n   const fn = Symbol('fn');\n   context[fn] = this;\n \n   const res = this[fn](...args);\n   delete this.fn;\n   return res;\n }\n 复制代码\n</code></pre><h2 id=\"10-Function-prototype-bind\">10.Function.prototype.bind</h2><pre><code> Function.prototype.bind = function(context, ...args) {\n   if (typeof this !== 'function') {\n     throw new Error(&quot;Type Error&quot;);\n   }\n   // 保存this的值\n   var self = this;\n \n   return function F() {\n     // 考虑new的情况\n     if(this instanceof F) {\n       return new self(...args, ...arguments)\n     }\n     return self.apply(context, [...args, ...arguments])\n   }\n }\n 复制代码\n</code></pre><h2 id=\"11-debounce（防抖）\">11.debounce（防抖）</h2><p>触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。</p><pre><code> const debounce = (fn, time) =&gt; {\n   let timeout = null;\n   return function() {\n     clearTimeout(timeout)\n     timeout = setTimeout(() =&gt; {\n       fn.apply(this, arguments);\n     }, time);\n   }\n };\n 复制代码\n</code></pre><p>防抖常应用于用户进行搜索输入节约请求资源，<code>window</code>触发<code>resize</code>事件时进行防抖只触发一次。</p><h2 id=\"12-throttle（节流）\">12.throttle（节流）</h2><p>高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。</p><pre><code> const throttle = (fn, time) =&gt; {\n   let flag = true;\n   return function() {\n     if (!flag) return;\n     flag = false;\n     setTimeout(() =&gt; {\n       fn.apply(this, arguments);\n       flag = true;\n     }, time);\n   }\n }\n 复制代码\n</code></pre><p>节流常应用于鼠标不断点击触发、监听滚动事件。</p><h2 id=\"13-函数珂里化\">13.函数珂里化</h2><blockquote><p>指的是将一个接受多个参数的函数 变为 接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)</p></blockquote><p>经典面试题：实现<code>add(1)(2)(3)(4)=10;</code> 、 <code>add(1)(1,2,3)(2)=9;</code></p><pre><code> function add() {\n   const _args = [...arguments];\n   function fn() {\n     _args.push(...arguments);\n     return fn;\n   }\n   fn.toString = function() {\n     return _args.reduce((sum, cur) =&gt; sum + cur);\n   }\n   return fn;\n }\n 复制代码\n</code></pre><h2 id=\"14-模拟new操作\">14.模拟new操作</h2><p>3个步骤：</p><ol><li><p>以<code>ctor.prototype</code>为原型创建一个对象。</p></li><li><p>执行构造函数并将this绑定到新创建的对象上。</p></li><li><p>判断构造函数执行返回的结果是否是引用数据类型，若是则返回构造函数执行的结果，否则返回创建的对象。</p><p>function newOperator(ctor, …args) {<br>if (typeof ctor !== ‘function’) {<br>throw new TypeError(‘Type Error’);<br>}<br>const obj = Object.create(ctor.prototype);<br>const res = ctor.apply(obj, args);</p><p>const isObject = typeof res === ‘object’ &amp;&amp; res !== null;<br>const isFunction = typeof res === ‘function’;<br>return isObject || isFunction ? res : obj;<br>}<br>复制代码</p></li></ol><h2 id=\"15-instanceof\">15.instanceof</h2><p><code>instanceof</code>运算符用于检测构造函数的<code>prototype</code>属性是否出现在某个实例对象的原型链上。</p><pre><code> const myInstanceof = (left, right) =&gt; {\n   // 基本数据类型都返回false\n   if (typeof left !== 'object' || left === null) return false;\n   let proto = Object.getPrototypeOf(left);\n   while (true) {\n     if (proto === null) return false;\n     if (proto === right.prototype) return true;\n     proto = Object.getPrototypeOf(proto);\n   }\n }\n 复制代码\n</code></pre><h2 id=\"16-原型继承\">16.原型继承</h2><p>这里只写寄生组合继承了，中间还有几个演变过来的继承但都有一些缺陷</p><pre><code> function Parent() {\n   this.name = 'parent';\n }\n function Child() {\n   Parent.call(this);\n   this.type = 'children';\n }\n Child.prototype = Object.create(Parent.prototype);\n Child.prototype.constructor = Child;\n 复制代码\n</code></pre><h2 id=\"17-Object-is\"><a href=\"http://17.Object.is\" target=\"_blank\" rel=\"noopener\">17.Object.is</a></h2><p><code>Object.is</code>解决的主要是这两个问题：</p><pre><code> +0 === -0  // true\n NaN === NaN // false\n 复制代码\n\n const is= (x, y) =&gt; {\n   if (x === y) {\n     // +0和-0应该不相等\n     return x !== 0 || y !== 0 || 1/x === 1/y;\n   } else {\n     return x !== x &amp;&amp; y !== y;\n   }\n }\n 复制代码\n</code></pre><h2 id=\"18-Object-assign\">18.Object.assign</h2><p><code>Object.assign()</code>方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）</p><pre><code> Object.defineProperty(Object, 'assign', {\n   value: function(target, ...args) {\n     if (target == null) {\n       return new TypeError('Cannot convert undefined or null to object');\n     }\n     \n     // 目标对象需要统一是引用数据类型，若不是会自动转换\n     const to = Object(target);\n \n     for (let i = 0; i &lt; args.length; i++) {\n       // 每一个源对象\n       const nextSource = args[i];\n       if (nextSource !== null) {\n         // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n         for (const nextKey in nextSource) {\n           if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n             to[nextKey] = nextSource[nextKey];\n           }\n         }\n       }\n     }\n     return to;\n   },\n   // 不可枚举\n   enumerable: false,\n   writable: true,\n   configurable: true,\n })\n 复制代码\n</code></pre><h2 id=\"19-深拷贝\">19.深拷贝</h2><p>递归的完整版本（考虑到了Symbol属性）：</p><pre><code> const cloneDeep1 = (target, hash = new WeakMap()) =&gt; {\n   // 对于传入参数处理\n   if (typeof target !== 'object' || target === null) {\n     return target;\n   }\n   // 哈希表中存在直接返回\n   if (hash.has(target)) return hash.get(target);\n \n   const cloneTarget = Array.isArray(target) ? [] : {};\n   hash.set(target, cloneTarget);\n \n   // 针对Symbol属性\n   const symKeys = Object.getOwnPropertySymbols(target);\n   if (symKeys.length) {\n     symKeys.forEach(symKey =&gt; {\n       if (typeof target[symKey] === 'object' &amp;&amp; target[symKey] !== null) {\n         cloneTarget[symKey] = cloneDeep1(target[symKey]);\n       } else {\n         cloneTarget[symKey] = target[symKey];\n       }\n     })\n   }\n \n   for (const i in target) {\n     if (Object.prototype.hasOwnProperty.call(target, i)) {\n       cloneTarget[i] =\n         typeof target[i] === 'object' &amp;&amp; target[i] !== null\n         ? cloneDeep1(target[i], hash)\n         : target[i];\n     }\n   }\n   return cloneTarget;\n }\n 复制代码\n</code></pre><h2 id=\"20-Promise\">20.Promise</h2><p>实现思路：<a href=\"https://juejin.im/post/6860037916622913550\" target=\"_blank\" rel=\"noopener\">Promise源码实现</a></p><pre><code> const PENDING = 'PENDING';      // 进行中\n const FULFILLED = 'FULFILLED';  // 已成功\n const REJECTED = 'REJECTED';    // 已失败\n \n class Promise {\n   constructor(exector) {\n     // 初始化状态\n     this.status = PENDING;\n     // 将成功、失败结果放在this上，便于then、catch访问\n     this.value = undefined;\n     this.reason = undefined;\n     // 成功态回调函数队列\n     this.onFulfilledCallbacks = [];\n     // 失败态回调函数队列\n     this.onRejectedCallbacks = [];\n \n     const resolve = value =&gt; {\n       // 只有进行中状态才能更改状态\n       if (this.status === PENDING) {\n         this.status = FULFILLED;\n         this.value = value;\n         // 成功态函数依次执行\n         this.onFulfilledCallbacks.forEach(fn =&gt; fn(this.value));\n       }\n     }\n     const reject = reason =&gt; {\n       // 只有进行中状态才能更改状态\n       if (this.status === PENDING) {\n         this.status = REJECTED;\n         this.reason = reason;\n         // 失败态函数依次执行\n         this.onRejectedCallbacks.forEach(fn =&gt; fn(this.reason))\n       }\n     }\n     try {\n       // 立即执行executor\n       // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n       exector(resolve, reject);\n     } catch(e) {\n       // executor执行出错，将错误内容reject抛出去\n       reject(e);\n     }\n   }\n   then(onFulfilled, onRejected) {\n     onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value =&gt; value;\n     onRejected = typeof onRejected === 'function'? onRejected:\n       reason =&gt; { throw new Error(reason instanceof Error ? reason.message:reason) }\n     // 保存this\n     const self = this;\n     return new Promise((resolve, reject) =&gt; {\n       if (self.status === PENDING) {\n         self.onFulfilledCallbacks.push(() =&gt; {\n           // try捕获错误\n           try {\n             // 模拟微任务\n             setTimeout(() =&gt; {\n               const result = onFulfilled(self.value);\n               // 分两种情况：\n               // 1. 回调函数返回值是Promise，执行then操作\n               // 2. 如果不是Promise，调用新Promise的resolve函数\n               result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n             })\n           } catch(e) {\n             reject(e);\n           }\n         });\n         self.onRejectedCallbacks.push(() =&gt; {\n           // 以下同理\n           try {\n             setTimeout(() =&gt; {\n               const result = onRejected(self.reason);\n               // 不同点：此时是reject\n               result instanceof Promise ? result.then(resolve, reject) : reject(result);\n             })\n           } catch(e) {\n             reject(e);\n           }\n         })\n       } else if (self.status === FULFILLED) {\n         try {\n           setTimeout(() =&gt; {\n             const result = onFulfilled(self.value);\n             result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n           });\n         } catch(e) {\n           reject(e);\n         }\n       } else if (self.status === REJECTED){\n         try {\n           setTimeout(() =&gt; {\n             const result = onRejected(self.reason);\n             result instanceof Promise ? result.then(resolve, reject) : reject(result);\n           })\n         } catch(e) {\n           reject(e);\n         }\n       }\n     });\n   }\n   catch(onRejected) {\n     return this.then(null, onRejected);\n   }\n   static resolve(value) {\n     if (value instanceof Promise) {\n       // 如果是Promise实例，直接返回\n       return value;\n     } else {\n       // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED\n       return new Promise((resolve, reject) =&gt; resolve(value));\n     }\n   }\n   static reject(reason) {\n     return new Promise((resolve, reject) =&gt; {\n       reject(reason);\n     })\n   }\n }\n 复制代码\n</code></pre><h2 id=\"21-Promise-all\">21.Promise.all</h2><p><code>Promise.all</code>是支持链式调用的，本质上就是返回了一个Promise实例，通过<code>resolve</code>和<code>reject</code>来改变实例状态。</p><pre><code> Promise.myAll = function(promiseArr) {\n   return new Promise((resolve, reject) =&gt; {\n     const ans = [];\n     let index = 0;\n     for (let i = 0; i &lt; promiseArr.length; i++) {\n       promiseArr[i]\n       .then(res =&gt; {\n         ans[i] = res;\n         index++;\n         if (index === promiseArr.length) {\n           resolve(ans);\n         }\n       })\n       .catch(err =&gt; reject(err));\n     }\n   })\n }\n 复制代码\n</code></pre><h2 id=\"22-Promise-race\">22.Promise.race</h2><pre><code> Promise.race = function(promiseArr) {\n   return new Promise((resolve, reject) =&gt; {\n     promiseArr.forEach(p =&gt; {\n       // 如果不是Promise实例需要转化为Promise实例\n       Promise.resolve(p).then(\n         val =&gt; resolve(val),\n         err =&gt; reject(err),\n       )\n     })\n   })\n }\n 复制代码\n</code></pre><h2 id=\"23-Promise并行限制\">23.Promise并行限制</h2><p>就是实现有并行限制的Promise调度器问题。</p><p>详细实现思路：<a href=\"https://juejin.im/post/6854573217013563405\" target=\"_blank\" rel=\"noopener\">某条高频面试原题：实现有并行限制的Promise调度器</a></p><pre><code> class Scheduler {\n   constructor() {\n     this.queue = [];\n     this.maxCount = 2;\n     this.runCounts = 0;\n   }\n   add(promiseCreator) {\n     this.queue.push(promiseCreator);\n   }\n   taskStart() {\n     for (let i = 0; i &lt; this.maxCount; i++) {\n       this.request();\n     }\n   }\n   request() {\n     if (!this.queue || !this.queue.length || this.runCounts &gt;= this.maxCount) {\n       return;\n     }\n     this.runCounts++;\n \n     this.queue.shift()().then(() =&gt; {\n       this.runCounts--;\n       this.request();\n     });\n   }\n }\n    \n const timeout = time =&gt; new Promise(resolve =&gt; {\n   setTimeout(resolve, time);\n })\n   \n const scheduler = new Scheduler();\n   \n const addTask = (time,order) =&gt; {\n   scheduler.add(() =&gt; timeout(time).then(()=&gt;console.log(order)))\n }\n   \n   \n addTask(1000, '1');\n addTask(500, '2');\n addTask(300, '3');\n addTask(400, '4');\n scheduler.taskStart()\n // 2\n // 3\n // 1\n // 4\n 复制代码\n</code></pre><h2 id=\"24-JSONP\">24.JSONP</h2><p>script标签不遵循同源协议，可以用来进行<strong>跨域请求</strong>，优点就是兼容性好但仅限于GET请求</p><pre><code> const jsonp = ({ url, params, callbackName }) =&gt; {\n   const generateUrl = () =&gt; {\n     let dataSrc = '';\n     for (let key in params) {\n       if (Object.prototype.hasOwnProperty.call(params, key)) {\n         dataSrc += `${key}=${params[key]}&amp;`;\n       }\n     }\n     dataSrc += `callback=${callbackName}`;\n     return `${url}?${dataSrc}`;\n   }\n   return new Promise((resolve, reject) =&gt; {\n     const scriptEle = document.createElement('script');\n     scriptEle.src = generateUrl();\n     document.body.appendChild(scriptEle);\n     window[callbackName] = data =&gt; {\n       resolve(data);\n       document.removeChild(scriptEle);\n     }\n   })\n }\n 复制代码\n</code></pre><h2 id=\"25-AJAX\">25.AJAX</h2><pre><code> const getJSON = function(url) {\n   return new Promise((resolve, reject) =&gt; {\n     const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Mscrosoft.XMLHttp');\n     xhr.open('GET', url, false);\n     xhr.setRequestHeader('Accept', 'application/json');\n     xhr.onreadystatechange = function() {\n       if (xhr.readyState !== 4) return;\n       if (xhr.status === 200 || xhr.status === 304) {\n         resolve(xhr.responseText);\n       } else {\n         reject(new Error(xhr.responseText));\n       }\n     }\n     xhr.send();\n   })\n }\n 复制代码\n</code></pre><h2 id=\"26-event模块\">26.event模块</h2><p>实现node中回调函数的机制，node中回调函数其实是内部使用了<strong>观察者模式</strong>。</p><blockquote><p>观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。</p></blockquote><pre><code> function EventEmitter() {\n   this.events = new Map();\n }\n \n // 需要实现的一些方法：\n // addListener、removeListener、once、removeAllListeners、emit\n \n // 模拟实现addlistener方法\n const wrapCallback = (fn, once = false) =&gt; ({ callback: fn, once });\n EventEmitter.prototype.addListener = function(type, fn, once = false) {\n   const hanlder = this.events.get(type);\n   if (!hanlder) {\n     // 没有type绑定事件\n     this.events.set(type, wrapCallback(fn, once));\n   } else if (hanlder &amp;&amp; typeof hanlder.callback === 'function') {\n     // 目前type事件只有一个回调\n     this.events.set(type, [hanlder, wrapCallback(fn, once)]);\n   } else {\n     // 目前type事件数&gt;=2\n     hanlder.push(wrapCallback(fn, once));\n   }\n }\n // 模拟实现removeListener\n EventEmitter.prototype.removeListener = function(type, listener) {\n   const hanlder = this.events.get(type);\n   if (!hanlder) return;\n   if (!Array.isArray(this.events)) {\n     if (hanlder.callback === listener.callback) this.events.delete(type);\n     else return;\n   }\n   for (let i = 0; i &lt; hanlder.length; i++) {\n     const item = hanlder[i];\n     if (item.callback === listener.callback) {\n       hanlder.splice(i, 1);\n       i--;\n       if (hanlder.length === 1) {\n         this.events.set(type, hanlder[0]);\n       }\n     }\n   }\n }\n // 模拟实现once方法\n EventEmitter.prototype.once = function(type, listener) {\n   this.addListener(type, listener, true);\n }\n // 模拟实现emit方法\n EventEmitter.prototype.emit = function(type, ...args) {\n   const hanlder = this.events.get(type);\n   if (!hanlder) return;\n   if (Array.isArray(hanlder)) {\n     hanlder.forEach(item =&gt; {\n       item.callback.apply(this, args);\n       if (item.once) {\n         this.removeListener(type, item);\n       }\n     })\n   } else {\n     hanlder.callback.apply(this, args);\n     if (hanlder.once) {\n       this.events.delete(type);\n     }\n   }\n   return true;\n }\n EventEmitter.prototype.removeAllListeners = function(type) {\n   const hanlder = this.events.get(type);\n   if (!hanlder) return;\n   this.events.delete(type);\n }\n 复制代码\n</code></pre><h2 id=\"27-图片懒加载\">27.图片懒加载</h2><p>可以给img标签统一自定义属性<code>data-src='default.png'</code>，当检测到图片出现在窗口之后再补充<strong>src</strong>属性，此时才会进行图片资源加载。</p><pre><code> function lazyload() {\n   const imgs = document.getElementsByTagName('img');\n   const len = imgs.length;\n   // 视口的高度\n   const viewHeight = document.documentElement.clientHeight;\n   // 滚动条高度\n   const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;\n   for (let i = 0; i &lt; len; i++) {\n     const offsetHeight = imgs[i].offsetTop;\n     if (offsetHeight &lt; viewHeight + scrollHeight) {\n       const src = imgs[i].dataset.src;\n       imgs[i].src = src;\n     }\n   }\n }\n \n // 可以使用节流优化一下\n window.addEventListener('scroll', lazyload);\n 复制代码\n</code></pre><h2 id=\"28-滚动加载\">28.滚动加载</h2><p>原理就是监听页面滚动事件，<strong>分析clientHeight</strong>、<strong>scrollTop</strong>、<strong>scrollHeight</strong>三者的属性关系。</p><pre><code> window.addEventListener('scroll', function() {\n   const clientHeight = document.documentElement.clientHeight;\n   const scrollTop = document.documentElement.scrollTop;\n   const scrollHeight = document.documentElement.scrollHeight;\n   if (clientHeight + scrollTop &gt;= scrollHeight) {\n     // 检测到滚动至页面底部，进行后续操作\n     // ...\n   }\n }, false);\n 复制代码\n</code></pre><p>一个Demo：<a href=\"https://github.com/SherrybabyOne/Demos/blob/master/Interview/JavaScript/%E6%BB%9A%E5%8A%A8%E5%8A%A0%E8%BD%BD.html\" target=\"_blank\" rel=\"noopener\">页面滚动加载的Demo</a></p><h2 id=\"29-渲染几万条数据不卡住页面\">29.渲染几万条数据不卡住页面</h2><p>渲染大数据时，合理使用<strong>createDocumentFragment</strong>和<strong>requestAnimationFrame</strong>，将操作切分为一小段一小段执行。</p><pre><code> setTimeout(() =&gt; {\n   // 插入十万条数据\n   const total = 100000;\n   // 一次插入的数据\n   const once = 20;\n   // 插入数据需要的次数\n   const loopCount = Math.ceil(total / once);\n   let countOfRender = 0;\n   const ul = document.querySelector('ul');\n   // 添加数据的方法\n   function add() {\n     const fragment = document.createDocumentFragment();\n     for(let i = 0; i &lt; once; i++) {\n       const li = document.createElement('li');\n       li.innerText = Math.floor(Math.random() * total);\n       fragment.appendChild(li);\n     }\n     ul.appendChild(fragment);\n     countOfRender += 1;\n     loop();\n   }\n   function loop() {\n     if(countOfRender &lt; loopCount) {\n       window.requestAnimationFrame(add);\n     }\n   }\n   loop();\n }, 0)\n 复制代码\n</code></pre><h2 id=\"30-打印出当前网页使用了多少种HTML元素\">30.打印出当前网页使用了多少种HTML元素</h2><p>一行代码可以解决：</p><pre><code> const fn = () =&gt; {\n   return [...new Set([...document.querySelectorAll('*')].map(el =&gt; el.tagName))].length;\n }\n 复制代码\n</code></pre><p>值得注意的是：DOM操作返回的是<strong>类数组</strong>，需要转换为数组之后才可以调用数组的方法。</p><h2 id=\"31-将VirtualDom转化为真实DOM结构\">31.将VirtualDom转化为真实DOM结构</h2><p>这是当前SPA应用的核心概念之一</p><pre><code> // vnode结构：\n // {\n //   tag,\n //   attrs,\n //   children,\n // }\n \n //Virtual DOM =&gt; DOM\n function render(vnode, container) {\n   container.appendChild(_render(vnode));\n }\n function _render(vnode) {\n   // 如果是数字类型转化为字符串\n   if (typeof vnode === 'number') {\n     vnode = String(vnode);\n   }\n   // 字符串类型直接就是文本节点\n   if (typeof vnode === 'string') {\n     return document.createTextNode(vnode);\n   }\n   // 普通DOM\n   const dom = document.createElement(vnode.tag);\n   if (vnode.attrs) {\n     // 遍历属性\n     Object.keys(vnode.attrs).forEach(key =&gt; {\n       const value = vnode.attrs[key];\n       dom.setAttribute(key, value);\n     })\n   }\n   // 子数组进行递归操作\n   vnode.children.forEach(child =&gt; render(child, dom));\n   return dom;\n }\n 复制代码\n</code></pre><h2 id=\"32-字符串解析问题\">32.字符串解析问题</h2><pre><code> var a = {\n     b: 123,\n     c: '456',\n     e: '789',\n }\n var str=`a{a.b}aa{a.c}aa {a.d}aaaa`;\n // =&gt; 'a123aa456aa {a.d}aaaa'\n 复制代码\n</code></pre><p>实现函数使得将str字符串中的<code>{}</code>内的变量替换，如果属性不存在保持原样（比如<code>{a.d}</code>）</p><p>类似于模版字符串，但有一点出入，实际上原理大差不差</p><pre><code> const fn1 = (str, obj) =&gt; {\n     let res = '';\n     // 标志位，标志前面是否有{\n     let flag = false;\n     let start;\n     for (let i = 0; i &lt; str.length; i++) {\n         if (str[i] === '{') {\n             flag = true;\n             start = i + 1;\n             continue;\n         }\n         if (!flag) res += str[i];\n         else {\n             if (str[i] === '}') {\n                 flag = false;\n                 res += match(str.slice(start, i), obj);\n             }\n         }\n     }\n     return res;\n }\n // 对象匹配操作\n const match = (str, obj) =&gt; {\n     const keys = str.split('.').slice(1);\n     let index = 0;\n     let o = obj;\n     while (index &lt; keys.length) {\n         const key = keys[index];\n         if (!o[key]) {\n             return `{${str}}`;\n         } else {\n             o = o[key];\n         }\n         index++;\n     }\n     return o;\n }</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://juejin.im/post/6875152247714480136#heading-20\" target=\"_blank\" rel=\"noopener\">32个手撕JS，彻底摆脱初级前端（面试高频）</a></p><h1>32个手撕JS，彻底摆脱初级前端（面试高频）</h1><p>作为前端开发，JS是重中之重，最近结束了面试的高峰期，基本上offer也定下来了就等开奖，趁着这个时间总结下32个手撕JS问题，这些都是高频面试题，完全理解之后定能彻底摆脱初级前端。</p><p>关于源码都紧遵规范，都可跑通MDN示例，其余的大多会涉及一些关于JS的应用题和本人面试过程</p><h2 id=\"01-数组扁平化\">01.数组扁平化</h2><p>数组扁平化是指将一个多维数组变为一个一维数组</p><pre><code> const arr = [1, [2, [3, [4, 5]]], 6];\n // =&gt; [1, 2, 3, 4, 5, 6]\n 复制代码\n</code></pre><h3 id=\"方法一：使用flat\">方法一：使用flat()</h3><pre><code> const res1 = arr.flat(Infinity);\n 复制代码\n</code></pre><h3 id=\"方法二：利用正则\">方法二：利用正则</h3><pre><code> const res2 = JSON.stringify(arr).replace(/\\[|\\]/g, '').split(',');\n 复制代码\n</code></pre><p>但数据类型都会变为字符串</p><h3 id=\"方法三：正则改良版本\">方法三：正则改良版本</h3><pre><code> const res3 = JSON.parse('[' + JSON.stringify(arr).replace(/\\[|\\]/g, '') + ']');\n 复制代码\n</code></pre><h3 id=\"方法四：使用reduce\">方法四：使用reduce</h3><pre><code> const flatten = arr =&gt; {\n   return arr.reduce((pre, cur) =&gt; {\n     return pre.concat(Array.isArray(cur) ? flatten(cur) : cur);\n   }, [])\n }\n const res4 = flatten(arr);\n 复制代码\n</code></pre><h3 id=\"方法五：函数递归\">方法五：函数递归</h3><pre><code> const res5 = [];\n const fn = arr =&gt; {\n   for (let i = 0; i &lt; arr.length; i++) {\n     if (Array.isArray(arr[i])) {\n       fn(arr[i]);\n     } else {\n       res5.push(arr[i]);\n     }\n   }\n }\n fn(arr);\n 复制代码\n</code></pre><h2 id=\"02-数组去重\">02.数组去重</h2><pre><code> const arr = [1, 1, '1', 17, true, true, false, false, 'true', 'a', {}, {}];\n // =&gt; [1, '1', 17, true, false, 'true', 'a', {}, {}]\n 复制代码\n</code></pre><h3 id=\"方法一：利用Set\">方法一：利用Set</h3><pre><code> const res1 = Array.from(new Set(arr));\n 复制代码\n</code></pre><h3 id=\"方法二：两层for循环-splice\">方法二：两层for循环+splice</h3><pre><code> const unique1 = arr =&gt; {\n   let len = arr.length;\n   for (let i = 0; i &lt; len; i++) {\n     for (let j = i + 1; j &lt; len; j++) {\n       if (arr[i] === arr[j]) {\n         arr.splice(j, 1);\n         // 每删除一个树，j--保证j的值经过自加后不变。同时，len--，减少循环次数提升性能\n         len--;\n         j--;\n       }\n     }\n   }\n   return arr;\n }\n 复制代码\n</code></pre><h3 id=\"方法三：利用indexOf\">方法三：利用indexOf</h3><pre><code> const unique2 = arr =&gt; {\n   const res = [];\n   for (let i = 0; i &lt; arr.length; i++) {\n     if (res.indexOf(arr[i]) === -1) res.push(arr[i]);\n   }\n   return res;\n }\n 复制代码\n</code></pre><p>当然也可以用include、filter，思路大同小异。</p><h3 id=\"方法四：利用include\">方法四：利用include</h3><pre><code> const unique3 = arr =&gt; {\n   const res = [];\n   for (let i = 0; i &lt; arr.length; i++) {\n     if (!res.includes(arr[i])) res.push(arr[i]);\n   }\n   return res;\n }\n 复制代码\n</code></pre><h3 id=\"方法五：利用filter\">方法五：利用filter</h3><pre><code> const unique4 = arr =&gt; {\n   return arr.filter((item, index) =&gt; {\n     return arr.indexOf(item) === index;\n   });\n }\n 复制代码\n</code></pre><h3 id=\"方法六：利用Map\">方法六：利用Map</h3><pre><code> const unique5 = arr =&gt; {\n   const map = new Map();\n   const res = [];\n   for (let i = 0; i &lt; arr.length; i++) {\n     if (!map.has(arr[i])) {\n       map.set(arr[i], true)\n       res.push(arr[i]);\n     }\n   }\n   return res;\n }\n 复制代码\n</code></pre><h2 id=\"03-类数组转化为数组\">03.类数组转化为数组</h2><p>类数组是具有<strong>length</strong>属性，但不具有数组原型上的方法。常见的类数组有<strong>arguments</strong>、DOM操作方法返回的结果。</p><h3 id=\"方法一：Array-from\">方法一：Array.from</h3><pre><code> Array.from(document.querySelectorAll('div'))\n 复制代码\n</code></pre><h3 id=\"方法二：Array-prototype-slice-call\">方法二：Array.prototype.slice.call()</h3><pre><code> Array.prototype.slice.call(document.querySelectorAll('div'))\n 复制代码\n</code></pre><h3 id=\"方法三：扩展运算符\">方法三：扩展运算符</h3><pre><code> [...document.querySelectorAll('div')]\n 复制代码\n</code></pre><h3 id=\"方法四：利用concat\">方法四：利用concat</h3><pre><code> Array.prototype.concat.apply([], document.querySelectorAll('div'));\n 复制代码\n</code></pre><h2 id=\"04-Array-prototype-filter\">04.Array.prototype.filter()</h2><p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/804ee51d522746c3b219548d038413c2~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p><pre><code> Array.prototype.filter = function(callback, thisArg) {\n   if (this == undefined) {\n     throw new TypeError('this is null or not undefined');\n   }\n   if (typeof callback !== 'function') {\n     throw new TypeError(callback + 'is not a function');\n   }\n   const res = [];\n   // 让O成为回调函数的对象传递（强制转换对象）\n   const O = Object(this);\n   // &gt;&gt;&gt;0 保证len为number，且为正整数\n   const len = O.length &gt;&gt;&gt; 0;\n   for (let i = 0; i &lt; len; i++) {\n     // 检查i是否在O的属性（会检查原型链）\n     if (i in O) {\n       // 回调函数调用传参\n       if (callback.call(thisArg, O[i], i, O)) {\n         res.push(O[i]);\n       }\n     }\n   }\n   return res;\n }\n 复制代码\n</code></pre><p>对于<code>&gt;&gt;&gt;0</code>有疑问的：<a href=\"https://zhuanlan.zhihu.com/p/100790268\" target=\"_blank\" rel=\"noopener\">解释&gt;&gt;&gt;0的作用</a></p><h2 id=\"05-Array-prototype-map\">05.Array.prototype.map()</h2><p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b099cf3e06bc4421abac4dc460a13c17~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p><pre><code> Array.prototype.map = function(callback, thisArg) {\n   if (this == undefined) {\n     throw new TypeError('this is null or not defined');\n   }\n   if (typeof callback !== 'function') {\n     throw new TypeError(callback + ' is not a function');\n   }\n   const res = [];\n   // 同理\n   const O = Object(this);\n   const len = O.length &gt;&gt;&gt; 0;\n   for (let i = 0; i &lt; len; i++) {\n     if (i in O) {\n       // 调用回调函数并传入新数组\n       res[i] = callback.call(thisArg, O[i], i, this);\n     }\n   }\n   return res;\n }\n 复制代码\n</code></pre><h2 id=\"06-Array-prototype-forEach\">06.Array.prototype.forEach()</h2><p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c3819fb0c404ae5a8f4cddc4e80731e~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p><p><code>forEach</code>跟map类似，唯一不同的是<code>forEach</code>是没有返回值的。</p><pre><code> Array.prototype.forEach = function(callback, thisArg) {\n   if (this == null) {\n     throw new TypeError('this is null or not defined');\n   }\n   if (typeof callback !== &quot;function&quot;) {\n     throw new TypeError(callback + ' is not a function');\n   }\n   const O = Object(this);\n   const len = O.length &gt;&gt;&gt; 0;\n   let k = 0;\n   while (k &lt; len) {\n     if (k in O) {\n       callback.call(thisArg, O[k], k, O);\n     }\n     k++;\n   }\n }\n 复制代码\n</code></pre><h2 id=\"07-Array-prototype-reduce\">07.Array.prototype.reduce()</h2><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e51625eb9e2d47799ff39c5956139af7~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p><pre><code> Array.prototype.reduce = function(callback, initialValue) {\n   if (this == undefined) {\n     throw new TypeError('this is null or not defined');\n   }\n   if (typeof callback !== 'function') {\n     throw new TypeError(callbackfn + ' is not a function');\n   }\n   const O = Object(this);\n   const len = this.length &gt;&gt;&gt; 0;\n   let accumulator = initialValue;\n   let k = 0;\n   // 如果第二个参数为undefined的情况下\n   // 则数组的第一个有效值作为累加器的初始值\n   if (accumulator === undefined) {\n     while (k &lt; len &amp;&amp; !(k in O)) {\n       k++;\n     }\n     // 如果超出数组界限还没有找到累加器的初始值，则TypeError\n     if (k &gt;= len) {\n       throw new TypeError('Reduce of empty array with no initial value');\n     }\n     accumulator = O[k++];\n   }\n   while (k &lt; len) {\n     if (k in O) {\n       accumulator = callback.call(undefined, accumulator, O[k], k, O);\n     }\n     k++;\n   }\n   return accumulator;\n }\n 复制代码\n</code></pre><h2 id=\"08-Function-prototype-apply\">08.Function.prototype.apply()</h2><p>第一个参数是绑定的this，默认为<code>window</code>，第二个参数是数组或类数组</p><pre><code> Function.prototype.apply = function(context = window, args) {\n   if (typeof this !== 'function') {\n     throw new TypeError('Type Error');\n   }\n   const fn = Symbol('fn');\n   context[fn] = this;\n \n   const res = context[fn](...args);\n   delete context[fn];\n   return res;\n }\n 复制代码\n</code></pre><h2 id=\"09-Function-prototype-call\">09.Function.prototype.call</h2><p>于<code>call</code>唯一不同的是，<code>call()</code>方法接受的是一个参数列表</p><pre><code> Function.prototype.call = function(context = window, ...args) {\n   if (typeof this !== 'function') {\n     throw new TypeError('Type Error');\n   }\n   const fn = Symbol('fn');\n   context[fn] = this;\n \n   const res = this[fn](...args);\n   delete this.fn;\n   return res;\n }\n 复制代码\n</code></pre><h2 id=\"10-Function-prototype-bind\">10.Function.prototype.bind</h2><pre><code> Function.prototype.bind = function(context, ...args) {\n   if (typeof this !== 'function') {\n     throw new Error(&quot;Type Error&quot;);\n   }\n   // 保存this的值\n   var self = this;\n \n   return function F() {\n     // 考虑new的情况\n     if(this instanceof F) {\n       return new self(...args, ...arguments)\n     }\n     return self.apply(context, [...args, ...arguments])\n   }\n }\n 复制代码\n</code></pre><h2 id=\"11-debounce（防抖）\">11.debounce（防抖）</h2><p>触发高频时间后n秒内函数只会执行一次,如果n秒内高频时间再次触发,则重新计算时间。</p><pre><code> const debounce = (fn, time) =&gt; {\n   let timeout = null;\n   return function() {\n     clearTimeout(timeout)\n     timeout = setTimeout(() =&gt; {\n       fn.apply(this, arguments);\n     }, time);\n   }\n };\n 复制代码\n</code></pre><p>防抖常应用于用户进行搜索输入节约请求资源，<code>window</code>触发<code>resize</code>事件时进行防抖只触发一次。</p><h2 id=\"12-throttle（节流）\">12.throttle（节流）</h2><p>高频时间触发,但n秒内只会执行一次,所以节流会稀释函数的执行频率。</p><pre><code> const throttle = (fn, time) =&gt; {\n   let flag = true;\n   return function() {\n     if (!flag) return;\n     flag = false;\n     setTimeout(() =&gt; {\n       fn.apply(this, arguments);\n       flag = true;\n     }, time);\n   }\n }\n 复制代码\n</code></pre><p>节流常应用于鼠标不断点击触发、监听滚动事件。</p><h2 id=\"13-函数珂里化\">13.函数珂里化</h2><blockquote><p>指的是将一个接受多个参数的函数 变为 接受一个参数返回一个函数的固定形式，这样便于再次调用，例如f(1)(2)</p></blockquote><p>经典面试题：实现<code>add(1)(2)(3)(4)=10;</code> 、 <code>add(1)(1,2,3)(2)=9;</code></p><pre><code> function add() {\n   const _args = [...arguments];\n   function fn() {\n     _args.push(...arguments);\n     return fn;\n   }\n   fn.toString = function() {\n     return _args.reduce((sum, cur) =&gt; sum + cur);\n   }\n   return fn;\n }\n 复制代码\n</code></pre><h2 id=\"14-模拟new操作\">14.模拟new操作</h2><p>3个步骤：</p><ol><li><p>以<code>ctor.prototype</code>为原型创建一个对象。</p></li><li><p>执行构造函数并将this绑定到新创建的对象上。</p></li><li><p>判断构造函数执行返回的结果是否是引用数据类型，若是则返回构造函数执行的结果，否则返回创建的对象。</p><p>function newOperator(ctor, …args) {<br>if (typeof ctor !== ‘function’) {<br>throw new TypeError(‘Type Error’);<br>}<br>const obj = Object.create(ctor.prototype);<br>const res = ctor.apply(obj, args);</p><p>const isObject = typeof res === ‘object’ &amp;&amp; res !== null;<br>const isFunction = typeof res === ‘function’;<br>return isObject || isFunction ? res : obj;<br>}<br>复制代码</p></li></ol><h2 id=\"15-instanceof\">15.instanceof</h2><p><code>instanceof</code>运算符用于检测构造函数的<code>prototype</code>属性是否出现在某个实例对象的原型链上。</p><pre><code> const myInstanceof = (left, right) =&gt; {\n   // 基本数据类型都返回false\n   if (typeof left !== 'object' || left === null) return false;\n   let proto = Object.getPrototypeOf(left);\n   while (true) {\n     if (proto === null) return false;\n     if (proto === right.prototype) return true;\n     proto = Object.getPrototypeOf(proto);\n   }\n }\n 复制代码\n</code></pre><h2 id=\"16-原型继承\">16.原型继承</h2><p>这里只写寄生组合继承了，中间还有几个演变过来的继承但都有一些缺陷</p><pre><code> function Parent() {\n   this.name = 'parent';\n }\n function Child() {\n   Parent.call(this);\n   this.type = 'children';\n }\n Child.prototype = Object.create(Parent.prototype);\n Child.prototype.constructor = Child;\n 复制代码\n</code></pre><h2 id=\"17-Object-is\"><a href=\"http://17.Object.is\" target=\"_blank\" rel=\"noopener\">17.Object.is</a></h2><p><code>Object.is</code>解决的主要是这两个问题：</p><pre><code> +0 === -0  // true\n NaN === NaN // false\n 复制代码\n\n const is= (x, y) =&gt; {\n   if (x === y) {\n     // +0和-0应该不相等\n     return x !== 0 || y !== 0 || 1/x === 1/y;\n   } else {\n     return x !== x &amp;&amp; y !== y;\n   }\n }\n 复制代码\n</code></pre><h2 id=\"18-Object-assign\">18.Object.assign</h2><p><code>Object.assign()</code>方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象（请注意这个操作是浅拷贝）</p><pre><code> Object.defineProperty(Object, 'assign', {\n   value: function(target, ...args) {\n     if (target == null) {\n       return new TypeError('Cannot convert undefined or null to object');\n     }\n     \n     // 目标对象需要统一是引用数据类型，若不是会自动转换\n     const to = Object(target);\n \n     for (let i = 0; i &lt; args.length; i++) {\n       // 每一个源对象\n       const nextSource = args[i];\n       if (nextSource !== null) {\n         // 使用for...in和hasOwnProperty双重判断，确保只拿到本身的属性、方法（不包含继承的）\n         for (const nextKey in nextSource) {\n           if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n             to[nextKey] = nextSource[nextKey];\n           }\n         }\n       }\n     }\n     return to;\n   },\n   // 不可枚举\n   enumerable: false,\n   writable: true,\n   configurable: true,\n })\n 复制代码\n</code></pre><h2 id=\"19-深拷贝\">19.深拷贝</h2><p>递归的完整版本（考虑到了Symbol属性）：</p><pre><code> const cloneDeep1 = (target, hash = new WeakMap()) =&gt; {\n   // 对于传入参数处理\n   if (typeof target !== 'object' || target === null) {\n     return target;\n   }\n   // 哈希表中存在直接返回\n   if (hash.has(target)) return hash.get(target);\n \n   const cloneTarget = Array.isArray(target) ? [] : {};\n   hash.set(target, cloneTarget);\n \n   // 针对Symbol属性\n   const symKeys = Object.getOwnPropertySymbols(target);\n   if (symKeys.length) {\n     symKeys.forEach(symKey =&gt; {\n       if (typeof target[symKey] === 'object' &amp;&amp; target[symKey] !== null) {\n         cloneTarget[symKey] = cloneDeep1(target[symKey]);\n       } else {\n         cloneTarget[symKey] = target[symKey];\n       }\n     })\n   }\n \n   for (const i in target) {\n     if (Object.prototype.hasOwnProperty.call(target, i)) {\n       cloneTarget[i] =\n         typeof target[i] === 'object' &amp;&amp; target[i] !== null\n         ? cloneDeep1(target[i], hash)\n         : target[i];\n     }\n   }\n   return cloneTarget;\n }\n 复制代码\n</code></pre><h2 id=\"20-Promise\">20.Promise</h2><p>实现思路：<a href=\"https://juejin.im/post/6860037916622913550\" target=\"_blank\" rel=\"noopener\">Promise源码实现</a></p><pre><code> const PENDING = 'PENDING';      // 进行中\n const FULFILLED = 'FULFILLED';  // 已成功\n const REJECTED = 'REJECTED';    // 已失败\n \n class Promise {\n   constructor(exector) {\n     // 初始化状态\n     this.status = PENDING;\n     // 将成功、失败结果放在this上，便于then、catch访问\n     this.value = undefined;\n     this.reason = undefined;\n     // 成功态回调函数队列\n     this.onFulfilledCallbacks = [];\n     // 失败态回调函数队列\n     this.onRejectedCallbacks = [];\n \n     const resolve = value =&gt; {\n       // 只有进行中状态才能更改状态\n       if (this.status === PENDING) {\n         this.status = FULFILLED;\n         this.value = value;\n         // 成功态函数依次执行\n         this.onFulfilledCallbacks.forEach(fn =&gt; fn(this.value));\n       }\n     }\n     const reject = reason =&gt; {\n       // 只有进行中状态才能更改状态\n       if (this.status === PENDING) {\n         this.status = REJECTED;\n         this.reason = reason;\n         // 失败态函数依次执行\n         this.onRejectedCallbacks.forEach(fn =&gt; fn(this.reason))\n       }\n     }\n     try {\n       // 立即执行executor\n       // 把内部的resolve和reject传入executor，用户可调用resolve和reject\n       exector(resolve, reject);\n     } catch(e) {\n       // executor执行出错，将错误内容reject抛出去\n       reject(e);\n     }\n   }\n   then(onFulfilled, onRejected) {\n     onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : value =&gt; value;\n     onRejected = typeof onRejected === 'function'? onRejected:\n       reason =&gt; { throw new Error(reason instanceof Error ? reason.message:reason) }\n     // 保存this\n     const self = this;\n     return new Promise((resolve, reject) =&gt; {\n       if (self.status === PENDING) {\n         self.onFulfilledCallbacks.push(() =&gt; {\n           // try捕获错误\n           try {\n             // 模拟微任务\n             setTimeout(() =&gt; {\n               const result = onFulfilled(self.value);\n               // 分两种情况：\n               // 1. 回调函数返回值是Promise，执行then操作\n               // 2. 如果不是Promise，调用新Promise的resolve函数\n               result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n             })\n           } catch(e) {\n             reject(e);\n           }\n         });\n         self.onRejectedCallbacks.push(() =&gt; {\n           // 以下同理\n           try {\n             setTimeout(() =&gt; {\n               const result = onRejected(self.reason);\n               // 不同点：此时是reject\n               result instanceof Promise ? result.then(resolve, reject) : reject(result);\n             })\n           } catch(e) {\n             reject(e);\n           }\n         })\n       } else if (self.status === FULFILLED) {\n         try {\n           setTimeout(() =&gt; {\n             const result = onFulfilled(self.value);\n             result instanceof Promise ? result.then(resolve, reject) : resolve(result);\n           });\n         } catch(e) {\n           reject(e);\n         }\n       } else if (self.status === REJECTED){\n         try {\n           setTimeout(() =&gt; {\n             const result = onRejected(self.reason);\n             result instanceof Promise ? result.then(resolve, reject) : reject(result);\n           })\n         } catch(e) {\n           reject(e);\n         }\n       }\n     });\n   }\n   catch(onRejected) {\n     return this.then(null, onRejected);\n   }\n   static resolve(value) {\n     if (value instanceof Promise) {\n       // 如果是Promise实例，直接返回\n       return value;\n     } else {\n       // 如果不是Promise实例，返回一个新的Promise对象，状态为FULFILLED\n       return new Promise((resolve, reject) =&gt; resolve(value));\n     }\n   }\n   static reject(reason) {\n     return new Promise((resolve, reject) =&gt; {\n       reject(reason);\n     })\n   }\n }\n 复制代码\n</code></pre><h2 id=\"21-Promise-all\">21.Promise.all</h2><p><code>Promise.all</code>是支持链式调用的，本质上就是返回了一个Promise实例，通过<code>resolve</code>和<code>reject</code>来改变实例状态。</p><pre><code> Promise.myAll = function(promiseArr) {\n   return new Promise((resolve, reject) =&gt; {\n     const ans = [];\n     let index = 0;\n     for (let i = 0; i &lt; promiseArr.length; i++) {\n       promiseArr[i]\n       .then(res =&gt; {\n         ans[i] = res;\n         index++;\n         if (index === promiseArr.length) {\n           resolve(ans);\n         }\n       })\n       .catch(err =&gt; reject(err));\n     }\n   })\n }\n 复制代码\n</code></pre><h2 id=\"22-Promise-race\">22.Promise.race</h2><pre><code> Promise.race = function(promiseArr) {\n   return new Promise((resolve, reject) =&gt; {\n     promiseArr.forEach(p =&gt; {\n       // 如果不是Promise实例需要转化为Promise实例\n       Promise.resolve(p).then(\n         val =&gt; resolve(val),\n         err =&gt; reject(err),\n       )\n     })\n   })\n }\n 复制代码\n</code></pre><h2 id=\"23-Promise并行限制\">23.Promise并行限制</h2><p>就是实现有并行限制的Promise调度器问题。</p><p>详细实现思路：<a href=\"https://juejin.im/post/6854573217013563405\" target=\"_blank\" rel=\"noopener\">某条高频面试原题：实现有并行限制的Promise调度器</a></p><pre><code> class Scheduler {\n   constructor() {\n     this.queue = [];\n     this.maxCount = 2;\n     this.runCounts = 0;\n   }\n   add(promiseCreator) {\n     this.queue.push(promiseCreator);\n   }\n   taskStart() {\n     for (let i = 0; i &lt; this.maxCount; i++) {\n       this.request();\n     }\n   }\n   request() {\n     if (!this.queue || !this.queue.length || this.runCounts &gt;= this.maxCount) {\n       return;\n     }\n     this.runCounts++;\n \n     this.queue.shift()().then(() =&gt; {\n       this.runCounts--;\n       this.request();\n     });\n   }\n }\n    \n const timeout = time =&gt; new Promise(resolve =&gt; {\n   setTimeout(resolve, time);\n })\n   \n const scheduler = new Scheduler();\n   \n const addTask = (time,order) =&gt; {\n   scheduler.add(() =&gt; timeout(time).then(()=&gt;console.log(order)))\n }\n   \n   \n addTask(1000, '1');\n addTask(500, '2');\n addTask(300, '3');\n addTask(400, '4');\n scheduler.taskStart()\n // 2\n // 3\n // 1\n // 4\n 复制代码\n</code></pre><h2 id=\"24-JSONP\">24.JSONP</h2><p>script标签不遵循同源协议，可以用来进行<strong>跨域请求</strong>，优点就是兼容性好但仅限于GET请求</p><pre><code> const jsonp = ({ url, params, callbackName }) =&gt; {\n   const generateUrl = () =&gt; {\n     let dataSrc = '';\n     for (let key in params) {\n       if (Object.prototype.hasOwnProperty.call(params, key)) {\n         dataSrc += `${key}=${params[key]}&amp;`;\n       }\n     }\n     dataSrc += `callback=${callbackName}`;\n     return `${url}?${dataSrc}`;\n   }\n   return new Promise((resolve, reject) =&gt; {\n     const scriptEle = document.createElement('script');\n     scriptEle.src = generateUrl();\n     document.body.appendChild(scriptEle);\n     window[callbackName] = data =&gt; {\n       resolve(data);\n       document.removeChild(scriptEle);\n     }\n   })\n }\n 复制代码\n</code></pre><h2 id=\"25-AJAX\">25.AJAX</h2><pre><code> const getJSON = function(url) {\n   return new Promise((resolve, reject) =&gt; {\n     const xhr = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Mscrosoft.XMLHttp');\n     xhr.open('GET', url, false);\n     xhr.setRequestHeader('Accept', 'application/json');\n     xhr.onreadystatechange = function() {\n       if (xhr.readyState !== 4) return;\n       if (xhr.status === 200 || xhr.status === 304) {\n         resolve(xhr.responseText);\n       } else {\n         reject(new Error(xhr.responseText));\n       }\n     }\n     xhr.send();\n   })\n }\n 复制代码\n</code></pre><h2 id=\"26-event模块\">26.event模块</h2><p>实现node中回调函数的机制，node中回调函数其实是内部使用了<strong>观察者模式</strong>。</p><blockquote><p>观察者模式：定义了对象间一种一对多的依赖关系，当目标对象Subject发生改变时，所有依赖它的对象Observer都会得到通知。</p></blockquote><pre><code> function EventEmitter() {\n   this.events = new Map();\n }\n \n // 需要实现的一些方法：\n // addListener、removeListener、once、removeAllListeners、emit\n \n // 模拟实现addlistener方法\n const wrapCallback = (fn, once = false) =&gt; ({ callback: fn, once });\n EventEmitter.prototype.addListener = function(type, fn, once = false) {\n   const hanlder = this.events.get(type);\n   if (!hanlder) {\n     // 没有type绑定事件\n     this.events.set(type, wrapCallback(fn, once));\n   } else if (hanlder &amp;&amp; typeof hanlder.callback === 'function') {\n     // 目前type事件只有一个回调\n     this.events.set(type, [hanlder, wrapCallback(fn, once)]);\n   } else {\n     // 目前type事件数&gt;=2\n     hanlder.push(wrapCallback(fn, once));\n   }\n }\n // 模拟实现removeListener\n EventEmitter.prototype.removeListener = function(type, listener) {\n   const hanlder = this.events.get(type);\n   if (!hanlder) return;\n   if (!Array.isArray(this.events)) {\n     if (hanlder.callback === listener.callback) this.events.delete(type);\n     else return;\n   }\n   for (let i = 0; i &lt; hanlder.length; i++) {\n     const item = hanlder[i];\n     if (item.callback === listener.callback) {\n       hanlder.splice(i, 1);\n       i--;\n       if (hanlder.length === 1) {\n         this.events.set(type, hanlder[0]);\n       }\n     }\n   }\n }\n // 模拟实现once方法\n EventEmitter.prototype.once = function(type, listener) {\n   this.addListener(type, listener, true);\n }\n // 模拟实现emit方法\n EventEmitter.prototype.emit = function(type, ...args) {\n   const hanlder = this.events.get(type);\n   if (!hanlder) return;\n   if (Array.isArray(hanlder)) {\n     hanlder.forEach(item =&gt; {\n       item.callback.apply(this, args);\n       if (item.once) {\n         this.removeListener(type, item);\n       }\n     })\n   } else {\n     hanlder.callback.apply(this, args);\n     if (hanlder.once) {\n       this.events.delete(type);\n     }\n   }\n   return true;\n }\n EventEmitter.prototype.removeAllListeners = function(type) {\n   const hanlder = this.events.get(type);\n   if (!hanlder) return;\n   this.events.delete(type);\n }\n 复制代码\n</code></pre><h2 id=\"27-图片懒加载\">27.图片懒加载</h2><p>可以给img标签统一自定义属性<code>data-src='default.png'</code>，当检测到图片出现在窗口之后再补充<strong>src</strong>属性，此时才会进行图片资源加载。</p><pre><code> function lazyload() {\n   const imgs = document.getElementsByTagName('img');\n   const len = imgs.length;\n   // 视口的高度\n   const viewHeight = document.documentElement.clientHeight;\n   // 滚动条高度\n   const scrollHeight = document.documentElement.scrollTop || document.body.scrollTop;\n   for (let i = 0; i &lt; len; i++) {\n     const offsetHeight = imgs[i].offsetTop;\n     if (offsetHeight &lt; viewHeight + scrollHeight) {\n       const src = imgs[i].dataset.src;\n       imgs[i].src = src;\n     }\n   }\n }\n \n // 可以使用节流优化一下\n window.addEventListener('scroll', lazyload);\n 复制代码\n</code></pre><h2 id=\"28-滚动加载\">28.滚动加载</h2><p>原理就是监听页面滚动事件，<strong>分析clientHeight</strong>、<strong>scrollTop</strong>、<strong>scrollHeight</strong>三者的属性关系。</p><pre><code> window.addEventListener('scroll', function() {\n   const clientHeight = document.documentElement.clientHeight;\n   const scrollTop = document.documentElement.scrollTop;\n   const scrollHeight = document.documentElement.scrollHeight;\n   if (clientHeight + scrollTop &gt;= scrollHeight) {\n     // 检测到滚动至页面底部，进行后续操作\n     // ...\n   }\n }, false);\n 复制代码\n</code></pre><p>一个Demo：<a href=\"https://github.com/SherrybabyOne/Demos/blob/master/Interview/JavaScript/%E6%BB%9A%E5%8A%A8%E5%8A%A0%E8%BD%BD.html\" target=\"_blank\" rel=\"noopener\">页面滚动加载的Demo</a></p><h2 id=\"29-渲染几万条数据不卡住页面\">29.渲染几万条数据不卡住页面</h2><p>渲染大数据时，合理使用<strong>createDocumentFragment</strong>和<strong>requestAnimationFrame</strong>，将操作切分为一小段一小段执行。</p><pre><code> setTimeout(() =&gt; {\n   // 插入十万条数据\n   const total = 100000;\n   // 一次插入的数据\n   const once = 20;\n   // 插入数据需要的次数\n   const loopCount = Math.ceil(total / once);\n   let countOfRender = 0;\n   const ul = document.querySelector('ul');\n   // 添加数据的方法\n   function add() {\n     const fragment = document.createDocumentFragment();\n     for(let i = 0; i &lt; once; i++) {\n       const li = document.createElement('li');\n       li.innerText = Math.floor(Math.random() * total);\n       fragment.appendChild(li);\n     }\n     ul.appendChild(fragment);\n     countOfRender += 1;\n     loop();\n   }\n   function loop() {\n     if(countOfRender &lt; loopCount) {\n       window.requestAnimationFrame(add);\n     }\n   }\n   loop();\n }, 0)\n 复制代码\n</code></pre><h2 id=\"30-打印出当前网页使用了多少种HTML元素\">30.打印出当前网页使用了多少种HTML元素</h2><p>一行代码可以解决：</p><pre><code> const fn = () =&gt; {\n   return [...new Set([...document.querySelectorAll('*')].map(el =&gt; el.tagName))].length;\n }\n 复制代码\n</code></pre><p>值得注意的是：DOM操作返回的是<strong>类数组</strong>，需要转换为数组之后才可以调用数组的方法。</p><h2 id=\"31-将VirtualDom转化为真实DOM结构\">31.将VirtualDom转化为真实DOM结构</h2><p>这是当前SPA应用的核心概念之一</p><pre><code> // vnode结构：\n // {\n //   tag,\n //   attrs,\n //   children,\n // }\n \n //Virtual DOM =&gt; DOM\n function render(vnode, container) {\n   container.appendChild(_render(vnode));\n }\n function _render(vnode) {\n   // 如果是数字类型转化为字符串\n   if (typeof vnode === 'number') {\n     vnode = String(vnode);\n   }\n   // 字符串类型直接就是文本节点\n   if (typeof vnode === 'string') {\n     return document.createTextNode(vnode);\n   }\n   // 普通DOM\n   const dom = document.createElement(vnode.tag);\n   if (vnode.attrs) {\n     // 遍历属性\n     Object.keys(vnode.attrs).forEach(key =&gt; {\n       const value = vnode.attrs[key];\n       dom.setAttribute(key, value);\n     })\n   }\n   // 子数组进行递归操作\n   vnode.children.forEach(child =&gt; render(child, dom));\n   return dom;\n }\n 复制代码\n</code></pre><h2 id=\"32-字符串解析问题\">32.字符串解析问题</h2><pre><code> var a = {\n     b: 123,\n     c: '456',\n     e: '789',\n }\n var str=`a{a.b}aa{a.c}aa {a.d}aaaa`;\n // =&gt; 'a123aa456aa {a.d}aaaa'\n 复制代码\n</code></pre><p>实现函数使得将str字符串中的<code>{}</code>内的变量替换，如果属性不存在保持原样（比如<code>{a.d}</code>）</p><p>类似于模版字符串，但有一点出入，实际上原理大差不差</p><pre><code> const fn1 = (str, obj) =&gt; {\n     let res = '';\n     // 标志位，标志前面是否有{\n     let flag = false;\n     let start;\n     for (let i = 0; i &lt; str.length; i++) {\n         if (str[i] === '{') {\n             flag = true;\n             start = i + 1;\n             continue;\n         }\n         if (!flag) res += str[i];\n         else {\n             if (str[i] === '}') {\n                 flag = false;\n                 res += match(str.slice(start, i), obj);\n             }\n         }\n     }\n     return res;\n }\n // 对象匹配操作\n const match = (str, obj) =&gt; {\n     const keys = str.split('.').slice(1);\n     let index = 0;\n     let o = obj;\n     while (index &lt; keys.length) {\n         const key = keys[index];\n         if (!o[key]) {\n             return `{${str}}`;\n         } else {\n             o = o[key];\n         }\n         index++;\n     }\n     return o;\n }</code></pre>"},{"title":"Electron/Node多进程工具开发日记","catalog":true,"toc_nav_num":true,"date":"2020-12-08T08:34:01.000Z","subtitle":"electron/node multi-process tool development","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-12-08T08:34:01.000Z","top":2,"_content":"\n> 文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考...\n\n### Contents\n------------\n```sh\n├── Contents (you are here!)\n│\n├── I. 前言\n├── II. 架构图\n│\n├── III. electron-re 可以用来做什么？\n│   ├── 1) 用于Electron应用\n│   └── 2) 用于Electron/Nodejs应用\n│\n├── IV. 说明1：Service/MessageChannel\n│   ├── Service的创建\n│   ├── Service的自动刷新\n│   ├── MessageChannel的引入\n│   ├── MessageChannel提供的方法\n│   └── 对比MessageChannel和原生ipc通信的使用\n│       ├── 1) 使用remote远程调用(原生)\n│       ├── 2) 使用ipc信号通信(原生)\n│       └── 3) 使用MessageChannel进行多向通信(扩展)\n│\n├── V. 说明2：ChildProcessPool/ProcessHost\n│   ├── 进程池的创建\n│   ├── 进程池的实例方法\n│   ├── 子进程事务中心\n│   └── 进程池和子进程事务中心的配合使用\n│       ├── 1) 主进程中使用进程池向子进程发送请求\n│       └── 2) 子进程中用事务中心处理消息\n│\n├── VI. Next To Do\n│\n├── VII. 几个实际使用示例\n│   ├── 1) Service/MessageChannel示例\n│   ├── 2) ChildProcessPool/ProcessHost示例\n│   └── 3) test测试目录示例\n```\n\n\n### I. 前言\n---------------\n\n最近在做一个多文件分片并行上传模块的时候(基于Electron和React)，遇到了一些性能问题，主要体现在：前端同时添加大量文件(1000-10000)并行上传时(文件同时上传数默认为6)，在不做懒加载优化的情况下，引起了整个应用窗口的卡顿。所以针对Electron/Nodejs多进程这方面做了一些学习，尝试使用多进程架构对上传流程进行优化。\n\n同时也编写了一个方便进行Electron/Node多进程管理和调用的工具[electron-re](https://github.com/nojsja/electron-re)，已经发布为npm组件，可以直接安装：\n\n[>> github地址](https://github.com/nojsja/electron-re)\n\n```sh\n$: npm install electron-re --save\n# or\n$: yarn add electron-re\n```\n\n如果感兴趣是怎么一步一步解决性能问题的话可以查看这篇文章：[《基于Electron的smb客户端文件上传优化探索》](https://nojsja.gitee.io/blogs/2020/08/16/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96%E6%8E%A2%E7%B4%A2/)。\n\n![RhinoDisk](smb_upload_now.jpg)\n\n下面来讲讲主角=> __electron-re__\n\n### II. electron-re架构图\n--------------\n\n![archtecture](./electron-re.png)\n\n### III. electron-re 可以用来做什么？\n--------------\n\n####  1. 用于Electron应用\n\n- `BrowserService`\n- `MessageChannel`\n\n在Electron的一些“最佳实践”中，建议将占用cpu的代码放到渲染过程中而不是直接放在主过程中，这里先看下chromium的架构图：\n\n![chromium.jpg](chromium.jpg)\n\n每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。所以如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，渲染进程窗口就会卡顿掉帧，严重的话甚至会卡住不动。\n\n因此`electron-re`在Electron已有的`Main Process`主进程和`Renderer Process`渲染进程逻辑的基础上独立出一个单独的`Service`概念。`Service`即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许`node注入`和`remote调用`的渲染窗口进程。\n\n这样就可以将代码中耗费cpu的操作(比如文件上传中维护一个数千个上传任务的队列)编写成一个单独的js文件，然后使用`BrowserService`构造函数以这个js文件的地址`path`为参数构造一个`Service`实例，从而将他们从主进程中分离。如果你说那这部分耗费cpu的操作直接放到渲染窗口进程可以嘛？这其实取决于项目自身的架构设计，以及对进程之间数据传输性能损耗和传输时间等各方面的权衡，创建一个`Service`的简单示例：\n```js\nconst { BrowserService } = require('electron-re');\nconst myServcie = new BrowserService('app', path.join(__dirname, 'path/to/app.service.js'));\n```\n\n如果使用了`BrowserService`的话，要想在主进程、渲染进程、service进程之间任意发送消息就要使用`electron-re`提供的`MessageChannel`通信工具，它的接口设计跟Electron内建的`ipc`基本一致，也是基于`ipc`通信原理来实现的，简单示例如下：\n```js\n/* ---- main.js ---- */\nconst { BrowserService } = require('electron-re');\n// 主进程中向一个service-app发送消息\nMessageChannel.send('app', 'channel1', { value: 'test1' });\n```\n\n#### 2. 用于Electron/Nodejs应用\n- `ChildProcessPool`\n- `ProcessHost`\n\n此外，如果要创建一些不依赖于Electron运行时的子进程（相关参考nodejs `child_process`），可以使用`electron-re`提供的专门为nodejs运行时编写的进程池`ChildProcessPool`类。因为创建进程本身所需的开销很大，使用进程池来重复利用已经创建了的子进程，将多进程架构带来的性能效益最大化，简单实例如下：\n```js\nconst { ChildProcessPool } = require('electron-re');\nglobal.ipcUploadProcess = new ChildProcessPool({\n  path: path.join(app.getAppPath(), 'app/services/child/upload.js'), max: 6\n});\n```\n\n一般情况下，在我们的子进程执行文件中(创建子进程时path参数指定的脚本)，如要想在主进程和子进程之间同步数据，可以使用`process.send('channel', params)`和`process.on('channel', function)`来实现。但是这样在处理业务逻辑的同时也强迫我们去关注进程之间的通信，你需要知道子进程什么时候能处理完毕，然后再使用`process.send`再将数据返回主进程，使用方式繁琐。\n\n`electron-re`引入了`ProcessHost`的概念，我将它称之为\"进程事务中心\"。实际使用时在子进程执行文件中只需要将各个任务函数通过`ProcessHost.registry('task-name', function)`注册成多个被监听的事务，然后配合进程池的`ChildProcessPool.send('task-name', params)`来触发子进程的事务逻辑的调用即可，`ChildProcessPool.send()`同时会返回一个Promise实例以便获取回调数据，简单示例如下：\n```js\n/* --- 主进程中 --- */\n...\nglobal.ipcUploadProcess.send('task1', params);\n\n/* --- 子进程中 --- */\nconst { ProcessHost } = require('electron-re');\nProcessHost\n    .registry('task1', (params) => {\n      return { value: 'task-value' };\n    })\n    .registry('init-works', (params) => {\n      return fetch(url);\n    });\n```\n\n### IV. Service/MessageChannel\n----------------------\n用于Electron应用中 - Service进程分离/进程间通信\n\n#### BrowserService的创建\n>需要等待app触发`ready`事件后才能开始创建Service，创建后如果立即向Service发送请求可能接收不到，需要调用`service.connected()`异步方法来等待Service准备完成，支持Promise写法。\n\nElectron主进程main.js文件中：\n```js\n/* --- in electron main.js entry --- */\nconst { app } = require('electron');\nconst {\n  BrowserService,\n  MessageChannel // must required in main.js even if you don't use it\n} = require('electron-re');\nconst isInDev = process.env.NODE_ENV === 'dev';\n...\n\n// after app is ready in main process\napp.whenReady().then(async () => {\n    const myService = new BrowserService('app', 'path/to/app.service.js');\n    const myService2 = new BrowserService('app2', 'path/to/app2.service.js');\n\n    await myService.connected();\n    await myService2.connected();\n\n    // open devtools in dev mode for debugging\n    if (isInDev) myService.openDevTools();\n    ...\n});\n```\n\n#### BrowserService的自动刷新\n> 支持Service代码文件更新后自动刷新Service，简单设置两个配置项即可。\n\n1.需要声明当前运行环境为开发环境  \n2.创建Service时禁用web安全策略\n```js\nconst myService = new BrowserService('app', 'path/to/app.service.js', {\n  ...options,\n  // 设置开发模式\n  dev: true,\n  // 关闭安全策略\n  webPreferences: { webSecurity: false }\n});\n```\n\n#### MessageChannel的引入\n>注意必须在main.js中引入，引入后会自动进行初始化。\n\nMessageChannel在`主进程/Service/渲染进程窗口`中的使用方式基本一致，具体请参考下文\"对比MessageChannel和原生ipc通信的使用\"。\n\n```js\nconst {\n  BrowserService,\n  MessageChannel // must required in main.js even if you don't use it\n} = require('electron-re');\n```\n\n#### MessageChannel提供的方法\n\n1.公共方法，适用于 - 主进程/渲染进程/Service\n```js\n/* 向一个Service发送请求 */\nMessageChannel.send('service-name', channel, params);\n/* 向一个Servcie发送请求，并取得Promise实例 */\nMessageChannel.invoke('service-name', channel, params);\n/* 根据windowId/webContentsId，向渲染进程发送请求 */\nMessageChannel.sendTo('windowId/webContentsId', channel, params);\n/* 监听一个信号 */\nMessageChannel.on(channel, func);\n/* 监听一次信号 */\nMessageChannel.once(channel, func);\n\n```\n\n2.仅适用于 - 渲染进程/Service\n```js\n/* 向主进程发送消息 */\nMessageChannel.send('main', channel, params);\n/* 向主进程发送消息，并取得Promise实例 */\nMessageChannel.invoke('main', channel, params);\n```\n\n3.仅适用于 - 主进程/Service\n```js\n/* \n  监听一个信号，调用处理函数，\n  可以在处理函数中返回一个异步的Promise实例或直接返回数据\n*/\nMessageChannel.handle(channel, processorFunc);\n```\n\n#### 对比MessageChannel和原生ipc通信的使用\n> 1/2 - 原生方法，3 - 扩展方法\n\n1.使用remote远程调用\n\nremote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：  \n```js\n/* 渲染进程中(web端代码) */\nconst { BrowserWindow } = require('electron').remote\nlet win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n```\n注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用于主进程和渲染进程频繁通信以及耗时请求的情况，否则会引起严重的程序性能问题。\n\n2.使用ipc信号通信\n\n基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。  \nElectron进程之间通信最常用的一系列方法，但是在向其它子进程发送消息之前需要知道目标进程的`webContentsId`或者能够直接拿到目标进程的实例，使用方式不太灵活。\n```js\n/* 主进程 */\nipcMain.on(channel, listener) // 监听信道 - 异步触发\nipcMain.once(channel, listener) // 监听一次信道，监听器触发后即删除 - 异步触发\nipcMain.handle(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器\nipcMain.handleOnce(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听\nbrowserWindow.webContents.send(channel, args); // 显式地向某个渲染进程发送信息 - 异步触发\n\n/* 渲染进程 */\nipcRenderer.on(channel, listener); // 监听信道 - 异步触发\nipcRenderer.once(channel, listener); // 监听一次信道，监听器触发后即删除 - 异步触发\nipcRenderer.sendSync(channel, args); // 向主进程一个信道发送信息 - 同步触发\nipcRenderer.invoke(channel, args); // 向主进程一个信道发送信息 - 返回Promise对象等待触发\nipcRenderer.sendTo(webContentsId, channel, ...args); // 向某个渲染进程发送消息 - 异步触发\nipcRenderer.sendToHost(channel, ...args) // 向host页面的webview发送消息 - 异步触发\n```\n\n3.使用MessageChannel进行多向通信\n\n* 1）main process - 主进程中\n```js\nconst {\n  BrowserService,\n  MessageChannel // must required in main.js even if you don't use it\n} = require('electron-re');\nconst isInDev = process.env.NODE_ENV === 'dev';\n...\n\n// after app is ready in main process\napp.whenReady().then(async () => {\n    const myService = new BrowserService('app', 'path/to/app.service.js');\n    const myService2 = new BrowserService('app2', 'path/to/app2.service.js');\n\n    await myService.connected();\n    await myService2.connected();\n\n    // open devtools in dev mode for debugging\n    if (isInDev) myService.openDevTools();\n    MessageChannel.send('app', 'channel1', { value: 'test1' });\n    MessageChannel.invoke('app', 'channel2', { value: 'test2' }).then((response) => {\n      console.log(response);\n    });\n    MessageChannel.on('channel3', (event, response) => {\n      console.log(response);\n    });\n\n    MessageChannel.handle('channel4', (event, response) => {\n      console.log(response);\n      return { res: 'channel4-res' };\n    });\n});\n```\n\n* 2）app.service.js - 在一个service中\n```js\nconst { ipcRenderer } = require('electron');\nconst { MessageChannel } = require('electron-re');\n\nMessageChannel.on('channel1', (event, result) => {\n  console.log(result);\n});\n\nMessageChannel.handle('channel2', (event, result) => {\n  console.log(result);\n  return { response: 'channel2-response' }\n});\n\nMessageChannel.invoke('app2', 'channel3', { value: 'channel3' }).then((event, result) => {\n  console.log(result);\n});\n\nMessageChannel.send('app', 'channel4', { value: 'channel4' });\n```\n\n* 3）app2.service.js - 在另一个service中\n```js\nMessageChannel.handle('channel3', (event, result) => {\n  console.log(result);\n  return { response: 'channel3-response' }\n});\nMessageChannel.once('channel4', (event, result) => {\n  console.log(result);\n});\nMessageChannel.send('main', 'channel3', { value: 'channel3' });\nMessageChannel.invoke('main', 'channel4', { value: 'channel4' });\n```\n\n* 4）renderer process window - 在一个渲染窗口中\n```js\nconst { ipcRenderer } = require('electron');\nconst { MessageChannel } = require('electron-re');\nMessageChannel.send('app', 'channel1', { value: 'test1'});\nMessageChannel.invoke('app2', 'channel3', { value: 'test2' });\nMessageChannel.send('main', 'channel3', { value: 'test3' });\nMessageChannel.invoke('main', 'channel4', { value: 'test4' });\n```\n\n### V. ChildProcessPool/ProcessHost\n----------------------\n用于Electron和Nodejs应用中 - Node.js进程池/子进程事务中心\n\n#### 进程池的创建\n进程池基于nodejs的`child_process`模块，使用`fork`方式创建并管理多个独立的子进程。\n\n创建进程池时提供`最大子进程实例个数`、`子进程执行文件路径`等参数即可，进程池会自动接管进程的创建和调用。外部可以通过进程池向某个子进程发送请求，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用。\n\n子进程是通过懒加载方式创建的，也就是说如果只创建进程池而不对进程池发起请求调用的话，进程池将不会创建任何子进程实例。\n\n1.参数说明\n```sh\n|—— path 参数为可执行文件路径\n|—— max 指明进程池创建的最大子进程实例数量\n|—— env 为传递给子进程的环境变量\n```\n2.主进程中引入进程池类，并创建进程池实例\n```js\n/* main.js */\n...\nconst { ChildProcessPool } = require('electron-re');\n\nconst processPool = new ChildProcessPool({\n  path: path.join(app.getAppPath(), 'app/services/child/upload.js'),\n  max: 3,\n  env: { lang: global.lang }\n});\n...\n```\n\n#### 进程池的实例方法\n>注意task-name即一个子进程注册的任务名，指向子进程的某个函数，具体请查看下面子进程事务中心的说明\n\n__1.processPool.send('task-name', params, id)__\n\n向某个子进程发送消息，如果请求参数指定了id则表明需要使用之前与此id建立过映射的某个进程(id将在send调用之后自动绑定)，并期望拿到此进程的回应结果。\n\nid的使用情况比如：我第一次调用进程池在一个子进程里设置了一些数据(子进程之间数据不共享)，第二次时想拿到之前设置的那个数据，这时候只要保持两次`send()`请求携带的id一致即可，否则将不能保证两次请求发送给了同一个子进程。\n\n```js\n/**\n  * send [Send request to a process]\n  * @param  {[String]} taskName [task name - necessary]\n  * @param  {[Any]} params [data passed to process - necessary]\n  * @param  {[String]} id [the unique id bound to a process instance - not necessary]\n  * @return {[Promise]} [return a Promise instance]\n  */\n send(taskName, params, givenId) {...}\n```\n\n__2.processPool.sendToAll('task-name', params)__\n\n向进程池中的所有进程发送信号，并期望拿到所有进程返回的结果，返回的数据为一个数组。\n\n```js\n  /**\n  * sendToAll [Send requests to all processes]\n  * @param  {[String]} taskName [task name - necessary]\n  * @param  {[Any]} params [data passed to process - necessary]\n  * @return {[Promise]} [return a Promise instance]\n  */\n  sendToAll(taskName, params) {...}\n```\n\n__3.processPool.disconnect(id)__\n\n销毁进程池的子进程，如果不指定`id`调用的话就会销毁所有子进程，指定`id`参数可以单独销毁与此`id`值绑定过的某个子进程，销毁后再次调用进程池发送请求时会自动创建新的子进程。\n\n需要注意的是`id`绑定操作是在`processPool.send('task-name', params, id)`方法调用后自动进行的。\n\n__4.processPool.setMaxInstanceLimit(number)__\n\n除了在创建进程池时使用`max`参数指定最大子进程实例个数，也能调用进程池的此方法来动态设置需要创建的子进程实例个数。\n\n#### 子进程事务中心\n>`ProcessHost` - 子进程事务中心，需要和ChildProcessPool协同工作，用来分离子进程通信逻辑和业务逻辑，优化子进程代码结构。\n\n主要功能是使用api诸如 - `ProcessHost.registry(taskName, func)`来注册多种`任务`，然后在主进程中可以直接使用进程池向某个`任务`发送请求并取得`Promise`对象以拿到进程回调返回的数据，从而避免在我们的子进程执行文件中编写代码时过度关注进程之间数据的通信。\n如果不使用`进程事务管理中心`的话我们就需要使用`process.send`来向一个进程发送消息并在另一个进程中使用`process.on('message', processor)`处理消息。需要注意的是如果注册的`task`任务是异步的则需要返回一个Promise对象而不是直接`return`数据，实例方法如下：  \n\n- 1）registry用于子进程向事务中心注册自己的任务(支持链式调用)\n- 2）unregistry用于取消任务注册(支持链式调用)\n\n使用说明：\n```js\n/* in child process */\nconst { ProcessHost } = require('electron-re');\nProcessHost\n  .registry('test1', (params) => {\n    return params;\n  })\n  .registry('test2', (params) => {\n    return fetch(url);\n  });\n\nProcessHost\n  .unregistry('test1')\n  .unregistry('test2');\n```\n\n#### 进程池和子进程事务中心的配合使用\n\n示例：文件分片上传中，主进程中使用进程池来发送`初始化分片上传`请求，子进程拿到请求信号处理业务然后返回\n\n__1.in main processs - 主进程中__\n```js\n /**\n    * init [初始化上传]\n    * @param  {[String]} host [主机名]\n    * @param  {[String]} username [用户名]\n    * @param  {[Object]} file [文件描述对象]\n    * @param  {[String]} abspath [绝对路径]\n    * @param  {[String]} sharename [共享名]\n    * @param  {[String]} fragsize [分片大小]\n    * @param  {[String]} prefix [目标上传地址前缀]\n    */\n  init({ username, host, file, abspath, sharename, fragsize, prefix = '' }) {\n    const date = Date.now();\n    const uploadId = getStringMd5(date + file.name + file.type + file.size);\n    let size = 0;\n\n    return new Promise((resolve) => {\n        this.getUploadPrepath\n        .then((pre) => {\n          /* 看这里看这里！look here! */\n          return processPool.send(\n            /* 进程事务名 */\n            'init-works',\n            /* 携带的参数 */\n            {\n              username, host, sharename, pre, prefix,\n              size: file.size, name: file.name, abspath, fragsize\n            },\n            /* 指定一个进程调用id */\n            uploadId\n          )\n        })\n      .then((rsp) => {\n        resolve({\n          code: rsp.error ? 600 : 200,\n          result: rsp.result,\n        });\n      }).catch(err => {\n        resolve({\n          code: 600,\n          result: err.toString()\n        });\n      });\n    });\n  }\n```\n\n__2.child.js (in child process)中使用事务管理中心处理消息__\n>child.js即为创建进程池时传入的`path`参数所在的nodejs脚本代码，在此脚本中我们注册多个任务来处理从进程池发送过来的消息  \n\n其中：\n \\> uploadStore - 主要用于在内存中维护整个文件上传列表，对上传任务列表进行增删查改操作(cpu耗时操作)  \n \\> fileBlock - 利用FS API操作文件，比如打开某个文件的文件描述符、根据描述符和分片索引值读取一个文件的某一段Buffer数据、关闭文件描述符等等。虽然都是异步IO读写，对性能影响不大，不过为了整合整个上传处理流程也将其一同纳入子进程中管理。\n```js\n  const fs = require('fs');\n  const path = require('path');\n\n  const utils = require('./child.utils');\n  const { readFileBlock, uploadRecordStore, unlink } = utils;\n  const { ProcessHost } = require('electron-re');\n\n  // read a file block from a path\n  const fileBlock = readFileBlock();\n  // maintain a shards upload queue\n  const uploadStore = uploadRecordStore();\n\n  global.lang = process.env.lang;\n\n  /* *************** registry all tasks *************** */\n\n  ProcessHost\n    .registry('init-works', (params) => {\n      return initWorks(params);\n    })\n    .registry('upload-works', (params) => {\n      return uploadWorks(params);\n    })\n    ...\n\n  /* *************** upload logic *************** */\n\n  /* 上传初始化工作 */\n  function initWorks({username, host, sharename, pre, prefix, name, abspath, size, fragsize }) {\n    const remotePath = path.join(pre, prefix, name);\n    return new Promise((resolve, reject) => {\n      new Promise((reso) => fsPromise.unlink(remotePath).then(reso).catch(reso))\n      .then(() => {\n        const dirs = utils.getFileDirs([path.join(prefix, name)]);\n        return utils.mkdirs(pre, dirs);\n      })\n      .then(() => fileBlock.open(abspath, size))\n      .then((rsp) => {\n        if (rsp.code === 200) {\n          const newRecord = {\n            ...\n          };\n          uploadStore.set(newRecord);\n          return newRecord;\n        } else {\n          throw new Error(rsp.result);\n        }\n     })\n     .then(resolve)\n     .catch(error => {\n      reject(error.toString());\n     });\n    })\n  }\n\n  /* 上传分片 */\n  function uplaodWorks(){ ... };\n\n  ...\n```\n\n### VI. Next To Do\n----------------------\n\n- [x] 让Service支持代码更新后自动重启\n- [ ] 添加ChildProcessPool子进程调度逻辑\n- [ ] 优化ChildProcessPool多进程console输出\n- [ ] 添加可视化进程管理界面\n- [ ] 增强ChildProcessPool进程池功能\n- [ ] 增强ProcessHost事务中心功能\n\n### VII. 几个实际使用示例\n----------------------\n\n1. [electronux](https://github.com/nojsja/electronux) - 我的一个Electron项目，使用了 `BrowserService` and `MessageChannel`。\n\n3. [file-slice-upload](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload) - 一个关于多文件分片并行上传的demo，使用了 `ChildProcessPool` and `ProcessHost`，基于 Electron@9.3.5。\n\n3. 查看 `test` 目录下的测试样例文件，包含了完整的细节使用。","source":"_posts/2020-12-08-Electron-Node多进程工具开发日记.md","raw":"---\ntitle: Electron/Node多进程工具开发日记\ncatalog: true\ntoc_nav_num: true\ndate: 2020-12-08 16:34:01\nsubtitle: \"electron/node multi-process tool development\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- electron\n- node\n- process\ncategories:\n- Electron\n- Node\nupdateDate: 2020-12-08 16:34:01\ntop: 2\n---\n\n> 文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考...\n\n### Contents\n------------\n```sh\n├── Contents (you are here!)\n│\n├── I. 前言\n├── II. 架构图\n│\n├── III. electron-re 可以用来做什么？\n│   ├── 1) 用于Electron应用\n│   └── 2) 用于Electron/Nodejs应用\n│\n├── IV. 说明1：Service/MessageChannel\n│   ├── Service的创建\n│   ├── Service的自动刷新\n│   ├── MessageChannel的引入\n│   ├── MessageChannel提供的方法\n│   └── 对比MessageChannel和原生ipc通信的使用\n│       ├── 1) 使用remote远程调用(原生)\n│       ├── 2) 使用ipc信号通信(原生)\n│       └── 3) 使用MessageChannel进行多向通信(扩展)\n│\n├── V. 说明2：ChildProcessPool/ProcessHost\n│   ├── 进程池的创建\n│   ├── 进程池的实例方法\n│   ├── 子进程事务中心\n│   └── 进程池和子进程事务中心的配合使用\n│       ├── 1) 主进程中使用进程池向子进程发送请求\n│       └── 2) 子进程中用事务中心处理消息\n│\n├── VI. Next To Do\n│\n├── VII. 几个实际使用示例\n│   ├── 1) Service/MessageChannel示例\n│   ├── 2) ChildProcessPool/ProcessHost示例\n│   └── 3) test测试目录示例\n```\n\n\n### I. 前言\n---------------\n\n最近在做一个多文件分片并行上传模块的时候(基于Electron和React)，遇到了一些性能问题，主要体现在：前端同时添加大量文件(1000-10000)并行上传时(文件同时上传数默认为6)，在不做懒加载优化的情况下，引起了整个应用窗口的卡顿。所以针对Electron/Nodejs多进程这方面做了一些学习，尝试使用多进程架构对上传流程进行优化。\n\n同时也编写了一个方便进行Electron/Node多进程管理和调用的工具[electron-re](https://github.com/nojsja/electron-re)，已经发布为npm组件，可以直接安装：\n\n[>> github地址](https://github.com/nojsja/electron-re)\n\n```sh\n$: npm install electron-re --save\n# or\n$: yarn add electron-re\n```\n\n如果感兴趣是怎么一步一步解决性能问题的话可以查看这篇文章：[《基于Electron的smb客户端文件上传优化探索》](https://nojsja.gitee.io/blogs/2020/08/16/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96%E6%8E%A2%E7%B4%A2/)。\n\n![RhinoDisk](smb_upload_now.jpg)\n\n下面来讲讲主角=> __electron-re__\n\n### II. electron-re架构图\n--------------\n\n![archtecture](./electron-re.png)\n\n### III. electron-re 可以用来做什么？\n--------------\n\n####  1. 用于Electron应用\n\n- `BrowserService`\n- `MessageChannel`\n\n在Electron的一些“最佳实践”中，建议将占用cpu的代码放到渲染过程中而不是直接放在主过程中，这里先看下chromium的架构图：\n\n![chromium.jpg](chromium.jpg)\n\n每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。所以如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，渲染进程窗口就会卡顿掉帧，严重的话甚至会卡住不动。\n\n因此`electron-re`在Electron已有的`Main Process`主进程和`Renderer Process`渲染进程逻辑的基础上独立出一个单独的`Service`概念。`Service`即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许`node注入`和`remote调用`的渲染窗口进程。\n\n这样就可以将代码中耗费cpu的操作(比如文件上传中维护一个数千个上传任务的队列)编写成一个单独的js文件，然后使用`BrowserService`构造函数以这个js文件的地址`path`为参数构造一个`Service`实例，从而将他们从主进程中分离。如果你说那这部分耗费cpu的操作直接放到渲染窗口进程可以嘛？这其实取决于项目自身的架构设计，以及对进程之间数据传输性能损耗和传输时间等各方面的权衡，创建一个`Service`的简单示例：\n```js\nconst { BrowserService } = require('electron-re');\nconst myServcie = new BrowserService('app', path.join(__dirname, 'path/to/app.service.js'));\n```\n\n如果使用了`BrowserService`的话，要想在主进程、渲染进程、service进程之间任意发送消息就要使用`electron-re`提供的`MessageChannel`通信工具，它的接口设计跟Electron内建的`ipc`基本一致，也是基于`ipc`通信原理来实现的，简单示例如下：\n```js\n/* ---- main.js ---- */\nconst { BrowserService } = require('electron-re');\n// 主进程中向一个service-app发送消息\nMessageChannel.send('app', 'channel1', { value: 'test1' });\n```\n\n#### 2. 用于Electron/Nodejs应用\n- `ChildProcessPool`\n- `ProcessHost`\n\n此外，如果要创建一些不依赖于Electron运行时的子进程（相关参考nodejs `child_process`），可以使用`electron-re`提供的专门为nodejs运行时编写的进程池`ChildProcessPool`类。因为创建进程本身所需的开销很大，使用进程池来重复利用已经创建了的子进程，将多进程架构带来的性能效益最大化，简单实例如下：\n```js\nconst { ChildProcessPool } = require('electron-re');\nglobal.ipcUploadProcess = new ChildProcessPool({\n  path: path.join(app.getAppPath(), 'app/services/child/upload.js'), max: 6\n});\n```\n\n一般情况下，在我们的子进程执行文件中(创建子进程时path参数指定的脚本)，如要想在主进程和子进程之间同步数据，可以使用`process.send('channel', params)`和`process.on('channel', function)`来实现。但是这样在处理业务逻辑的同时也强迫我们去关注进程之间的通信，你需要知道子进程什么时候能处理完毕，然后再使用`process.send`再将数据返回主进程，使用方式繁琐。\n\n`electron-re`引入了`ProcessHost`的概念，我将它称之为\"进程事务中心\"。实际使用时在子进程执行文件中只需要将各个任务函数通过`ProcessHost.registry('task-name', function)`注册成多个被监听的事务，然后配合进程池的`ChildProcessPool.send('task-name', params)`来触发子进程的事务逻辑的调用即可，`ChildProcessPool.send()`同时会返回一个Promise实例以便获取回调数据，简单示例如下：\n```js\n/* --- 主进程中 --- */\n...\nglobal.ipcUploadProcess.send('task1', params);\n\n/* --- 子进程中 --- */\nconst { ProcessHost } = require('electron-re');\nProcessHost\n    .registry('task1', (params) => {\n      return { value: 'task-value' };\n    })\n    .registry('init-works', (params) => {\n      return fetch(url);\n    });\n```\n\n### IV. Service/MessageChannel\n----------------------\n用于Electron应用中 - Service进程分离/进程间通信\n\n#### BrowserService的创建\n>需要等待app触发`ready`事件后才能开始创建Service，创建后如果立即向Service发送请求可能接收不到，需要调用`service.connected()`异步方法来等待Service准备完成，支持Promise写法。\n\nElectron主进程main.js文件中：\n```js\n/* --- in electron main.js entry --- */\nconst { app } = require('electron');\nconst {\n  BrowserService,\n  MessageChannel // must required in main.js even if you don't use it\n} = require('electron-re');\nconst isInDev = process.env.NODE_ENV === 'dev';\n...\n\n// after app is ready in main process\napp.whenReady().then(async () => {\n    const myService = new BrowserService('app', 'path/to/app.service.js');\n    const myService2 = new BrowserService('app2', 'path/to/app2.service.js');\n\n    await myService.connected();\n    await myService2.connected();\n\n    // open devtools in dev mode for debugging\n    if (isInDev) myService.openDevTools();\n    ...\n});\n```\n\n#### BrowserService的自动刷新\n> 支持Service代码文件更新后自动刷新Service，简单设置两个配置项即可。\n\n1.需要声明当前运行环境为开发环境  \n2.创建Service时禁用web安全策略\n```js\nconst myService = new BrowserService('app', 'path/to/app.service.js', {\n  ...options,\n  // 设置开发模式\n  dev: true,\n  // 关闭安全策略\n  webPreferences: { webSecurity: false }\n});\n```\n\n#### MessageChannel的引入\n>注意必须在main.js中引入，引入后会自动进行初始化。\n\nMessageChannel在`主进程/Service/渲染进程窗口`中的使用方式基本一致，具体请参考下文\"对比MessageChannel和原生ipc通信的使用\"。\n\n```js\nconst {\n  BrowserService,\n  MessageChannel // must required in main.js even if you don't use it\n} = require('electron-re');\n```\n\n#### MessageChannel提供的方法\n\n1.公共方法，适用于 - 主进程/渲染进程/Service\n```js\n/* 向一个Service发送请求 */\nMessageChannel.send('service-name', channel, params);\n/* 向一个Servcie发送请求，并取得Promise实例 */\nMessageChannel.invoke('service-name', channel, params);\n/* 根据windowId/webContentsId，向渲染进程发送请求 */\nMessageChannel.sendTo('windowId/webContentsId', channel, params);\n/* 监听一个信号 */\nMessageChannel.on(channel, func);\n/* 监听一次信号 */\nMessageChannel.once(channel, func);\n\n```\n\n2.仅适用于 - 渲染进程/Service\n```js\n/* 向主进程发送消息 */\nMessageChannel.send('main', channel, params);\n/* 向主进程发送消息，并取得Promise实例 */\nMessageChannel.invoke('main', channel, params);\n```\n\n3.仅适用于 - 主进程/Service\n```js\n/* \n  监听一个信号，调用处理函数，\n  可以在处理函数中返回一个异步的Promise实例或直接返回数据\n*/\nMessageChannel.handle(channel, processorFunc);\n```\n\n#### 对比MessageChannel和原生ipc通信的使用\n> 1/2 - 原生方法，3 - 扩展方法\n\n1.使用remote远程调用\n\nremote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：  \n```js\n/* 渲染进程中(web端代码) */\nconst { BrowserWindow } = require('electron').remote\nlet win = new BrowserWindow({ width: 800, height: 600 })\nwin.loadURL('https://github.com')\n```\n注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用于主进程和渲染进程频繁通信以及耗时请求的情况，否则会引起严重的程序性能问题。\n\n2.使用ipc信号通信\n\n基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。  \nElectron进程之间通信最常用的一系列方法，但是在向其它子进程发送消息之前需要知道目标进程的`webContentsId`或者能够直接拿到目标进程的实例，使用方式不太灵活。\n```js\n/* 主进程 */\nipcMain.on(channel, listener) // 监听信道 - 异步触发\nipcMain.once(channel, listener) // 监听一次信道，监听器触发后即删除 - 异步触发\nipcMain.handle(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器\nipcMain.handleOnce(channel, listener) // 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听\nbrowserWindow.webContents.send(channel, args); // 显式地向某个渲染进程发送信息 - 异步触发\n\n/* 渲染进程 */\nipcRenderer.on(channel, listener); // 监听信道 - 异步触发\nipcRenderer.once(channel, listener); // 监听一次信道，监听器触发后即删除 - 异步触发\nipcRenderer.sendSync(channel, args); // 向主进程一个信道发送信息 - 同步触发\nipcRenderer.invoke(channel, args); // 向主进程一个信道发送信息 - 返回Promise对象等待触发\nipcRenderer.sendTo(webContentsId, channel, ...args); // 向某个渲染进程发送消息 - 异步触发\nipcRenderer.sendToHost(channel, ...args) // 向host页面的webview发送消息 - 异步触发\n```\n\n3.使用MessageChannel进行多向通信\n\n* 1）main process - 主进程中\n```js\nconst {\n  BrowserService,\n  MessageChannel // must required in main.js even if you don't use it\n} = require('electron-re');\nconst isInDev = process.env.NODE_ENV === 'dev';\n...\n\n// after app is ready in main process\napp.whenReady().then(async () => {\n    const myService = new BrowserService('app', 'path/to/app.service.js');\n    const myService2 = new BrowserService('app2', 'path/to/app2.service.js');\n\n    await myService.connected();\n    await myService2.connected();\n\n    // open devtools in dev mode for debugging\n    if (isInDev) myService.openDevTools();\n    MessageChannel.send('app', 'channel1', { value: 'test1' });\n    MessageChannel.invoke('app', 'channel2', { value: 'test2' }).then((response) => {\n      console.log(response);\n    });\n    MessageChannel.on('channel3', (event, response) => {\n      console.log(response);\n    });\n\n    MessageChannel.handle('channel4', (event, response) => {\n      console.log(response);\n      return { res: 'channel4-res' };\n    });\n});\n```\n\n* 2）app.service.js - 在一个service中\n```js\nconst { ipcRenderer } = require('electron');\nconst { MessageChannel } = require('electron-re');\n\nMessageChannel.on('channel1', (event, result) => {\n  console.log(result);\n});\n\nMessageChannel.handle('channel2', (event, result) => {\n  console.log(result);\n  return { response: 'channel2-response' }\n});\n\nMessageChannel.invoke('app2', 'channel3', { value: 'channel3' }).then((event, result) => {\n  console.log(result);\n});\n\nMessageChannel.send('app', 'channel4', { value: 'channel4' });\n```\n\n* 3）app2.service.js - 在另一个service中\n```js\nMessageChannel.handle('channel3', (event, result) => {\n  console.log(result);\n  return { response: 'channel3-response' }\n});\nMessageChannel.once('channel4', (event, result) => {\n  console.log(result);\n});\nMessageChannel.send('main', 'channel3', { value: 'channel3' });\nMessageChannel.invoke('main', 'channel4', { value: 'channel4' });\n```\n\n* 4）renderer process window - 在一个渲染窗口中\n```js\nconst { ipcRenderer } = require('electron');\nconst { MessageChannel } = require('electron-re');\nMessageChannel.send('app', 'channel1', { value: 'test1'});\nMessageChannel.invoke('app2', 'channel3', { value: 'test2' });\nMessageChannel.send('main', 'channel3', { value: 'test3' });\nMessageChannel.invoke('main', 'channel4', { value: 'test4' });\n```\n\n### V. ChildProcessPool/ProcessHost\n----------------------\n用于Electron和Nodejs应用中 - Node.js进程池/子进程事务中心\n\n#### 进程池的创建\n进程池基于nodejs的`child_process`模块，使用`fork`方式创建并管理多个独立的子进程。\n\n创建进程池时提供`最大子进程实例个数`、`子进程执行文件路径`等参数即可，进程池会自动接管进程的创建和调用。外部可以通过进程池向某个子进程发送请求，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用。\n\n子进程是通过懒加载方式创建的，也就是说如果只创建进程池而不对进程池发起请求调用的话，进程池将不会创建任何子进程实例。\n\n1.参数说明\n```sh\n|—— path 参数为可执行文件路径\n|—— max 指明进程池创建的最大子进程实例数量\n|—— env 为传递给子进程的环境变量\n```\n2.主进程中引入进程池类，并创建进程池实例\n```js\n/* main.js */\n...\nconst { ChildProcessPool } = require('electron-re');\n\nconst processPool = new ChildProcessPool({\n  path: path.join(app.getAppPath(), 'app/services/child/upload.js'),\n  max: 3,\n  env: { lang: global.lang }\n});\n...\n```\n\n#### 进程池的实例方法\n>注意task-name即一个子进程注册的任务名，指向子进程的某个函数，具体请查看下面子进程事务中心的说明\n\n__1.processPool.send('task-name', params, id)__\n\n向某个子进程发送消息，如果请求参数指定了id则表明需要使用之前与此id建立过映射的某个进程(id将在send调用之后自动绑定)，并期望拿到此进程的回应结果。\n\nid的使用情况比如：我第一次调用进程池在一个子进程里设置了一些数据(子进程之间数据不共享)，第二次时想拿到之前设置的那个数据，这时候只要保持两次`send()`请求携带的id一致即可，否则将不能保证两次请求发送给了同一个子进程。\n\n```js\n/**\n  * send [Send request to a process]\n  * @param  {[String]} taskName [task name - necessary]\n  * @param  {[Any]} params [data passed to process - necessary]\n  * @param  {[String]} id [the unique id bound to a process instance - not necessary]\n  * @return {[Promise]} [return a Promise instance]\n  */\n send(taskName, params, givenId) {...}\n```\n\n__2.processPool.sendToAll('task-name', params)__\n\n向进程池中的所有进程发送信号，并期望拿到所有进程返回的结果，返回的数据为一个数组。\n\n```js\n  /**\n  * sendToAll [Send requests to all processes]\n  * @param  {[String]} taskName [task name - necessary]\n  * @param  {[Any]} params [data passed to process - necessary]\n  * @return {[Promise]} [return a Promise instance]\n  */\n  sendToAll(taskName, params) {...}\n```\n\n__3.processPool.disconnect(id)__\n\n销毁进程池的子进程，如果不指定`id`调用的话就会销毁所有子进程，指定`id`参数可以单独销毁与此`id`值绑定过的某个子进程，销毁后再次调用进程池发送请求时会自动创建新的子进程。\n\n需要注意的是`id`绑定操作是在`processPool.send('task-name', params, id)`方法调用后自动进行的。\n\n__4.processPool.setMaxInstanceLimit(number)__\n\n除了在创建进程池时使用`max`参数指定最大子进程实例个数，也能调用进程池的此方法来动态设置需要创建的子进程实例个数。\n\n#### 子进程事务中心\n>`ProcessHost` - 子进程事务中心，需要和ChildProcessPool协同工作，用来分离子进程通信逻辑和业务逻辑，优化子进程代码结构。\n\n主要功能是使用api诸如 - `ProcessHost.registry(taskName, func)`来注册多种`任务`，然后在主进程中可以直接使用进程池向某个`任务`发送请求并取得`Promise`对象以拿到进程回调返回的数据，从而避免在我们的子进程执行文件中编写代码时过度关注进程之间数据的通信。\n如果不使用`进程事务管理中心`的话我们就需要使用`process.send`来向一个进程发送消息并在另一个进程中使用`process.on('message', processor)`处理消息。需要注意的是如果注册的`task`任务是异步的则需要返回一个Promise对象而不是直接`return`数据，实例方法如下：  \n\n- 1）registry用于子进程向事务中心注册自己的任务(支持链式调用)\n- 2）unregistry用于取消任务注册(支持链式调用)\n\n使用说明：\n```js\n/* in child process */\nconst { ProcessHost } = require('electron-re');\nProcessHost\n  .registry('test1', (params) => {\n    return params;\n  })\n  .registry('test2', (params) => {\n    return fetch(url);\n  });\n\nProcessHost\n  .unregistry('test1')\n  .unregistry('test2');\n```\n\n#### 进程池和子进程事务中心的配合使用\n\n示例：文件分片上传中，主进程中使用进程池来发送`初始化分片上传`请求，子进程拿到请求信号处理业务然后返回\n\n__1.in main processs - 主进程中__\n```js\n /**\n    * init [初始化上传]\n    * @param  {[String]} host [主机名]\n    * @param  {[String]} username [用户名]\n    * @param  {[Object]} file [文件描述对象]\n    * @param  {[String]} abspath [绝对路径]\n    * @param  {[String]} sharename [共享名]\n    * @param  {[String]} fragsize [分片大小]\n    * @param  {[String]} prefix [目标上传地址前缀]\n    */\n  init({ username, host, file, abspath, sharename, fragsize, prefix = '' }) {\n    const date = Date.now();\n    const uploadId = getStringMd5(date + file.name + file.type + file.size);\n    let size = 0;\n\n    return new Promise((resolve) => {\n        this.getUploadPrepath\n        .then((pre) => {\n          /* 看这里看这里！look here! */\n          return processPool.send(\n            /* 进程事务名 */\n            'init-works',\n            /* 携带的参数 */\n            {\n              username, host, sharename, pre, prefix,\n              size: file.size, name: file.name, abspath, fragsize\n            },\n            /* 指定一个进程调用id */\n            uploadId\n          )\n        })\n      .then((rsp) => {\n        resolve({\n          code: rsp.error ? 600 : 200,\n          result: rsp.result,\n        });\n      }).catch(err => {\n        resolve({\n          code: 600,\n          result: err.toString()\n        });\n      });\n    });\n  }\n```\n\n__2.child.js (in child process)中使用事务管理中心处理消息__\n>child.js即为创建进程池时传入的`path`参数所在的nodejs脚本代码，在此脚本中我们注册多个任务来处理从进程池发送过来的消息  \n\n其中：\n \\> uploadStore - 主要用于在内存中维护整个文件上传列表，对上传任务列表进行增删查改操作(cpu耗时操作)  \n \\> fileBlock - 利用FS API操作文件，比如打开某个文件的文件描述符、根据描述符和分片索引值读取一个文件的某一段Buffer数据、关闭文件描述符等等。虽然都是异步IO读写，对性能影响不大，不过为了整合整个上传处理流程也将其一同纳入子进程中管理。\n```js\n  const fs = require('fs');\n  const path = require('path');\n\n  const utils = require('./child.utils');\n  const { readFileBlock, uploadRecordStore, unlink } = utils;\n  const { ProcessHost } = require('electron-re');\n\n  // read a file block from a path\n  const fileBlock = readFileBlock();\n  // maintain a shards upload queue\n  const uploadStore = uploadRecordStore();\n\n  global.lang = process.env.lang;\n\n  /* *************** registry all tasks *************** */\n\n  ProcessHost\n    .registry('init-works', (params) => {\n      return initWorks(params);\n    })\n    .registry('upload-works', (params) => {\n      return uploadWorks(params);\n    })\n    ...\n\n  /* *************** upload logic *************** */\n\n  /* 上传初始化工作 */\n  function initWorks({username, host, sharename, pre, prefix, name, abspath, size, fragsize }) {\n    const remotePath = path.join(pre, prefix, name);\n    return new Promise((resolve, reject) => {\n      new Promise((reso) => fsPromise.unlink(remotePath).then(reso).catch(reso))\n      .then(() => {\n        const dirs = utils.getFileDirs([path.join(prefix, name)]);\n        return utils.mkdirs(pre, dirs);\n      })\n      .then(() => fileBlock.open(abspath, size))\n      .then((rsp) => {\n        if (rsp.code === 200) {\n          const newRecord = {\n            ...\n          };\n          uploadStore.set(newRecord);\n          return newRecord;\n        } else {\n          throw new Error(rsp.result);\n        }\n     })\n     .then(resolve)\n     .catch(error => {\n      reject(error.toString());\n     });\n    })\n  }\n\n  /* 上传分片 */\n  function uplaodWorks(){ ... };\n\n  ...\n```\n\n### VI. Next To Do\n----------------------\n\n- [x] 让Service支持代码更新后自动重启\n- [ ] 添加ChildProcessPool子进程调度逻辑\n- [ ] 优化ChildProcessPool多进程console输出\n- [ ] 添加可视化进程管理界面\n- [ ] 增强ChildProcessPool进程池功能\n- [ ] 增强ProcessHost事务中心功能\n\n### VII. 几个实际使用示例\n----------------------\n\n1. [electronux](https://github.com/nojsja/electronux) - 我的一个Electron项目，使用了 `BrowserService` and `MessageChannel`。\n\n3. [file-slice-upload](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload) - 一个关于多文件分片并行上传的demo，使用了 `ChildProcessPool` and `ProcessHost`，基于 Electron@9.3.5。\n\n3. 查看 `test` 目录下的测试样例文件，包含了完整的细节使用。","slug":"Electron-Node多进程工具开发日记","published":1,"updated":"2020-12-21T02:35:54.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmurk0020kl95hu3yg5hf","content":"<blockquote><p>文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考…</p></blockquote><h3 id=\"Contents\">Contents</h3><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── Contents (you are here!)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── I. 前言</span><br><span class=\"line\">├── II. 架构图</span><br><span class=\"line\">│</span><br><span class=\"line\">├── III. electron-re 可以用来做什么？</span><br><span class=\"line\">│   ├── 1) 用于Electron应用</span><br><span class=\"line\">│   └── 2) 用于Electron/Nodejs应用</span><br><span class=\"line\">│</span><br><span class=\"line\">├── IV. 说明1：Service/MessageChannel</span><br><span class=\"line\">│   ├── Service的创建</span><br><span class=\"line\">│   ├── Service的自动刷新</span><br><span class=\"line\">│   ├── MessageChannel的引入</span><br><span class=\"line\">│   ├── MessageChannel提供的方法</span><br><span class=\"line\">│   └── 对比MessageChannel和原生ipc通信的使用</span><br><span class=\"line\">│       ├── 1) 使用remote远程调用(原生)</span><br><span class=\"line\">│       ├── 2) 使用ipc信号通信(原生)</span><br><span class=\"line\">│       └── 3) 使用MessageChannel进行多向通信(扩展)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── V. 说明2：ChildProcessPool/ProcessHost</span><br><span class=\"line\">│   ├── 进程池的创建</span><br><span class=\"line\">│   ├── 进程池的实例方法</span><br><span class=\"line\">│   ├── 子进程事务中心</span><br><span class=\"line\">│   └── 进程池和子进程事务中心的配合使用</span><br><span class=\"line\">│       ├── 1) 主进程中使用进程池向子进程发送请求</span><br><span class=\"line\">│       └── 2) 子进程中用事务中心处理消息</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VI. Next To Do</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VII. 几个实际使用示例</span><br><span class=\"line\">│   ├── 1) Service/MessageChannel示例</span><br><span class=\"line\">│   ├── 2) ChildProcessPool/ProcessHost示例</span><br><span class=\"line\">│   └── 3) <span class=\"built_in\">test</span>测试目录示例</span><br></pre></td></tr></table></figure><h3 id=\"I-前言\">I. 前言</h3><hr><p>最近在做一个多文件分片并行上传模块的时候(基于Electron和React)，遇到了一些性能问题，主要体现在：前端同时添加大量文件(1000-10000)并行上传时(文件同时上传数默认为6)，在不做懒加载优化的情况下，引起了整个应用窗口的卡顿。所以针对Electron/Nodejs多进程这方面做了一些学习，尝试使用多进程架构对上传流程进行优化。</p><p>同时也编写了一个方便进行Electron/Node多进程管理和调用的工具<a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">electron-re</a>，已经发布为npm组件，可以直接安装：</p><p><a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">&gt;&gt; github地址</a></p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: npm install electron-re --save</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">$: yarn add electron-re</span><br></pre></td></tr></table></figure><p>如果感兴趣是怎么一步一步解决性能问题的话可以查看这篇文章：<a href=\"https://nojsja.gitee.io/blogs/2020/08/16/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96%E6%8E%A2%E7%B4%A2/\" target=\"_blank\" rel=\"noopener\">《基于Electron的smb客户端文件上传优化探索》</a>。</p><p><img src=\"smb_upload_now.jpg\" alt=\"RhinoDisk\"></p><p>下面来讲讲主角=&gt; <strong>electron-re</strong></p><h3 id=\"II-electron-re架构图\">II. electron-re架构图</h3><hr><p><img src=\"./electron-re.png\" alt=\"archtecture\"></p><h3 id=\"III-electron-re-可以用来做什么？\">III. electron-re 可以用来做什么？</h3><hr><h4 id=\"1-用于Electron应用\">1. 用于Electron应用</h4><ul><li><code>BrowserService</code></li><li><code>MessageChannel</code></li></ul><p>在Electron的一些“最佳实践”中，建议将占用cpu的代码放到渲染过程中而不是直接放在主过程中，这里先看下chromium的架构图：</p><p><img src=\"chromium.jpg\" alt=\"chromium.jpg\"></p><p>每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。所以如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，渲染进程窗口就会卡顿掉帧，严重的话甚至会卡住不动。</p><p>因此<code>electron-re</code>在Electron已有的<code>Main Process</code>主进程和<code>Renderer Process</code>渲染进程逻辑的基础上独立出一个单独的<code>Service</code>概念。<code>Service</code>即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许<code>node注入</code>和<code>remote调用</code>的渲染窗口进程。</p><p>这样就可以将代码中耗费cpu的操作(比如文件上传中维护一个数千个上传任务的队列)编写成一个单独的js文件，然后使用<code>BrowserService</code>构造函数以这个js文件的地址<code>path</code>为参数构造一个<code>Service</code>实例，从而将他们从主进程中分离。如果你说那这部分耗费cpu的操作直接放到渲染窗口进程可以嘛？这其实取决于项目自身的架构设计，以及对进程之间数据传输性能损耗和传输时间等各方面的权衡，创建一个<code>Service</code>的简单示例：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserService &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myServcie = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, path.join(__dirname, <span class=\"string\">'path/to/app.service.js'</span>));</span><br></pre></td></tr></table></figure><p>如果使用了<code>BrowserService</code>的话，要想在主进程、渲染进程、service进程之间任意发送消息就要使用<code>electron-re</code>提供的<code>MessageChannel</code>通信工具，它的接口设计跟Electron内建的<code>ipc</code>基本一致，也是基于<code>ipc</code>通信原理来实现的，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ---- main.js ---- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserService &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 主进程中向一个service-app发送消息</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id=\"2-用于Electron-Nodejs应用\">2. 用于Electron/Nodejs应用</h4><ul><li><code>ChildProcessPool</code></li><li><code>ProcessHost</code></li></ul><p>此外，如果要创建一些不依赖于Electron运行时的子进程（相关参考nodejs <code>child_process</code>），可以使用<code>electron-re</code>提供的专门为nodejs运行时编写的进程池<code>ChildProcessPool</code>类。因为创建进程本身所需的开销很大，使用进程池来重复利用已经创建了的子进程，将多进程架构带来的性能效益最大化，简单实例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ChildProcessPool &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">global.ipcUploadProcess = <span class=\"keyword\">new</span> ChildProcessPool(&#123;</span><br><span class=\"line\">  path: path.join(app.getAppPath(), <span class=\"string\">'app/services/child/upload.js'</span>), <span class=\"attr\">max</span>: <span class=\"number\">6</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>一般情况下，在我们的子进程执行文件中(创建子进程时path参数指定的脚本)，如要想在主进程和子进程之间同步数据，可以使用<code>process.send('channel', params)</code>和<code>process.on('channel', function)</code>来实现。但是这样在处理业务逻辑的同时也强迫我们去关注进程之间的通信，你需要知道子进程什么时候能处理完毕，然后再使用<code>process.send</code>再将数据返回主进程，使用方式繁琐。</p><p><code>electron-re</code>引入了<code>ProcessHost</code>的概念，我将它称之为&quot;进程事务中心&quot;。实际使用时在子进程执行文件中只需要将各个任务函数通过<code>ProcessHost.registry('task-name', function)</code>注册成多个被监听的事务，然后配合进程池的<code>ChildProcessPool.send('task-name', params)</code>来触发子进程的事务逻辑的调用即可，<code>ChildProcessPool.send()</code>同时会返回一个Promise实例以便获取回调数据，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- 主进程中 --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">global.ipcUploadProcess.send(<span class=\"string\">'task1'</span>, params);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --- 子进程中 --- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ProcessHost &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">    .registry(<span class=\"string\">'task1'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">'task-value'</span> &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .registry(<span class=\"string\">'init-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fetch(url);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure><h3 id=\"IV-Service-MessageChannel\">IV. Service/MessageChannel</h3><hr><p>用于Electron应用中 - Service进程分离/进程间通信</p><h4 id=\"BrowserService的创建\">BrowserService的创建</h4><blockquote><p>需要等待app触发<code>ready</code>事件后才能开始创建Service，创建后如果立即向Service发送请求可能接收不到，需要调用<code>service.connected()</code>异步方法来等待Service准备完成，支持Promise写法。</p></blockquote><p>Electron主进程main.js文件中：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- in electron main.js entry --- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  BrowserService,</span><br><span class=\"line\">  MessageChannel <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isInDev = process.env.NODE_ENV === <span class=\"string\">'dev'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after app is ready in main process</span></span><br><span class=\"line\">app.whenReady().then(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, <span class=\"string\">'path/to/app.service.js'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService2 = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app2'</span>, <span class=\"string\">'path/to/app2.service.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService.connected();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService2.connected();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// open devtools in dev mode for debugging</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInDev) myService.openDevTools();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"BrowserService的自动刷新\">BrowserService的自动刷新</h4><blockquote><p>支持Service代码文件更新后自动刷新Service，简单设置两个配置项即可。</p></blockquote><p>1.需要声明当前运行环境为开发环境<br>2.创建Service时禁用web安全策略</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myService = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, <span class=\"string\">'path/to/app.service.js'</span>, &#123;</span><br><span class=\"line\">  ...options,</span><br><span class=\"line\">  <span class=\"comment\">// 设置开发模式</span></span><br><span class=\"line\">  dev: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 关闭安全策略</span></span><br><span class=\"line\">  webPreferences: &#123; <span class=\"attr\">webSecurity</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"MessageChannel的引入\">MessageChannel的引入</h4><blockquote><p>注意必须在main.js中引入，引入后会自动进行初始化。</p></blockquote><p>MessageChannel在<code>主进程/Service/渲染进程窗口</code>中的使用方式基本一致，具体请参考下文&quot;对比MessageChannel和原生ipc通信的使用&quot;。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  BrowserService,</span><br><span class=\"line\">  MessageChannel <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br></pre></td></tr></table></figure><h4 id=\"MessageChannel提供的方法\">MessageChannel提供的方法</h4><p>1.公共方法，适用于 - 主进程/渲染进程/Service</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 向一个Service发送请求 */</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'service-name'</span>, channel, params);</span><br><span class=\"line\"><span class=\"comment\">/* 向一个Servcie发送请求，并取得Promise实例 */</span></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'service-name'</span>, channel, params);</span><br><span class=\"line\"><span class=\"comment\">/* 根据windowId/webContentsId，向渲染进程发送请求 */</span></span><br><span class=\"line\">MessageChannel.sendTo(<span class=\"string\">'windowId/webContentsId'</span>, channel, params);</span><br><span class=\"line\"><span class=\"comment\">/* 监听一个信号 */</span></span><br><span class=\"line\">MessageChannel.on(channel, func);</span><br><span class=\"line\"><span class=\"comment\">/* 监听一次信号 */</span></span><br><span class=\"line\">MessageChannel.once(channel, func);</span><br></pre></td></tr></table></figure><p>2.仅适用于 - 渲染进程/Service</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 向主进程发送消息 */</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, channel, params);</span><br><span class=\"line\"><span class=\"comment\">/* 向主进程发送消息，并取得Promise实例 */</span></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, channel, params);</span><br></pre></td></tr></table></figure><p>3.仅适用于 - 主进程/Service</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  监听一个信号，调用处理函数，</span></span><br><span class=\"line\"><span class=\"comment\">  可以在处理函数中返回一个异步的Promise实例或直接返回数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">MessageChannel.handle(channel, processorFunc);</span><br></pre></td></tr></table></figure><h4 id=\"对比MessageChannel和原生ipc通信的使用\">对比MessageChannel和原生ipc通信的使用</h4><blockquote><p>1/2 - 原生方法，3 - 扩展方法</p></blockquote><p>1.使用remote远程调用</p><p>remote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 渲染进程中(web端代码) */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserWindow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>).remote</span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123; <span class=\"attr\">width</span>: <span class=\"number\">800</span>, <span class=\"attr\">height</span>: <span class=\"number\">600</span> &#125;)</span><br><span class=\"line\">win.loadURL(<span class=\"string\">'https://github.com'</span>)</span><br></pre></td></tr></table></figure><p>注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用于主进程和渲染进程频繁通信以及耗时请求的情况，否则会引起严重的程序性能问题。</p><p>2.使用ipc信号通信</p><p>基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。<br>Electron进程之间通信最常用的一系列方法，但是在向其它子进程发送消息之前需要知道目标进程的<code>webContentsId</code>或者能够直接拿到目标进程的实例，使用方式不太灵活。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 主进程 */</span></span><br><span class=\"line\">ipcMain.on(channel, listener) <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcMain.once(channel, listener) <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcMain.handle(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器</span></span><br><span class=\"line\">ipcMain.handleOnce(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听</span></span><br><span class=\"line\">browserWindow.webContents.send(channel, args); <span class=\"comment\">// 显式地向某个渲染进程发送信息 - 异步触发</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 渲染进程 */</span></span><br><span class=\"line\">ipcRenderer.on(channel, listener); <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.once(channel, listener); <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendSync(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 同步触发</span></span><br><span class=\"line\">ipcRenderer.invoke(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 返回Promise对象等待触发</span></span><br><span class=\"line\">ipcRenderer.sendTo(webContentsId, channel, ...args); <span class=\"comment\">// 向某个渲染进程发送消息 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendToHost(channel, ...args) <span class=\"comment\">// 向host页面的webview发送消息 - 异步触发</span></span><br></pre></td></tr></table></figure><p>3.使用MessageChannel进行多向通信</p><ul><li>1）main process - 主进程中</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  BrowserService,</span><br><span class=\"line\">  MessageChannel <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isInDev = process.env.NODE_ENV === <span class=\"string\">'dev'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after app is ready in main process</span></span><br><span class=\"line\">app.whenReady().then(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, <span class=\"string\">'path/to/app.service.js'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService2 = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app2'</span>, <span class=\"string\">'path/to/app2.service.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService.connected();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService2.connected();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// open devtools in dev mode for debugging</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInDev) myService.openDevTools();</span><br><span class=\"line\">    MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span> &#125;);</span><br><span class=\"line\">    MessageChannel.invoke(<span class=\"string\">'app'</span>, <span class=\"string\">'channel2'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test2'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    MessageChannel.on(<span class=\"string\">'channel3'</span>, (event, response) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    MessageChannel.handle(<span class=\"string\">'channel4'</span>, (event, response) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">res</span>: <span class=\"string\">'channel4-res'</span> &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ul><li>2）app.service.js - 在一个service中</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MessageChannel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MessageChannel.on(<span class=\"string\">'channel1'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MessageChannel.handle(<span class=\"string\">'channel2'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">'channel2-response'</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'app2'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel3'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">event, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel4'</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>3）app2.service.js - 在另一个service中</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MessageChannel.handle(<span class=\"string\">'channel3'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">'channel3-response'</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">MessageChannel.once(<span class=\"string\">'channel4'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel3'</span> &#125;);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel4'</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>4）renderer process window - 在一个渲染窗口中</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MessageChannel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span>&#125;);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'app2'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test2'</span> &#125;);</span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test3'</span> &#125;);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test4'</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id=\"V-ChildProcessPool-ProcessHost\">V. ChildProcessPool/ProcessHost</h3><hr><p>用于Electron和Nodejs应用中 - Node.js进程池/子进程事务中心</p><h4 id=\"进程池的创建\">进程池的创建</h4><p>进程池基于nodejs的<code>child_process</code>模块，使用<code>fork</code>方式创建并管理多个独立的子进程。</p><p>创建进程池时提供<code>最大子进程实例个数</code>、<code>子进程执行文件路径</code>等参数即可，进程池会自动接管进程的创建和调用。外部可以通过进程池向某个子进程发送请求，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用。</p><p>子进程是通过懒加载方式创建的，也就是说如果只创建进程池而不对进程池发起请求调用的话，进程池将不会创建任何子进程实例。</p><p>1.参数说明</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|—— path 参数为可执行文件路径</span><br><span class=\"line\">|—— max 指明进程池创建的最大子进程实例数量</span><br><span class=\"line\">|—— env 为传递给子进程的环境变量</span><br></pre></td></tr></table></figure><p>2.主进程中引入进程池类，并创建进程池实例</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.js */</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ChildProcessPool &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> processPool = <span class=\"keyword\">new</span> ChildProcessPool(&#123;</span><br><span class=\"line\">  path: path.join(app.getAppPath(), <span class=\"string\">'app/services/child/upload.js'</span>),</span><br><span class=\"line\">  max: <span class=\"number\">3</span>,</span><br><span class=\"line\">  env: &#123; <span class=\"attr\">lang</span>: global.lang &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h4 id=\"进程池的实例方法\">进程池的实例方法</h4><blockquote><p>注意task-name即一个子进程注册的任务名，指向子进程的某个函数，具体请查看下面子进程事务中心的说明</p></blockquote><p><strong>1.processPool.send(‘task-name’, params, id)</strong></p><p>向某个子进程发送消息，如果请求参数指定了id则表明需要使用之前与此id建立过映射的某个进程(id将在send调用之后自动绑定)，并期望拿到此进程的回应结果。</p><p>id的使用情况比如：我第一次调用进程池在一个子进程里设置了一些数据(子进程之间数据不共享)，第二次时想拿到之前设置的那个数据，这时候只要保持两次<code>send()</code>请求携带的id一致即可，否则将不能保证两次请求发送给了同一个子进程。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * send [Send request to a process]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>taskName [task name - necessary]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>params [data passed to process - necessary]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>id [the unique id bound to a process instance - not necessary]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return <span class=\"type\">&#123;[Promise]&#125;</span> </span>[return a Promise instance]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> send(taskName, params, givenId) &#123;...&#125;</span><br></pre></td></tr></table></figure><p><strong>2.processPool.sendToAll(‘task-name’, params)</strong></p><p>向进程池中的所有进程发送信号，并期望拿到所有进程返回的结果，返回的数据为一个数组。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* sendToAll [Send requests to all processes]</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>taskName [task name - necessary]</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>params [data passed to process - necessary]</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return <span class=\"type\">&#123;[Promise]&#125;</span> </span>[return a Promise instance]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">sendToAll(taskName, params) &#123;...&#125;</span><br></pre></td></tr></table></figure><p><strong>3.processPool.disconnect(id)</strong></p><p>销毁进程池的子进程，如果不指定<code>id</code>调用的话就会销毁所有子进程，指定<code>id</code>参数可以单独销毁与此<code>id</code>值绑定过的某个子进程，销毁后再次调用进程池发送请求时会自动创建新的子进程。</p><p>需要注意的是<code>id</code>绑定操作是在<code>processPool.send('task-name', params, id)</code>方法调用后自动进行的。</p><p><strong>4.processPool.setMaxInstanceLimit(number)</strong></p><p>除了在创建进程池时使用<code>max</code>参数指定最大子进程实例个数，也能调用进程池的此方法来动态设置需要创建的子进程实例个数。</p><h4 id=\"子进程事务中心\">子进程事务中心</h4><blockquote><p><code>ProcessHost</code> - 子进程事务中心，需要和ChildProcessPool协同工作，用来分离子进程通信逻辑和业务逻辑，优化子进程代码结构。</p></blockquote><p>主要功能是使用api诸如 - <code>ProcessHost.registry(taskName, func)</code>来注册多种<code>任务</code>，然后在主进程中可以直接使用进程池向某个<code>任务</code>发送请求并取得<code>Promise</code>对象以拿到进程回调返回的数据，从而避免在我们的子进程执行文件中编写代码时过度关注进程之间数据的通信。<br>如果不使用<code>进程事务管理中心</code>的话我们就需要使用<code>process.send</code>来向一个进程发送消息并在另一个进程中使用<code>process.on('message', processor)</code>处理消息。需要注意的是如果注册的<code>task</code>任务是异步的则需要返回一个Promise对象而不是直接<code>return</code>数据，实例方法如下：</p><ul><li>1）registry用于子进程向事务中心注册自己的任务(支持链式调用)</li><li>2）unregistry用于取消任务注册(支持链式调用)</li></ul><p>使用说明：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* in child process */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ProcessHost &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .registry(<span class=\"string\">'test1'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'test2'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(url);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .unregistry(<span class=\"string\">'test1'</span>)</span><br><span class=\"line\">  .unregistry(<span class=\"string\">'test2'</span>);</span><br></pre></td></tr></table></figure><h4 id=\"进程池和子进程事务中心的配合使用\">进程池和子进程事务中心的配合使用</h4><p>示例：文件分片上传中，主进程中使用进程池来发送<code>初始化分片上传</code>请求，子进程拿到请求信号处理业务然后返回</p><p><strong><a href=\"http://1.in\" target=\"_blank\" rel=\"noopener\">1.in</a> main processs - 主进程中</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * init [初始化上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>host [主机名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>username [用户名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件描述对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>abspath [绝对路径]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>sharename [共享名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>fragsize [分片大小]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>prefix [目标上传地址前缀]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"> init(&#123; username, host, file, abspath, sharename, fragsize, prefix = <span class=\"string\">''</span> &#125;) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> date = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">   <span class=\"keyword\">const</span> uploadId = getStringMd5(date + file.name + file.type + file.size);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.getUploadPrepath</span><br><span class=\"line\">       .then(<span class=\"function\">(<span class=\"params\">pre</span>) =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">/* 看这里看这里！look here! */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> processPool.send(</span><br><span class=\"line\">           <span class=\"comment\">/* 进程事务名 */</span></span><br><span class=\"line\">           <span class=\"string\">'init-works'</span>,</span><br><span class=\"line\">           <span class=\"comment\">/* 携带的参数 */</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             username, host, sharename, pre, prefix,</span><br><span class=\"line\">             size: file.size, <span class=\"attr\">name</span>: file.name, abspath, fragsize</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"comment\">/* 指定一个进程调用id */</span></span><br><span class=\"line\">           uploadId</span><br><span class=\"line\">         )</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(&#123;</span><br><span class=\"line\">         code: rsp.error ? <span class=\"number\">600</span> : <span class=\"number\">200</span>,</span><br><span class=\"line\">         result: rsp.result,</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(&#123;</span><br><span class=\"line\">         code: <span class=\"number\">600</span>,</span><br><span class=\"line\">         result: err.toString()</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p><strong>2.child.js (in child process)中使用事务管理中心处理消息</strong></p><blockquote><p>child.js即为创建进程池时传入的<code>path</code>参数所在的nodejs脚本代码，在此脚本中我们注册多个任务来处理从进程池发送过来的消息</p></blockquote><p>其中：<br>&gt; uploadStore - 主要用于在内存中维护整个文件上传列表，对上传任务列表进行增删查改操作(cpu耗时操作)<br>&gt; fileBlock - 利用FS API操作文件，比如打开某个文件的文件描述符、根据描述符和分片索引值读取一个文件的某一段Buffer数据、关闭文件描述符等等。虽然都是异步IO读写，对性能影响不大，不过为了整合整个上传处理流程也将其一同纳入子进程中管理。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./child.utils'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; readFileBlock, uploadRecordStore, unlink &#125; = utils;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ProcessHost &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read a file block from a path</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileBlock = readFileBlock();</span><br><span class=\"line\"><span class=\"comment\">// maintain a shards upload queue</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadStore = uploadRecordStore();</span><br><span class=\"line\"></span><br><span class=\"line\">global.lang = process.env.lang;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* *************** registry all tasks *************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .registry(<span class=\"string\">'init-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initWorks(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'upload-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uploadWorks(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* *************** upload logic *************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上传初始化工作 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initWorks</span>(<span class=\"params\">&#123;username, host, sharename, pre, prefix, name, abspath, size, fragsize &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> remotePath = path.join(pre, prefix, name);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reso</span>) =&gt;</span> fsPromise.unlink(remotePath).then(reso).catch(reso))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dirs = utils.getFileDirs([path.join(prefix, name)]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> utils.mkdirs(pre, dirs);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fileBlock.open(abspath, size))</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newRecord = &#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        uploadStore.set(newRecord);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newRecord;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(rsp.result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   .then(resolve)</span><br><span class=\"line\">   .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(error.toString());</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上传分片 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uplaodWorks</span>(<span class=\"params\"></span>)</span>&#123; ... &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h3 id=\"VI-Next-To-Do\">VI. Next To Do</h3><hr><ul class=\"contains-task-list\"><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 让Service支持代码更新后自动重启</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 添加ChildProcessPool子进程调度逻辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 优化ChildProcessPool多进程console输出</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 添加可视化进程管理界面</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 增强ChildProcessPool进程池功能</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 增强ProcessHost事务中心功能</label></li></ul><h3 id=\"VII-几个实际使用示例\">VII. 几个实际使用示例</h3><hr><ol><li><p><a href=\"https://github.com/nojsja/electronux\" target=\"_blank\" rel=\"noopener\">electronux</a> - 我的一个Electron项目，使用了 <code>BrowserService</code> and <code>MessageChannel</code>。</p></li><li><p><a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">file-slice-upload</a> - 一个关于多文件分片并行上传的demo，使用了 <code>ChildProcessPool</code> and <code>ProcessHost</code>，基于 Electron@9.3.5。</p></li><li><p>查看 <code>test</code> 目录下的测试样例文件，包含了完整的细节使用。</p></li></ol>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考…</p></blockquote><h3 id=\"Contents\">Contents</h3><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── Contents (you are here!)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── I. 前言</span><br><span class=\"line\">├── II. 架构图</span><br><span class=\"line\">│</span><br><span class=\"line\">├── III. electron-re 可以用来做什么？</span><br><span class=\"line\">│   ├── 1) 用于Electron应用</span><br><span class=\"line\">│   └── 2) 用于Electron/Nodejs应用</span><br><span class=\"line\">│</span><br><span class=\"line\">├── IV. 说明1：Service/MessageChannel</span><br><span class=\"line\">│   ├── Service的创建</span><br><span class=\"line\">│   ├── Service的自动刷新</span><br><span class=\"line\">│   ├── MessageChannel的引入</span><br><span class=\"line\">│   ├── MessageChannel提供的方法</span><br><span class=\"line\">│   └── 对比MessageChannel和原生ipc通信的使用</span><br><span class=\"line\">│       ├── 1) 使用remote远程调用(原生)</span><br><span class=\"line\">│       ├── 2) 使用ipc信号通信(原生)</span><br><span class=\"line\">│       └── 3) 使用MessageChannel进行多向通信(扩展)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── V. 说明2：ChildProcessPool/ProcessHost</span><br><span class=\"line\">│   ├── 进程池的创建</span><br><span class=\"line\">│   ├── 进程池的实例方法</span><br><span class=\"line\">│   ├── 子进程事务中心</span><br><span class=\"line\">│   └── 进程池和子进程事务中心的配合使用</span><br><span class=\"line\">│       ├── 1) 主进程中使用进程池向子进程发送请求</span><br><span class=\"line\">│       └── 2) 子进程中用事务中心处理消息</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VI. Next To Do</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VII. 几个实际使用示例</span><br><span class=\"line\">│   ├── 1) Service/MessageChannel示例</span><br><span class=\"line\">│   ├── 2) ChildProcessPool/ProcessHost示例</span><br><span class=\"line\">│   └── 3) <span class=\"built_in\">test</span>测试目录示例</span><br></pre></td></tr></table></figure><h3 id=\"I-前言\">I. 前言</h3><hr><p>最近在做一个多文件分片并行上传模块的时候(基于Electron和React)，遇到了一些性能问题，主要体现在：前端同时添加大量文件(1000-10000)并行上传时(文件同时上传数默认为6)，在不做懒加载优化的情况下，引起了整个应用窗口的卡顿。所以针对Electron/Nodejs多进程这方面做了一些学习，尝试使用多进程架构对上传流程进行优化。</p><p>同时也编写了一个方便进行Electron/Node多进程管理和调用的工具<a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">electron-re</a>，已经发布为npm组件，可以直接安装：</p><p><a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">&gt;&gt; github地址</a></p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: npm install electron-re --save</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">$: yarn add electron-re</span><br></pre></td></tr></table></figure><p>如果感兴趣是怎么一步一步解决性能问题的话可以查看这篇文章：<a href=\"https://nojsja.gitee.io/blogs/2020/08/16/%E5%9F%BA%E4%BA%8EElectron%E7%9A%84smb%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%BC%98%E5%8C%96%E6%8E%A2%E7%B4%A2/\" target=\"_blank\" rel=\"noopener\">《基于Electron的smb客户端文件上传优化探索》</a>。</p><p><img src=\"smb_upload_now.jpg\" alt=\"RhinoDisk\"></p><p>下面来讲讲主角=&gt; <strong>electron-re</strong></p><h3 id=\"II-electron-re架构图\">II. electron-re架构图</h3><hr><p><img src=\"./electron-re.png\" alt=\"archtecture\"></p><h3 id=\"III-electron-re-可以用来做什么？\">III. electron-re 可以用来做什么？</h3><hr><h4 id=\"1-用于Electron应用\">1. 用于Electron应用</h4><ul><li><code>BrowserService</code></li><li><code>MessageChannel</code></li></ul><p>在Electron的一些“最佳实践”中，建议将占用cpu的代码放到渲染过程中而不是直接放在主过程中，这里先看下chromium的架构图：</p><p><img src=\"chromium.jpg\" alt=\"chromium.jpg\"></p><p>每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。所以如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，渲染进程窗口就会卡顿掉帧，严重的话甚至会卡住不动。</p><p>因此<code>electron-re</code>在Electron已有的<code>Main Process</code>主进程和<code>Renderer Process</code>渲染进程逻辑的基础上独立出一个单独的<code>Service</code>概念。<code>Service</code>即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许<code>node注入</code>和<code>remote调用</code>的渲染窗口进程。</p><p>这样就可以将代码中耗费cpu的操作(比如文件上传中维护一个数千个上传任务的队列)编写成一个单独的js文件，然后使用<code>BrowserService</code>构造函数以这个js文件的地址<code>path</code>为参数构造一个<code>Service</code>实例，从而将他们从主进程中分离。如果你说那这部分耗费cpu的操作直接放到渲染窗口进程可以嘛？这其实取决于项目自身的架构设计，以及对进程之间数据传输性能损耗和传输时间等各方面的权衡，创建一个<code>Service</code>的简单示例：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserService &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myServcie = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, path.join(__dirname, <span class=\"string\">'path/to/app.service.js'</span>));</span><br></pre></td></tr></table></figure><p>如果使用了<code>BrowserService</code>的话，要想在主进程、渲染进程、service进程之间任意发送消息就要使用<code>electron-re</code>提供的<code>MessageChannel</code>通信工具，它的接口设计跟Electron内建的<code>ipc</code>基本一致，也是基于<code>ipc</code>通信原理来实现的，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ---- main.js ---- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserService &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 主进程中向一个service-app发送消息</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id=\"2-用于Electron-Nodejs应用\">2. 用于Electron/Nodejs应用</h4><ul><li><code>ChildProcessPool</code></li><li><code>ProcessHost</code></li></ul><p>此外，如果要创建一些不依赖于Electron运行时的子进程（相关参考nodejs <code>child_process</code>），可以使用<code>electron-re</code>提供的专门为nodejs运行时编写的进程池<code>ChildProcessPool</code>类。因为创建进程本身所需的开销很大，使用进程池来重复利用已经创建了的子进程，将多进程架构带来的性能效益最大化，简单实例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ChildProcessPool &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">global.ipcUploadProcess = <span class=\"keyword\">new</span> ChildProcessPool(&#123;</span><br><span class=\"line\">  path: path.join(app.getAppPath(), <span class=\"string\">'app/services/child/upload.js'</span>), <span class=\"attr\">max</span>: <span class=\"number\">6</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>一般情况下，在我们的子进程执行文件中(创建子进程时path参数指定的脚本)，如要想在主进程和子进程之间同步数据，可以使用<code>process.send('channel', params)</code>和<code>process.on('channel', function)</code>来实现。但是这样在处理业务逻辑的同时也强迫我们去关注进程之间的通信，你需要知道子进程什么时候能处理完毕，然后再使用<code>process.send</code>再将数据返回主进程，使用方式繁琐。</p><p><code>electron-re</code>引入了<code>ProcessHost</code>的概念，我将它称之为&quot;进程事务中心&quot;。实际使用时在子进程执行文件中只需要将各个任务函数通过<code>ProcessHost.registry('task-name', function)</code>注册成多个被监听的事务，然后配合进程池的<code>ChildProcessPool.send('task-name', params)</code>来触发子进程的事务逻辑的调用即可，<code>ChildProcessPool.send()</code>同时会返回一个Promise实例以便获取回调数据，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- 主进程中 --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">global.ipcUploadProcess.send(<span class=\"string\">'task1'</span>, params);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --- 子进程中 --- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ProcessHost &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">    .registry(<span class=\"string\">'task1'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">'task-value'</span> &#125;;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .registry(<span class=\"string\">'init-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fetch(url);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure><h3 id=\"IV-Service-MessageChannel\">IV. Service/MessageChannel</h3><hr><p>用于Electron应用中 - Service进程分离/进程间通信</p><h4 id=\"BrowserService的创建\">BrowserService的创建</h4><blockquote><p>需要等待app触发<code>ready</code>事件后才能开始创建Service，创建后如果立即向Service发送请求可能接收不到，需要调用<code>service.connected()</code>异步方法来等待Service准备完成，支持Promise写法。</p></blockquote><p>Electron主进程main.js文件中：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- in electron main.js entry --- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  BrowserService,</span><br><span class=\"line\">  MessageChannel <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isInDev = process.env.NODE_ENV === <span class=\"string\">'dev'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after app is ready in main process</span></span><br><span class=\"line\">app.whenReady().then(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, <span class=\"string\">'path/to/app.service.js'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService2 = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app2'</span>, <span class=\"string\">'path/to/app2.service.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService.connected();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService2.connected();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// open devtools in dev mode for debugging</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInDev) myService.openDevTools();</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"BrowserService的自动刷新\">BrowserService的自动刷新</h4><blockquote><p>支持Service代码文件更新后自动刷新Service，简单设置两个配置项即可。</p></blockquote><p>1.需要声明当前运行环境为开发环境<br>2.创建Service时禁用web安全策略</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myService = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, <span class=\"string\">'path/to/app.service.js'</span>, &#123;</span><br><span class=\"line\">  ...options,</span><br><span class=\"line\">  <span class=\"comment\">// 设置开发模式</span></span><br><span class=\"line\">  dev: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 关闭安全策略</span></span><br><span class=\"line\">  webPreferences: &#123; <span class=\"attr\">webSecurity</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><h4 id=\"MessageChannel的引入\">MessageChannel的引入</h4><blockquote><p>注意必须在main.js中引入，引入后会自动进行初始化。</p></blockquote><p>MessageChannel在<code>主进程/Service/渲染进程窗口</code>中的使用方式基本一致，具体请参考下文&quot;对比MessageChannel和原生ipc通信的使用&quot;。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  BrowserService,</span><br><span class=\"line\">  MessageChannel <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br></pre></td></tr></table></figure><h4 id=\"MessageChannel提供的方法\">MessageChannel提供的方法</h4><p>1.公共方法，适用于 - 主进程/渲染进程/Service</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 向一个Service发送请求 */</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'service-name'</span>, channel, params);</span><br><span class=\"line\"><span class=\"comment\">/* 向一个Servcie发送请求，并取得Promise实例 */</span></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'service-name'</span>, channel, params);</span><br><span class=\"line\"><span class=\"comment\">/* 根据windowId/webContentsId，向渲染进程发送请求 */</span></span><br><span class=\"line\">MessageChannel.sendTo(<span class=\"string\">'windowId/webContentsId'</span>, channel, params);</span><br><span class=\"line\"><span class=\"comment\">/* 监听一个信号 */</span></span><br><span class=\"line\">MessageChannel.on(channel, func);</span><br><span class=\"line\"><span class=\"comment\">/* 监听一次信号 */</span></span><br><span class=\"line\">MessageChannel.once(channel, func);</span><br></pre></td></tr></table></figure><p>2.仅适用于 - 渲染进程/Service</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 向主进程发送消息 */</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, channel, params);</span><br><span class=\"line\"><span class=\"comment\">/* 向主进程发送消息，并取得Promise实例 */</span></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, channel, params);</span><br></pre></td></tr></table></figure><p>3.仅适用于 - 主进程/Service</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  监听一个信号，调用处理函数，</span></span><br><span class=\"line\"><span class=\"comment\">  可以在处理函数中返回一个异步的Promise实例或直接返回数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">MessageChannel.handle(channel, processorFunc);</span><br></pre></td></tr></table></figure><h4 id=\"对比MessageChannel和原生ipc通信的使用\">对比MessageChannel和原生ipc通信的使用</h4><blockquote><p>1/2 - 原生方法，3 - 扩展方法</p></blockquote><p>1.使用remote远程调用</p><p>remote模块为渲染进程和主进程通信提供了一种简单方法，使用remote模块, 你可以调用main进程对象的方法, 而不必显式发送进程间消息。示例如下，代码通过remote远程调用主进程的BrowserWindows创建了一个渲染进程，并加载了一个网页地址：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 渲染进程中(web端代码) */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserWindow &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>).remote</span><br><span class=\"line\"><span class=\"keyword\">let</span> win = <span class=\"keyword\">new</span> BrowserWindow(&#123; <span class=\"attr\">width</span>: <span class=\"number\">800</span>, <span class=\"attr\">height</span>: <span class=\"number\">600</span> &#125;)</span><br><span class=\"line\">win.loadURL(<span class=\"string\">'https://github.com'</span>)</span><br></pre></td></tr></table></figure><p>注意：remote底层是基于ipc的同步进程通信(同步=阻塞页面)，都知道Node.js的最大特性就是异步调用，非阻塞IO，因此remote调用不适用于主进程和渲染进程频繁通信以及耗时请求的情况，否则会引起严重的程序性能问题。</p><p>2.使用ipc信号通信</p><p>基于事件触发的ipc双向信号通信，渲染进程中的ipcRenderer可以监听一个事件通道，也能向主进程或其它渲染进程直接发送消息(需要知道其它渲染进程的webContentsId)，同理主进程中的ipcMain也能监听某个事件通道和向任意一个渲染进程发送消息。<br>Electron进程之间通信最常用的一系列方法，但是在向其它子进程发送消息之前需要知道目标进程的<code>webContentsId</code>或者能够直接拿到目标进程的实例，使用方式不太灵活。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 主进程 */</span></span><br><span class=\"line\">ipcMain.on(channel, listener) <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcMain.once(channel, listener) <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcMain.handle(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器</span></span><br><span class=\"line\">ipcMain.handleOnce(channel, listener) <span class=\"comment\">// 为渲染进程的invoke函数设置对应信道的监听器，触发后即删除监听</span></span><br><span class=\"line\">browserWindow.webContents.send(channel, args); <span class=\"comment\">// 显式地向某个渲染进程发送信息 - 异步触发</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 渲染进程 */</span></span><br><span class=\"line\">ipcRenderer.on(channel, listener); <span class=\"comment\">// 监听信道 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.once(channel, listener); <span class=\"comment\">// 监听一次信道，监听器触发后即删除 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendSync(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 同步触发</span></span><br><span class=\"line\">ipcRenderer.invoke(channel, args); <span class=\"comment\">// 向主进程一个信道发送信息 - 返回Promise对象等待触发</span></span><br><span class=\"line\">ipcRenderer.sendTo(webContentsId, channel, ...args); <span class=\"comment\">// 向某个渲染进程发送消息 - 异步触发</span></span><br><span class=\"line\">ipcRenderer.sendToHost(channel, ...args) <span class=\"comment\">// 向host页面的webview发送消息 - 异步触发</span></span><br></pre></td></tr></table></figure><p>3.使用MessageChannel进行多向通信</p><ul><li>1）main process - 主进程中</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  BrowserService,</span><br><span class=\"line\">  MessageChannel <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> isInDev = process.env.NODE_ENV === <span class=\"string\">'dev'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// after app is ready in main process</span></span><br><span class=\"line\">app.whenReady().then(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, <span class=\"string\">'path/to/app.service.js'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> myService2 = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app2'</span>, <span class=\"string\">'path/to/app2.service.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService.connected();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> myService2.connected();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// open devtools in dev mode for debugging</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInDev) myService.openDevTools();</span><br><span class=\"line\">    MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span> &#125;);</span><br><span class=\"line\">    MessageChannel.invoke(<span class=\"string\">'app'</span>, <span class=\"string\">'channel2'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test2'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    MessageChannel.on(<span class=\"string\">'channel3'</span>, (event, response) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    MessageChannel.handle(<span class=\"string\">'channel4'</span>, (event, response) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(response);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">res</span>: <span class=\"string\">'channel4-res'</span> &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ul><li>2）app.service.js - 在一个service中</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MessageChannel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">MessageChannel.on(<span class=\"string\">'channel1'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MessageChannel.handle(<span class=\"string\">'channel2'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">'channel2-response'</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'app2'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel3'</span> &#125;).then(<span class=\"function\">(<span class=\"params\">event, result</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel4'</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>3）app2.service.js - 在另一个service中</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MessageChannel.handle(<span class=\"string\">'channel3'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">response</span>: <span class=\"string\">'channel3-response'</span> &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">MessageChannel.once(<span class=\"string\">'channel4'</span>, (event, result) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel3'</span> &#125;);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'channel4'</span> &#125;);</span><br></pre></td></tr></table></figure><ul><li>4）renderer process window - 在一个渲染窗口中</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ipcRenderer &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; MessageChannel &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span>&#125;);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'app2'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test2'</span> &#125;);</span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'main'</span>, <span class=\"string\">'channel3'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test3'</span> &#125;);</span><br><span class=\"line\">MessageChannel.invoke(<span class=\"string\">'main'</span>, <span class=\"string\">'channel4'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test4'</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id=\"V-ChildProcessPool-ProcessHost\">V. ChildProcessPool/ProcessHost</h3><hr><p>用于Electron和Nodejs应用中 - Node.js进程池/子进程事务中心</p><h4 id=\"进程池的创建\">进程池的创建</h4><p>进程池基于nodejs的<code>child_process</code>模块，使用<code>fork</code>方式创建并管理多个独立的子进程。</p><p>创建进程池时提供<code>最大子进程实例个数</code>、<code>子进程执行文件路径</code>等参数即可，进程池会自动接管进程的创建和调用。外部可以通过进程池向某个子进程发送请求，而在进程池内部其实就是按照顺序依次将已经创建的多个子进程中的某一个返回给外部调用即可，从而避免了其中某个进程被过度使用。</p><p>子进程是通过懒加载方式创建的，也就是说如果只创建进程池而不对进程池发起请求调用的话，进程池将不会创建任何子进程实例。</p><p>1.参数说明</p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|—— path 参数为可执行文件路径</span><br><span class=\"line\">|—— max 指明进程池创建的最大子进程实例数量</span><br><span class=\"line\">|—— env 为传递给子进程的环境变量</span><br></pre></td></tr></table></figure><p>2.主进程中引入进程池类，并创建进程池实例</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.js */</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ChildProcessPool &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> processPool = <span class=\"keyword\">new</span> ChildProcessPool(&#123;</span><br><span class=\"line\">  path: path.join(app.getAppPath(), <span class=\"string\">'app/services/child/upload.js'</span>),</span><br><span class=\"line\">  max: <span class=\"number\">3</span>,</span><br><span class=\"line\">  env: &#123; <span class=\"attr\">lang</span>: global.lang &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h4 id=\"进程池的实例方法\">进程池的实例方法</h4><blockquote><p>注意task-name即一个子进程注册的任务名，指向子进程的某个函数，具体请查看下面子进程事务中心的说明</p></blockquote><p><strong>1.processPool.send(‘task-name’, params, id)</strong></p><p>向某个子进程发送消息，如果请求参数指定了id则表明需要使用之前与此id建立过映射的某个进程(id将在send调用之后自动绑定)，并期望拿到此进程的回应结果。</p><p>id的使用情况比如：我第一次调用进程池在一个子进程里设置了一些数据(子进程之间数据不共享)，第二次时想拿到之前设置的那个数据，这时候只要保持两次<code>send()</code>请求携带的id一致即可，否则将不能保证两次请求发送给了同一个子进程。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * send [Send request to a process]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>taskName [task name - necessary]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>params [data passed to process - necessary]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>id [the unique id bound to a process instance - not necessary]</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return <span class=\"type\">&#123;[Promise]&#125;</span> </span>[return a Promise instance]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> send(taskName, params, givenId) &#123;...&#125;</span><br></pre></td></tr></table></figure><p><strong>2.processPool.sendToAll(‘task-name’, params)</strong></p><p>向进程池中的所有进程发送信号，并期望拿到所有进程返回的结果，返回的数据为一个数组。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* sendToAll [Send requests to all processes]</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>taskName [task name - necessary]</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param  <span class=\"type\">&#123;[Any]&#125;</span> </span>params [data passed to process - necessary]</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return <span class=\"type\">&#123;[Promise]&#125;</span> </span>[return a Promise instance]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">sendToAll(taskName, params) &#123;...&#125;</span><br></pre></td></tr></table></figure><p><strong>3.processPool.disconnect(id)</strong></p><p>销毁进程池的子进程，如果不指定<code>id</code>调用的话就会销毁所有子进程，指定<code>id</code>参数可以单独销毁与此<code>id</code>值绑定过的某个子进程，销毁后再次调用进程池发送请求时会自动创建新的子进程。</p><p>需要注意的是<code>id</code>绑定操作是在<code>processPool.send('task-name', params, id)</code>方法调用后自动进行的。</p><p><strong>4.processPool.setMaxInstanceLimit(number)</strong></p><p>除了在创建进程池时使用<code>max</code>参数指定最大子进程实例个数，也能调用进程池的此方法来动态设置需要创建的子进程实例个数。</p><h4 id=\"子进程事务中心\">子进程事务中心</h4><blockquote><p><code>ProcessHost</code> - 子进程事务中心，需要和ChildProcessPool协同工作，用来分离子进程通信逻辑和业务逻辑，优化子进程代码结构。</p></blockquote><p>主要功能是使用api诸如 - <code>ProcessHost.registry(taskName, func)</code>来注册多种<code>任务</code>，然后在主进程中可以直接使用进程池向某个<code>任务</code>发送请求并取得<code>Promise</code>对象以拿到进程回调返回的数据，从而避免在我们的子进程执行文件中编写代码时过度关注进程之间数据的通信。<br>如果不使用<code>进程事务管理中心</code>的话我们就需要使用<code>process.send</code>来向一个进程发送消息并在另一个进程中使用<code>process.on('message', processor)</code>处理消息。需要注意的是如果注册的<code>task</code>任务是异步的则需要返回一个Promise对象而不是直接<code>return</code>数据，实例方法如下：</p><ul><li>1）registry用于子进程向事务中心注册自己的任务(支持链式调用)</li><li>2）unregistry用于取消任务注册(支持链式调用)</li></ul><p>使用说明：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* in child process */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ProcessHost &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .registry(<span class=\"string\">'test1'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'test2'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(url);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .unregistry(<span class=\"string\">'test1'</span>)</span><br><span class=\"line\">  .unregistry(<span class=\"string\">'test2'</span>);</span><br></pre></td></tr></table></figure><h4 id=\"进程池和子进程事务中心的配合使用\">进程池和子进程事务中心的配合使用</h4><p>示例：文件分片上传中，主进程中使用进程池来发送<code>初始化分片上传</code>请求，子进程拿到请求信号处理业务然后返回</p><p><strong><a href=\"http://1.in\" target=\"_blank\" rel=\"noopener\">1.in</a> main processs - 主进程中</strong></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * init [初始化上传]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>host [主机名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>username [用户名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>file [文件描述对象]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>abspath [绝对路径]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>sharename [共享名]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>fragsize [分片大小]</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>prefix [目标上传地址前缀]</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"> init(&#123; username, host, file, abspath, sharename, fragsize, prefix = <span class=\"string\">''</span> &#125;) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> date = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">   <span class=\"keyword\">const</span> uploadId = getStringMd5(date + file.name + file.type + file.size);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.getUploadPrepath</span><br><span class=\"line\">       .then(<span class=\"function\">(<span class=\"params\">pre</span>) =&gt;</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">/* 看这里看这里！look here! */</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> processPool.send(</span><br><span class=\"line\">           <span class=\"comment\">/* 进程事务名 */</span></span><br><span class=\"line\">           <span class=\"string\">'init-works'</span>,</span><br><span class=\"line\">           <span class=\"comment\">/* 携带的参数 */</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             username, host, sharename, pre, prefix,</span><br><span class=\"line\">             size: file.size, <span class=\"attr\">name</span>: file.name, abspath, fragsize</span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           <span class=\"comment\">/* 指定一个进程调用id */</span></span><br><span class=\"line\">           uploadId</span><br><span class=\"line\">         )</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\">     .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(&#123;</span><br><span class=\"line\">         code: rsp.error ? <span class=\"number\">600</span> : <span class=\"number\">200</span>,</span><br><span class=\"line\">         result: rsp.result,</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">       resolve(&#123;</span><br><span class=\"line\">         code: <span class=\"number\">600</span>,</span><br><span class=\"line\">         result: err.toString()</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p><strong>2.child.js (in child process)中使用事务管理中心处理消息</strong></p><blockquote><p>child.js即为创建进程池时传入的<code>path</code>参数所在的nodejs脚本代码，在此脚本中我们注册多个任务来处理从进程池发送过来的消息</p></blockquote><p>其中：<br>&gt; uploadStore - 主要用于在内存中维护整个文件上传列表，对上传任务列表进行增删查改操作(cpu耗时操作)<br>&gt; fileBlock - 利用FS API操作文件，比如打开某个文件的文件描述符、根据描述符和分片索引值读取一个文件的某一段Buffer数据、关闭文件描述符等等。虽然都是异步IO读写，对性能影响不大，不过为了整合整个上传处理流程也将其一同纳入子进程中管理。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">'./child.utils'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; readFileBlock, uploadRecordStore, unlink &#125; = utils;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ProcessHost &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// read a file block from a path</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fileBlock = readFileBlock();</span><br><span class=\"line\"><span class=\"comment\">// maintain a shards upload queue</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> uploadStore = uploadRecordStore();</span><br><span class=\"line\"></span><br><span class=\"line\">global.lang = process.env.lang;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* *************** registry all tasks *************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .registry(<span class=\"string\">'init-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> initWorks(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'upload-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uploadWorks(params);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* *************** upload logic *************** */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上传初始化工作 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">initWorks</span>(<span class=\"params\">&#123;username, host, sharename, pre, prefix, name, abspath, size, fragsize &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> remotePath = path.join(pre, prefix, name);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">reso</span>) =&gt;</span> fsPromise.unlink(remotePath).then(reso).catch(reso))</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> dirs = utils.getFileDirs([path.join(prefix, name)]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> utils.mkdirs(pre, dirs);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> fileBlock.open(abspath, size))</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">rsp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rsp.code === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> newRecord = &#123;</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        uploadStore.set(newRecord);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newRecord;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(rsp.result);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   .then(resolve)</span><br><span class=\"line\">   .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    reject(error.toString());</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 上传分片 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uplaodWorks</span>(<span class=\"params\"></span>)</span>&#123; ... &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h3 id=\"VI-Next-To-Do\">VI. Next To Do</h3><hr><ul class=\"contains-task-list\"><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 让Service支持代码更新后自动重启</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 添加ChildProcessPool子进程调度逻辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 优化ChildProcessPool多进程console输出</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 添加可视化进程管理界面</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 增强ChildProcessPool进程池功能</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 增强ProcessHost事务中心功能</label></li></ul><h3 id=\"VII-几个实际使用示例\">VII. 几个实际使用示例</h3><hr><ol><li><p><a href=\"https://github.com/nojsja/electronux\" target=\"_blank\" rel=\"noopener\">electronux</a> - 我的一个Electron项目，使用了 <code>BrowserService</code> and <code>MessageChannel</code>。</p></li><li><p><a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">file-slice-upload</a> - 一个关于多文件分片并行上传的demo，使用了 <code>ChildProcessPool</code> and <code>ProcessHost</code>，基于 Electron@9.3.5。</p></li><li><p>查看 <code>test</code> 目录下的测试样例文件，包含了完整的细节使用。</p></li></ol>"},{"title":"Electron多进程工具开发日记2：进程管理UI","catalog":true,"toc_nav_num":true,"date":"2020-12-18T09:36:40.000Z","subtitle":"electron/node multi-process tool development","header-img":"/blogs/img/article_header/article_header.png","updateDate":"2020-12-18T09:36:40.000Z","top":2,"_content":"\n> 文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考...\n\n> 在Ubuntu20.04上进行开发/测试，可直接用于Electron项目，测试版本：Electron@8.2.0 / 9.3.5\n\n### Contents\n------------\n```sh\n├── Contents (you are here!)\n│\n├── I. 前言\n├── II. 架构图\n│\n├── III.electron-re 可以用来做什么？\n│   ├── 1) 用于Electron应用\n│   └── 2) 用于Electron/Nodejs应用\n│\n├── IV.UI功能介绍\n│   ├── 主界面\n│   ├── 功能1：Kill进程\n│   ├── 功能2：一键开启DevTools\n│   ├── 功能3：查看进程日志\n│   └── 功能4：查看进程CPU/Memory占用趋势\n│\n├── V. 使用&原理\n│   ├── 引入\n│   ├── 怎样捕获进程资源占用？\n│   ├── 怎样在主进程和UI之间共享数据？\n│   └── 怎样在UI窗口中绘制折线图？\n│\n├── VI. 存在的已知问题\n│\n├── VII. Next To Do\n│\n├── VIII. 几个实际使用示例\n│   ├── 1) Service/MessageChannel示例\n│   ├── 2) ChildProcessPool/ProcessHost示例\n│   └── 3) test测试目录示例\n```\n\n\n### I. 前言\n---------------\n\n最近在做一个多文件分片并行上传模块的时候(基于Electron和React)，遇到了一些性能问题，主要体现在：前端同时添加大量文件(1000-10000)并行上传时(文件同时上传数默认为6)，在不做懒加载优化的情况下，引起了整个应用窗口的卡顿。所以针对Electron/Nodejs多进程这方面做了一些学习，尝试使用多进程架构对上传流程进行优化。\n\n同时也编写了一个方便进行Electron/Node多进程管理和调用的工具[electron-re](https://github.com/nojsja/electron-re)，已经发布为npm组件，可以直接安装：\n\n[>> github地址](https://github.com/nojsja/electron-re)\n\n```sh\n$: npm install electron-re --save\n# or\n$: yarn add electron-re\n```\n\n前文[《Electron/Node多进程工具开发日记》](https://nojsja.gitee.io/blogs/2020/12/08/Electron-Node%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/)描述了`electron-re`的开发背景、针对的问题场景以及详细的使用方法，这篇文章不会对它的基础使用做过多说明，主要介绍新特性`多进程管理UI`的开发和使用相关。UI界面基于`electron-re`已有的`BrowserService/MessageChannel`和`ChildProcessPool/ProcessHost`基础架构驱动，使用React17 / Babel7开发，主界面：\n\n![process-manager.main.png](http://nojsja.gitee.io/static-resources/images/electron-re/process-manager.main.png)\n\n### II. electron-re架构图\n--------------\n\n![archtecture](http://nojsja.gitee.io/static-resources/images/electron-re/electron-re.png)\n\n### III. electron-re 可以用来做什么？\n--------------\n\n#### 1. 用于Electron应用\n\n- `BrowserService`\n- `MessageChannel`\n\n在Electron的一些“最佳实践”中，建议将占用cpu的代码放到渲染过程中而不是直接放在主过程中，这里先看下chromium的架构图：\n\n![archtecture](http://nojsja.gitee.io/static-resources/images/electron-re/chromium.jpg)\n\n每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。所以如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，渲染进程窗口就会卡顿掉帧，严重的话甚至会卡住不动。\n\n因此`electron-re`在Electron已有的`Main Process`主进程和`Renderer Process`渲染进程逻辑的基础上独立出一个单独的`Service`概念。`Service`即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许`node注入`和`remote调用`的渲染窗口进程。\n\n这样就可以将代码中耗费cpu的操作(比如文件上传中维护一个数千个上传任务的队列)编写成一个单独的js文件，然后使用`BrowserService`构造函数以这个js文件的地址`path`为参数构造一个`Service`实例，从而将他们从主进程中分离。如果你说那这部分耗费cpu的操作直接放到渲染窗口进程可以嘛？这其实取决于项目自身的架构设计，以及对进程之间数据传输性能损耗和传输时间等各方面的权衡，创建一个`Service`的简单示例：\n```js\nconst { BrowserService } = require('electron-re');\nconst myServcie = new BrowserService('app', path.join(__dirname, 'path/to/app.service.js'));\n```\n\n如果使用了`BrowserService`的话，要想在主进程、渲染进程、service进程之间任意发送消息就要使用`electron-re`提供的`MessageChannel`通信工具，它的接口设计跟Electron内建的`ipc`基本一致，也是基于`ipc`通信原理来实现的，简单示例如下：\n```js\n/* ---- main.js ---- */\nconst { BrowserService } = require('electron-re');\n// 主进程中向一个service-app发送消息\nMessageChannel.send('app', 'channel1', { value: 'test1' });\n```\n\n#### 2. 用于Electron/Nodejs应用\n- `ChildProcessPool`\n- `ProcessHost`\n\n此外，如果要创建一些不依赖于Electron运行时的子进程（相关参考nodejs `child_process`），可以使用`electron-re`提供的专门为nodejs运行时编写的进程池`ChildProcessPool`类。因为创建进程本身所需的开销很大，使用进程池来重复利用已经创建了的子进程，将多进程架构带来的性能效益最大化，简单示例如下：\n```js\nconst { ChildProcessPool } = require('electron-re');\nglobal.ipcUploadProcess = new ChildProcessPool({\n  path: path.join(app.getAppPath(), 'app/services/child/upload.js'), max: 6\n});\n```\n\n一般情况下，在我们的子进程执行文件中(创建子进程时path参数指定的脚本)，如要想在主进程和子进程之间同步数据，可以使用`process.send('channel', params)`和`process.on('channel', function)`来实现(前提是进程以以`fork`方式创建或者手动开启了`ipc`通信)。但是这样在处理业务逻辑的同时也强迫我们去关注进程之间的通信，你需要知道子进程什么时候能处理完毕，然后再使用`process.send`再将数据返回主进程，使用方式繁琐。\n\n`electron-re`引入了`ProcessHost`的概念，我称之为\"进程事务中心\"。实际使用时在子进程执行文件中只需要将各个任务函数通过`ProcessHost.registry('task-name', function)`注册成多个被监听的事务，然后配合进程池的`ChildProcessPool.send('task-name', params)`来触发子进程事务逻辑的调用即可，`ChildProcessPool.send()`同时会返回一个Promise实例以便获取回调数据，简单示例如下：\n```js\n/* --- 主进程中 --- */\n...\nglobal.ipcUploadProcess\n  .send('task1', params)\n  .then(rsp => console.log(rsp));\n\n/* --- 子进程中 --- */\nconst { ProcessHost } = require('electron-re');\nProcessHost\n  .registry('task1', (params) => {\n    return { value: 'task-value' };\n  })\n  .registry('init-works', (params) => {\n    return fetch(url);\n  });\n```\n\n### IV. UI功能介绍\n--------\n> II 描述了electron-re的主要功能，基于这些功能来实现多进程监控UI面板\n\n#### 主界面\n>UI参考`electron-process-manager`设计\n\n预览图：\n\n![process-manager.main.png](http://nojsja.gitee.io/static-resources/images/electron-re/process-manager.main.png)\n\n主要功能如下：\n\n1. 展示Electron应用中所有开启的进程，包括主进程、普通的渲染进程、Service进程(由electron-re引入)、ChildProcessPool创建的子进程(由electron-re引入)。\n\n2. 进程列表中显示各个进程进程号、进程标识、父进程号、内存占用大小、CPU占用百分比等，所有进程标识分为：main(主进程)、service(服务进程)、renderer(渲染进程)、node(进程池子进程)，点击表格头可以针对对某项进行递增/递减排序。\n\n3. 选中某个进程后可以Kill此进程、查看进程控制台Console数据、查看1分钟内进程CPU/内存占用趋势，如果此进程是渲染进程的话还可以通过`DevTools`按钮一键打开内置调试工具。\n\n4. ChildProcessPool创建的子进程暂不支持直接打开DevTools进行调试，不过由于创建子进程时添加了`--inspect`参数，可以使用chrome的`chrome://inspect`进行远程调试。\n\n\n#### 功能1：Kill进程\n\n![kill.gif](http://nojsja.gitee.io/static-resources/images/electron-re/kill.gif)\n\n#### 功能2：一键开启DevTools\n\n![devtools.gif](http://nojsja.gitee.io/static-resources/images/electron-re/devtools.gif)\n\n#### 功能3：查看进程日志\n\n![console.gif](http://nojsja.gitee.io/static-resources/images/electron-re/console.gif)\n\n#### 功能3：查看进程CPU/Memory占用趋势\n\n![trends.gif](http://nojsja.gitee.io/static-resources/images/electron-re/trends.gif)\n\n![trends2.gif](http://nojsja.gitee.io/static-resources/images/electron-re/trends2.gif)\n\n### V. 使用&原理\n-----------\n\n#### 引入\n\n1. 在Electron主进程入口文件中引入：\n```js\nconst {\n  MessageChannel, // must required in main.js even if you don't use it\n  ProcessManager\n} = require('electron-re');\n```\n\n2. 开启进程管理窗口UI\n```js\nProcessManager.openWindow();\n```\n\n#### 怎样捕获进程资源占用？\n\n1.使用ProcessManager监听多个进程号\n\n- 1）在Electron窗口创建事件中将窗口进程id放入ProcessManager监听列表\n```js\n/* --- src/index.js --- */\n...\napp.on('web-contents-created', (event, webContents) => {\n  webContents.once('did-finish-load', () => {\n    const pid = webContents.getOSProcessId();\n    if (\n      exports.ProcessManager.processWindow &&\n      exports.ProcessManager.processWindow.webContents.getOSProcessId() === pid\n    ) { return; }\n\n    exports.ProcessManager.listen(pid, 'renderer');\n\n    webContents.once('closed', function(e) {\n      exports.ProcessManager.unlisten(this.pid);\n    }.bind({ pid }));\n      ...\n  })\n});\n```\n- 2）在进程池fork子进程时将进程id放入监听列表\n```js\n/* --- src/libs/ChildProcessPool.class.js --- */\n...\nconst { fork } = require('child_process');\n\nclass ChildProcessPool {\n  constructor({ path, max=6, cwd, env }) {\n    ...\n    this.event = new EventEmitter();\n    this.event.on('fork', (pids) => {\n      ProcessManager.listen(pids, 'node');\n    });\n    this.event.on('unfork', (pids) => {\n      ProcessManager.unlisten(pids);\n    });\n  }\n\n  /* Get a process instance from the pool */\n  getForkedFromPool(id=\"default\") {\n    let forked;\n    ...\n    forked = fork(this.forkedPath, ...);\n    this.event.emit('fork', this.forked.map(fork => fork.pid));\n    ...\n    return forked;\n  }\n  ...\n}\n\n```\n- 3）在Service进程注册时监听进程id\n`BrowserService`进程创建时会向主进程`MessageChannel`发送`registry`请求来全局注册一个Service服务，此时将进程id放入监听列表即可：\n```js\n/* --- src/index.js --- */\n...\nexports.MessageChannel.event.on('registry', ({pid}) => {\n  exports.ProcessManager.listen(pid, 'service');\n});\n...\nexports.MessageChannel.event.on('unregistry', ({pid}) => {\n  exports.ProcessManager.unlisten(pid)\n});\n```\n\n2.使用兼容多平台的`pidusage`库每秒采集一次进程的负载数据：\n\n```js\n/* --- src/libs/ProcessManager.class.js --- */\n...\nconst pidusage = require('pidusage');\n\nclass ProcessManager {\n  constructor() {\n    this.pidList = [process.pid];\n    this.typeMap = {\n      [process.pid]: 'main',\n    };\n    ...\n  }\n\n  /* -------------- internal -------------- */\n\n  /* 设置外部库采集并发送到UI进程 */\n  refreshList = () => {\n    return new Promise((resolve, reject) => {\n      if (this.pidList.length) {\n        pidusage(this.pidList, (err, records) => {\n          if (err) {\n            console.log(`ProcessManager: refreshList -> ${err}`);\n          } else {\n            this.processWindow.webContents.send('process:update-list', { records, types: this.typeMap });\n          }\n          resolve();\n        });\n      } else {\n        resolve([]);\n      }\n    });\n  }\n\n  /* 设置定时器进行采集 */\n  setTimer() {\n    if (this.status === 'started') return console.warn('ProcessManager: the timer is already started!');\n\n    const interval = async () => {\n      setTimeout(async () => {\n        await this.refreshList()\n        interval(this.time)\n      }, this.time)\n    }\n\n    this.status = 'started';\n    interval()\n  }\n  ...\n```\n\n3.监听进程输出来采集进程日志\n> 进程池创建的子进程可以通过监听`stdout`标准输出流来进行日志采集；Electron渲染窗口进程则可以通过监听`ipc`通信事件`console-message`来进行采集；\n```js\n/* --- src/libs/ProcessManager.class.js --- */\n\nclass ProcessManager {\n  constructor() {\n    ...\n  }\n\n  /* pipe to process.stdout */\n  pipe(pinstance) {\n    if (pinstance.stdout) {\n      pinstance.stdout.on(\n        'data',\n        (trunk) => {\n          this.stdout(pinstance.pid, trunk);\n        }\n      );\n    }\n  }\n  ...\n}\n\n/* --- src/index.js --- */\n\napp.on('web-contents-created', (event, webContents) => {\n    webContents.once('did-finish-load', () => {\n      const pid = webContents.getOSProcessId();\n      ...\n      webContents.on('console-message', (e, level, msg, line, sourceid) => {\n        exports.ProcessManager.stdout(pid, msg);\n      });\n      ...\n    })\n  });\n```\n\n#### 怎样在主进程和UI之间共享数据？\n>基于Electron原生`ipc`异步通信\n\n1.使用ProcessManager向UI渲染窗口发送日志数据\n\n>每秒采集到的所有进程的console数据会被临时缓存到数组中，默认1秒钟向UI进程发送一次数据，然后清空临时数组。\n\n在这里需要注意的是ChildProcessPool中的子进程是通过Node.js的`child_process.fork()`方法创建的，此方法会衍生shell，且创建子进程时参数`stdio`会被指定为'pipe'，指明在子进程和父进程之间创建一个管道，从而让父进程中可以直接监听子进程对象上的 `stdout.on('data')`事件来拿到子进程的标准输出流。\n```js\n/* --- src/libs/ProcessManager.class.js --- */\n\nclass ProcessManager {\n  constructor() {\n    ...\n  }\n\n  /* pipe to process.stdout */\n  pipe(pinstance) {\n    if (pinstance.stdout) {\n      pinstance.stdout.on(\n        'data',\n        (trunk) => {\n          this.stdout(pinstance.pid, trunk);\n        }\n      );\n    }\n  }\n\n  /* send stdout to ui-processor */\n  stdout(pid, data) {\n    if (this.processWindow) {\n      if (!this.callSymbol) {\n        this.callSymbol = true;\n        setTimeout(() => {\n          this.processWindow.webContents.send('process:stdout', this.logs);\n          this.logs = [];\n          this.callSymbol = false;\n        }, this.time);\n      } else {\n        this.logs.push({ pid: pid, data: String.prototype.trim.call(data) });\n      }\n    }\n  }\n  ...\n\n}\n```\n\n2.使用ProcessManager向UI渲染窗口发送进程负载信息\n\n```js\n/* --- src/libs/ProcessManager.class.js --- */\n\nclass ProcessManager {\n  constructor() {\n    ...\n  }\n\n  /* 设置外部库采集并发送到UI进程 */\n  refreshList = () => {\n    return new Promise((resolve, reject) => {\n      if (this.pidList.length) {\n        pidusage(this.pidList, (err, records) => {\n          if (err) {\n            console.log(`ProcessManager: refreshList -> ${err}`);\n          } else {\n            this.processWindow.webContents.send('process:update-list', { records, types: this.typeMap });\n          }\n          resolve();\n        });\n      } else {\n        resolve([]);\n      }\n    });\n  }\n  ...\n\n}\n```\n\n3.UI窗口拿到数据后处理并临时存储\n\n```js\n  import { ipcRenderer, remote } from 'electron';\n  ...\n\n    ipcRenderer.on('process:update-list', (event, { records, types }) => {\n      console.log('update:list');\n      const { history } = this.state;\n      for (let pid in records) {\n        history[pid] = history[pid] || { memory: [], cpu: [] };\n        if (!records[pid]) continue;\n        history[pid].memory.push(records[pid].memory);\n        history[pid].cpu.push(records[pid].cpu);\n        // 存储最近的60条进程负载数据\n        history[pid].memory = history[pid].memory.slice(-60); \n        history[pid].cpu = history[pid].cpu.slice(-60);\n      }\n      this.setState({\n        processes: records,\n        history,\n        types\n      });\n    });\n\n    ipcRenderer.on('process:stdout', (event, dataArray) => {\n      console.log('process:stdout');\n      const { logs } = this.state;\n      dataArray.forEach(({ pid, data })=> {\n        logs[pid] = logs[pid] || [];\n        logs[pid].unshift(`[${new Date().toLocaleTimeString()}]: ${data}`);\n      });\n      // 存储最近的1000个日志输出\n      Object.keys(logs).forEach(pid => {\n        logs[pid].slice(0, 1000);\n      });\n      this.setState({ logs });\n    });\n```\n\n#### 怎样在UI窗口中绘制折线图\n\n1.注意使用React.PureComponent，会自动在属性更新进行浅比较，以减少不必要的渲染\n\n```js\n/* *************** ProcessTrends *************** */\nexport class ProcessTrends extends React.PureComponent {\n  componentDidMount() {\n    ...\n  }\n\n  ...\n\n  render() {\n    const { visible, memory, cpu } = this.props;\n    if (visible) {\n      this.uiDrawer.draw();\n      this.dataDrawer.draw(cpu, memory);\n    };\n\n    return (\n      <div className={`process-trends-container ${!visible ? 'hidden' : 'progressive-show' }`}>\n        <header>\n          <span className=\"text-button small\" onClick={this.handleCloseTrends}>X</span>\n        </header>\n        <div className=\"trends-drawer\">\n          <canvas\n            width={document.body.clientWidth * window.devicePixelRatio}\n            height={document.body.clientHeight * window.devicePixelRatio}\n            id=\"trendsUI\"\n          />\n          <canvas\n            width={document.body.clientWidth * window.devicePixelRatio}\n            height={document.body.clientHeight * window.devicePixelRatio}\n            id=\"trendsData\"\n          />\n        </div>\n      </div>\n    )\n  }\n}\n```\n\n2.使用两个Canvas画布分别绘制坐标轴和折线线段\n\n>设置两个画布相互重叠以尽可能保证静态的坐标轴不会被重复绘制，我们需要在组件挂载后初始化一个坐标轴绘制对象`uiDrawer`和一个数据折线绘制对象`dataDrawer`\n```js\n...\n  componentDidMount() {\n    this.uiDrawer = new UI_Drawer('#trendsUI', {\n      xPoints: 60,\n      yPoints: 100\n    });\n    this.dataDrawer = new Data_Drawer('#trendsData');\n    window.addEventListener('resize', this.resizeDebouncer);\n  }\n...\n```\n\n以下是Canvas相关的基础绘制命令：\n```js\nthis.canvas = document.querySelector(selector);\nthis.ctx =  this.canvas.getContext('2d');\nthis.ctx.strokeStyle = lineColor; // 设置线段颜色\nthis.ctx.beginPath(); // 创建一个新的路径\nthis.ctx.moveTo(x, y); // 移动到初始坐标点(不进行绘制)\nthis.ctx.lineTo(Math.floor(x), Math.floor(y)); // 描述从上一个坐标点到(x, y)的一条直线\nthis.ctx.stroke(); // 开始绘制\n```\n\n绘制类的源代码可以查看这里[Drawer](https://github.com/nojsja/electron-re/blob/master/src/ui/app/views/processManager/ProcessDrawer.js)，大概原理是：设置Canvas画布宽度width和高度height铺满窗口，设定横纵坐标轴到边缘的padding值为30，Canvas坐标原点[0,0]为绘制区域左上角顶点。这里以绘制折线图纵轴坐标为例，纵轴表示CPU占用0%-100%或内存占用0-1GB，我们可以将纵轴划分为100个基础单位，但是纵轴坐标点不用为100个，可以设置为10个方便查看，所以每个坐标点就可以表示为`[0, (height-padding) - ((height-(2*padding)) / index) * 100 ]`，index依次等于0,10,20,30...90，其中`(height-padding)`为最下面那个坐标点位置，`(height-(2*padding))`为整个纵轴的长度。\n\n### VI. 存在的已知问题\n------------\n\n1. 生产环境下ChildProcessPool未按预期工作\nElectron生产环境下，如果app被安装到系统目录，那么ChildProcessPool不能按照预期工作，解决办法有：将app安装到用户目录或者把进程池用于创建子进程的脚本(通过`path`参数指定)单独放到Electron用户数据目录下(Ubuntu20.04上是`~/.config/[appname]`)。\n\n2. UI界面未监听主进程Console数据\n主进程暂未支持此功能，正在寻找解决方案。\n\n### VII. Next To Do\n----------------------\n\n- [x] 让Service支持代码更新后自动重启\n- [ ] 添加ChildProcessPool子进程调度逻辑\n- [x] 优化ChildProcessPool多进程console输出\n- [x] 添加可视化进程管理界面\n- [ ] 增强ChildProcessPool进程池功能\n- [ ] 增强ProcessHost事务中心功能\n\n### VIII. 几个实际使用示例\n----------------------\n\n1. [electronux](https://github.com/nojsja/electronux) - 我的一个Electron项目，使用了 `BrowserService/MessageChannel`，并且附带了`ChildProcessPool/ProcessHost`使用demo。\n\n3. [file-slice-upload](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload) - 一个关于多文件分片并行上传的demo，使用了 `ChildProcessPool` and `ProcessHost`，基于 Electron@9.3.5开发。\n\n3. 也查看 `test` 目录下的测试样例文件，包含了完整的细节使用。\n","source":"_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI.md","raw":"---\ntitle: Electron多进程工具开发日记2：进程管理UI\ncatalog: true\ntoc_nav_num: true\ndate: 2020-12-18 17:36:40\nsubtitle: \"electron/node multi-process tool development\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntags:\n- electron\n- node\n- process\ncategories:\n- Electron\n- Node\nupdateDate: 2020-12-18 17:36:40\ntop: 2\n---\n\n> 文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考...\n\n> 在Ubuntu20.04上进行开发/测试，可直接用于Electron项目，测试版本：Electron@8.2.0 / 9.3.5\n\n### Contents\n------------\n```sh\n├── Contents (you are here!)\n│\n├── I. 前言\n├── II. 架构图\n│\n├── III.electron-re 可以用来做什么？\n│   ├── 1) 用于Electron应用\n│   └── 2) 用于Electron/Nodejs应用\n│\n├── IV.UI功能介绍\n│   ├── 主界面\n│   ├── 功能1：Kill进程\n│   ├── 功能2：一键开启DevTools\n│   ├── 功能3：查看进程日志\n│   └── 功能4：查看进程CPU/Memory占用趋势\n│\n├── V. 使用&原理\n│   ├── 引入\n│   ├── 怎样捕获进程资源占用？\n│   ├── 怎样在主进程和UI之间共享数据？\n│   └── 怎样在UI窗口中绘制折线图？\n│\n├── VI. 存在的已知问题\n│\n├── VII. Next To Do\n│\n├── VIII. 几个实际使用示例\n│   ├── 1) Service/MessageChannel示例\n│   ├── 2) ChildProcessPool/ProcessHost示例\n│   └── 3) test测试目录示例\n```\n\n\n### I. 前言\n---------------\n\n最近在做一个多文件分片并行上传模块的时候(基于Electron和React)，遇到了一些性能问题，主要体现在：前端同时添加大量文件(1000-10000)并行上传时(文件同时上传数默认为6)，在不做懒加载优化的情况下，引起了整个应用窗口的卡顿。所以针对Electron/Nodejs多进程这方面做了一些学习，尝试使用多进程架构对上传流程进行优化。\n\n同时也编写了一个方便进行Electron/Node多进程管理和调用的工具[electron-re](https://github.com/nojsja/electron-re)，已经发布为npm组件，可以直接安装：\n\n[>> github地址](https://github.com/nojsja/electron-re)\n\n```sh\n$: npm install electron-re --save\n# or\n$: yarn add electron-re\n```\n\n前文[《Electron/Node多进程工具开发日记》](https://nojsja.gitee.io/blogs/2020/12/08/Electron-Node%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/)描述了`electron-re`的开发背景、针对的问题场景以及详细的使用方法，这篇文章不会对它的基础使用做过多说明，主要介绍新特性`多进程管理UI`的开发和使用相关。UI界面基于`electron-re`已有的`BrowserService/MessageChannel`和`ChildProcessPool/ProcessHost`基础架构驱动，使用React17 / Babel7开发，主界面：\n\n![process-manager.main.png](http://nojsja.gitee.io/static-resources/images/electron-re/process-manager.main.png)\n\n### II. electron-re架构图\n--------------\n\n![archtecture](http://nojsja.gitee.io/static-resources/images/electron-re/electron-re.png)\n\n### III. electron-re 可以用来做什么？\n--------------\n\n#### 1. 用于Electron应用\n\n- `BrowserService`\n- `MessageChannel`\n\n在Electron的一些“最佳实践”中，建议将占用cpu的代码放到渲染过程中而不是直接放在主过程中，这里先看下chromium的架构图：\n\n![archtecture](http://nojsja.gitee.io/static-resources/images/electron-re/chromium.jpg)\n\n每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。所以如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，渲染进程窗口就会卡顿掉帧，严重的话甚至会卡住不动。\n\n因此`electron-re`在Electron已有的`Main Process`主进程和`Renderer Process`渲染进程逻辑的基础上独立出一个单独的`Service`概念。`Service`即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许`node注入`和`remote调用`的渲染窗口进程。\n\n这样就可以将代码中耗费cpu的操作(比如文件上传中维护一个数千个上传任务的队列)编写成一个单独的js文件，然后使用`BrowserService`构造函数以这个js文件的地址`path`为参数构造一个`Service`实例，从而将他们从主进程中分离。如果你说那这部分耗费cpu的操作直接放到渲染窗口进程可以嘛？这其实取决于项目自身的架构设计，以及对进程之间数据传输性能损耗和传输时间等各方面的权衡，创建一个`Service`的简单示例：\n```js\nconst { BrowserService } = require('electron-re');\nconst myServcie = new BrowserService('app', path.join(__dirname, 'path/to/app.service.js'));\n```\n\n如果使用了`BrowserService`的话，要想在主进程、渲染进程、service进程之间任意发送消息就要使用`electron-re`提供的`MessageChannel`通信工具，它的接口设计跟Electron内建的`ipc`基本一致，也是基于`ipc`通信原理来实现的，简单示例如下：\n```js\n/* ---- main.js ---- */\nconst { BrowserService } = require('electron-re');\n// 主进程中向一个service-app发送消息\nMessageChannel.send('app', 'channel1', { value: 'test1' });\n```\n\n#### 2. 用于Electron/Nodejs应用\n- `ChildProcessPool`\n- `ProcessHost`\n\n此外，如果要创建一些不依赖于Electron运行时的子进程（相关参考nodejs `child_process`），可以使用`electron-re`提供的专门为nodejs运行时编写的进程池`ChildProcessPool`类。因为创建进程本身所需的开销很大，使用进程池来重复利用已经创建了的子进程，将多进程架构带来的性能效益最大化，简单示例如下：\n```js\nconst { ChildProcessPool } = require('electron-re');\nglobal.ipcUploadProcess = new ChildProcessPool({\n  path: path.join(app.getAppPath(), 'app/services/child/upload.js'), max: 6\n});\n```\n\n一般情况下，在我们的子进程执行文件中(创建子进程时path参数指定的脚本)，如要想在主进程和子进程之间同步数据，可以使用`process.send('channel', params)`和`process.on('channel', function)`来实现(前提是进程以以`fork`方式创建或者手动开启了`ipc`通信)。但是这样在处理业务逻辑的同时也强迫我们去关注进程之间的通信，你需要知道子进程什么时候能处理完毕，然后再使用`process.send`再将数据返回主进程，使用方式繁琐。\n\n`electron-re`引入了`ProcessHost`的概念，我称之为\"进程事务中心\"。实际使用时在子进程执行文件中只需要将各个任务函数通过`ProcessHost.registry('task-name', function)`注册成多个被监听的事务，然后配合进程池的`ChildProcessPool.send('task-name', params)`来触发子进程事务逻辑的调用即可，`ChildProcessPool.send()`同时会返回一个Promise实例以便获取回调数据，简单示例如下：\n```js\n/* --- 主进程中 --- */\n...\nglobal.ipcUploadProcess\n  .send('task1', params)\n  .then(rsp => console.log(rsp));\n\n/* --- 子进程中 --- */\nconst { ProcessHost } = require('electron-re');\nProcessHost\n  .registry('task1', (params) => {\n    return { value: 'task-value' };\n  })\n  .registry('init-works', (params) => {\n    return fetch(url);\n  });\n```\n\n### IV. UI功能介绍\n--------\n> II 描述了electron-re的主要功能，基于这些功能来实现多进程监控UI面板\n\n#### 主界面\n>UI参考`electron-process-manager`设计\n\n预览图：\n\n![process-manager.main.png](http://nojsja.gitee.io/static-resources/images/electron-re/process-manager.main.png)\n\n主要功能如下：\n\n1. 展示Electron应用中所有开启的进程，包括主进程、普通的渲染进程、Service进程(由electron-re引入)、ChildProcessPool创建的子进程(由electron-re引入)。\n\n2. 进程列表中显示各个进程进程号、进程标识、父进程号、内存占用大小、CPU占用百分比等，所有进程标识分为：main(主进程)、service(服务进程)、renderer(渲染进程)、node(进程池子进程)，点击表格头可以针对对某项进行递增/递减排序。\n\n3. 选中某个进程后可以Kill此进程、查看进程控制台Console数据、查看1分钟内进程CPU/内存占用趋势，如果此进程是渲染进程的话还可以通过`DevTools`按钮一键打开内置调试工具。\n\n4. ChildProcessPool创建的子进程暂不支持直接打开DevTools进行调试，不过由于创建子进程时添加了`--inspect`参数，可以使用chrome的`chrome://inspect`进行远程调试。\n\n\n#### 功能1：Kill进程\n\n![kill.gif](http://nojsja.gitee.io/static-resources/images/electron-re/kill.gif)\n\n#### 功能2：一键开启DevTools\n\n![devtools.gif](http://nojsja.gitee.io/static-resources/images/electron-re/devtools.gif)\n\n#### 功能3：查看进程日志\n\n![console.gif](http://nojsja.gitee.io/static-resources/images/electron-re/console.gif)\n\n#### 功能3：查看进程CPU/Memory占用趋势\n\n![trends.gif](http://nojsja.gitee.io/static-resources/images/electron-re/trends.gif)\n\n![trends2.gif](http://nojsja.gitee.io/static-resources/images/electron-re/trends2.gif)\n\n### V. 使用&原理\n-----------\n\n#### 引入\n\n1. 在Electron主进程入口文件中引入：\n```js\nconst {\n  MessageChannel, // must required in main.js even if you don't use it\n  ProcessManager\n} = require('electron-re');\n```\n\n2. 开启进程管理窗口UI\n```js\nProcessManager.openWindow();\n```\n\n#### 怎样捕获进程资源占用？\n\n1.使用ProcessManager监听多个进程号\n\n- 1）在Electron窗口创建事件中将窗口进程id放入ProcessManager监听列表\n```js\n/* --- src/index.js --- */\n...\napp.on('web-contents-created', (event, webContents) => {\n  webContents.once('did-finish-load', () => {\n    const pid = webContents.getOSProcessId();\n    if (\n      exports.ProcessManager.processWindow &&\n      exports.ProcessManager.processWindow.webContents.getOSProcessId() === pid\n    ) { return; }\n\n    exports.ProcessManager.listen(pid, 'renderer');\n\n    webContents.once('closed', function(e) {\n      exports.ProcessManager.unlisten(this.pid);\n    }.bind({ pid }));\n      ...\n  })\n});\n```\n- 2）在进程池fork子进程时将进程id放入监听列表\n```js\n/* --- src/libs/ChildProcessPool.class.js --- */\n...\nconst { fork } = require('child_process');\n\nclass ChildProcessPool {\n  constructor({ path, max=6, cwd, env }) {\n    ...\n    this.event = new EventEmitter();\n    this.event.on('fork', (pids) => {\n      ProcessManager.listen(pids, 'node');\n    });\n    this.event.on('unfork', (pids) => {\n      ProcessManager.unlisten(pids);\n    });\n  }\n\n  /* Get a process instance from the pool */\n  getForkedFromPool(id=\"default\") {\n    let forked;\n    ...\n    forked = fork(this.forkedPath, ...);\n    this.event.emit('fork', this.forked.map(fork => fork.pid));\n    ...\n    return forked;\n  }\n  ...\n}\n\n```\n- 3）在Service进程注册时监听进程id\n`BrowserService`进程创建时会向主进程`MessageChannel`发送`registry`请求来全局注册一个Service服务，此时将进程id放入监听列表即可：\n```js\n/* --- src/index.js --- */\n...\nexports.MessageChannel.event.on('registry', ({pid}) => {\n  exports.ProcessManager.listen(pid, 'service');\n});\n...\nexports.MessageChannel.event.on('unregistry', ({pid}) => {\n  exports.ProcessManager.unlisten(pid)\n});\n```\n\n2.使用兼容多平台的`pidusage`库每秒采集一次进程的负载数据：\n\n```js\n/* --- src/libs/ProcessManager.class.js --- */\n...\nconst pidusage = require('pidusage');\n\nclass ProcessManager {\n  constructor() {\n    this.pidList = [process.pid];\n    this.typeMap = {\n      [process.pid]: 'main',\n    };\n    ...\n  }\n\n  /* -------------- internal -------------- */\n\n  /* 设置外部库采集并发送到UI进程 */\n  refreshList = () => {\n    return new Promise((resolve, reject) => {\n      if (this.pidList.length) {\n        pidusage(this.pidList, (err, records) => {\n          if (err) {\n            console.log(`ProcessManager: refreshList -> ${err}`);\n          } else {\n            this.processWindow.webContents.send('process:update-list', { records, types: this.typeMap });\n          }\n          resolve();\n        });\n      } else {\n        resolve([]);\n      }\n    });\n  }\n\n  /* 设置定时器进行采集 */\n  setTimer() {\n    if (this.status === 'started') return console.warn('ProcessManager: the timer is already started!');\n\n    const interval = async () => {\n      setTimeout(async () => {\n        await this.refreshList()\n        interval(this.time)\n      }, this.time)\n    }\n\n    this.status = 'started';\n    interval()\n  }\n  ...\n```\n\n3.监听进程输出来采集进程日志\n> 进程池创建的子进程可以通过监听`stdout`标准输出流来进行日志采集；Electron渲染窗口进程则可以通过监听`ipc`通信事件`console-message`来进行采集；\n```js\n/* --- src/libs/ProcessManager.class.js --- */\n\nclass ProcessManager {\n  constructor() {\n    ...\n  }\n\n  /* pipe to process.stdout */\n  pipe(pinstance) {\n    if (pinstance.stdout) {\n      pinstance.stdout.on(\n        'data',\n        (trunk) => {\n          this.stdout(pinstance.pid, trunk);\n        }\n      );\n    }\n  }\n  ...\n}\n\n/* --- src/index.js --- */\n\napp.on('web-contents-created', (event, webContents) => {\n    webContents.once('did-finish-load', () => {\n      const pid = webContents.getOSProcessId();\n      ...\n      webContents.on('console-message', (e, level, msg, line, sourceid) => {\n        exports.ProcessManager.stdout(pid, msg);\n      });\n      ...\n    })\n  });\n```\n\n#### 怎样在主进程和UI之间共享数据？\n>基于Electron原生`ipc`异步通信\n\n1.使用ProcessManager向UI渲染窗口发送日志数据\n\n>每秒采集到的所有进程的console数据会被临时缓存到数组中，默认1秒钟向UI进程发送一次数据，然后清空临时数组。\n\n在这里需要注意的是ChildProcessPool中的子进程是通过Node.js的`child_process.fork()`方法创建的，此方法会衍生shell，且创建子进程时参数`stdio`会被指定为'pipe'，指明在子进程和父进程之间创建一个管道，从而让父进程中可以直接监听子进程对象上的 `stdout.on('data')`事件来拿到子进程的标准输出流。\n```js\n/* --- src/libs/ProcessManager.class.js --- */\n\nclass ProcessManager {\n  constructor() {\n    ...\n  }\n\n  /* pipe to process.stdout */\n  pipe(pinstance) {\n    if (pinstance.stdout) {\n      pinstance.stdout.on(\n        'data',\n        (trunk) => {\n          this.stdout(pinstance.pid, trunk);\n        }\n      );\n    }\n  }\n\n  /* send stdout to ui-processor */\n  stdout(pid, data) {\n    if (this.processWindow) {\n      if (!this.callSymbol) {\n        this.callSymbol = true;\n        setTimeout(() => {\n          this.processWindow.webContents.send('process:stdout', this.logs);\n          this.logs = [];\n          this.callSymbol = false;\n        }, this.time);\n      } else {\n        this.logs.push({ pid: pid, data: String.prototype.trim.call(data) });\n      }\n    }\n  }\n  ...\n\n}\n```\n\n2.使用ProcessManager向UI渲染窗口发送进程负载信息\n\n```js\n/* --- src/libs/ProcessManager.class.js --- */\n\nclass ProcessManager {\n  constructor() {\n    ...\n  }\n\n  /* 设置外部库采集并发送到UI进程 */\n  refreshList = () => {\n    return new Promise((resolve, reject) => {\n      if (this.pidList.length) {\n        pidusage(this.pidList, (err, records) => {\n          if (err) {\n            console.log(`ProcessManager: refreshList -> ${err}`);\n          } else {\n            this.processWindow.webContents.send('process:update-list', { records, types: this.typeMap });\n          }\n          resolve();\n        });\n      } else {\n        resolve([]);\n      }\n    });\n  }\n  ...\n\n}\n```\n\n3.UI窗口拿到数据后处理并临时存储\n\n```js\n  import { ipcRenderer, remote } from 'electron';\n  ...\n\n    ipcRenderer.on('process:update-list', (event, { records, types }) => {\n      console.log('update:list');\n      const { history } = this.state;\n      for (let pid in records) {\n        history[pid] = history[pid] || { memory: [], cpu: [] };\n        if (!records[pid]) continue;\n        history[pid].memory.push(records[pid].memory);\n        history[pid].cpu.push(records[pid].cpu);\n        // 存储最近的60条进程负载数据\n        history[pid].memory = history[pid].memory.slice(-60); \n        history[pid].cpu = history[pid].cpu.slice(-60);\n      }\n      this.setState({\n        processes: records,\n        history,\n        types\n      });\n    });\n\n    ipcRenderer.on('process:stdout', (event, dataArray) => {\n      console.log('process:stdout');\n      const { logs } = this.state;\n      dataArray.forEach(({ pid, data })=> {\n        logs[pid] = logs[pid] || [];\n        logs[pid].unshift(`[${new Date().toLocaleTimeString()}]: ${data}`);\n      });\n      // 存储最近的1000个日志输出\n      Object.keys(logs).forEach(pid => {\n        logs[pid].slice(0, 1000);\n      });\n      this.setState({ logs });\n    });\n```\n\n#### 怎样在UI窗口中绘制折线图\n\n1.注意使用React.PureComponent，会自动在属性更新进行浅比较，以减少不必要的渲染\n\n```js\n/* *************** ProcessTrends *************** */\nexport class ProcessTrends extends React.PureComponent {\n  componentDidMount() {\n    ...\n  }\n\n  ...\n\n  render() {\n    const { visible, memory, cpu } = this.props;\n    if (visible) {\n      this.uiDrawer.draw();\n      this.dataDrawer.draw(cpu, memory);\n    };\n\n    return (\n      <div className={`process-trends-container ${!visible ? 'hidden' : 'progressive-show' }`}>\n        <header>\n          <span className=\"text-button small\" onClick={this.handleCloseTrends}>X</span>\n        </header>\n        <div className=\"trends-drawer\">\n          <canvas\n            width={document.body.clientWidth * window.devicePixelRatio}\n            height={document.body.clientHeight * window.devicePixelRatio}\n            id=\"trendsUI\"\n          />\n          <canvas\n            width={document.body.clientWidth * window.devicePixelRatio}\n            height={document.body.clientHeight * window.devicePixelRatio}\n            id=\"trendsData\"\n          />\n        </div>\n      </div>\n    )\n  }\n}\n```\n\n2.使用两个Canvas画布分别绘制坐标轴和折线线段\n\n>设置两个画布相互重叠以尽可能保证静态的坐标轴不会被重复绘制，我们需要在组件挂载后初始化一个坐标轴绘制对象`uiDrawer`和一个数据折线绘制对象`dataDrawer`\n```js\n...\n  componentDidMount() {\n    this.uiDrawer = new UI_Drawer('#trendsUI', {\n      xPoints: 60,\n      yPoints: 100\n    });\n    this.dataDrawer = new Data_Drawer('#trendsData');\n    window.addEventListener('resize', this.resizeDebouncer);\n  }\n...\n```\n\n以下是Canvas相关的基础绘制命令：\n```js\nthis.canvas = document.querySelector(selector);\nthis.ctx =  this.canvas.getContext('2d');\nthis.ctx.strokeStyle = lineColor; // 设置线段颜色\nthis.ctx.beginPath(); // 创建一个新的路径\nthis.ctx.moveTo(x, y); // 移动到初始坐标点(不进行绘制)\nthis.ctx.lineTo(Math.floor(x), Math.floor(y)); // 描述从上一个坐标点到(x, y)的一条直线\nthis.ctx.stroke(); // 开始绘制\n```\n\n绘制类的源代码可以查看这里[Drawer](https://github.com/nojsja/electron-re/blob/master/src/ui/app/views/processManager/ProcessDrawer.js)，大概原理是：设置Canvas画布宽度width和高度height铺满窗口，设定横纵坐标轴到边缘的padding值为30，Canvas坐标原点[0,0]为绘制区域左上角顶点。这里以绘制折线图纵轴坐标为例，纵轴表示CPU占用0%-100%或内存占用0-1GB，我们可以将纵轴划分为100个基础单位，但是纵轴坐标点不用为100个，可以设置为10个方便查看，所以每个坐标点就可以表示为`[0, (height-padding) - ((height-(2*padding)) / index) * 100 ]`，index依次等于0,10,20,30...90，其中`(height-padding)`为最下面那个坐标点位置，`(height-(2*padding))`为整个纵轴的长度。\n\n### VI. 存在的已知问题\n------------\n\n1. 生产环境下ChildProcessPool未按预期工作\nElectron生产环境下，如果app被安装到系统目录，那么ChildProcessPool不能按照预期工作，解决办法有：将app安装到用户目录或者把进程池用于创建子进程的脚本(通过`path`参数指定)单独放到Electron用户数据目录下(Ubuntu20.04上是`~/.config/[appname]`)。\n\n2. UI界面未监听主进程Console数据\n主进程暂未支持此功能，正在寻找解决方案。\n\n### VII. Next To Do\n----------------------\n\n- [x] 让Service支持代码更新后自动重启\n- [ ] 添加ChildProcessPool子进程调度逻辑\n- [x] 优化ChildProcessPool多进程console输出\n- [x] 添加可视化进程管理界面\n- [ ] 增强ChildProcessPool进程池功能\n- [ ] 增强ProcessHost事务中心功能\n\n### VIII. 几个实际使用示例\n----------------------\n\n1. [electronux](https://github.com/nojsja/electronux) - 我的一个Electron项目，使用了 `BrowserService/MessageChannel`，并且附带了`ChildProcessPool/ProcessHost`使用demo。\n\n3. [file-slice-upload](https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload) - 一个关于多文件分片并行上传的demo，使用了 `ChildProcessPool` and `ProcessHost`，基于 Electron@9.3.5开发。\n\n3. 也查看 `test` 目录下的测试样例文件，包含了完整的细节使用。\n","slug":"Electron多进程工具开发日记2：进程管理UI","published":1,"updated":"2020-12-23T06:28:09.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmahmurl0025kl9504qx3v41","content":"<blockquote><p>文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考…</p></blockquote><blockquote><p>在Ubuntu20.04上进行开发/测试，可直接用于Electron项目，测试版本：Electron@8.2.0 / 9.3.5</p></blockquote><h3 id=\"Contents\">Contents</h3><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── Contents (you are here!)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── I. 前言</span><br><span class=\"line\">├── II. 架构图</span><br><span class=\"line\">│</span><br><span class=\"line\">├── III.electron-re 可以用来做什么？</span><br><span class=\"line\">│   ├── 1) 用于Electron应用</span><br><span class=\"line\">│   └── 2) 用于Electron/Nodejs应用</span><br><span class=\"line\">│</span><br><span class=\"line\">├── IV.UI功能介绍</span><br><span class=\"line\">│   ├── 主界面</span><br><span class=\"line\">│   ├── 功能1：Kill进程</span><br><span class=\"line\">│   ├── 功能2：一键开启DevTools</span><br><span class=\"line\">│   ├── 功能3：查看进程日志</span><br><span class=\"line\">│   └── 功能4：查看进程CPU/Memory占用趋势</span><br><span class=\"line\">│</span><br><span class=\"line\">├── V. 使用&amp;原理</span><br><span class=\"line\">│   ├── 引入</span><br><span class=\"line\">│   ├── 怎样捕获进程资源占用？</span><br><span class=\"line\">│   ├── 怎样在主进程和UI之间共享数据？</span><br><span class=\"line\">│   └── 怎样在UI窗口中绘制折线图？</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VI. 存在的已知问题</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VII. Next To Do</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VIII. 几个实际使用示例</span><br><span class=\"line\">│   ├── 1) Service/MessageChannel示例</span><br><span class=\"line\">│   ├── 2) ChildProcessPool/ProcessHost示例</span><br><span class=\"line\">│   └── 3) <span class=\"built_in\">test</span>测试目录示例</span><br></pre></td></tr></table></figure><h3 id=\"I-前言\">I. 前言</h3><hr><p>最近在做一个多文件分片并行上传模块的时候(基于Electron和React)，遇到了一些性能问题，主要体现在：前端同时添加大量文件(1000-10000)并行上传时(文件同时上传数默认为6)，在不做懒加载优化的情况下，引起了整个应用窗口的卡顿。所以针对Electron/Nodejs多进程这方面做了一些学习，尝试使用多进程架构对上传流程进行优化。</p><p>同时也编写了一个方便进行Electron/Node多进程管理和调用的工具<a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">electron-re</a>，已经发布为npm组件，可以直接安装：</p><p><a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">&gt;&gt; github地址</a></p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: npm install electron-re --save</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">$: yarn add electron-re</span><br></pre></td></tr></table></figure><p>前文<a href=\"https://nojsja.gitee.io/blogs/2020/12/08/Electron-Node%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">《Electron/Node多进程工具开发日记》</a>描述了<code>electron-re</code>的开发背景、针对的问题场景以及详细的使用方法，这篇文章不会对它的基础使用做过多说明，主要介绍新特性<code>多进程管理UI</code>的开发和使用相关。UI界面基于<code>electron-re</code>已有的<code>BrowserService/MessageChannel</code>和<code>ChildProcessPool/ProcessHost</code>基础架构驱动，使用React17 / Babel7开发，主界面：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/process-manager.main.png\" alt=\"process-manager.main.png\"></p><h3 id=\"II-electron-re架构图\">II. electron-re架构图</h3><hr><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/electron-re.png\" alt=\"archtecture\"></p><h3 id=\"III-electron-re-可以用来做什么？\">III. electron-re 可以用来做什么？</h3><hr><h4 id=\"1-用于Electron应用\">1. 用于Electron应用</h4><ul><li><code>BrowserService</code></li><li><code>MessageChannel</code></li></ul><p>在Electron的一些“最佳实践”中，建议将占用cpu的代码放到渲染过程中而不是直接放在主过程中，这里先看下chromium的架构图：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/chromium.jpg\" alt=\"archtecture\"></p><p>每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。所以如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，渲染进程窗口就会卡顿掉帧，严重的话甚至会卡住不动。</p><p>因此<code>electron-re</code>在Electron已有的<code>Main Process</code>主进程和<code>Renderer Process</code>渲染进程逻辑的基础上独立出一个单独的<code>Service</code>概念。<code>Service</code>即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许<code>node注入</code>和<code>remote调用</code>的渲染窗口进程。</p><p>这样就可以将代码中耗费cpu的操作(比如文件上传中维护一个数千个上传任务的队列)编写成一个单独的js文件，然后使用<code>BrowserService</code>构造函数以这个js文件的地址<code>path</code>为参数构造一个<code>Service</code>实例，从而将他们从主进程中分离。如果你说那这部分耗费cpu的操作直接放到渲染窗口进程可以嘛？这其实取决于项目自身的架构设计，以及对进程之间数据传输性能损耗和传输时间等各方面的权衡，创建一个<code>Service</code>的简单示例：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserService &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myServcie = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, path.join(__dirname, <span class=\"string\">'path/to/app.service.js'</span>));</span><br></pre></td></tr></table></figure><p>如果使用了<code>BrowserService</code>的话，要想在主进程、渲染进程、service进程之间任意发送消息就要使用<code>electron-re</code>提供的<code>MessageChannel</code>通信工具，它的接口设计跟Electron内建的<code>ipc</code>基本一致，也是基于<code>ipc</code>通信原理来实现的，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ---- main.js ---- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserService &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 主进程中向一个service-app发送消息</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id=\"2-用于Electron-Nodejs应用\">2. 用于Electron/Nodejs应用</h4><ul><li><code>ChildProcessPool</code></li><li><code>ProcessHost</code></li></ul><p>此外，如果要创建一些不依赖于Electron运行时的子进程（相关参考nodejs <code>child_process</code>），可以使用<code>electron-re</code>提供的专门为nodejs运行时编写的进程池<code>ChildProcessPool</code>类。因为创建进程本身所需的开销很大，使用进程池来重复利用已经创建了的子进程，将多进程架构带来的性能效益最大化，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ChildProcessPool &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">global.ipcUploadProcess = <span class=\"keyword\">new</span> ChildProcessPool(&#123;</span><br><span class=\"line\">  path: path.join(app.getAppPath(), <span class=\"string\">'app/services/child/upload.js'</span>), <span class=\"attr\">max</span>: <span class=\"number\">6</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>一般情况下，在我们的子进程执行文件中(创建子进程时path参数指定的脚本)，如要想在主进程和子进程之间同步数据，可以使用<code>process.send('channel', params)</code>和<code>process.on('channel', function)</code>来实现(前提是进程以以<code>fork</code>方式创建或者手动开启了<code>ipc</code>通信)。但是这样在处理业务逻辑的同时也强迫我们去关注进程之间的通信，你需要知道子进程什么时候能处理完毕，然后再使用<code>process.send</code>再将数据返回主进程，使用方式繁琐。</p><p><code>electron-re</code>引入了<code>ProcessHost</code>的概念，我称之为&quot;进程事务中心&quot;。实际使用时在子进程执行文件中只需要将各个任务函数通过<code>ProcessHost.registry('task-name', function)</code>注册成多个被监听的事务，然后配合进程池的<code>ChildProcessPool.send('task-name', params)</code>来触发子进程事务逻辑的调用即可，<code>ChildProcessPool.send()</code>同时会返回一个Promise实例以便获取回调数据，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- 主进程中 --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">global.ipcUploadProcess</span><br><span class=\"line\">  .send(<span class=\"string\">'task1'</span>, params)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> <span class=\"built_in\">console</span>.log(rsp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --- 子进程中 --- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ProcessHost &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .registry(<span class=\"string\">'task1'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">'task-value'</span> &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'init-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(url);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure><h3 id=\"IV-UI功能介绍\">IV. UI功能介绍</h3><hr><blockquote><p>II 描述了electron-re的主要功能，基于这些功能来实现多进程监控UI面板</p></blockquote><h4 id=\"主界面\">主界面</h4><blockquote><p>UI参考<code>electron-process-manager</code>设计</p></blockquote><p>预览图：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/process-manager.main.png\" alt=\"process-manager.main.png\"></p><p>主要功能如下：</p><ol><li><p>展示Electron应用中所有开启的进程，包括主进程、普通的渲染进程、Service进程(由electron-re引入)、ChildProcessPool创建的子进程(由electron-re引入)。</p></li><li><p>进程列表中显示各个进程进程号、进程标识、父进程号、内存占用大小、CPU占用百分比等，所有进程标识分为：main(主进程)、service(服务进程)、renderer(渲染进程)、node(进程池子进程)，点击表格头可以针对对某项进行递增/递减排序。</p></li><li><p>选中某个进程后可以Kill此进程、查看进程控制台Console数据、查看1分钟内进程CPU/内存占用趋势，如果此进程是渲染进程的话还可以通过<code>DevTools</code>按钮一键打开内置调试工具。</p></li><li><p>ChildProcessPool创建的子进程暂不支持直接打开DevTools进行调试，不过由于创建子进程时添加了<code>--inspect</code>参数，可以使用chrome的<code>chrome://inspect</code>进行远程调试。</p></li></ol><h4 id=\"功能1：Kill进程\">功能1：Kill进程</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/kill.gif\" alt=\"kill.gif\"></p><h4 id=\"功能2：一键开启DevTools\">功能2：一键开启DevTools</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/devtools.gif\" alt=\"devtools.gif\"></p><h4 id=\"功能3：查看进程日志\">功能3：查看进程日志</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/console.gif\" alt=\"console.gif\"></p><h4 id=\"功能3：查看进程CPU-Memory占用趋势\">功能3：查看进程CPU/Memory占用趋势</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/trends.gif\" alt=\"trends.gif\"></p><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/trends2.gif\" alt=\"trends2.gif\"></p><h3 id=\"V-使用-原理\">V. 使用&amp;原理</h3><hr><h4 id=\"引入\">引入</h4><ol><li>在Electron主进程入口文件中引入：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  MessageChannel, <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">  ProcessManager</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>开启进程管理窗口UI</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessManager.openWindow();</span><br></pre></td></tr></table></figure><h4 id=\"怎样捕获进程资源占用？\">怎样捕获进程资源占用？</h4><p>1.使用ProcessManager监听多个进程号</p><ul><li>1）在Electron窗口创建事件中将窗口进程id放入ProcessManager监听列表</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/index.js --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">app.on(<span class=\"string\">'web-contents-created'</span>, (event, webContents) =&gt; &#123;</span><br><span class=\"line\">  webContents.once(<span class=\"string\">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pid = webContents.getOSProcessId();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      exports.ProcessManager.processWindow &amp;&amp;</span><br><span class=\"line\">      exports.ProcessManager.processWindow.webContents.getOSProcessId() === pid</span><br><span class=\"line\">    ) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    exports.ProcessManager.listen(pid, <span class=\"string\">'renderer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    webContents.once(<span class=\"string\">'closed'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      exports.ProcessManager.unlisten(<span class=\"keyword\">this</span>.pid);</span><br><span class=\"line\">    &#125;.bind(&#123; pid &#125;));</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ul><li>2）在进程池fork子进程时将进程id放入监听列表</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ChildProcessPool.class.js --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; fork &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildProcessPool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; path, max=<span class=\"number\">6</span>, cwd, env &#125;) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event.on(<span class=\"string\">'fork'</span>, (pids) =&gt; &#123;</span><br><span class=\"line\">      ProcessManager.listen(pids, <span class=\"string\">'node'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event.on(<span class=\"string\">'unfork'</span>, (pids) =&gt; &#123;</span><br><span class=\"line\">      ProcessManager.unlisten(pids);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Get a process instance from the pool */</span></span><br><span class=\"line\">  getForkedFromPool(id=<span class=\"string\">\"default\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> forked;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    forked = fork(<span class=\"keyword\">this</span>.forkedPath, ...);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event.emit(<span class=\"string\">'fork'</span>, <span class=\"keyword\">this</span>.forked.map(<span class=\"function\"><span class=\"params\">fork</span> =&gt;</span> fork.pid));</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forked;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>3）在Service进程注册时监听进程id<br><code>BrowserService</code>进程创建时会向主进程<code>MessageChannel</code>发送<code>registry</code>请求来全局注册一个Service服务，此时将进程id放入监听列表即可：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/index.js --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">exports.MessageChannel.event.on(<span class=\"string\">'registry'</span>, (&#123;pid&#125;) =&gt; &#123;</span><br><span class=\"line\">  exports.ProcessManager.listen(pid, <span class=\"string\">'service'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\">exports.MessageChannel.event.on(<span class=\"string\">'unregistry'</span>, (&#123;pid&#125;) =&gt; &#123;</span><br><span class=\"line\">  exports.ProcessManager.unlisten(pid)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>2.使用兼容多平台的<code>pidusage</code>库每秒采集一次进程的负载数据：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ProcessManager.class.js --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> pidusage = <span class=\"built_in\">require</span>(<span class=\"string\">'pidusage'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pidList = [process.pid];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.typeMap = &#123;</span><br><span class=\"line\">      [process.pid]: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* -------------- internal -------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置外部库采集并发送到UI进程 */</span></span><br><span class=\"line\">  refreshList = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pidList.length) &#123;</span><br><span class=\"line\">        pidusage(<span class=\"keyword\">this</span>.pidList, (err, records) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`ProcessManager: refreshList -&gt; <span class=\"subst\">$&#123;err&#125;</span>`</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processWindow.webContents.send(<span class=\"string\">'process:update-list'</span>, &#123; records, <span class=\"attr\">types</span>: <span class=\"keyword\">this</span>.typeMap &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve([]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置定时器进行采集 */</span></span><br><span class=\"line\">  setTimer() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">'started'</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.warn(<span class=\"string\">'ProcessManager: the timer is already started!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> interval = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.refreshList()</span><br><span class=\"line\">        interval(<span class=\"keyword\">this</span>.time)</span><br><span class=\"line\">      &#125;, <span class=\"keyword\">this</span>.time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">'started'</span>;</span><br><span class=\"line\">    interval()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure><p>3.监听进程输出来采集进程日志</p><blockquote><p>进程池创建的子进程可以通过监听<code>stdout</code>标准输出流来进行日志采集；Electron渲染窗口进程则可以通过监听<code>ipc</code>通信事件<code>console-message</code>来进行采集；</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ProcessManager.class.js --- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* pipe to process.stdout */</span></span><br><span class=\"line\">  pipe(pinstance) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pinstance.stdout) &#123;</span><br><span class=\"line\">      pinstance.stdout.on(</span><br><span class=\"line\">        <span class=\"string\">'data'</span>,</span><br><span class=\"line\">        (trunk) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.stdout(pinstance.pid, trunk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --- src/index.js --- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'web-contents-created'</span>, (event, webContents) =&gt; &#123;</span><br><span class=\"line\">    webContents.once(<span class=\"string\">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pid = webContents.getOSProcessId();</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      webContents.on(<span class=\"string\">'console-message'</span>, (e, level, msg, line, sourceid) =&gt; &#123;</span><br><span class=\"line\">        exports.ProcessManager.stdout(pid, msg);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure><h4 id=\"怎样在主进程和UI之间共享数据？\">怎样在主进程和UI之间共享数据？</h4><blockquote><p>基于Electron原生<code>ipc</code>异步通信</p></blockquote><p>1.使用ProcessManager向UI渲染窗口发送日志数据</p><blockquote><p>每秒采集到的所有进程的console数据会被临时缓存到数组中，默认1秒钟向UI进程发送一次数据，然后清空临时数组。</p></blockquote><p>在这里需要注意的是ChildProcessPool中的子进程是通过Node.js的<code>child_process.fork()</code>方法创建的，此方法会衍生shell，且创建子进程时参数<code>stdio</code>会被指定为’pipe’，指明在子进程和父进程之间创建一个管道，从而让父进程中可以直接监听子进程对象上的 <code>stdout.on('data')</code>事件来拿到子进程的标准输出流。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ProcessManager.class.js --- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* pipe to process.stdout */</span></span><br><span class=\"line\">  pipe(pinstance) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pinstance.stdout) &#123;</span><br><span class=\"line\">      pinstance.stdout.on(</span><br><span class=\"line\">        <span class=\"string\">'data'</span>,</span><br><span class=\"line\">        (trunk) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.stdout(pinstance.pid, trunk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* send stdout to ui-processor */</span></span><br><span class=\"line\">  stdout(pid, data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.processWindow) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.callSymbol) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callSymbol = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.processWindow.webContents.send(<span class=\"string\">'process:stdout'</span>, <span class=\"keyword\">this</span>.logs);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.logs = [];</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.callSymbol = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">this</span>.time);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logs.push(&#123; <span class=\"attr\">pid</span>: pid, <span class=\"attr\">data</span>: <span class=\"built_in\">String</span>.prototype.trim.call(data) &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>2.使用ProcessManager向UI渲染窗口发送进程负载信息</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ProcessManager.class.js --- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置外部库采集并发送到UI进程 */</span></span><br><span class=\"line\">  refreshList = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pidList.length) &#123;</span><br><span class=\"line\">        pidusage(<span class=\"keyword\">this</span>.pidList, (err, records) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`ProcessManager: refreshList -&gt; <span class=\"subst\">$&#123;err&#125;</span>`</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processWindow.webContents.send(<span class=\"string\">'process:update-list'</span>, &#123; records, <span class=\"attr\">types</span>: <span class=\"keyword\">this</span>.typeMap &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve([]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>3.UI窗口拿到数据后处理并临时存储</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcRenderer, remote &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcRenderer.on(<span class=\"string\">'process:update-list'</span>, (event, &#123; records, types &#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'update:list'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; history &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pid <span class=\"keyword\">in</span> records) &#123;</span><br><span class=\"line\">      history[pid] = history[pid] || &#123; <span class=\"attr\">memory</span>: [], <span class=\"attr\">cpu</span>: [] &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!records[pid]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      history[pid].memory.push(records[pid].memory);</span><br><span class=\"line\">      history[pid].cpu.push(records[pid].cpu);</span><br><span class=\"line\">      <span class=\"comment\">// 存储最近的60条进程负载数据</span></span><br><span class=\"line\">      history[pid].memory = history[pid].memory.slice(<span class=\"number\">-60</span>); </span><br><span class=\"line\">      history[pid].cpu = history[pid].cpu.slice(<span class=\"number\">-60</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      processes: records,</span><br><span class=\"line\">      history,</span><br><span class=\"line\">      types</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcRenderer.on(<span class=\"string\">'process:stdout'</span>, (event, dataArray) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'process:stdout'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; logs &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    dataArray.forEach(<span class=\"function\">(<span class=\"params\">&#123; pid, data &#125;</span>)=&gt;</span> &#123;</span><br><span class=\"line\">      logs[pid] = logs[pid] || [];</span><br><span class=\"line\">      logs[pid].unshift(<span class=\"string\">`[<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()&#125;</span>]: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 存储最近的1000个日志输出</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(logs).forEach(<span class=\"function\"><span class=\"params\">pid</span> =&gt;</span> &#123;</span><br><span class=\"line\">      logs[pid].slice(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; logs &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure><h4 id=\"怎样在UI窗口中绘制折线图\">怎样在UI窗口中绘制折线图</h4><p>1.注意使用React.PureComponent，会自动在属性更新进行浅比较，以减少不必要的渲染</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* *************** ProcessTrends *************** */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessTrends</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; visible, memory, cpu &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (visible) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.uiDrawer.draw();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataDrawer.draw(cpu, memory);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=&#123;<span class=\"string\">`process-trends-container <span class=\"subst\">$&#123;!visible ? <span class=\"string\">'hidden'</span> : <span class=\"string\">'progressive-show'</span> &#125;</span>`</span>&#125;&gt;</span><br><span class=\"line\">        &lt;header&gt;</span><br><span class=\"line\">          &lt;span className=<span class=\"string\">\"text-button small\"</span> onClick=&#123;<span class=\"keyword\">this</span>.handleCloseTrends&#125;&gt;X&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>header&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"trends-drawer\"</span>&gt;</span><br><span class=\"line\">          &lt;canvas</span><br><span class=\"line\">            width=&#123;<span class=\"built_in\">document</span>.body.clientWidth * <span class=\"built_in\">window</span>.devicePixelRatio&#125;</span><br><span class=\"line\">            height=&#123;<span class=\"built_in\">document</span>.body.clientHeight * <span class=\"built_in\">window</span>.devicePixelRatio&#125;</span><br><span class=\"line\">            id=<span class=\"string\">\"trendsUI\"</span></span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">          &lt;canvas</span><br><span class=\"line\">            width=&#123;<span class=\"built_in\">document</span>.body.clientWidth * <span class=\"built_in\">window</span>.devicePixelRatio&#125;</span><br><span class=\"line\">            height=&#123;<span class=\"built_in\">document</span>.body.clientHeight * <span class=\"built_in\">window</span>.devicePixelRatio&#125;</span><br><span class=\"line\">            id=<span class=\"string\">\"trendsData\"</span></span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>2.使用两个Canvas画布分别绘制坐标轴和折线线段</p><blockquote><p>设置两个画布相互重叠以尽可能保证静态的坐标轴不会被重复绘制，我们需要在组件挂载后初始化一个坐标轴绘制对象<code>uiDrawer</code>和一个数据折线绘制对象<code>dataDrawer</code></p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.uiDrawer = <span class=\"keyword\">new</span> UI_Drawer(<span class=\"string\">'#trendsUI'</span>, &#123;</span><br><span class=\"line\">      xPoints: <span class=\"number\">60</span>,</span><br><span class=\"line\">      yPoints: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataDrawer = <span class=\"keyword\">new</span> Data_Drawer(<span class=\"string\">'#trendsData'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeDebouncer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p>以下是Canvas相关的基础绘制命令：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.canvas = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx =  <span class=\"keyword\">this</span>.canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.strokeStyle = lineColor; <span class=\"comment\">// 设置线段颜色</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.beginPath(); <span class=\"comment\">// 创建一个新的路径</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.moveTo(x, y); <span class=\"comment\">// 移动到初始坐标点(不进行绘制)</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.lineTo(<span class=\"built_in\">Math</span>.floor(x), <span class=\"built_in\">Math</span>.floor(y)); <span class=\"comment\">// 描述从上一个坐标点到(x, y)的一条直线</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.stroke(); <span class=\"comment\">// 开始绘制</span></span><br></pre></td></tr></table></figure><p>绘制类的源代码可以查看这里<a href=\"https://github.com/nojsja/electron-re/blob/master/src/ui/app/views/processManager/ProcessDrawer.js\" target=\"_blank\" rel=\"noopener\">Drawer</a>，大概原理是：设置Canvas画布宽度width和高度height铺满窗口，设定横纵坐标轴到边缘的padding值为30，Canvas坐标原点[0,0]为绘制区域左上角顶点。这里以绘制折线图纵轴坐标为例，纵轴表示CPU占用0%-100%或内存占用0-1GB，我们可以将纵轴划分为100个基础单位，但是纵轴坐标点不用为100个，可以设置为10个方便查看，所以每个坐标点就可以表示为<code>[0, (height-padding) - ((height-(2*padding)) / index) * 100 ]</code>，index依次等于0,10,20,30…90，其中<code>(height-padding)</code>为最下面那个坐标点位置，<code>(height-(2*padding))</code>为整个纵轴的长度。</p><h3 id=\"VI-存在的已知问题\">VI. 存在的已知问题</h3><hr><ol><li><p>生产环境下ChildProcessPool未按预期工作<br>Electron生产环境下，如果app被安装到系统目录，那么ChildProcessPool不能按照预期工作，解决办法有：将app安装到用户目录或者把进程池用于创建子进程的脚本(通过<code>path</code>参数指定)单独放到Electron用户数据目录下(Ubuntu20.04上是<code>~/.config/[appname]</code>)。</p></li><li><p>UI界面未监听主进程Console数据<br>主进程暂未支持此功能，正在寻找解决方案。</p></li></ol><h3 id=\"VII-Next-To-Do\">VII. Next To Do</h3><hr><ul class=\"contains-task-list\"><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 让Service支持代码更新后自动重启</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 添加ChildProcessPool子进程调度逻辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 优化ChildProcessPool多进程console输出</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 添加可视化进程管理界面</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 增强ChildProcessPool进程池功能</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 增强ProcessHost事务中心功能</label></li></ul><h3 id=\"VIII-几个实际使用示例\">VIII. 几个实际使用示例</h3><hr><ol><li><p><a href=\"https://github.com/nojsja/electronux\" target=\"_blank\" rel=\"noopener\">electronux</a> - 我的一个Electron项目，使用了 <code>BrowserService/MessageChannel</code>，并且附带了<code>ChildProcessPool/ProcessHost</code>使用demo。</p></li><li><p><a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">file-slice-upload</a> - 一个关于多文件分片并行上传的demo，使用了 <code>ChildProcessPool</code> and <code>ProcessHost</code>，基于 Electron@9.3.5开发。</p></li><li><p>也查看 <code>test</code> 目录下的测试样例文件，包含了完整的细节使用。</p></li></ol>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>文中实现的部分工具方法正处于早期/测试阶段，仍在持续优化中，仅供参考…</p></blockquote><blockquote><p>在Ubuntu20.04上进行开发/测试，可直接用于Electron项目，测试版本：Electron@8.2.0 / 9.3.5</p></blockquote><h3 id=\"Contents\">Contents</h3><hr><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── Contents (you are here!)</span><br><span class=\"line\">│</span><br><span class=\"line\">├── I. 前言</span><br><span class=\"line\">├── II. 架构图</span><br><span class=\"line\">│</span><br><span class=\"line\">├── III.electron-re 可以用来做什么？</span><br><span class=\"line\">│   ├── 1) 用于Electron应用</span><br><span class=\"line\">│   └── 2) 用于Electron/Nodejs应用</span><br><span class=\"line\">│</span><br><span class=\"line\">├── IV.UI功能介绍</span><br><span class=\"line\">│   ├── 主界面</span><br><span class=\"line\">│   ├── 功能1：Kill进程</span><br><span class=\"line\">│   ├── 功能2：一键开启DevTools</span><br><span class=\"line\">│   ├── 功能3：查看进程日志</span><br><span class=\"line\">│   └── 功能4：查看进程CPU/Memory占用趋势</span><br><span class=\"line\">│</span><br><span class=\"line\">├── V. 使用&amp;原理</span><br><span class=\"line\">│   ├── 引入</span><br><span class=\"line\">│   ├── 怎样捕获进程资源占用？</span><br><span class=\"line\">│   ├── 怎样在主进程和UI之间共享数据？</span><br><span class=\"line\">│   └── 怎样在UI窗口中绘制折线图？</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VI. 存在的已知问题</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VII. Next To Do</span><br><span class=\"line\">│</span><br><span class=\"line\">├── VIII. 几个实际使用示例</span><br><span class=\"line\">│   ├── 1) Service/MessageChannel示例</span><br><span class=\"line\">│   ├── 2) ChildProcessPool/ProcessHost示例</span><br><span class=\"line\">│   └── 3) <span class=\"built_in\">test</span>测试目录示例</span><br></pre></td></tr></table></figure><h3 id=\"I-前言\">I. 前言</h3><hr><p>最近在做一个多文件分片并行上传模块的时候(基于Electron和React)，遇到了一些性能问题，主要体现在：前端同时添加大量文件(1000-10000)并行上传时(文件同时上传数默认为6)，在不做懒加载优化的情况下，引起了整个应用窗口的卡顿。所以针对Electron/Nodejs多进程这方面做了一些学习，尝试使用多进程架构对上传流程进行优化。</p><p>同时也编写了一个方便进行Electron/Node多进程管理和调用的工具<a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">electron-re</a>，已经发布为npm组件，可以直接安装：</p><p><a href=\"https://github.com/nojsja/electron-re\" target=\"_blank\" rel=\"noopener\">&gt;&gt; github地址</a></p><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$: npm install electron-re --save</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">$: yarn add electron-re</span><br></pre></td></tr></table></figure><p>前文<a href=\"https://nojsja.gitee.io/blogs/2020/12/08/Electron-Node%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/\" target=\"_blank\" rel=\"noopener\">《Electron/Node多进程工具开发日记》</a>描述了<code>electron-re</code>的开发背景、针对的问题场景以及详细的使用方法，这篇文章不会对它的基础使用做过多说明，主要介绍新特性<code>多进程管理UI</code>的开发和使用相关。UI界面基于<code>electron-re</code>已有的<code>BrowserService/MessageChannel</code>和<code>ChildProcessPool/ProcessHost</code>基础架构驱动，使用React17 / Babel7开发，主界面：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/process-manager.main.png\" alt=\"process-manager.main.png\"></p><h3 id=\"II-electron-re架构图\">II. electron-re架构图</h3><hr><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/electron-re.png\" alt=\"archtecture\"></p><h3 id=\"III-electron-re-可以用来做什么？\">III. electron-re 可以用来做什么？</h3><hr><h4 id=\"1-用于Electron应用\">1. 用于Electron应用</h4><ul><li><code>BrowserService</code></li><li><code>MessageChannel</code></li></ul><p>在Electron的一些“最佳实践”中，建议将占用cpu的代码放到渲染过程中而不是直接放在主过程中，这里先看下chromium的架构图：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/chromium.jpg\" alt=\"archtecture\"></p><p>每个渲染进程都有一个全局对象RenderProcess，用来管理与父浏览器进程的通信，同时维护着一份全局状态。浏览器进程为每个渲染进程维护一个RenderProcessHost对象，用来管理浏览器状态和与渲染进程的通信。浏览器进程和渲染进程使用Chromium的IPC系统进行通信。在chromium中，页面渲染时，UI进程需要和main process不断的进行IPC同步，若此时main process忙，则UIprocess就会在IPC时阻塞。所以如果主进程持续进行消耗CPU时间的任务或阻塞同步IO的任务的话，就会在一定程度上阻塞，从而影响主进程和各个渲染进程之间的IPC通信，IPC通信有延迟或是受阻，渲染进程窗口就会卡顿掉帧，严重的话甚至会卡住不动。</p><p>因此<code>electron-re</code>在Electron已有的<code>Main Process</code>主进程和<code>Renderer Process</code>渲染进程逻辑的基础上独立出一个单独的<code>Service</code>概念。<code>Service</code>即不需要显示界面的后台进程，它不参与UI交互，单独为主进程或其它渲染进程提供服务，它的底层实现为一个允许<code>node注入</code>和<code>remote调用</code>的渲染窗口进程。</p><p>这样就可以将代码中耗费cpu的操作(比如文件上传中维护一个数千个上传任务的队列)编写成一个单独的js文件，然后使用<code>BrowserService</code>构造函数以这个js文件的地址<code>path</code>为参数构造一个<code>Service</code>实例，从而将他们从主进程中分离。如果你说那这部分耗费cpu的操作直接放到渲染窗口进程可以嘛？这其实取决于项目自身的架构设计，以及对进程之间数据传输性能损耗和传输时间等各方面的权衡，创建一个<code>Service</code>的简单示例：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserService &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> myServcie = <span class=\"keyword\">new</span> BrowserService(<span class=\"string\">'app'</span>, path.join(__dirname, <span class=\"string\">'path/to/app.service.js'</span>));</span><br></pre></td></tr></table></figure><p>如果使用了<code>BrowserService</code>的话，要想在主进程、渲染进程、service进程之间任意发送消息就要使用<code>electron-re</code>提供的<code>MessageChannel</code>通信工具，它的接口设计跟Electron内建的<code>ipc</code>基本一致，也是基于<code>ipc</code>通信原理来实现的，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* ---- main.js ---- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; BrowserService &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 主进程中向一个service-app发送消息</span></span><br><span class=\"line\">MessageChannel.send(<span class=\"string\">'app'</span>, <span class=\"string\">'channel1'</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">'test1'</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id=\"2-用于Electron-Nodejs应用\">2. 用于Electron/Nodejs应用</h4><ul><li><code>ChildProcessPool</code></li><li><code>ProcessHost</code></li></ul><p>此外，如果要创建一些不依赖于Electron运行时的子进程（相关参考nodejs <code>child_process</code>），可以使用<code>electron-re</code>提供的专门为nodejs运行时编写的进程池<code>ChildProcessPool</code>类。因为创建进程本身所需的开销很大，使用进程池来重复利用已经创建了的子进程，将多进程架构带来的性能效益最大化，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; ChildProcessPool &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">global.ipcUploadProcess = <span class=\"keyword\">new</span> ChildProcessPool(&#123;</span><br><span class=\"line\">  path: path.join(app.getAppPath(), <span class=\"string\">'app/services/child/upload.js'</span>), <span class=\"attr\">max</span>: <span class=\"number\">6</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>一般情况下，在我们的子进程执行文件中(创建子进程时path参数指定的脚本)，如要想在主进程和子进程之间同步数据，可以使用<code>process.send('channel', params)</code>和<code>process.on('channel', function)</code>来实现(前提是进程以以<code>fork</code>方式创建或者手动开启了<code>ipc</code>通信)。但是这样在处理业务逻辑的同时也强迫我们去关注进程之间的通信，你需要知道子进程什么时候能处理完毕，然后再使用<code>process.send</code>再将数据返回主进程，使用方式繁琐。</p><p><code>electron-re</code>引入了<code>ProcessHost</code>的概念，我称之为&quot;进程事务中心&quot;。实际使用时在子进程执行文件中只需要将各个任务函数通过<code>ProcessHost.registry('task-name', function)</code>注册成多个被监听的事务，然后配合进程池的<code>ChildProcessPool.send('task-name', params)</code>来触发子进程事务逻辑的调用即可，<code>ChildProcessPool.send()</code>同时会返回一个Promise实例以便获取回调数据，简单示例如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- 主进程中 --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">global.ipcUploadProcess</span><br><span class=\"line\">  .send(<span class=\"string\">'task1'</span>, params)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">rsp</span> =&gt;</span> <span class=\"built_in\">console</span>.log(rsp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --- 子进程中 --- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; ProcessHost &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br><span class=\"line\">ProcessHost</span><br><span class=\"line\">  .registry(<span class=\"string\">'task1'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">'task-value'</span> &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .registry(<span class=\"string\">'init-works'</span>, (params) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fetch(url);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure><h3 id=\"IV-UI功能介绍\">IV. UI功能介绍</h3><hr><blockquote><p>II 描述了electron-re的主要功能，基于这些功能来实现多进程监控UI面板</p></blockquote><h4 id=\"主界面\">主界面</h4><blockquote><p>UI参考<code>electron-process-manager</code>设计</p></blockquote><p>预览图：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/process-manager.main.png\" alt=\"process-manager.main.png\"></p><p>主要功能如下：</p><ol><li><p>展示Electron应用中所有开启的进程，包括主进程、普通的渲染进程、Service进程(由electron-re引入)、ChildProcessPool创建的子进程(由electron-re引入)。</p></li><li><p>进程列表中显示各个进程进程号、进程标识、父进程号、内存占用大小、CPU占用百分比等，所有进程标识分为：main(主进程)、service(服务进程)、renderer(渲染进程)、node(进程池子进程)，点击表格头可以针对对某项进行递增/递减排序。</p></li><li><p>选中某个进程后可以Kill此进程、查看进程控制台Console数据、查看1分钟内进程CPU/内存占用趋势，如果此进程是渲染进程的话还可以通过<code>DevTools</code>按钮一键打开内置调试工具。</p></li><li><p>ChildProcessPool创建的子进程暂不支持直接打开DevTools进行调试，不过由于创建子进程时添加了<code>--inspect</code>参数，可以使用chrome的<code>chrome://inspect</code>进行远程调试。</p></li></ol><h4 id=\"功能1：Kill进程\">功能1：Kill进程</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/kill.gif\" alt=\"kill.gif\"></p><h4 id=\"功能2：一键开启DevTools\">功能2：一键开启DevTools</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/devtools.gif\" alt=\"devtools.gif\"></p><h4 id=\"功能3：查看进程日志\">功能3：查看进程日志</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/console.gif\" alt=\"console.gif\"></p><h4 id=\"功能3：查看进程CPU-Memory占用趋势\">功能3：查看进程CPU/Memory占用趋势</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/trends.gif\" alt=\"trends.gif\"></p><p><img src=\"http://nojsja.gitee.io/static-resources/images/electron-re/trends2.gif\" alt=\"trends2.gif\"></p><h3 id=\"V-使用-原理\">V. 使用&amp;原理</h3><hr><h4 id=\"引入\">引入</h4><ol><li>在Electron主进程入口文件中引入：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  MessageChannel, <span class=\"comment\">// must required in main.js even if you don't use it</span></span><br><span class=\"line\">  ProcessManager</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'electron-re'</span>);</span><br></pre></td></tr></table></figure><ol start=\"2\"><li>开启进程管理窗口UI</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProcessManager.openWindow();</span><br></pre></td></tr></table></figure><h4 id=\"怎样捕获进程资源占用？\">怎样捕获进程资源占用？</h4><p>1.使用ProcessManager监听多个进程号</p><ul><li>1）在Electron窗口创建事件中将窗口进程id放入ProcessManager监听列表</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/index.js --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">app.on(<span class=\"string\">'web-contents-created'</span>, (event, webContents) =&gt; &#123;</span><br><span class=\"line\">  webContents.once(<span class=\"string\">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pid = webContents.getOSProcessId();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      exports.ProcessManager.processWindow &amp;&amp;</span><br><span class=\"line\">      exports.ProcessManager.processWindow.webContents.getOSProcessId() === pid</span><br><span class=\"line\">    ) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    exports.ProcessManager.listen(pid, <span class=\"string\">'renderer'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    webContents.once(<span class=\"string\">'closed'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      exports.ProcessManager.unlisten(<span class=\"keyword\">this</span>.pid);</span><br><span class=\"line\">    &#125;.bind(&#123; pid &#125;));</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><ul><li>2）在进程池fork子进程时将进程id放入监听列表</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ChildProcessPool.class.js --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; fork &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildProcessPool</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(&#123; path, max=<span class=\"number\">6</span>, cwd, env &#125;) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event = <span class=\"keyword\">new</span> EventEmitter();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event.on(<span class=\"string\">'fork'</span>, (pids) =&gt; &#123;</span><br><span class=\"line\">      ProcessManager.listen(pids, <span class=\"string\">'node'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event.on(<span class=\"string\">'unfork'</span>, (pids) =&gt; &#123;</span><br><span class=\"line\">      ProcessManager.unlisten(pids);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Get a process instance from the pool */</span></span><br><span class=\"line\">  getForkedFromPool(id=<span class=\"string\">\"default\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> forked;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    forked = fork(<span class=\"keyword\">this</span>.forkedPath, ...);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.event.emit(<span class=\"string\">'fork'</span>, <span class=\"keyword\">this</span>.forked.map(<span class=\"function\"><span class=\"params\">fork</span> =&gt;</span> fork.pid));</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> forked;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>3）在Service进程注册时监听进程id<br><code>BrowserService</code>进程创建时会向主进程<code>MessageChannel</code>发送<code>registry</code>请求来全局注册一个Service服务，此时将进程id放入监听列表即可：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/index.js --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">exports.MessageChannel.event.on(<span class=\"string\">'registry'</span>, (&#123;pid&#125;) =&gt; &#123;</span><br><span class=\"line\">  exports.ProcessManager.listen(pid, <span class=\"string\">'service'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\">exports.MessageChannel.event.on(<span class=\"string\">'unregistry'</span>, (&#123;pid&#125;) =&gt; &#123;</span><br><span class=\"line\">  exports.ProcessManager.unlisten(pid)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>2.使用兼容多平台的<code>pidusage</code>库每秒采集一次进程的负载数据：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ProcessManager.class.js --- */</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> pidusage = <span class=\"built_in\">require</span>(<span class=\"string\">'pidusage'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pidList = [process.pid];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.typeMap = &#123;</span><br><span class=\"line\">      [process.pid]: <span class=\"string\">'main'</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* -------------- internal -------------- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置外部库采集并发送到UI进程 */</span></span><br><span class=\"line\">  refreshList = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pidList.length) &#123;</span><br><span class=\"line\">        pidusage(<span class=\"keyword\">this</span>.pidList, (err, records) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`ProcessManager: refreshList -&gt; <span class=\"subst\">$&#123;err&#125;</span>`</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processWindow.webContents.send(<span class=\"string\">'process:update-list'</span>, &#123; records, <span class=\"attr\">types</span>: <span class=\"keyword\">this</span>.typeMap &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve([]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置定时器进行采集 */</span></span><br><span class=\"line\">  setTimer() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"string\">'started'</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.warn(<span class=\"string\">'ProcessManager: the timer is already started!'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> interval = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">      setTimeout(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.refreshList()</span><br><span class=\"line\">        interval(<span class=\"keyword\">this</span>.time)</span><br><span class=\"line\">      &#125;, <span class=\"keyword\">this</span>.time)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.status = <span class=\"string\">'started'</span>;</span><br><span class=\"line\">    interval()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure><p>3.监听进程输出来采集进程日志</p><blockquote><p>进程池创建的子进程可以通过监听<code>stdout</code>标准输出流来进行日志采集；Electron渲染窗口进程则可以通过监听<code>ipc</code>通信事件<code>console-message</code>来进行采集；</p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ProcessManager.class.js --- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* pipe to process.stdout */</span></span><br><span class=\"line\">  pipe(pinstance) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pinstance.stdout) &#123;</span><br><span class=\"line\">      pinstance.stdout.on(</span><br><span class=\"line\">        <span class=\"string\">'data'</span>,</span><br><span class=\"line\">        (trunk) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.stdout(pinstance.pid, trunk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* --- src/index.js --- */</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.on(<span class=\"string\">'web-contents-created'</span>, (event, webContents) =&gt; &#123;</span><br><span class=\"line\">    webContents.once(<span class=\"string\">'did-finish-load'</span>, () =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> pid = webContents.getOSProcessId();</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      webContents.on(<span class=\"string\">'console-message'</span>, (e, level, msg, line, sourceid) =&gt; &#123;</span><br><span class=\"line\">        exports.ProcessManager.stdout(pid, msg);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure><h4 id=\"怎样在主进程和UI之间共享数据？\">怎样在主进程和UI之间共享数据？</h4><blockquote><p>基于Electron原生<code>ipc</code>异步通信</p></blockquote><p>1.使用ProcessManager向UI渲染窗口发送日志数据</p><blockquote><p>每秒采集到的所有进程的console数据会被临时缓存到数组中，默认1秒钟向UI进程发送一次数据，然后清空临时数组。</p></blockquote><p>在这里需要注意的是ChildProcessPool中的子进程是通过Node.js的<code>child_process.fork()</code>方法创建的，此方法会衍生shell，且创建子进程时参数<code>stdio</code>会被指定为’pipe’，指明在子进程和父进程之间创建一个管道，从而让父进程中可以直接监听子进程对象上的 <code>stdout.on('data')</code>事件来拿到子进程的标准输出流。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ProcessManager.class.js --- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* pipe to process.stdout */</span></span><br><span class=\"line\">  pipe(pinstance) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pinstance.stdout) &#123;</span><br><span class=\"line\">      pinstance.stdout.on(</span><br><span class=\"line\">        <span class=\"string\">'data'</span>,</span><br><span class=\"line\">        (trunk) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.stdout(pinstance.pid, trunk);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* send stdout to ui-processor */</span></span><br><span class=\"line\">  stdout(pid, data) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.processWindow) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.callSymbol) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callSymbol = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.processWindow.webContents.send(<span class=\"string\">'process:stdout'</span>, <span class=\"keyword\">this</span>.logs);</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.logs = [];</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.callSymbol = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;, <span class=\"keyword\">this</span>.time);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logs.push(&#123; <span class=\"attr\">pid</span>: pid, <span class=\"attr\">data</span>: <span class=\"built_in\">String</span>.prototype.trim.call(data) &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>2.使用ProcessManager向UI渲染窗口发送进程负载信息</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* --- src/libs/ProcessManager.class.js --- */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessManager</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* 设置外部库采集并发送到UI进程 */</span></span><br><span class=\"line\">  refreshList = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.pidList.length) &#123;</span><br><span class=\"line\">        pidusage(<span class=\"keyword\">this</span>.pidList, (err, records) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`ProcessManager: refreshList -&gt; <span class=\"subst\">$&#123;err&#125;</span>`</span>);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.processWindow.webContents.send(<span class=\"string\">'process:update-list'</span>, &#123; records, <span class=\"attr\">types</span>: <span class=\"keyword\">this</span>.typeMap &#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        resolve([]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>3.UI窗口拿到数据后处理并临时存储</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ipcRenderer, remote &#125; <span class=\"keyword\">from</span> <span class=\"string\">'electron'</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcRenderer.on(<span class=\"string\">'process:update-list'</span>, (event, &#123; records, types &#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'update:list'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; history &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> pid <span class=\"keyword\">in</span> records) &#123;</span><br><span class=\"line\">      history[pid] = history[pid] || &#123; <span class=\"attr\">memory</span>: [], <span class=\"attr\">cpu</span>: [] &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!records[pid]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      history[pid].memory.push(records[pid].memory);</span><br><span class=\"line\">      history[pid].cpu.push(records[pid].cpu);</span><br><span class=\"line\">      <span class=\"comment\">// 存储最近的60条进程负载数据</span></span><br><span class=\"line\">      history[pid].memory = history[pid].memory.slice(<span class=\"number\">-60</span>); </span><br><span class=\"line\">      history[pid].cpu = history[pid].cpu.slice(<span class=\"number\">-60</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">      processes: records,</span><br><span class=\"line\">      history,</span><br><span class=\"line\">      types</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  ipcRenderer.on(<span class=\"string\">'process:stdout'</span>, (event, dataArray) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'process:stdout'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; logs &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    dataArray.forEach(<span class=\"function\">(<span class=\"params\">&#123; pid, data &#125;</span>)=&gt;</span> &#123;</span><br><span class=\"line\">      logs[pid] = logs[pid] || [];</span><br><span class=\"line\">      logs[pid].unshift(<span class=\"string\">`[<span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()&#125;</span>]: <span class=\"subst\">$&#123;data&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 存储最近的1000个日志输出</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(logs).forEach(<span class=\"function\"><span class=\"params\">pid</span> =&gt;</span> &#123;</span><br><span class=\"line\">      logs[pid].slice(<span class=\"number\">0</span>, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; logs &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure><h4 id=\"怎样在UI窗口中绘制折线图\">怎样在UI窗口中绘制折线图</h4><p>1.注意使用React.PureComponent，会自动在属性更新进行浅比较，以减少不必要的渲染</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* *************** ProcessTrends *************** */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProcessTrends</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; visible, memory, cpu &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (visible) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.uiDrawer.draw();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataDrawer.draw(cpu, memory);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div className=&#123;<span class=\"string\">`process-trends-container <span class=\"subst\">$&#123;!visible ? <span class=\"string\">'hidden'</span> : <span class=\"string\">'progressive-show'</span> &#125;</span>`</span>&#125;&gt;</span><br><span class=\"line\">        &lt;header&gt;</span><br><span class=\"line\">          &lt;span className=<span class=\"string\">\"text-button small\"</span> onClick=&#123;<span class=\"keyword\">this</span>.handleCloseTrends&#125;&gt;X&lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;/</span>header&gt;</span><br><span class=\"line\">        &lt;div className=<span class=\"string\">\"trends-drawer\"</span>&gt;</span><br><span class=\"line\">          &lt;canvas</span><br><span class=\"line\">            width=&#123;<span class=\"built_in\">document</span>.body.clientWidth * <span class=\"built_in\">window</span>.devicePixelRatio&#125;</span><br><span class=\"line\">            height=&#123;<span class=\"built_in\">document</span>.body.clientHeight * <span class=\"built_in\">window</span>.devicePixelRatio&#125;</span><br><span class=\"line\">            id=<span class=\"string\">\"trendsUI\"</span></span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">          &lt;canvas</span><br><span class=\"line\">            width=&#123;<span class=\"built_in\">document</span>.body.clientWidth * <span class=\"built_in\">window</span>.devicePixelRatio&#125;</span><br><span class=\"line\">            height=&#123;<span class=\"built_in\">document</span>.body.clientHeight * <span class=\"built_in\">window</span>.devicePixelRatio&#125;</span><br><span class=\"line\">            id=<span class=\"string\">\"trendsData\"</span></span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>2.使用两个Canvas画布分别绘制坐标轴和折线线段</p><blockquote><p>设置两个画布相互重叠以尽可能保证静态的坐标轴不会被重复绘制，我们需要在组件挂载后初始化一个坐标轴绘制对象<code>uiDrawer</code>和一个数据折线绘制对象<code>dataDrawer</code></p></blockquote><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.uiDrawer = <span class=\"keyword\">new</span> UI_Drawer(<span class=\"string\">'#trendsUI'</span>, &#123;</span><br><span class=\"line\">      xPoints: <span class=\"number\">60</span>,</span><br><span class=\"line\">      yPoints: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.dataDrawer = <span class=\"keyword\">new</span> Data_Drawer(<span class=\"string\">'#trendsData'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, <span class=\"keyword\">this</span>.resizeDebouncer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p>以下是Canvas相关的基础绘制命令：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.canvas = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx =  <span class=\"keyword\">this</span>.canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.strokeStyle = lineColor; <span class=\"comment\">// 设置线段颜色</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.beginPath(); <span class=\"comment\">// 创建一个新的路径</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.moveTo(x, y); <span class=\"comment\">// 移动到初始坐标点(不进行绘制)</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.lineTo(<span class=\"built_in\">Math</span>.floor(x), <span class=\"built_in\">Math</span>.floor(y)); <span class=\"comment\">// 描述从上一个坐标点到(x, y)的一条直线</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.ctx.stroke(); <span class=\"comment\">// 开始绘制</span></span><br></pre></td></tr></table></figure><p>绘制类的源代码可以查看这里<a href=\"https://github.com/nojsja/electron-re/blob/master/src/ui/app/views/processManager/ProcessDrawer.js\" target=\"_blank\" rel=\"noopener\">Drawer</a>，大概原理是：设置Canvas画布宽度width和高度height铺满窗口，设定横纵坐标轴到边缘的padding值为30，Canvas坐标原点[0,0]为绘制区域左上角顶点。这里以绘制折线图纵轴坐标为例，纵轴表示CPU占用0%-100%或内存占用0-1GB，我们可以将纵轴划分为100个基础单位，但是纵轴坐标点不用为100个，可以设置为10个方便查看，所以每个坐标点就可以表示为<code>[0, (height-padding) - ((height-(2*padding)) / index) * 100 ]</code>，index依次等于0,10,20,30…90，其中<code>(height-padding)</code>为最下面那个坐标点位置，<code>(height-(2*padding))</code>为整个纵轴的长度。</p><h3 id=\"VI-存在的已知问题\">VI. 存在的已知问题</h3><hr><ol><li><p>生产环境下ChildProcessPool未按预期工作<br>Electron生产环境下，如果app被安装到系统目录，那么ChildProcessPool不能按照预期工作，解决办法有：将app安装到用户目录或者把进程池用于创建子进程的脚本(通过<code>path</code>参数指定)单独放到Electron用户数据目录下(Ubuntu20.04上是<code>~/.config/[appname]</code>)。</p></li><li><p>UI界面未监听主进程Console数据<br>主进程暂未支持此功能，正在寻找解决方案。</p></li></ol><h3 id=\"VII-Next-To-Do\">VII. Next To Do</h3><hr><ul class=\"contains-task-list\"><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 让Service支持代码更新后自动重启</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 添加ChildProcessPool子进程调度逻辑</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 优化ChildProcessPool多进程console输出</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" checked type=\"checkbox\"> 添加可视化进程管理界面</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 增强ChildProcessPool进程池功能</label></li><li class=\"task-list-item enabled\"><label><input class=\"task-list-item-checkbox\" type=\"checkbox\"> 增强ProcessHost事务中心功能</label></li></ul><h3 id=\"VIII-几个实际使用示例\">VIII. 几个实际使用示例</h3><hr><ol><li><p><a href=\"https://github.com/nojsja/electronux\" target=\"_blank\" rel=\"noopener\">electronux</a> - 我的一个Electron项目，使用了 <code>BrowserService/MessageChannel</code>，并且附带了<code>ChildProcessPool/ProcessHost</code>使用demo。</p></li><li><p><a href=\"https://github.com/nojsja/javascript-learning/tree/master/file-slice-upload\" target=\"_blank\" rel=\"noopener\">file-slice-upload</a> - 一个关于多文件分片并行上传的demo，使用了 <code>ChildProcessPool</code> and <code>ProcessHost</code>，基于 Electron@9.3.5开发。</p></li><li><p>也查看 <code>test</code> 目录下的测试样例文件，包含了完整的细节使用。</p></li></ol>"},{"title":"理解React：Fiber架构和新旧生命周期","catalog":true,"comments":1,"indexing":true,"subtitle":"Learning react: The fiber arch and old/new lifecycle","header-img":"/blogs/img/article_header/article_header.png","top":false,"tocnum":true,"date":"2021-01-25T03:16:47.000Z","_content":"\n### ➣ React Fiber原理\n--------------------\n\n#### React架构\n\n  - 1）Virtual DOM 层，描述页面长什么样  \n  - 2）Reconciler 层，负责调用组件生命周期方法，进行Diff运算等  \n  - 3）Renderer 层，根据不同的平台，渲染出相应的页面，如 ReactDOM 和 ReactNative\n\n#### React15遗留问题\n\n![StackReconciler](http://nojsja.gitee.io/static-resources/images/react/StackReconciler.jpg)\n  - 1）浏览器的整体渲染是多线程的，包括GUI渲染线程、JS引擎线程、事件触发线程、定时触发器线程和异步http请求线程。页面绘制和JS运算是互斥的线程，两者不能同时进行。  \n  - 2）React15使用JS的函数调用栈(Stack Reconciler)递归渲染界面，因此在处理DOM元素过多的复杂页面的频繁更新时，大量同步进行的任务(树diff和页面render)会导致界面更新阻塞、事件响应延迟、动画卡顿等，因此React团队在16版本重写了React Reconciler架构。\n\n#### React16问题解决\n\n![FiberReconciler](http://nojsja.gitee.io/static-resources/images/react/FiberReconciler.jpg)\n - 1）`Fiber Reconciler`架构可以允许同步阻塞的任务拆分成多个小任务，每个任务占用一小段时间片，任务执行完成后判断有无空闲时间，有则继续执行下一个任务，否则将控制权交由浏览器以让浏览器去处理更高优先级的任务，等下次拿到时间片后，其它子任务继续执行。整个流程类似CPU调度逻辑，底层是使用了浏览器API`requestIdleCallback`。  \n- 2）为了实现整个Diff和Render的流程可中断和恢复，单纯的VirtualDom Tree不再满足需求，React16引入了采用单链表结构的Fiber树，如下图所示。\n- 3）FiberReconciler架构将更新流程划分成了两个阶段：1.diff(由多个diff任务组成，任务时间片消耗完后被可被中断，中断后由requestIdleCallback再次唤醒) => 2.commit(diff完毕后拿到fiber tree更新结果触发DOM渲染，不可被中断)。左边灰色部分的树即为一颗fiber树，右边的workInProgress为中间态，它是在diff过程中自顶向下构建的树形结构，可用于断点恢复，所有工作单元都更新完成之后，生成的workInProgress树会成为新的fiber tree。\n- 4）fiber tree中每个节点即一个工作单元，跟之前的VirtualDom树类似，表示一个虚拟DOM节点。workInProgress tree的每个fiber node都保存着diff过程中产生的effect list，它用来存放diff结果，并且底层的树节点会依次向上层merge effect list，以收集所有diff结果。注意的是如果某些节点并未更新，workInProgress tree会直接复用原fiber tree的节点(链表操作)，而有数据更新的节点会被打上tag标签。\n\n```js\n<FiberNode> : {\n    stateNode,    // 节点实例\n    child,        // 子节点\n    sibling,      // 兄弟节点\n    return,       // 父节点\n}\n```\n\n![FiberTree](http://nojsja.gitee.io/static-resources/images/react/FiberTree.png)\n\n### ➣ React新旧生命周期\n--------------------\n\n#### React16.3之前的生命周期\n\n![](http://nojsja.gitee.io/static-resources/images/react/react-lifecycle-old.png)\n\n1. componentWillMount()  \n此生命周期函数会在在组件挂载之前被调用，整个生命周期中只被触发一次。开发者通常用来进行一些数据的预请求操作，以减少请求发起时间，建议的替代方案是考虑放入constructor构造函数中，或者componentDidMount后；另一种情况是在在使用了外部状态管理库时，如Mobx，可以用于重置Mobx Store中的的已保存数据，替代方案是使用生命周期componentWilUnmount在组件卸载时自动执行数据清理。\n\n2. componentDidMount()  \n此生命周期函数在组件被挂载之后被调用，整个生命周期中只触发一次。开发者同样可以用来进行一些数据请求的操作；除此之外也可用于添加事件订阅(需要在componentWillUnmount中取消事件订阅)；因为函数触发时dom元素已经渲染完毕，第三种使用情况是处理一些界面更新的副作用，比如使用默认数据来初始化一个echarts组件，然后在componentDidUpdate后进行echarts组件的数据更新。\n\n3. componentWillReceiveProps(nextProps, nexState)  \n此生命周期发生在组件挂载之后的组件更新阶段。最常见于在一个依赖于prop属性进行组件内部state更新的非完全受控组件中，非完全受控组件即组件内部维护state更新，同时又在某个特殊条件下会采用外部传入的props来更新内部state，注意不要直接将props完全复制到state，否则应该使用完全受控组件`Function Component`，一个例子如下：\n```js\nclass EmailInput extends Component {\n  state = { email: this.props.email };\n\n  render() {\n    return <input onChange={this.handleChange} value={this.state.email} />;\n  }\n\n  handleChange = e => his.setState({ email: e.target.value });\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.userID !== this.props.userID) {\n      this.setState({ email: nextProps.email });\n    }\n  }\n}\n```\n\n4. shouldComponentUpdate(nextProps)  \n此生命周期发生在组件挂载之后的组件更新阶段。  \n值得注意的是子组件更新不一定是由于props或state改变引起的，也可能是父组件的其它部分更改导致父组件重渲染而使得当前子组件在props/state未改变的情况下重新渲染一次。  \n函数被调用时会被传入即将更新的`nextProps`和`nextState`对象，开发者可以通过对比前后两个props对象上与界面渲染相关的属性是否改变，再决定是否允许这次更新(return `true`表示允许执行更新，否则忽略更新，默认为`true`)。常搭配对象深比较函数用于减少界面无用渲染次数，优化性能。在一些只需要简单浅比较props变化的场景下，并且相同的state和props会渲染出相同的内容时，建议使用`React.PureComponnet`替代，在props更新时React会自动帮你进行一次浅比较，以减少不必要渲染。\n```js\nclass EmailInput extends Component {\n  state = { email: this.props.email };\n\n  render() {\n    return <input onChange={this.handleChange} value={this.state.email} />;\n  }\n\n  handleChange = e => his.setState({ email: e.target.value });\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      nextProps.userID === this.props.userID &&\n      nextState.email == this.state.email\n    ) return false;\n  }\n}\n```\n\n5. componenetWillUpdate(newProps, newState)  \n此生命周期发生在组件挂载之后的更新阶段。当组件收到新的props或state，并且`shouldComponentUpdate`返回允许更新时，会在渲染之前调此方法，不可以在此生命周期执行`setState`。在此生命周期中开发者可以在界面实际渲染更新之前拿到最新的`nextProps`和`nextState`，从而执行一些副作用：比如触发一个事件、根据最新的props缓存一些计算数据到组件内、平滑界面元素动画等：\n```js\n // 需要搭配css属性transition使用\n componentWillUpdate : function(newProps,newState){\n    if(!newState.show)\n      $(ReactDOM.findDOMNode(this.refs.elem)).css({'opacity':'1'});\n    else\n      $(ReactDOM.findDOMNode(this.refs.elem)).css({'opacity':'0'});;\n  },\n  componentDidUpdate : function(oldProps,oldState){\n    if(this.state.show)\n      $(ReactDOM.findDOMNode(this.refs.elem)).css({'opacity':'1'});\n    else\n      $(ReactDOM.findDOMNode(this.refs.elem)).css({'opacity':'0'});;\n  }\n```\n\n6. componenetDidUpdate(prevProps, prevState)  \n此生命周期发生在组件挂载之后的更新阶段，组件初次挂载不会触发。当组件的props和state改变引起界面渲染更新后，此函数会被调用，不可以在此生命周期执行`setState`。我们使用它用来执行一些副作用：比如条件式触发必要的网络请求来更新本地数据、使用render后的最新数据来调用一些外部库的执行(例子：定时器请求接口数据动态绘制echarts折线图)：\n```js\n  ...\n  componentDidMount() {\n    this.echartsElement = echarts.init(this.refs.echart);\n    this.echartsElement.setOption(this.props.defaultData);\n    ...\n  }\n  componentDidUpdate() {\n    const { treeData } = this.props;\n    const optionData = this.echartsElement.getOption();\n    optionData.series[0].data = [treeData];\n    this.echartsElement.setOption(optionData, true);\n  }\n```\n\n\n7. componentWillUnmount()  \n此生命周期发生在组件卸载之前，组件生命周期中只会触发一次。开发者可以在此函数中执行一些数据清理重置、取消页面组件的事件订阅等。\n\n#### React16.3之后的生命周期\n![](http://nojsja.gitee.io/static-resources/images/react/react-lifecycle.png)\n\nReact16.3之后React的`Reconciler`架构被重写(Reconciler用于处理生命周期钩子函数和DOM DIFF)，之前版本采用函数调用栈递归同步渲染机制即Stack Reconciler，dom的diff阶段不能被打断，所以不利于动画执行和事件响应。React团队使用Fiber Reconciler架构之后，diff阶段根据虚拟DOM节点拆分成包含多个工作任务单元(FiberNode)的Fiber树(以链表实现)，实现了Fiber任务单元之间的任意切换和任务之间的打断及恢复等等。Fiber架构下的异步渲染导致了`componentWillMount`、`componentWillReceiveProps`、`componentWillUpdate`三个生命周期在实际渲染之前可能会被调用多次，产生不可预料的调用结果，因此这三个不安全生命周期函数不建议被使用。取而代之的是使用全新的两个生命周期函数：`getDerivedStateFromProps`和`getSnapshotBeforeUpdate`。\n\n1. __getDerivedStateFromProps(nextProps, currentState)__  \n- 1）定义  \n此生命周期发生在组件初始化挂载和组件更新阶段，开发者可以用它来替代之前的`componentWillReceiveProps`生命周期，可用于根据props变化来动态设置组件内部state。  \n函数为static静态函数，因此我们无法使用`this`直接访问组件实例，也无法使用`this.setState`直接对state进行更改，以此可以看出React团队想通过React框架的API式约束来尽量减少开发者的API滥用。函数调用时会被传入即将更新的props和当前组件的state数据作为参数，我们可以通过对比处理props然后返回一个对象来触发的组件state更新，如果返回null则不更新任何内容。  \n- 2）滥用场景一：直接复制props到state上面  \n这会导致父层级重新渲染时，SimpleInput组件的state都会被重置为父组件重新传入的props，不管props是否发生了改变。如果你说使用`shouldComponentUpdate`搭配着避免这种情况可以吗？代码层面上可以，不过可能导致后期`shouldComponentUpdate`函数的数据来源混乱，任何一个prop的改变都会导致重新渲染和不正确的状态重置，维护一个可靠的`shouldComponentUpdate`会更难。\n```js\nclass SimpleInput extends Component {\n  state = { attr: ''  };\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n\n  static getDerivedStateFromProps(nextProps, currentState) {\n    // 这会覆盖所有组件内的state更新！\n    return { attr: nextProps.attr };\n  }\n}\n```\n\n- 3）使用场景： 在props变化后选择性修改state  \n```js\nclass SimpleInput extends Component {\n  state = { attr: ''  };\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n\n  static getDerivedStateFromProps(nextProps, currentState) {\n    if (nextProps.attr !== currentState.attr) return { attr: nextProps.attr };\n    return null;\n  }\n}\n```\n可能导致的bug：在需要重置SimpleInput组件的情况下，由于`props.attr`未改变，导致组件无法正确重置状态，表现就是input输入框组件的值还是上次遗留的输入。\n\n- 4）优化的使用场景一：使用完全可控的组件  \n完全可控的组件即没有内部状态的功能组件，其状态的改变完全受父级props控制，这种方式需要将原本位于组件内的state和改变state的逻辑方法抽离到父级。适用于一些简单的场景，不过如果父级存在太多的子级状态管理逻辑也会使逻辑冗余复杂化。\n```js\nfunction SimpleInput(props) {\n  return <input onChange={props.onChange} value={props.attr} />;\n}\n```\n- 5）优化的使用场景二：使用有key值的非可控的组件  \n如果我们想让组件拥有自己的状态管理逻辑，但是在适当的条件下我们又可以控制组件以新的默认值重新初始化，这里有几种方法参考：\n```js\n/* \n  1. 设置一个唯一值传入作为组件重新初始化的标志\n     通过对比属性手动让组件重新初始化\n*/\nclass SimpleInput extends Component {\n  state = { attr: this.props.attr, id=\"\"  }; // 初始化默认值\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n\n  static getDerivedStateFromProps(nextProps, currentState) {\n    if (nextProps.id !== currentState.id)\n      return { attr: nextProps.attr, id: nextProps.id };\n    return null;\n  }\n}\n\n/*\n  2. 设置一个唯一值作为组件的key值\n     key值改变后组件会以默认值重新初始化\n  */\nclass SimpleInput extends Component {\n  state = { attr: this.props.attr  }; // 初始化默认值\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n}\n\n<SimpleInput\n  attr={this.props.attr}\n  key={this.props.id}\n/>\n\n/*\n  3. 提供一个外部调用函数以供父级直接调用以重置组件状态\n     父级通过refs来访问组件实例，拿到组件的内部方法进行调用\n  */\nclass SimpleInput extends Component {\n  state = { attr: this.props.attr  }; // 初始化默认值\n\n  resetState = (value) => {\n    this.setState({ attr: value });\n  }\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n}\n\n<SimpleInput\n  attr={this.props.attr}\n  ref={this.simpleInput}\n/>\n\n\n```\n\n\n2. componentDidMount()  \n...\n\n3. shouldComponentUpdate(nextProps, nexState)  \n...\n\n4. __getSnapshotBeforeUpdate(prevProps, prevState)__  \n此生命周期发生在组件初始化挂载和组件更新阶段，界面实际render之前。开发者可以拿到组件更新前的`prevProps`和`prevState`，同时也能获取到dom渲染之前的状态(比如元素宽高、滚动条长度和位置等等)。此函数的返回值会被作为`componentWillUpdate`周期函数的第三个参数传入，通过搭配`componentDidUpdate`可以完全替代之前`componentWillUpdate`部分的逻辑，见以下示例。  \n```js\nclass ScrollingList extends Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // 判断是否在list中添加新的items \n    // 捕获滚动​​位置以便我们稍后调整滚动位置。\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // 调整滚动位置使得这些新items不会将旧的items推出视图\n    // snapshot是getSnapshotBeforeUpdate的返回值）\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...list items... */}</div>\n    );\n  }\n}\n```\n\n5. __componenetDidUpdate(prevProps, prevState, shot)__  \n此生命周期新增特性：`getSnapshotBeforeUpdate`的返回值作为此函数执行时传入的第三个参数。\n\n6. componenetWillUnmount  \n...\n\n","source":"_posts/2021-01-25-理解React：Fiber架构和新旧生命周期.md","raw":"---\ntitle: 理解React：Fiber架构和新旧生命周期\ncatalog: true\ncomments: true\nindexing: true\nsubtitle: \"Learning react: The fiber arch and old/new lifecycle\"\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntop: false\ntocnum: true\ndate: 2021-01-25 11:16:47\ntags:\n- react\ncategories:\n- React\n---\n\n### ➣ React Fiber原理\n--------------------\n\n#### React架构\n\n  - 1）Virtual DOM 层，描述页面长什么样  \n  - 2）Reconciler 层，负责调用组件生命周期方法，进行Diff运算等  \n  - 3）Renderer 层，根据不同的平台，渲染出相应的页面，如 ReactDOM 和 ReactNative\n\n#### React15遗留问题\n\n![StackReconciler](http://nojsja.gitee.io/static-resources/images/react/StackReconciler.jpg)\n  - 1）浏览器的整体渲染是多线程的，包括GUI渲染线程、JS引擎线程、事件触发线程、定时触发器线程和异步http请求线程。页面绘制和JS运算是互斥的线程，两者不能同时进行。  \n  - 2）React15使用JS的函数调用栈(Stack Reconciler)递归渲染界面，因此在处理DOM元素过多的复杂页面的频繁更新时，大量同步进行的任务(树diff和页面render)会导致界面更新阻塞、事件响应延迟、动画卡顿等，因此React团队在16版本重写了React Reconciler架构。\n\n#### React16问题解决\n\n![FiberReconciler](http://nojsja.gitee.io/static-resources/images/react/FiberReconciler.jpg)\n - 1）`Fiber Reconciler`架构可以允许同步阻塞的任务拆分成多个小任务，每个任务占用一小段时间片，任务执行完成后判断有无空闲时间，有则继续执行下一个任务，否则将控制权交由浏览器以让浏览器去处理更高优先级的任务，等下次拿到时间片后，其它子任务继续执行。整个流程类似CPU调度逻辑，底层是使用了浏览器API`requestIdleCallback`。  \n- 2）为了实现整个Diff和Render的流程可中断和恢复，单纯的VirtualDom Tree不再满足需求，React16引入了采用单链表结构的Fiber树，如下图所示。\n- 3）FiberReconciler架构将更新流程划分成了两个阶段：1.diff(由多个diff任务组成，任务时间片消耗完后被可被中断，中断后由requestIdleCallback再次唤醒) => 2.commit(diff完毕后拿到fiber tree更新结果触发DOM渲染，不可被中断)。左边灰色部分的树即为一颗fiber树，右边的workInProgress为中间态，它是在diff过程中自顶向下构建的树形结构，可用于断点恢复，所有工作单元都更新完成之后，生成的workInProgress树会成为新的fiber tree。\n- 4）fiber tree中每个节点即一个工作单元，跟之前的VirtualDom树类似，表示一个虚拟DOM节点。workInProgress tree的每个fiber node都保存着diff过程中产生的effect list，它用来存放diff结果，并且底层的树节点会依次向上层merge effect list，以收集所有diff结果。注意的是如果某些节点并未更新，workInProgress tree会直接复用原fiber tree的节点(链表操作)，而有数据更新的节点会被打上tag标签。\n\n```js\n<FiberNode> : {\n    stateNode,    // 节点实例\n    child,        // 子节点\n    sibling,      // 兄弟节点\n    return,       // 父节点\n}\n```\n\n![FiberTree](http://nojsja.gitee.io/static-resources/images/react/FiberTree.png)\n\n### ➣ React新旧生命周期\n--------------------\n\n#### React16.3之前的生命周期\n\n![](http://nojsja.gitee.io/static-resources/images/react/react-lifecycle-old.png)\n\n1. componentWillMount()  \n此生命周期函数会在在组件挂载之前被调用，整个生命周期中只被触发一次。开发者通常用来进行一些数据的预请求操作，以减少请求发起时间，建议的替代方案是考虑放入constructor构造函数中，或者componentDidMount后；另一种情况是在在使用了外部状态管理库时，如Mobx，可以用于重置Mobx Store中的的已保存数据，替代方案是使用生命周期componentWilUnmount在组件卸载时自动执行数据清理。\n\n2. componentDidMount()  \n此生命周期函数在组件被挂载之后被调用，整个生命周期中只触发一次。开发者同样可以用来进行一些数据请求的操作；除此之外也可用于添加事件订阅(需要在componentWillUnmount中取消事件订阅)；因为函数触发时dom元素已经渲染完毕，第三种使用情况是处理一些界面更新的副作用，比如使用默认数据来初始化一个echarts组件，然后在componentDidUpdate后进行echarts组件的数据更新。\n\n3. componentWillReceiveProps(nextProps, nexState)  \n此生命周期发生在组件挂载之后的组件更新阶段。最常见于在一个依赖于prop属性进行组件内部state更新的非完全受控组件中，非完全受控组件即组件内部维护state更新，同时又在某个特殊条件下会采用外部传入的props来更新内部state，注意不要直接将props完全复制到state，否则应该使用完全受控组件`Function Component`，一个例子如下：\n```js\nclass EmailInput extends Component {\n  state = { email: this.props.email };\n\n  render() {\n    return <input onChange={this.handleChange} value={this.state.email} />;\n  }\n\n  handleChange = e => his.setState({ email: e.target.value });\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.userID !== this.props.userID) {\n      this.setState({ email: nextProps.email });\n    }\n  }\n}\n```\n\n4. shouldComponentUpdate(nextProps)  \n此生命周期发生在组件挂载之后的组件更新阶段。  \n值得注意的是子组件更新不一定是由于props或state改变引起的，也可能是父组件的其它部分更改导致父组件重渲染而使得当前子组件在props/state未改变的情况下重新渲染一次。  \n函数被调用时会被传入即将更新的`nextProps`和`nextState`对象，开发者可以通过对比前后两个props对象上与界面渲染相关的属性是否改变，再决定是否允许这次更新(return `true`表示允许执行更新，否则忽略更新，默认为`true`)。常搭配对象深比较函数用于减少界面无用渲染次数，优化性能。在一些只需要简单浅比较props变化的场景下，并且相同的state和props会渲染出相同的内容时，建议使用`React.PureComponnet`替代，在props更新时React会自动帮你进行一次浅比较，以减少不必要渲染。\n```js\nclass EmailInput extends Component {\n  state = { email: this.props.email };\n\n  render() {\n    return <input onChange={this.handleChange} value={this.state.email} />;\n  }\n\n  handleChange = e => his.setState({ email: e.target.value });\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      nextProps.userID === this.props.userID &&\n      nextState.email == this.state.email\n    ) return false;\n  }\n}\n```\n\n5. componenetWillUpdate(newProps, newState)  \n此生命周期发生在组件挂载之后的更新阶段。当组件收到新的props或state，并且`shouldComponentUpdate`返回允许更新时，会在渲染之前调此方法，不可以在此生命周期执行`setState`。在此生命周期中开发者可以在界面实际渲染更新之前拿到最新的`nextProps`和`nextState`，从而执行一些副作用：比如触发一个事件、根据最新的props缓存一些计算数据到组件内、平滑界面元素动画等：\n```js\n // 需要搭配css属性transition使用\n componentWillUpdate : function(newProps,newState){\n    if(!newState.show)\n      $(ReactDOM.findDOMNode(this.refs.elem)).css({'opacity':'1'});\n    else\n      $(ReactDOM.findDOMNode(this.refs.elem)).css({'opacity':'0'});;\n  },\n  componentDidUpdate : function(oldProps,oldState){\n    if(this.state.show)\n      $(ReactDOM.findDOMNode(this.refs.elem)).css({'opacity':'1'});\n    else\n      $(ReactDOM.findDOMNode(this.refs.elem)).css({'opacity':'0'});;\n  }\n```\n\n6. componenetDidUpdate(prevProps, prevState)  \n此生命周期发生在组件挂载之后的更新阶段，组件初次挂载不会触发。当组件的props和state改变引起界面渲染更新后，此函数会被调用，不可以在此生命周期执行`setState`。我们使用它用来执行一些副作用：比如条件式触发必要的网络请求来更新本地数据、使用render后的最新数据来调用一些外部库的执行(例子：定时器请求接口数据动态绘制echarts折线图)：\n```js\n  ...\n  componentDidMount() {\n    this.echartsElement = echarts.init(this.refs.echart);\n    this.echartsElement.setOption(this.props.defaultData);\n    ...\n  }\n  componentDidUpdate() {\n    const { treeData } = this.props;\n    const optionData = this.echartsElement.getOption();\n    optionData.series[0].data = [treeData];\n    this.echartsElement.setOption(optionData, true);\n  }\n```\n\n\n7. componentWillUnmount()  \n此生命周期发生在组件卸载之前，组件生命周期中只会触发一次。开发者可以在此函数中执行一些数据清理重置、取消页面组件的事件订阅等。\n\n#### React16.3之后的生命周期\n![](http://nojsja.gitee.io/static-resources/images/react/react-lifecycle.png)\n\nReact16.3之后React的`Reconciler`架构被重写(Reconciler用于处理生命周期钩子函数和DOM DIFF)，之前版本采用函数调用栈递归同步渲染机制即Stack Reconciler，dom的diff阶段不能被打断，所以不利于动画执行和事件响应。React团队使用Fiber Reconciler架构之后，diff阶段根据虚拟DOM节点拆分成包含多个工作任务单元(FiberNode)的Fiber树(以链表实现)，实现了Fiber任务单元之间的任意切换和任务之间的打断及恢复等等。Fiber架构下的异步渲染导致了`componentWillMount`、`componentWillReceiveProps`、`componentWillUpdate`三个生命周期在实际渲染之前可能会被调用多次，产生不可预料的调用结果，因此这三个不安全生命周期函数不建议被使用。取而代之的是使用全新的两个生命周期函数：`getDerivedStateFromProps`和`getSnapshotBeforeUpdate`。\n\n1. __getDerivedStateFromProps(nextProps, currentState)__  \n- 1）定义  \n此生命周期发生在组件初始化挂载和组件更新阶段，开发者可以用它来替代之前的`componentWillReceiveProps`生命周期，可用于根据props变化来动态设置组件内部state。  \n函数为static静态函数，因此我们无法使用`this`直接访问组件实例，也无法使用`this.setState`直接对state进行更改，以此可以看出React团队想通过React框架的API式约束来尽量减少开发者的API滥用。函数调用时会被传入即将更新的props和当前组件的state数据作为参数，我们可以通过对比处理props然后返回一个对象来触发的组件state更新，如果返回null则不更新任何内容。  \n- 2）滥用场景一：直接复制props到state上面  \n这会导致父层级重新渲染时，SimpleInput组件的state都会被重置为父组件重新传入的props，不管props是否发生了改变。如果你说使用`shouldComponentUpdate`搭配着避免这种情况可以吗？代码层面上可以，不过可能导致后期`shouldComponentUpdate`函数的数据来源混乱，任何一个prop的改变都会导致重新渲染和不正确的状态重置，维护一个可靠的`shouldComponentUpdate`会更难。\n```js\nclass SimpleInput extends Component {\n  state = { attr: ''  };\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n\n  static getDerivedStateFromProps(nextProps, currentState) {\n    // 这会覆盖所有组件内的state更新！\n    return { attr: nextProps.attr };\n  }\n}\n```\n\n- 3）使用场景： 在props变化后选择性修改state  \n```js\nclass SimpleInput extends Component {\n  state = { attr: ''  };\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n\n  static getDerivedStateFromProps(nextProps, currentState) {\n    if (nextProps.attr !== currentState.attr) return { attr: nextProps.attr };\n    return null;\n  }\n}\n```\n可能导致的bug：在需要重置SimpleInput组件的情况下，由于`props.attr`未改变，导致组件无法正确重置状态，表现就是input输入框组件的值还是上次遗留的输入。\n\n- 4）优化的使用场景一：使用完全可控的组件  \n完全可控的组件即没有内部状态的功能组件，其状态的改变完全受父级props控制，这种方式需要将原本位于组件内的state和改变state的逻辑方法抽离到父级。适用于一些简单的场景，不过如果父级存在太多的子级状态管理逻辑也会使逻辑冗余复杂化。\n```js\nfunction SimpleInput(props) {\n  return <input onChange={props.onChange} value={props.attr} />;\n}\n```\n- 5）优化的使用场景二：使用有key值的非可控的组件  \n如果我们想让组件拥有自己的状态管理逻辑，但是在适当的条件下我们又可以控制组件以新的默认值重新初始化，这里有几种方法参考：\n```js\n/* \n  1. 设置一个唯一值传入作为组件重新初始化的标志\n     通过对比属性手动让组件重新初始化\n*/\nclass SimpleInput extends Component {\n  state = { attr: this.props.attr, id=\"\"  }; // 初始化默认值\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n\n  static getDerivedStateFromProps(nextProps, currentState) {\n    if (nextProps.id !== currentState.id)\n      return { attr: nextProps.attr, id: nextProps.id };\n    return null;\n  }\n}\n\n/*\n  2. 设置一个唯一值作为组件的key值\n     key值改变后组件会以默认值重新初始化\n  */\nclass SimpleInput extends Component {\n  state = { attr: this.props.attr  }; // 初始化默认值\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n}\n\n<SimpleInput\n  attr={this.props.attr}\n  key={this.props.id}\n/>\n\n/*\n  3. 提供一个外部调用函数以供父级直接调用以重置组件状态\n     父级通过refs来访问组件实例，拿到组件的内部方法进行调用\n  */\nclass SimpleInput extends Component {\n  state = { attr: this.props.attr  }; // 初始化默认值\n\n  resetState = (value) => {\n    this.setState({ attr: value });\n  }\n\n  render() {\n    return <input onChange={(e) => this.setState({ attr: e.target.value })} value={this.state.attr} />;\n  }\n}\n\n<SimpleInput\n  attr={this.props.attr}\n  ref={this.simpleInput}\n/>\n\n\n```\n\n\n2. componentDidMount()  \n...\n\n3. shouldComponentUpdate(nextProps, nexState)  \n...\n\n4. __getSnapshotBeforeUpdate(prevProps, prevState)__  \n此生命周期发生在组件初始化挂载和组件更新阶段，界面实际render之前。开发者可以拿到组件更新前的`prevProps`和`prevState`，同时也能获取到dom渲染之前的状态(比如元素宽高、滚动条长度和位置等等)。此函数的返回值会被作为`componentWillUpdate`周期函数的第三个参数传入，通过搭配`componentDidUpdate`可以完全替代之前`componentWillUpdate`部分的逻辑，见以下示例。  \n```js\nclass ScrollingList extends Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // 判断是否在list中添加新的items \n    // 捕获滚动​​位置以便我们稍后调整滚动位置。\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // 调整滚动位置使得这些新items不会将旧的items推出视图\n    // snapshot是getSnapshotBeforeUpdate的返回值）\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...list items... */}</div>\n    );\n  }\n}\n```\n\n5. __componenetDidUpdate(prevProps, prevState, shot)__  \n此生命周期新增特性：`getSnapshotBeforeUpdate`的返回值作为此函数执行时传入的第三个参数。\n\n6. componenetWillUnmount  \n...\n\n","slug":"理解React：Fiber架构和新旧生命周期","published":1,"updated":"2021-01-27T01:50:43.513Z","layout":"post","photos":[],"link":"","_id":"ckmahmurm0027kl950du3c0zk","content":"<h3 id=\"➣-React-Fiber原理\">➣ React Fiber原理</h3><hr><h4 id=\"React架构\">React架构</h4><ul><li>1）Virtual DOM 层，描述页面长什么样</li><li>2）Reconciler 层，负责调用组件生命周期方法，进行Diff运算等</li><li>3）Renderer 层，根据不同的平台，渲染出相应的页面，如 ReactDOM 和 ReactNative</li></ul><h4 id=\"React15遗留问题\">React15遗留问题</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/StackReconciler.jpg\" alt=\"StackReconciler\"></p><ul><li>1）浏览器的整体渲染是多线程的，包括GUI渲染线程、JS引擎线程、事件触发线程、定时触发器线程和异步http请求线程。页面绘制和JS运算是互斥的线程，两者不能同时进行。</li><li>2）React15使用JS的函数调用栈(Stack Reconciler)递归渲染界面，因此在处理DOM元素过多的复杂页面的频繁更新时，大量同步进行的任务(树diff和页面render)会导致界面更新阻塞、事件响应延迟、动画卡顿等，因此React团队在16版本重写了React Reconciler架构。</li></ul><h4 id=\"React16问题解决\">React16问题解决</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/FiberReconciler.jpg\" alt=\"FiberReconciler\"></p><ul><li>1）<code>Fiber Reconciler</code>架构可以允许同步阻塞的任务拆分成多个小任务，每个任务占用一小段时间片，任务执行完成后判断有无空闲时间，有则继续执行下一个任务，否则将控制权交由浏览器以让浏览器去处理更高优先级的任务，等下次拿到时间片后，其它子任务继续执行。整个流程类似CPU调度逻辑，底层是使用了浏览器API<code>requestIdleCallback</code>。</li><li>2）为了实现整个Diff和Render的流程可中断和恢复，单纯的VirtualDom Tree不再满足需求，React16引入了采用单链表结构的Fiber树，如下图所示。</li><li>3）FiberReconciler架构将更新流程划分成了两个阶段：1.diff(由多个diff任务组成，任务时间片消耗完后被可被中断，中断后由requestIdleCallback再次唤醒) =&gt; 2.commit(diff完毕后拿到fiber tree更新结果触发DOM渲染，不可被中断)。左边灰色部分的树即为一颗fiber树，右边的workInProgress为中间态，它是在diff过程中自顶向下构建的树形结构，可用于断点恢复，所有工作单元都更新完成之后，生成的workInProgress树会成为新的fiber tree。</li><li>4）fiber tree中每个节点即一个工作单元，跟之前的VirtualDom树类似，表示一个虚拟DOM节点。workInProgress tree的每个fiber node都保存着diff过程中产生的effect list，它用来存放diff结果，并且底层的树节点会依次向上层merge effect list，以收集所有diff结果。注意的是如果某些节点并未更新，workInProgress tree会直接复用原fiber tree的节点(链表操作)，而有数据更新的节点会被打上tag标签。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FiberNode&gt; : &#123;</span><br><span class=\"line\">    stateNode,    <span class=\"comment\">// 节点实例</span></span><br><span class=\"line\">    child,        <span class=\"comment\">// 子节点</span></span><br><span class=\"line\">    sibling,      <span class=\"comment\">// 兄弟节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>,       <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/FiberTree.png\" alt=\"FiberTree\"></p><h3 id=\"➣-React新旧生命周期\">➣ React新旧生命周期</h3><hr><h4 id=\"React16-3之前的生命周期\">React16.3之前的生命周期</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/react-lifecycle-old.png\" alt=\"\"></p><ol><li><p>componentWillMount()<br>此生命周期函数会在在组件挂载之前被调用，整个生命周期中只被触发一次。开发者通常用来进行一些数据的预请求操作，以减少请求发起时间，建议的替代方案是考虑放入constructor构造函数中，或者componentDidMount后；另一种情况是在在使用了外部状态管理库时，如Mobx，可以用于重置Mobx Store中的的已保存数据，替代方案是使用生命周期componentWilUnmount在组件卸载时自动执行数据清理。</p></li><li><p>componentDidMount()<br>此生命周期函数在组件被挂载之后被调用，整个生命周期中只触发一次。开发者同样可以用来进行一些数据请求的操作；除此之外也可用于添加事件订阅(需要在componentWillUnmount中取消事件订阅)；因为函数触发时dom元素已经渲染完毕，第三种使用情况是处理一些界面更新的副作用，比如使用默认数据来初始化一个echarts组件，然后在componentDidUpdate后进行echarts组件的数据更新。</p></li><li><p>componentWillReceiveProps(nextProps, nexState)<br>此生命周期发生在组件挂载之后的组件更新阶段。最常见于在一个依赖于prop属性进行组件内部state更新的非完全受控组件中，非完全受控组件即组件内部维护state更新，同时又在某个特殊条件下会采用外部传入的props来更新内部state，注意不要直接将props完全复制到state，否则应该使用完全受控组件<code>Function Component</code>，一个例子如下：</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">email</span>: <span class=\"keyword\">this</span>.props.email &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.email&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> his.setState(&#123; <span class=\"attr\">email</span>: e.target.value &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.userID !== <span class=\"keyword\">this</span>.props.userID) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">email</span>: nextProps.email &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>shouldComponentUpdate(nextProps)<br>此生命周期发生在组件挂载之后的组件更新阶段。<br>值得注意的是子组件更新不一定是由于props或state改变引起的，也可能是父组件的其它部分更改导致父组件重渲染而使得当前子组件在props/state未改变的情况下重新渲染一次。<br>函数被调用时会被传入即将更新的<code>nextProps</code>和<code>nextState</code>对象，开发者可以通过对比前后两个props对象上与界面渲染相关的属性是否改变，再决定是否允许这次更新(return <code>true</code>表示允许执行更新，否则忽略更新，默认为<code>true</code>)。常搭配对象深比较函数用于减少界面无用渲染次数，优化性能。在一些只需要简单浅比较props变化的场景下，并且相同的state和props会渲染出相同的内容时，建议使用<code>React.PureComponnet</code>替代，在props更新时React会自动帮你进行一次浅比较，以减少不必要渲染。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">email</span>: <span class=\"keyword\">this</span>.props.email &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.email&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> his.setState(&#123; <span class=\"attr\">email</span>: e.target.value &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      nextProps.userID === <span class=\"keyword\">this</span>.props.userID &amp;&amp;</span><br><span class=\"line\">      nextState.email == <span class=\"keyword\">this</span>.state.email</span><br><span class=\"line\">    ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"5\"><li>componenetWillUpdate(newProps, newState)<br>此生命周期发生在组件挂载之后的更新阶段。当组件收到新的props或state，并且<code>shouldComponentUpdate</code>返回允许更新时，会在渲染之前调此方法，不可以在此生命周期执行<code>setState</code>。在此生命周期中开发者可以在界面实际渲染更新之前拿到最新的<code>nextProps</code>和<code>nextState</code>，从而执行一些副作用：比如触发一个事件、根据最新的props缓存一些计算数据到组件内、平滑界面元素动画等：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要搭配css属性transition使用</span></span><br><span class=\"line\">componentWillUpdate : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newProps,newState</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!newState.show)</span><br><span class=\"line\">     $(ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.elem)).css(&#123;<span class=\"string\">'opacity'</span>:<span class=\"string\">'1'</span>&#125;);</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">     $(ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.elem)).css(&#123;<span class=\"string\">'opacity'</span>:<span class=\"string\">'0'</span>&#125;);;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> componentDidUpdate : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldProps,oldState</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state.show)</span><br><span class=\"line\">     $(ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.elem)).css(&#123;<span class=\"string\">'opacity'</span>:<span class=\"string\">'1'</span>&#125;);</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">     $(ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.elem)).css(&#123;<span class=\"string\">'opacity'</span>:<span class=\"string\">'0'</span>&#125;);;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><ol start=\"6\"><li>componenetDidUpdate(prevProps, prevState)<br>此生命周期发生在组件挂载之后的更新阶段，组件初次挂载不会触发。当组件的props和state改变引起界面渲染更新后，此函数会被调用，不可以在此生命周期执行<code>setState</code>。我们使用它用来执行一些副作用：比如条件式触发必要的网络请求来更新本地数据、使用render后的最新数据来调用一些外部库的执行(例子：定时器请求接口数据动态绘制echarts折线图)：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.echart);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.echartsElement.setOption(<span class=\"keyword\">this</span>.props.defaultData);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">componentDidUpdate() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">  optionData.series[<span class=\"number\">0</span>].data = [treeData];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"7\"><li>componentWillUnmount()<br>此生命周期发生在组件卸载之前，组件生命周期中只会触发一次。开发者可以在此函数中执行一些数据清理重置、取消页面组件的事件订阅等。</li></ol><h4 id=\"React16-3之后的生命周期\">React16.3之后的生命周期</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/react-lifecycle.png\" alt=\"\"></p><p>React16.3之后React的<code>Reconciler</code>架构被重写(Reconciler用于处理生命周期钩子函数和DOM DIFF)，之前版本采用函数调用栈递归同步渲染机制即Stack Reconciler，dom的diff阶段不能被打断，所以不利于动画执行和事件响应。React团队使用Fiber Reconciler架构之后，diff阶段根据虚拟DOM节点拆分成包含多个工作任务单元(FiberNode)的Fiber树(以链表实现)，实现了Fiber任务单元之间的任意切换和任务之间的打断及恢复等等。Fiber架构下的异步渲染导致了<code>componentWillMount</code>、<code>componentWillReceiveProps</code>、<code>componentWillUpdate</code>三个生命周期在实际渲染之前可能会被调用多次，产生不可预料的调用结果，因此这三个不安全生命周期函数不建议被使用。取而代之的是使用全新的两个生命周期函数：<code>getDerivedStateFromProps</code>和<code>getSnapshotBeforeUpdate</code>。</p><ol><li><strong>getDerivedStateFromProps(nextProps, currentState)</strong></li></ol><ul><li>1）定义<br>此生命周期发生在组件初始化挂载和组件更新阶段，开发者可以用它来替代之前的<code>componentWillReceiveProps</code>生命周期，可用于根据props变化来动态设置组件内部state。<br>函数为static静态函数，因此我们无法使用<code>this</code>直接访问组件实例，也无法使用<code>this.setState</code>直接对state进行更改，以此可以看出React团队想通过React框架的API式约束来尽量减少开发者的API滥用。函数调用时会被传入即将更新的props和当前组件的state数据作为参数，我们可以通过对比处理props然后返回一个对象来触发的组件state更新，如果返回null则不更新任何内容。</li><li>2）滥用场景一：直接复制props到state上面<br>这会导致父层级重新渲染时，SimpleInput组件的state都会被重置为父组件重新传入的props，不管props是否发生了改变。如果你说使用<code>shouldComponentUpdate</code>搭配着避免这种情况可以吗？代码层面上可以，不过可能导致后期<code>shouldComponentUpdate</code>函数的数据来源混乱，任何一个prop的改变都会导致重新渲染和不正确的状态重置，维护一个可靠的<code>shouldComponentUpdate</code>会更难。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"string\">''</span>  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, currentState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这会覆盖所有组件内的state更新！</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">attr</span>: nextProps.attr &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>3）使用场景： 在props变化后选择性修改state</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"string\">''</span>  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, currentState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.attr !== currentState.attr) <span class=\"keyword\">return</span> &#123; <span class=\"attr\">attr</span>: nextProps.attr &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>可能导致的bug：在需要重置SimpleInput组件的情况下，由于<code>props.attr</code>未改变，导致组件无法正确重置状态，表现就是input输入框组件的值还是上次遗留的输入。</p><ul><li>4）优化的使用场景一：使用完全可控的组件<br>完全可控的组件即没有内部状态的功能组件，其状态的改变完全受父级props控制，这种方式需要将原本位于组件内的state和改变state的逻辑方法抽离到父级。适用于一些简单的场景，不过如果父级存在太多的子级状态管理逻辑也会使逻辑冗余复杂化。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SimpleInput</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;props.onChange&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;props.attr&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>5）优化的使用场景二：使用有key值的非可控的组件<br>如果我们想让组件拥有自己的状态管理逻辑，但是在适当的条件下我们又可以控制组件以新的默认值重新初始化，这里有几种方法参考：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  1. 设置一个唯一值传入作为组件重新初始化的标志</span></span><br><span class=\"line\"><span class=\"comment\">     通过对比属性手动让组件重新初始化</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"keyword\">this</span>.props.attr, id=<span class=\"string\">\"\"</span>  &#125;; <span class=\"comment\">// 初始化默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, currentState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.id !== currentState.id)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">attr</span>: nextProps.attr, <span class=\"attr\">id</span>: nextProps.id &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  2. 设置一个唯一值作为组件的key值</span></span><br><span class=\"line\"><span class=\"comment\">     key值改变后组件会以默认值重新初始化</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"keyword\">this</span>.props.attr  &#125;; <span class=\"comment\">// 初始化默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;SimpleInput</span><br><span class=\"line\">  attr=&#123;<span class=\"keyword\">this</span>.props.attr&#125;</span><br><span class=\"line\">  key=&#123;<span class=\"keyword\">this</span>.props.id&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  3. 提供一个外部调用函数以供父级直接调用以重置组件状态</span></span><br><span class=\"line\"><span class=\"comment\">     父级通过refs来访问组件实例，拿到组件的内部方法进行调用</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"keyword\">this</span>.props.attr  &#125;; <span class=\"comment\">// 初始化默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  resetState = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">attr</span>: value &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;SimpleInput</span><br><span class=\"line\">  attr=&#123;<span class=\"keyword\">this</span>.props.attr&#125;</span><br><span class=\"line\">  ref=&#123;<span class=\"keyword\">this</span>.simpleInput&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li><p>componentDidMount()<br>…</p></li><li><p>shouldComponentUpdate(nextProps, nexState)<br>…</p></li><li><p><strong>getSnapshotBeforeUpdate(prevProps, prevState)</strong><br>此生命周期发生在组件初始化挂载和组件更新阶段，界面实际render之前。开发者可以拿到组件更新前的<code>prevProps</code>和<code>prevState</code>，同时也能获取到dom渲染之前的状态(比如元素宽高、滚动条长度和位置等等)。此函数的返回值会被作为<code>componentWillUpdate</code>周期函数的第三个参数传入，通过搭配<code>componentDidUpdate</code>可以完全替代之前<code>componentWillUpdate</code>部分的逻辑，见以下示例。</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollingList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listRef = React.createRef();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否在list中添加新的items </span></span><br><span class=\"line\">    <span class=\"comment\">// 捕获滚动​​位置以便我们稍后调整滚动位置。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevProps.list.length &lt; <span class=\"keyword\">this</span>.props.list.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> list = <span class=\"keyword\">this</span>.listRef.current;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> list.scrollHeight - list.scrollTop;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调整滚动位置使得这些新items不会将旧的items推出视图</span></span><br><span class=\"line\">    <span class=\"comment\">// snapshot是getSnapshotBeforeUpdate的返回值）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (snapshot !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> list = <span class=\"keyword\">this</span>.listRef.current;</span><br><span class=\"line\">      list.scrollTop = list.scrollHeight - snapshot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div ref=&#123;<span class=\"keyword\">this</span>.listRef&#125;&gt;&#123;<span class=\"comment\">/* ...list items... */</span>&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><ol start=\"5\"><li><p><strong>componenetDidUpdate(prevProps, prevState, shot)</strong><br>此生命周期新增特性：<code>getSnapshotBeforeUpdate</code>的返回值作为此函数执行时传入的第三个参数。</p></li><li><p>componenetWillUnmount<br>…</p></li></ol>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"➣-React-Fiber原理\">➣ React Fiber原理</h3><hr><h4 id=\"React架构\">React架构</h4><ul><li>1）Virtual DOM 层，描述页面长什么样</li><li>2）Reconciler 层，负责调用组件生命周期方法，进行Diff运算等</li><li>3）Renderer 层，根据不同的平台，渲染出相应的页面，如 ReactDOM 和 ReactNative</li></ul><h4 id=\"React15遗留问题\">React15遗留问题</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/StackReconciler.jpg\" alt=\"StackReconciler\"></p><ul><li>1）浏览器的整体渲染是多线程的，包括GUI渲染线程、JS引擎线程、事件触发线程、定时触发器线程和异步http请求线程。页面绘制和JS运算是互斥的线程，两者不能同时进行。</li><li>2）React15使用JS的函数调用栈(Stack Reconciler)递归渲染界面，因此在处理DOM元素过多的复杂页面的频繁更新时，大量同步进行的任务(树diff和页面render)会导致界面更新阻塞、事件响应延迟、动画卡顿等，因此React团队在16版本重写了React Reconciler架构。</li></ul><h4 id=\"React16问题解决\">React16问题解决</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/FiberReconciler.jpg\" alt=\"FiberReconciler\"></p><ul><li>1）<code>Fiber Reconciler</code>架构可以允许同步阻塞的任务拆分成多个小任务，每个任务占用一小段时间片，任务执行完成后判断有无空闲时间，有则继续执行下一个任务，否则将控制权交由浏览器以让浏览器去处理更高优先级的任务，等下次拿到时间片后，其它子任务继续执行。整个流程类似CPU调度逻辑，底层是使用了浏览器API<code>requestIdleCallback</code>。</li><li>2）为了实现整个Diff和Render的流程可中断和恢复，单纯的VirtualDom Tree不再满足需求，React16引入了采用单链表结构的Fiber树，如下图所示。</li><li>3）FiberReconciler架构将更新流程划分成了两个阶段：1.diff(由多个diff任务组成，任务时间片消耗完后被可被中断，中断后由requestIdleCallback再次唤醒) =&gt; 2.commit(diff完毕后拿到fiber tree更新结果触发DOM渲染，不可被中断)。左边灰色部分的树即为一颗fiber树，右边的workInProgress为中间态，它是在diff过程中自顶向下构建的树形结构，可用于断点恢复，所有工作单元都更新完成之后，生成的workInProgress树会成为新的fiber tree。</li><li>4）fiber tree中每个节点即一个工作单元，跟之前的VirtualDom树类似，表示一个虚拟DOM节点。workInProgress tree的每个fiber node都保存着diff过程中产生的effect list，它用来存放diff结果，并且底层的树节点会依次向上层merge effect list，以收集所有diff结果。注意的是如果某些节点并未更新，workInProgress tree会直接复用原fiber tree的节点(链表操作)，而有数据更新的节点会被打上tag标签。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;FiberNode&gt; : &#123;</span><br><span class=\"line\">    stateNode,    <span class=\"comment\">// 节点实例</span></span><br><span class=\"line\">    child,        <span class=\"comment\">// 子节点</span></span><br><span class=\"line\">    sibling,      <span class=\"comment\">// 兄弟节点</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>,       <span class=\"comment\">// 父节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/FiberTree.png\" alt=\"FiberTree\"></p><h3 id=\"➣-React新旧生命周期\">➣ React新旧生命周期</h3><hr><h4 id=\"React16-3之前的生命周期\">React16.3之前的生命周期</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/react-lifecycle-old.png\" alt=\"\"></p><ol><li><p>componentWillMount()<br>此生命周期函数会在在组件挂载之前被调用，整个生命周期中只被触发一次。开发者通常用来进行一些数据的预请求操作，以减少请求发起时间，建议的替代方案是考虑放入constructor构造函数中，或者componentDidMount后；另一种情况是在在使用了外部状态管理库时，如Mobx，可以用于重置Mobx Store中的的已保存数据，替代方案是使用生命周期componentWilUnmount在组件卸载时自动执行数据清理。</p></li><li><p>componentDidMount()<br>此生命周期函数在组件被挂载之后被调用，整个生命周期中只触发一次。开发者同样可以用来进行一些数据请求的操作；除此之外也可用于添加事件订阅(需要在componentWillUnmount中取消事件订阅)；因为函数触发时dom元素已经渲染完毕，第三种使用情况是处理一些界面更新的副作用，比如使用默认数据来初始化一个echarts组件，然后在componentDidUpdate后进行echarts组件的数据更新。</p></li><li><p>componentWillReceiveProps(nextProps, nexState)<br>此生命周期发生在组件挂载之后的组件更新阶段。最常见于在一个依赖于prop属性进行组件内部state更新的非完全受控组件中，非完全受控组件即组件内部维护state更新，同时又在某个特殊条件下会采用外部传入的props来更新内部state，注意不要直接将props完全复制到state，否则应该使用完全受控组件<code>Function Component</code>，一个例子如下：</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">email</span>: <span class=\"keyword\">this</span>.props.email &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.email&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> his.setState(&#123; <span class=\"attr\">email</span>: e.target.value &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillReceiveProps(nextProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.userID !== <span class=\"keyword\">this</span>.props.userID) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">email</span>: nextProps.email &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"4\"><li>shouldComponentUpdate(nextProps)<br>此生命周期发生在组件挂载之后的组件更新阶段。<br>值得注意的是子组件更新不一定是由于props或state改变引起的，也可能是父组件的其它部分更改导致父组件重渲染而使得当前子组件在props/state未改变的情况下重新渲染一次。<br>函数被调用时会被传入即将更新的<code>nextProps</code>和<code>nextState</code>对象，开发者可以通过对比前后两个props对象上与界面渲染相关的属性是否改变，再决定是否允许这次更新(return <code>true</code>表示允许执行更新，否则忽略更新，默认为<code>true</code>)。常搭配对象深比较函数用于减少界面无用渲染次数，优化性能。在一些只需要简单浅比较props变化的场景下，并且相同的state和props会渲染出相同的内容时，建议使用<code>React.PureComponnet</code>替代，在props更新时React会自动帮你进行一次浅比较，以减少不必要渲染。</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">email</span>: <span class=\"keyword\">this</span>.props.email &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.handleChange&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;this.state.email&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  handleChange = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> his.setState(&#123; <span class=\"attr\">email</span>: e.target.value &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      nextProps.userID === <span class=\"keyword\">this</span>.props.userID &amp;&amp;</span><br><span class=\"line\">      nextState.email == <span class=\"keyword\">this</span>.state.email</span><br><span class=\"line\">    ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"5\"><li>componenetWillUpdate(newProps, newState)<br>此生命周期发生在组件挂载之后的更新阶段。当组件收到新的props或state，并且<code>shouldComponentUpdate</code>返回允许更新时，会在渲染之前调此方法，不可以在此生命周期执行<code>setState</code>。在此生命周期中开发者可以在界面实际渲染更新之前拿到最新的<code>nextProps</code>和<code>nextState</code>，从而执行一些副作用：比如触发一个事件、根据最新的props缓存一些计算数据到组件内、平滑界面元素动画等：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要搭配css属性transition使用</span></span><br><span class=\"line\">componentWillUpdate : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newProps,newState</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(!newState.show)</span><br><span class=\"line\">     $(ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.elem)).css(&#123;<span class=\"string\">'opacity'</span>:<span class=\"string\">'1'</span>&#125;);</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">     $(ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.elem)).css(&#123;<span class=\"string\">'opacity'</span>:<span class=\"string\">'0'</span>&#125;);;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> componentDidUpdate : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldProps,oldState</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.state.show)</span><br><span class=\"line\">     $(ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.elem)).css(&#123;<span class=\"string\">'opacity'</span>:<span class=\"string\">'1'</span>&#125;);</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">     $(ReactDOM.findDOMNode(<span class=\"keyword\">this</span>.refs.elem)).css(&#123;<span class=\"string\">'opacity'</span>:<span class=\"string\">'0'</span>&#125;);;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><ol start=\"6\"><li>componenetDidUpdate(prevProps, prevState)<br>此生命周期发生在组件挂载之后的更新阶段，组件初次挂载不会触发。当组件的props和state改变引起界面渲染更新后，此函数会被调用，不可以在此生命周期执行<code>setState</code>。我们使用它用来执行一些副作用：比如条件式触发必要的网络请求来更新本地数据、使用render后的最新数据来调用一些外部库的执行(例子：定时器请求接口数据动态绘制echarts折线图)：</li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.echartsElement = echarts.init(<span class=\"keyword\">this</span>.refs.echart);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.echartsElement.setOption(<span class=\"keyword\">this</span>.props.defaultData);</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">componentDidUpdate() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; treeData &#125; = <span class=\"keyword\">this</span>.props;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> optionData = <span class=\"keyword\">this</span>.echartsElement.getOption();</span><br><span class=\"line\">  optionData.series[<span class=\"number\">0</span>].data = [treeData];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.echartsElement.setOption(optionData, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ol start=\"7\"><li>componentWillUnmount()<br>此生命周期发生在组件卸载之前，组件生命周期中只会触发一次。开发者可以在此函数中执行一些数据清理重置、取消页面组件的事件订阅等。</li></ol><h4 id=\"React16-3之后的生命周期\">React16.3之后的生命周期</h4><p><img src=\"http://nojsja.gitee.io/static-resources/images/react/react-lifecycle.png\" alt=\"\"></p><p>React16.3之后React的<code>Reconciler</code>架构被重写(Reconciler用于处理生命周期钩子函数和DOM DIFF)，之前版本采用函数调用栈递归同步渲染机制即Stack Reconciler，dom的diff阶段不能被打断，所以不利于动画执行和事件响应。React团队使用Fiber Reconciler架构之后，diff阶段根据虚拟DOM节点拆分成包含多个工作任务单元(FiberNode)的Fiber树(以链表实现)，实现了Fiber任务单元之间的任意切换和任务之间的打断及恢复等等。Fiber架构下的异步渲染导致了<code>componentWillMount</code>、<code>componentWillReceiveProps</code>、<code>componentWillUpdate</code>三个生命周期在实际渲染之前可能会被调用多次，产生不可预料的调用结果，因此这三个不安全生命周期函数不建议被使用。取而代之的是使用全新的两个生命周期函数：<code>getDerivedStateFromProps</code>和<code>getSnapshotBeforeUpdate</code>。</p><ol><li><strong>getDerivedStateFromProps(nextProps, currentState)</strong></li></ol><ul><li>1）定义<br>此生命周期发生在组件初始化挂载和组件更新阶段，开发者可以用它来替代之前的<code>componentWillReceiveProps</code>生命周期，可用于根据props变化来动态设置组件内部state。<br>函数为static静态函数，因此我们无法使用<code>this</code>直接访问组件实例，也无法使用<code>this.setState</code>直接对state进行更改，以此可以看出React团队想通过React框架的API式约束来尽量减少开发者的API滥用。函数调用时会被传入即将更新的props和当前组件的state数据作为参数，我们可以通过对比处理props然后返回一个对象来触发的组件state更新，如果返回null则不更新任何内容。</li><li>2）滥用场景一：直接复制props到state上面<br>这会导致父层级重新渲染时，SimpleInput组件的state都会被重置为父组件重新传入的props，不管props是否发生了改变。如果你说使用<code>shouldComponentUpdate</code>搭配着避免这种情况可以吗？代码层面上可以，不过可能导致后期<code>shouldComponentUpdate</code>函数的数据来源混乱，任何一个prop的改变都会导致重新渲染和不正确的状态重置，维护一个可靠的<code>shouldComponentUpdate</code>会更难。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"string\">''</span>  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, currentState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这会覆盖所有组件内的state更新！</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">attr</span>: nextProps.attr &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>3）使用场景： 在props变化后选择性修改state</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"string\">''</span>  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, currentState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.attr !== currentState.attr) <span class=\"keyword\">return</span> &#123; <span class=\"attr\">attr</span>: nextProps.attr &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>可能导致的bug：在需要重置SimpleInput组件的情况下，由于<code>props.attr</code>未改变，导致组件无法正确重置状态，表现就是input输入框组件的值还是上次遗留的输入。</p><ul><li>4）优化的使用场景一：使用完全可控的组件<br>完全可控的组件即没有内部状态的功能组件，其状态的改变完全受父级props控制，这种方式需要将原本位于组件内的state和改变state的逻辑方法抽离到父级。适用于一些简单的场景，不过如果父级存在太多的子级状态管理逻辑也会使逻辑冗余复杂化。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SimpleInput</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;props.onChange&#125;</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;props.attr&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>5）优化的使用场景二：使用有key值的非可控的组件<br>如果我们想让组件拥有自己的状态管理逻辑，但是在适当的条件下我们又可以控制组件以新的默认值重新初始化，这里有几种方法参考：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">  1. 设置一个唯一值传入作为组件重新初始化的标志</span></span><br><span class=\"line\"><span class=\"comment\">     通过对比属性手动让组件重新初始化</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"keyword\">this</span>.props.attr, id=<span class=\"string\">\"\"</span>  &#125;; <span class=\"comment\">// 初始化默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, currentState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextProps.id !== currentState.id)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">attr</span>: nextProps.attr, <span class=\"attr\">id</span>: nextProps.id &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  2. 设置一个唯一值作为组件的key值</span></span><br><span class=\"line\"><span class=\"comment\">     key值改变后组件会以默认值重新初始化</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"keyword\">this</span>.props.attr  &#125;; <span class=\"comment\">// 初始化默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;SimpleInput</span><br><span class=\"line\">  attr=&#123;<span class=\"keyword\">this</span>.props.attr&#125;</span><br><span class=\"line\">  key=&#123;<span class=\"keyword\">this</span>.props.id&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  3. 提供一个外部调用函数以供父级直接调用以重置组件状态</span></span><br><span class=\"line\"><span class=\"comment\">     父级通过refs来访问组件实例，拿到组件的内部方法进行调用</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleInput</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">attr</span>: <span class=\"keyword\">this</span>.props.attr  &#125;; <span class=\"comment\">// 初始化默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\">  resetState = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">attr</span>: value &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> this.setState(&#123; attr: e.target.value &#125;)&#125; value=&#123;this.state.attr&#125; /&gt;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;SimpleInput</span><br><span class=\"line\">  attr=&#123;<span class=\"keyword\">this</span>.props.attr&#125;</span><br><span class=\"line\">  ref=&#123;<span class=\"keyword\">this</span>.simpleInput&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure><ol start=\"2\"><li><p>componentDidMount()<br>…</p></li><li><p>shouldComponentUpdate(nextProps, nexState)<br>…</p></li><li><p><strong>getSnapshotBeforeUpdate(prevProps, prevState)</strong><br>此生命周期发生在组件初始化挂载和组件更新阶段，界面实际render之前。开发者可以拿到组件更新前的<code>prevProps</code>和<code>prevState</code>，同时也能获取到dom渲染之前的状态(比如元素宽高、滚动条长度和位置等等)。此函数的返回值会被作为<code>componentWillUpdate</code>周期函数的第三个参数传入，通过搭配<code>componentDidUpdate</code>可以完全替代之前<code>componentWillUpdate</code>部分的逻辑，见以下示例。</p></li></ol><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollingList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listRef = React.createRef();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否在list中添加新的items </span></span><br><span class=\"line\">    <span class=\"comment\">// 捕获滚动​​位置以便我们稍后调整滚动位置。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prevProps.list.length &lt; <span class=\"keyword\">this</span>.props.list.length) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> list = <span class=\"keyword\">this</span>.listRef.current;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> list.scrollHeight - list.scrollTop;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调整滚动位置使得这些新items不会将旧的items推出视图</span></span><br><span class=\"line\">    <span class=\"comment\">// snapshot是getSnapshotBeforeUpdate的返回值）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (snapshot !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> list = <span class=\"keyword\">this</span>.listRef.current;</span><br><span class=\"line\">      list.scrollTop = list.scrollHeight - snapshot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div ref=&#123;<span class=\"keyword\">this</span>.listRef&#125;&gt;&#123;<span class=\"comment\">/* ...list items... */</span>&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><ol start=\"5\"><li><p><strong>componenetDidUpdate(prevProps, prevState, shot)</strong><br>此生命周期新增特性：<code>getSnapshotBeforeUpdate</code>的返回值作为此函数执行时传入的第三个参数。</p></li><li><p>componenetWillUnmount<br>…</p></li></ol>"},{"title":"前端123：浏览器缓存的工作方式","catalog":true,"comments":1,"indexing":true,"header-img":"/blogs/img/article_header/article_header.png","top":false,"tocnum":true,"date":"2021-01-29T07:43:24.000Z","subtitle":"Frontend in depth: The browser cache","_content":"\n[>> 博客原文 ](https://nojsja.gitee.io/blogs/2021/01/29/%E5%89%8D%E7%AB%AF123%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/)\n\n### 浏览器缓存的工作流程\n--------------------\n\n&nbsp;&nbsp;&nbsp;&nbsp; 通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。\n\n&nbsp;&nbsp;&nbsp;&nbsp; 这里先看张大家最熟悉的Devtools网络图：\n\n![](http://nojsja.gitee.io/static-resources/images/http/network.png)\n\n图中青色、绿色和橙色圈出的部分分别是来自内存(memory缓存)、磁盘(disk缓存)和Http请求拿到的数据(非缓存)，还有一种返回码304的请求也是从缓存(memory/disk)中获取数据。304跟memory/disk缓存的区别是：在浏览器判断资源已经过期的情况下会去服务器查询资源是否更新，如果资源没更新则返回304码，浏览器收到304码就会更新资源的过期时间并直接从之前disk/memory缓存中拿到当前资源，换言之如果资源没过期，那么浏览器就会跳过向服务器校验资源这一步并直接去拿memory/disk缓存获取。  \n\n![](http://nojsja.gitee.io/static-resources/images/http/http_cache2.png)\n\n大致流程如下：\n\n- 1）首先检查是否存在 Service Worker Cache，没命中或不存在则进行下一步\n\n- 2）检查内存中是否存在资源，存在的话直接加载(from memory - 200)。\n\n- 3）如果内存没有，择取从硬盘获取，存在且没过期的话直接加载(from disk - 200)，过期了直接向服务器发送请求获取资源。如果资源没更新，服务器返回304，浏览器从硬盘缓存中获取资源，并更新`过期时间/Etag/Last-Modified`。如果资源更新了则获取最新的资源，并通过HTTP请求将资源返回，重新缓存资源并更新`过期时间/Etag/Last-Modified`。\n\n- 4）如果硬盘也没有，那么会向后端发送HTTP网络请求。\n\n- 5）加载到的资源缓存到硬盘和内存，并更新资源的`过期时间/Etag/Last-Modified`。\n\n&nbsp;&nbsp;&nbsp;&nbsp; `Service Worker Cache`具有较高的优先级，数据控制更为复杂，操作自由度最高；`Memory Cache`更多的强调了一种缓存存储方式和浏览器内存缓存策略；`HTTP Cache`相对于`Memory Cache`根据存储方式的不同也能叫做`Disk Cache`，它依赖于整个HTTP缓存校验流程(强缓存和协商缓存)，并通过校验来最终确定何时从缓存读取，何时从服务器更新资源；Push Cache资料较少，应用得不多，暂时只做介绍。\n\n### Service-Worker Cache(优先级最高)\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp; Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker 的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。\n\n&nbsp;&nbsp;&nbsp;&nbsp; Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。\n\n&nbsp;&nbsp;&nbsp;&nbsp; 当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。\n\n### Memory Cache(优先级次之)\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp; Memory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经获取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。内存缓存在缓存资源时并不关心返回资源的HTTP响应头部 Cache-Control 是什么值，换句话说这是一种强依赖于浏览器本地内存管理策略的缓存方式，各个浏览器对内存缓存的处理方式也略有区别。\n\n&nbsp;&nbsp;&nbsp;&nbsp; Memory Cache遵循这些策略：\n- 对于大文件来说，大概率是不存储在内存中的，反之优先\n- 当前系统内存使用率高的话，文件优先存储进硬盘\n\n### * HTTP Cache(优先级次之)\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp; HTTP缓存根据工作方式分为`强缓存`和`协商缓存`，浏览器首先会判断`强缓存`是否命中，命中失败才会尝试进行`协商缓存`。\n\n![](http://nojsja.gitee.io/static-resources/images/http/http_cache.png)\n\n1）强缓存  \n\n- \\> HTTP 1.0时代 - expires  \n&nbsp;&nbsp;&nbsp;&nbsp; 我们通过浏览器获取服务器远程资源时，服务器通过http请求response headers返回一个`expires`时间戳字段(上图中蓝色部分)，例如`expires: Wed, 13 Oct 2021 22:15:05 GMT`，表明这个资源的过期时间为格林威治时间`2021年10月13日 周三 22:15:05`(北京时间+8h=格林威治时间)，浏览器判断当前时间在资源过期时间之前的话，就会从缓存中去读取资源(如果缓存中存在的话)，否则会重新向服务器发送请求。  \n&nbsp;&nbsp;&nbsp;&nbsp; expires的工作机制要求客户端时间与服务器时间误差较小，否则缓存更新策略可能在短时间不生效。\n\n- \\> HTTP 1.1时代 - cache-control  \n&nbsp;&nbsp;&nbsp;&nbsp; `cache-control: max-age`方式也是通过服务器返回资源时携带的response headers中的相应字段实现的，比如：`cache-control: max-age=31536000`，表明资源距浏览器接收到此资源后的31536000秒后过期。与`expires`返回的时间戳方式不同，cache-control为了避免时间误差，直接返回一个时间长度，浏览器可以根据一个本地时间差值进行精确判断。  \n`cache-control`其它相关字段还有：  \n&nbsp;&nbsp;&nbsp;&nbsp; __i.__ __public/private__：在依赖各种代理的大型架构中，我们不得不考虑代理服务器的缓存问题，public 与 private 用来控制代理服务缓存是否能缓存资源。如果我们为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；如果我们设置了 private，则该资源只能被浏览器缓存。private 为默认值，不过在只设置s-maxage的情况下，代理缓存也能生效。   \n&nbsp;&nbsp;&nbsp;&nbsp; __ii.__ __s-maxage__：针对于代理服务器的缓存问题，此字段用于表示 cache 服务器上（比如 cache CDN）的缓存的有效时间的，只对 public 缓存有效，`cache-control: max-age=3600, s-maxage=31536000`。  \n&nbsp;&nbsp;&nbsp;&nbsp; __iii.__ __no-cache__：为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期，直接进行`协商缓存`。   \n&nbsp;&nbsp;&nbsp;&nbsp; __iv.__ __no-store__：不使用任何缓存策略，每次请求都直接从服务器获取，并在浏览器客户端不进行资源缓存。   \n\n- \\> cache-control 和 expires 并存  \n&nbsp;&nbsp;&nbsp;&nbsp; cache-control的优先级更高，当cache-control与 expires同时出现时，以cache-control为准，不过考虑向下兼容性可以选择同时使用两种缓存策略。\n\n2）协商缓存\n\n&nbsp;&nbsp;&nbsp;&nbsp; 协商缓存依赖于服务端与浏览器之间的通信，在第一次获取资源时浏览器会存储HTTP请求的response headers字段：Last-Modified / Etag，当强缓存未命中的时候，它的值作为浏览器和服务器通信时携带的标志位用于判断资源是否过期，如果服务器判断资源过期的话就会重新下载资源，并更新相应标志位。如果判断资源未更新的话，会返回304状态码，浏览器就会复用客户端缓存资源。\n\n- \\> Last-Modified 和 If-Modified-Since 方式  \n&nbsp;&nbsp;&nbsp;&nbsp; `Last-Modified`为随服务器端HTTP响应头部返回的时间戳标志，表示一个资源最近一次被更新的时间，客户端请求资源时添加上request headers字段`If-Modified-Since`(值与Last-Modified相同)用于服务器做校验判断资源是否更新，`Last-Modified: Wed, 13 Jan 2021 15:34:55 GMT`。  \n使用 Last-Modified 存在一些弊端：  \n&nbsp;&nbsp;&nbsp;&nbsp; __i. 命中失误1：__ 当我们更新了服务器的某个资源文件，但其实际内容并未发生变化，其相应的资源更新时间戳会改变，浏览器端在服务端文件并未发生改变的情况下，仅仅通过时间戳这种判断方式也会导致资源被完全重新下载。  \n&nbsp;&nbsp;&nbsp;&nbsp; __ii. 命中失误2：__ If-Modified-Since 只能检查到以秒为最小计量单位的时间差，感知不到1s以内的文件改动的情况，这会导致一些浏览器缓存更新不及时的情况。\n\n- \\> Etag 和 If-None-Match 方式  \n&nbsp;&nbsp;&nbsp;&nbsp; `Etag`就是为了弥补`Last-Modified`的弊端而产生的新的协商缓存方式。Etag为随服务器端HTTP请求头部返回的资源唯一标志，例如：`ETag: W/\"2a3b-1602480f459\"`，它根据资源内容而生成，可以精确感知资源的变动情况，即使多次更新，只要内容不变，Etag值也是不会变化的。浏览器下一次请求此资源时，request headers里就会带上一个值相同的名为`if-None-Match`的字段用于服务器对此资源做对比，`If-None-Match: W/\"2a3b-1602480f459\"`。\n\n- \\> `Etag`在感知文件变化上比`Last-Modified`更加准确，优先级也更高，不过`Etag`的生成会消耗掉部分服务器的性能，它可以作为一种辅助协商缓存方式与前者相互配合使用。当`Etag`和`Last-Modified`同时存在时，以`Etag`为准。\n\n### Push Cache(优先级最低)\n---\n\nPush Cache 是指 HTTP2 在 server push 阶段存在的缓存：\n\n- Push Cache 是缓存的最后一道防线。浏览器只有在 Memory Cache、HTTP Cache 和 Service Worker Cache 均未命中的情况下才会去询问 Push Cache。\n- Push Cache 是一种存在于会话阶段的缓存，当 session 终止时，缓存也随之释放。\n- 不同的页面只要共享了同一个 HTTP2 连接，那么它们就可以共享同一个 Push Cache。\n\n","source":"_posts/2021-01-29-前端123：浏览器缓存的工作方式.md","raw":"---\ntitle: 前端123：浏览器缓存的工作方式\ncatalog: true\ncomments: true\nindexing: true\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntop: false\ntocnum: true\ndate: 2021-01-29 15:43:24\nsubtitle: \"Frontend in depth: The browser cache\"\ntags:\n- cache\ncategories:\n- HTTP\n---\n\n[>> 博客原文 ](https://nojsja.gitee.io/blogs/2021/01/29/%E5%89%8D%E7%AB%AF123%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/)\n\n### 浏览器缓存的工作流程\n--------------------\n\n&nbsp;&nbsp;&nbsp;&nbsp; 通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。\n\n&nbsp;&nbsp;&nbsp;&nbsp; 这里先看张大家最熟悉的Devtools网络图：\n\n![](http://nojsja.gitee.io/static-resources/images/http/network.png)\n\n图中青色、绿色和橙色圈出的部分分别是来自内存(memory缓存)、磁盘(disk缓存)和Http请求拿到的数据(非缓存)，还有一种返回码304的请求也是从缓存(memory/disk)中获取数据。304跟memory/disk缓存的区别是：在浏览器判断资源已经过期的情况下会去服务器查询资源是否更新，如果资源没更新则返回304码，浏览器收到304码就会更新资源的过期时间并直接从之前disk/memory缓存中拿到当前资源，换言之如果资源没过期，那么浏览器就会跳过向服务器校验资源这一步并直接去拿memory/disk缓存获取。  \n\n![](http://nojsja.gitee.io/static-resources/images/http/http_cache2.png)\n\n大致流程如下：\n\n- 1）首先检查是否存在 Service Worker Cache，没命中或不存在则进行下一步\n\n- 2）检查内存中是否存在资源，存在的话直接加载(from memory - 200)。\n\n- 3）如果内存没有，择取从硬盘获取，存在且没过期的话直接加载(from disk - 200)，过期了直接向服务器发送请求获取资源。如果资源没更新，服务器返回304，浏览器从硬盘缓存中获取资源，并更新`过期时间/Etag/Last-Modified`。如果资源更新了则获取最新的资源，并通过HTTP请求将资源返回，重新缓存资源并更新`过期时间/Etag/Last-Modified`。\n\n- 4）如果硬盘也没有，那么会向后端发送HTTP网络请求。\n\n- 5）加载到的资源缓存到硬盘和内存，并更新资源的`过期时间/Etag/Last-Modified`。\n\n&nbsp;&nbsp;&nbsp;&nbsp; `Service Worker Cache`具有较高的优先级，数据控制更为复杂，操作自由度最高；`Memory Cache`更多的强调了一种缓存存储方式和浏览器内存缓存策略；`HTTP Cache`相对于`Memory Cache`根据存储方式的不同也能叫做`Disk Cache`，它依赖于整个HTTP缓存校验流程(强缓存和协商缓存)，并通过校验来最终确定何时从缓存读取，何时从服务器更新资源；Push Cache资料较少，应用得不多，暂时只做介绍。\n\n### Service-Worker Cache(优先级最高)\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp; Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker 的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。\n\n&nbsp;&nbsp;&nbsp;&nbsp; Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。\n\n&nbsp;&nbsp;&nbsp;&nbsp; 当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。\n\n### Memory Cache(优先级次之)\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp; Memory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经获取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。内存缓存在缓存资源时并不关心返回资源的HTTP响应头部 Cache-Control 是什么值，换句话说这是一种强依赖于浏览器本地内存管理策略的缓存方式，各个浏览器对内存缓存的处理方式也略有区别。\n\n&nbsp;&nbsp;&nbsp;&nbsp; Memory Cache遵循这些策略：\n- 对于大文件来说，大概率是不存储在内存中的，反之优先\n- 当前系统内存使用率高的话，文件优先存储进硬盘\n\n### * HTTP Cache(优先级次之)\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp; HTTP缓存根据工作方式分为`强缓存`和`协商缓存`，浏览器首先会判断`强缓存`是否命中，命中失败才会尝试进行`协商缓存`。\n\n![](http://nojsja.gitee.io/static-resources/images/http/http_cache.png)\n\n1）强缓存  \n\n- \\> HTTP 1.0时代 - expires  \n&nbsp;&nbsp;&nbsp;&nbsp; 我们通过浏览器获取服务器远程资源时，服务器通过http请求response headers返回一个`expires`时间戳字段(上图中蓝色部分)，例如`expires: Wed, 13 Oct 2021 22:15:05 GMT`，表明这个资源的过期时间为格林威治时间`2021年10月13日 周三 22:15:05`(北京时间+8h=格林威治时间)，浏览器判断当前时间在资源过期时间之前的话，就会从缓存中去读取资源(如果缓存中存在的话)，否则会重新向服务器发送请求。  \n&nbsp;&nbsp;&nbsp;&nbsp; expires的工作机制要求客户端时间与服务器时间误差较小，否则缓存更新策略可能在短时间不生效。\n\n- \\> HTTP 1.1时代 - cache-control  \n&nbsp;&nbsp;&nbsp;&nbsp; `cache-control: max-age`方式也是通过服务器返回资源时携带的response headers中的相应字段实现的，比如：`cache-control: max-age=31536000`，表明资源距浏览器接收到此资源后的31536000秒后过期。与`expires`返回的时间戳方式不同，cache-control为了避免时间误差，直接返回一个时间长度，浏览器可以根据一个本地时间差值进行精确判断。  \n`cache-control`其它相关字段还有：  \n&nbsp;&nbsp;&nbsp;&nbsp; __i.__ __public/private__：在依赖各种代理的大型架构中，我们不得不考虑代理服务器的缓存问题，public 与 private 用来控制代理服务缓存是否能缓存资源。如果我们为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；如果我们设置了 private，则该资源只能被浏览器缓存。private 为默认值，不过在只设置s-maxage的情况下，代理缓存也能生效。   \n&nbsp;&nbsp;&nbsp;&nbsp; __ii.__ __s-maxage__：针对于代理服务器的缓存问题，此字段用于表示 cache 服务器上（比如 cache CDN）的缓存的有效时间的，只对 public 缓存有效，`cache-control: max-age=3600, s-maxage=31536000`。  \n&nbsp;&nbsp;&nbsp;&nbsp; __iii.__ __no-cache__：为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期，直接进行`协商缓存`。   \n&nbsp;&nbsp;&nbsp;&nbsp; __iv.__ __no-store__：不使用任何缓存策略，每次请求都直接从服务器获取，并在浏览器客户端不进行资源缓存。   \n\n- \\> cache-control 和 expires 并存  \n&nbsp;&nbsp;&nbsp;&nbsp; cache-control的优先级更高，当cache-control与 expires同时出现时，以cache-control为准，不过考虑向下兼容性可以选择同时使用两种缓存策略。\n\n2）协商缓存\n\n&nbsp;&nbsp;&nbsp;&nbsp; 协商缓存依赖于服务端与浏览器之间的通信，在第一次获取资源时浏览器会存储HTTP请求的response headers字段：Last-Modified / Etag，当强缓存未命中的时候，它的值作为浏览器和服务器通信时携带的标志位用于判断资源是否过期，如果服务器判断资源过期的话就会重新下载资源，并更新相应标志位。如果判断资源未更新的话，会返回304状态码，浏览器就会复用客户端缓存资源。\n\n- \\> Last-Modified 和 If-Modified-Since 方式  \n&nbsp;&nbsp;&nbsp;&nbsp; `Last-Modified`为随服务器端HTTP响应头部返回的时间戳标志，表示一个资源最近一次被更新的时间，客户端请求资源时添加上request headers字段`If-Modified-Since`(值与Last-Modified相同)用于服务器做校验判断资源是否更新，`Last-Modified: Wed, 13 Jan 2021 15:34:55 GMT`。  \n使用 Last-Modified 存在一些弊端：  \n&nbsp;&nbsp;&nbsp;&nbsp; __i. 命中失误1：__ 当我们更新了服务器的某个资源文件，但其实际内容并未发生变化，其相应的资源更新时间戳会改变，浏览器端在服务端文件并未发生改变的情况下，仅仅通过时间戳这种判断方式也会导致资源被完全重新下载。  \n&nbsp;&nbsp;&nbsp;&nbsp; __ii. 命中失误2：__ If-Modified-Since 只能检查到以秒为最小计量单位的时间差，感知不到1s以内的文件改动的情况，这会导致一些浏览器缓存更新不及时的情况。\n\n- \\> Etag 和 If-None-Match 方式  \n&nbsp;&nbsp;&nbsp;&nbsp; `Etag`就是为了弥补`Last-Modified`的弊端而产生的新的协商缓存方式。Etag为随服务器端HTTP请求头部返回的资源唯一标志，例如：`ETag: W/\"2a3b-1602480f459\"`，它根据资源内容而生成，可以精确感知资源的变动情况，即使多次更新，只要内容不变，Etag值也是不会变化的。浏览器下一次请求此资源时，request headers里就会带上一个值相同的名为`if-None-Match`的字段用于服务器对此资源做对比，`If-None-Match: W/\"2a3b-1602480f459\"`。\n\n- \\> `Etag`在感知文件变化上比`Last-Modified`更加准确，优先级也更高，不过`Etag`的生成会消耗掉部分服务器的性能，它可以作为一种辅助协商缓存方式与前者相互配合使用。当`Etag`和`Last-Modified`同时存在时，以`Etag`为准。\n\n### Push Cache(优先级最低)\n---\n\nPush Cache 是指 HTTP2 在 server push 阶段存在的缓存：\n\n- Push Cache 是缓存的最后一道防线。浏览器只有在 Memory Cache、HTTP Cache 和 Service Worker Cache 均未命中的情况下才会去询问 Push Cache。\n- Push Cache 是一种存在于会话阶段的缓存，当 session 终止时，缓存也随之释放。\n- 不同的页面只要共享了同一个 HTTP2 连接，那么它们就可以共享同一个 Push Cache。\n\n","slug":"前端123：浏览器缓存的工作方式","published":1,"updated":"2021-02-12T02:59:54.850Z","layout":"post","photos":[],"link":"","_id":"ckmahmurn0029kl951l3c03ph","content":"<p><a href=\"https://nojsja.gitee.io/blogs/2021/01/29/%E5%89%8D%E7%AB%AF123%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"noopener\">&gt;&gt; 博客原文</a></p><h3 id=\"浏览器缓存的工作流程\">浏览器缓存的工作流程</h3><hr><p>     通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。</p><p>     这里先看张大家最熟悉的Devtools网络图：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/http/network.png\" alt=\"\"></p><p>图中青色、绿色和橙色圈出的部分分别是来自内存(memory缓存)、磁盘(disk缓存)和Http请求拿到的数据(非缓存)，还有一种返回码304的请求也是从缓存(memory/disk)中获取数据。304跟memory/disk缓存的区别是：在浏览器判断资源已经过期的情况下会去服务器查询资源是否更新，如果资源没更新则返回304码，浏览器收到304码就会更新资源的过期时间并直接从之前disk/memory缓存中拿到当前资源，换言之如果资源没过期，那么浏览器就会跳过向服务器校验资源这一步并直接去拿memory/disk缓存获取。</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/http/http_cache2.png\" alt=\"\"></p><p>大致流程如下：</p><ul><li><p>1）首先检查是否存在 Service Worker Cache，没命中或不存在则进行下一步</p></li><li><p>2）检查内存中是否存在资源，存在的话直接加载(from memory - 200)。</p></li><li><p>3）如果内存没有，择取从硬盘获取，存在且没过期的话直接加载(from disk - 200)，过期了直接向服务器发送请求获取资源。如果资源没更新，服务器返回304，浏览器从硬盘缓存中获取资源，并更新<code>过期时间/Etag/Last-Modified</code>。如果资源更新了则获取最新的资源，并通过HTTP请求将资源返回，重新缓存资源并更新<code>过期时间/Etag/Last-Modified</code>。</p></li><li><p>4）如果硬盘也没有，那么会向后端发送HTTP网络请求。</p></li><li><p>5）加载到的资源缓存到硬盘和内存，并更新资源的<code>过期时间/Etag/Last-Modified</code>。</p></li></ul><p>     <code>Service Worker Cache</code>具有较高的优先级，数据控制更为复杂，操作自由度最高；<code>Memory Cache</code>更多的强调了一种缓存存储方式和浏览器内存缓存策略；<code>HTTP Cache</code>相对于<code>Memory Cache</code>根据存储方式的不同也能叫做<code>Disk Cache</code>，它依赖于整个HTTP缓存校验流程(强缓存和协商缓存)，并通过校验来最终确定何时从缓存读取，何时从服务器更新资源；Push Cache资料较少，应用得不多，暂时只做介绍。</p><h3 id=\"Service-Worker-Cache-优先级最高\">Service-Worker Cache(优先级最高)</h3><hr><p>     Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker 的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。</p><p>     Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</p><p>     当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</p><h3 id=\"Memory-Cache-优先级次之\">Memory Cache(优先级次之)</h3><hr><p>     Memory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经获取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。内存缓存在缓存资源时并不关心返回资源的HTTP响应头部 Cache-Control 是什么值，换句话说这是一种强依赖于浏览器本地内存管理策略的缓存方式，各个浏览器对内存缓存的处理方式也略有区别。</p><p>     Memory Cache遵循这些策略：</p><ul><li>对于大文件来说，大概率是不存储在内存中的，反之优先</li><li>当前系统内存使用率高的话，文件优先存储进硬盘</li></ul><h3 id=\"HTTP-Cache-优先级次之\">* HTTP Cache(优先级次之)</h3><hr><p>     HTTP缓存根据工作方式分为<code>强缓存</code>和<code>协商缓存</code>，浏览器首先会判断<code>强缓存</code>是否命中，命中失败才会尝试进行<code>协商缓存</code>。</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/http/http_cache.png\" alt=\"\"></p><p>1）强缓存</p><ul><li><p>&gt; HTTP 1.0时代 - expires<br>     我们通过浏览器获取服务器远程资源时，服务器通过http请求response headers返回一个<code>expires</code>时间戳字段(上图中蓝色部分)，例如<code>expires: Wed, 13 Oct 2021 22:15:05 GMT</code>，表明这个资源的过期时间为格林威治时间<code>2021年10月13日 周三 22:15:05</code>(北京时间+8h=格林威治时间)，浏览器判断当前时间在资源过期时间之前的话，就会从缓存中去读取资源(如果缓存中存在的话)，否则会重新向服务器发送请求。<br>     expires的工作机制要求客户端时间与服务器时间误差较小，否则缓存更新策略可能在短时间不生效。</p></li><li><p>&gt; HTTP 1.1时代 - cache-control<br>     <code>cache-control: max-age</code>方式也是通过服务器返回资源时携带的response headers中的相应字段实现的，比如：<code>cache-control: max-age=31536000</code>，表明资源距浏览器接收到此资源后的31536000秒后过期。与<code>expires</code>返回的时间戳方式不同，cache-control为了避免时间误差，直接返回一个时间长度，浏览器可以根据一个本地时间差值进行精确判断。<br><code>cache-control</code>其它相关字段还有：<br>     <strong>i.</strong> <strong>public/private</strong>：在依赖各种代理的大型架构中，我们不得不考虑代理服务器的缓存问题，public 与 private 用来控制代理服务缓存是否能缓存资源。如果我们为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；如果我们设置了 private，则该资源只能被浏览器缓存。private 为默认值，不过在只设置s-maxage的情况下，代理缓存也能生效。<br>     <strong>ii.</strong> <strong>s-maxage</strong>：针对于代理服务器的缓存问题，此字段用于表示 cache 服务器上（比如 cache CDN）的缓存的有效时间的，只对 public 缓存有效，<code>cache-control: max-age=3600, s-maxage=31536000</code>。<br>     <strong>iii.</strong> <strong>no-cache</strong>：为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期，直接进行<code>协商缓存</code>。<br>     <strong>iv.</strong> <strong>no-store</strong>：不使用任何缓存策略，每次请求都直接从服务器获取，并在浏览器客户端不进行资源缓存。</p></li><li><p>&gt; cache-control 和 expires 并存<br>     cache-control的优先级更高，当cache-control与 expires同时出现时，以cache-control为准，不过考虑向下兼容性可以选择同时使用两种缓存策略。</p></li></ul><p>2）协商缓存</p><p>     协商缓存依赖于服务端与浏览器之间的通信，在第一次获取资源时浏览器会存储HTTP请求的response headers字段：Last-Modified / Etag，当强缓存未命中的时候，它的值作为浏览器和服务器通信时携带的标志位用于判断资源是否过期，如果服务器判断资源过期的话就会重新下载资源，并更新相应标志位。如果判断资源未更新的话，会返回304状态码，浏览器就会复用客户端缓存资源。</p><ul><li><p>&gt; Last-Modified 和 If-Modified-Since 方式<br>     <code>Last-Modified</code>为随服务器端HTTP响应头部返回的时间戳标志，表示一个资源最近一次被更新的时间，客户端请求资源时添加上request headers字段<code>If-Modified-Since</code>(值与Last-Modified相同)用于服务器做校验判断资源是否更新，<code>Last-Modified: Wed, 13 Jan 2021 15:34:55 GMT</code>。<br>使用 Last-Modified 存在一些弊端：<br>     <strong>i. 命中失误1：</strong> 当我们更新了服务器的某个资源文件，但其实际内容并未发生变化，其相应的资源更新时间戳会改变，浏览器端在服务端文件并未发生改变的情况下，仅仅通过时间戳这种判断方式也会导致资源被完全重新下载。<br>     <strong>ii. 命中失误2：</strong> If-Modified-Since 只能检查到以秒为最小计量单位的时间差，感知不到1s以内的文件改动的情况，这会导致一些浏览器缓存更新不及时的情况。</p></li><li><p>&gt; Etag 和 If-None-Match 方式<br>     <code>Etag</code>就是为了弥补<code>Last-Modified</code>的弊端而产生的新的协商缓存方式。Etag为随服务器端HTTP请求头部返回的资源唯一标志，例如：<code>ETag: W/&quot;2a3b-1602480f459&quot;</code>，它根据资源内容而生成，可以精确感知资源的变动情况，即使多次更新，只要内容不变，Etag值也是不会变化的。浏览器下一次请求此资源时，request headers里就会带上一个值相同的名为<code>if-None-Match</code>的字段用于服务器对此资源做对比，<code>If-None-Match: W/&quot;2a3b-1602480f459&quot;</code>。</p></li><li><p>&gt; <code>Etag</code>在感知文件变化上比<code>Last-Modified</code>更加准确，优先级也更高，不过<code>Etag</code>的生成会消耗掉部分服务器的性能，它可以作为一种辅助协商缓存方式与前者相互配合使用。当<code>Etag</code>和<code>Last-Modified</code>同时存在时，以<code>Etag</code>为准。</p></li></ul><h3 id=\"Push-Cache-优先级最低\">Push Cache(优先级最低)</h3><hr><p>Push Cache 是指 HTTP2 在 server push 阶段存在的缓存：</p><ul><li>Push Cache 是缓存的最后一道防线。浏览器只有在 Memory Cache、HTTP Cache 和 Service Worker Cache 均未命中的情况下才会去询问 Push Cache。</li><li>Push Cache 是一种存在于会话阶段的缓存，当 session 终止时，缓存也随之释放。</li><li>不同的页面只要共享了同一个 HTTP2 连接，那么它们就可以共享同一个 Push Cache。</li></ul>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://nojsja.gitee.io/blogs/2021/01/29/%E5%89%8D%E7%AB%AF123%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"noopener\">&gt;&gt; 博客原文</a></p><h3 id=\"浏览器缓存的工作流程\">浏览器缓存的工作流程</h3><hr><p>     通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。</p><p>     这里先看张大家最熟悉的Devtools网络图：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/http/network.png\" alt=\"\"></p><p>图中青色、绿色和橙色圈出的部分分别是来自内存(memory缓存)、磁盘(disk缓存)和Http请求拿到的数据(非缓存)，还有一种返回码304的请求也是从缓存(memory/disk)中获取数据。304跟memory/disk缓存的区别是：在浏览器判断资源已经过期的情况下会去服务器查询资源是否更新，如果资源没更新则返回304码，浏览器收到304码就会更新资源的过期时间并直接从之前disk/memory缓存中拿到当前资源，换言之如果资源没过期，那么浏览器就会跳过向服务器校验资源这一步并直接去拿memory/disk缓存获取。</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/http/http_cache2.png\" alt=\"\"></p><p>大致流程如下：</p><ul><li><p>1）首先检查是否存在 Service Worker Cache，没命中或不存在则进行下一步</p></li><li><p>2）检查内存中是否存在资源，存在的话直接加载(from memory - 200)。</p></li><li><p>3）如果内存没有，择取从硬盘获取，存在且没过期的话直接加载(from disk - 200)，过期了直接向服务器发送请求获取资源。如果资源没更新，服务器返回304，浏览器从硬盘缓存中获取资源，并更新<code>过期时间/Etag/Last-Modified</code>。如果资源更新了则获取最新的资源，并通过HTTP请求将资源返回，重新缓存资源并更新<code>过期时间/Etag/Last-Modified</code>。</p></li><li><p>4）如果硬盘也没有，那么会向后端发送HTTP网络请求。</p></li><li><p>5）加载到的资源缓存到硬盘和内存，并更新资源的<code>过期时间/Etag/Last-Modified</code>。</p></li></ul><p>     <code>Service Worker Cache</code>具有较高的优先级，数据控制更为复杂，操作自由度最高；<code>Memory Cache</code>更多的强调了一种缓存存储方式和浏览器内存缓存策略；<code>HTTP Cache</code>相对于<code>Memory Cache</code>根据存储方式的不同也能叫做<code>Disk Cache</code>，它依赖于整个HTTP缓存校验流程(强缓存和协商缓存)，并通过校验来最终确定何时从缓存读取，何时从服务器更新资源；Push Cache资料较少，应用得不多，暂时只做介绍。</p><h3 id=\"Service-Worker-Cache-优先级最高\">Service-Worker Cache(优先级最高)</h3><hr><p>     Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker 的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。</p><p>     Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</p><p>     当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</p><h3 id=\"Memory-Cache-优先级次之\">Memory Cache(优先级次之)</h3><hr><p>     Memory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经获取到的资源，例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快，内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。内存缓存在缓存资源时并不关心返回资源的HTTP响应头部 Cache-Control 是什么值，换句话说这是一种强依赖于浏览器本地内存管理策略的缓存方式，各个浏览器对内存缓存的处理方式也略有区别。</p><p>     Memory Cache遵循这些策略：</p><ul><li>对于大文件来说，大概率是不存储在内存中的，反之优先</li><li>当前系统内存使用率高的话，文件优先存储进硬盘</li></ul><h3 id=\"HTTP-Cache-优先级次之\">* HTTP Cache(优先级次之)</h3><hr><p>     HTTP缓存根据工作方式分为<code>强缓存</code>和<code>协商缓存</code>，浏览器首先会判断<code>强缓存</code>是否命中，命中失败才会尝试进行<code>协商缓存</code>。</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/http/http_cache.png\" alt=\"\"></p><p>1）强缓存</p><ul><li><p>&gt; HTTP 1.0时代 - expires<br>     我们通过浏览器获取服务器远程资源时，服务器通过http请求response headers返回一个<code>expires</code>时间戳字段(上图中蓝色部分)，例如<code>expires: Wed, 13 Oct 2021 22:15:05 GMT</code>，表明这个资源的过期时间为格林威治时间<code>2021年10月13日 周三 22:15:05</code>(北京时间+8h=格林威治时间)，浏览器判断当前时间在资源过期时间之前的话，就会从缓存中去读取资源(如果缓存中存在的话)，否则会重新向服务器发送请求。<br>     expires的工作机制要求客户端时间与服务器时间误差较小，否则缓存更新策略可能在短时间不生效。</p></li><li><p>&gt; HTTP 1.1时代 - cache-control<br>     <code>cache-control: max-age</code>方式也是通过服务器返回资源时携带的response headers中的相应字段实现的，比如：<code>cache-control: max-age=31536000</code>，表明资源距浏览器接收到此资源后的31536000秒后过期。与<code>expires</code>返回的时间戳方式不同，cache-control为了避免时间误差，直接返回一个时间长度，浏览器可以根据一个本地时间差值进行精确判断。<br><code>cache-control</code>其它相关字段还有：<br>     <strong>i.</strong> <strong>public/private</strong>：在依赖各种代理的大型架构中，我们不得不考虑代理服务器的缓存问题，public 与 private 用来控制代理服务缓存是否能缓存资源。如果我们为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存；如果我们设置了 private，则该资源只能被浏览器缓存。private 为默认值，不过在只设置s-maxage的情况下，代理缓存也能生效。<br>     <strong>ii.</strong> <strong>s-maxage</strong>：针对于代理服务器的缓存问题，此字段用于表示 cache 服务器上（比如 cache CDN）的缓存的有效时间的，只对 public 缓存有效，<code>cache-control: max-age=3600, s-maxage=31536000</code>。<br>     <strong>iii.</strong> <strong>no-cache</strong>：为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期，直接进行<code>协商缓存</code>。<br>     <strong>iv.</strong> <strong>no-store</strong>：不使用任何缓存策略，每次请求都直接从服务器获取，并在浏览器客户端不进行资源缓存。</p></li><li><p>&gt; cache-control 和 expires 并存<br>     cache-control的优先级更高，当cache-control与 expires同时出现时，以cache-control为准，不过考虑向下兼容性可以选择同时使用两种缓存策略。</p></li></ul><p>2）协商缓存</p><p>     协商缓存依赖于服务端与浏览器之间的通信，在第一次获取资源时浏览器会存储HTTP请求的response headers字段：Last-Modified / Etag，当强缓存未命中的时候，它的值作为浏览器和服务器通信时携带的标志位用于判断资源是否过期，如果服务器判断资源过期的话就会重新下载资源，并更新相应标志位。如果判断资源未更新的话，会返回304状态码，浏览器就会复用客户端缓存资源。</p><ul><li><p>&gt; Last-Modified 和 If-Modified-Since 方式<br>     <code>Last-Modified</code>为随服务器端HTTP响应头部返回的时间戳标志，表示一个资源最近一次被更新的时间，客户端请求资源时添加上request headers字段<code>If-Modified-Since</code>(值与Last-Modified相同)用于服务器做校验判断资源是否更新，<code>Last-Modified: Wed, 13 Jan 2021 15:34:55 GMT</code>。<br>使用 Last-Modified 存在一些弊端：<br>     <strong>i. 命中失误1：</strong> 当我们更新了服务器的某个资源文件，但其实际内容并未发生变化，其相应的资源更新时间戳会改变，浏览器端在服务端文件并未发生改变的情况下，仅仅通过时间戳这种判断方式也会导致资源被完全重新下载。<br>     <strong>ii. 命中失误2：</strong> If-Modified-Since 只能检查到以秒为最小计量单位的时间差，感知不到1s以内的文件改动的情况，这会导致一些浏览器缓存更新不及时的情况。</p></li><li><p>&gt; Etag 和 If-None-Match 方式<br>     <code>Etag</code>就是为了弥补<code>Last-Modified</code>的弊端而产生的新的协商缓存方式。Etag为随服务器端HTTP请求头部返回的资源唯一标志，例如：<code>ETag: W/&quot;2a3b-1602480f459&quot;</code>，它根据资源内容而生成，可以精确感知资源的变动情况，即使多次更新，只要内容不变，Etag值也是不会变化的。浏览器下一次请求此资源时，request headers里就会带上一个值相同的名为<code>if-None-Match</code>的字段用于服务器对此资源做对比，<code>If-None-Match: W/&quot;2a3b-1602480f459&quot;</code>。</p></li><li><p>&gt; <code>Etag</code>在感知文件变化上比<code>Last-Modified</code>更加准确，优先级也更高，不过<code>Etag</code>的生成会消耗掉部分服务器的性能，它可以作为一种辅助协商缓存方式与前者相互配合使用。当<code>Etag</code>和<code>Last-Modified</code>同时存在时，以<code>Etag</code>为准。</p></li></ul><h3 id=\"Push-Cache-优先级最低\">Push Cache(优先级最低)</h3><hr><p>Push Cache 是指 HTTP2 在 server push 阶段存在的缓存：</p><ul><li>Push Cache 是缓存的最后一道防线。浏览器只有在 Memory Cache、HTTP Cache 和 Service Worker Cache 均未命中的情况下才会去询问 Push Cache。</li><li>Push Cache 是一种存在于会话阶段的缓存，当 session 终止时，缓存也随之释放。</li><li>不同的页面只要共享了同一个 HTTP2 连接，那么它们就可以共享同一个 Push Cache。</li></ul>"},{"title":"前端性能优化技巧详解(1)","catalog":true,"comments":1,"indexing":true,"header-img":"/blogs/img/article_header/article_header.png","top":false,"tocnum":true,"date":"2021-02-07T04:37:10.000Z","subtitle":"The guide of frontend performance optimization","_content":"\n> 此文主要描述 html / css / js / react 即时渲染和网络加载优化方面的知识，webpack常用优化方法和HTTP Server等优化请关注《 前端性能优化技巧详解(2) 》  \n\n> 如果之后发现有其它要点值得梳理，会继续更新本文...\n\n### 目录\n\n- 目录\n- ➣ HTML/CSS 性能优化方面\n  - 1. 网络层面\n    - 1）抽离内联样式内联脚本\n    - 2）defer脚本和async脚本\n    - 3）压缩HTML/CSS代码资源\n    - 4）压缩图片/音视频等多媒体资源\n    - 5）使用雪碧图\n    - 6）避免空的 src 和 href 值\n    - 7）避免使用`@import`来引入css\n  - 2. 渲染层面\n    - 1）减少页面的回流和重绘\n    - 2）减少DOM结构的层级\n    - 3）尽量不使用`table`布局和`iframe`内联网页\n    - 4）flex布局的性能比`inline-block`和`float`布局都要好\n    - 5）CSS选择器的使用策略\n    - 6）css的书写顺序也会对其解析渲染性能造成影响\n- ➣ Javascript 性能优化方面\n  - 1. 网络层面\n    - 1）压缩JS代码资源\n  - 2. 渲染层面\n    - 1）使用函数节流和函数去抖处理一些函数的高频触发调用\n    - 2）Js实现动画时使用`requestAnimationFrame`替代定时器\n    - 3）使用`IntersectionObserver`API来替代`scroll`事件实现元素相交检测\n    - 4）使用`Web-Workers`在后台运行CPU密集型任务\n    - 5）使用事件委托\n    - 6）一些编码方面的优化建议\n- ➣ React 性能优化方面\n  - 1. 网络层面\n    - 1）React jsx/js文件压缩\n    - 2）使用`React.lazy`和`React.Suspense`实现代码分割和懒加载\n    - 3）使用`React.Fragment`来避免非必要DOM层级的引入\n  - 2. 渲染层面\n    - 1）使用`shouldComponentUpdate`避免不必要渲染\n    - 2）使用`PureComponnet`实现简单展示组件的自动浅比较\n    - 3）使用`React.memo`缓存和复用组件的渲染结果\n    - 4）使用Context来共享全局数据\n    - 5）优化组件分割策略来处理长列表组件的渲染\n    - 6）正确理解组件 key 的使用策略\n    - 7）使用虚拟化渲染技术来优化超长列表组件\n- 结语\n\n\\>  思维导图：\n\n![](http://nojsja.gitee.io/static-resources/images/optimization//frontend-optimization.png)\n\n&nbsp;&nbsp;&nbsp;&nbsp; 前端性能优化是个很大的概念，涉及HTTP协议、浏览器渲染原理、操作系统和网络、前端工程化和Js底层原理等各个方面。通过建立思维导图可以让我们很好的将各个优化方面组织和联系起来。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 按照优化原理的不同则可以将其分为`网络层面优化`和`渲染层面`的优化，网络层面的优化更多体现在资源加载时的优化，而渲染层的优化更多体现在运行时优化。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 例如优化浏览器缓存策略以减少HTTP请求传输量、图片和其它静态资源的压缩、服务器端启用Gzip压缩、使用CDN、图片懒加载、延迟脚本Defer和异步脚本Async等属于网络层面的优化。另一方面，减少页面的回流和重绘、使用React.Fragment减少界面dom层级、使用骨架屏、函数节流和去抖、React长列表组件优化、通过事件冒泡机制实现事件委托等就属于渲染层面的优化。\n\n### ➣ HTML/CSS 性能优化方面\n\n#### 1. 网络层面\n\n##### 1）抽离内联样式内联脚本\n  - 内联资源不利于浏览器缓存，造成重复的资源请求\n  - 内联资源会造成HTML臃肿，不利于HTTP传输\n  - 内联资源的下载和解析可能会阻塞导致界面渲染，导致界面白屏\n  - 内联资源不好管理和维护\n\n##### 2）defer脚本和async脚本  \n  &nbsp;&nbsp;&nbsp;&nbsp; HTML在解析时遇到声明的`<script>`脚本会立即下载和执行，往往会延迟界面剩余部分的解析，造成界面白屏的情况。比较古老的优化方式之一就是将脚本放到HTML文档末尾，这样子解决了白屏的问题，可是在DOM文档结构复杂冗长时，也会造成一定的界面脚本下载和执行延迟，script标签新属性`async`和`defer`可以解决此类问题：\n  ```html\n  <!DOCTYPE html>\n  <html>\n    <head>\n    </head>\n    <body>\n      <script src=\"path/to/target.js\" defer></script>\n      <script src=\"path/to/target.js\" async></script>\n    </body>\n  </html>\n  ```\n  - defer脚本  \n  &nbsp;&nbsp;&nbsp;&nbsp; 延迟脚本-声明`defer`属性的外部`<script>`脚本下载时不会阻塞HTML的解析和渲染，并且会在HTML渲染完成并且可实际操作之后开始执行(`DOMContentLoaded`事件被触发之前)，各个脚本解析执行顺序对应声明时的位置顺序，执行完成后会触发页面`DOMContentLoaded`事件。\n  - async脚本  \n  &nbsp;&nbsp;&nbsp;&nbsp; 异步脚本-声明`async`属性的外部`<script>`脚本下载时不会阻塞HTML的解析和渲染，各个脚本的下载和执行完全独立，下载完成后即开始执行，所以执行顺序不固定，与`DOMContentLoaded`事件的触发没有关联性。\n  - 动态脚本加载技术  \n  &nbsp;&nbsp;&nbsp;&nbsp; 在脚本执行时动态运行`loadScript`函数可以实现类似延迟脚本和异步脚本的效果：`isDefer`为真值时脚本的执行顺序为脚本位置顺序，为假值时效果同于异步脚本。\n  ```js\n    function loadScript(src, isDefer) {\n      let script = document.createElement('script');\n      script.src = src;\n      script.async = !isDefer;\n      document.body.append(script);\n    }\n  ```\n\n##### 3）压缩HTML/CSS代码资源  \n&nbsp;&nbsp;&nbsp;&nbsp; 代码资源中存在很多无用的空格和符号等，去除他们带来的效益是可观的，另一方面压缩资源也能起到源代码保护的作用。现代前端工程化框架一般继承了此类压缩功能，比如webpack框架的`html-loader`。\n```json\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          minimize: true,\n        },\n      },\n    ],\n  },\n};\n\n```\n\n##### 4）压缩图片/音视频等多媒体资源  \n&nbsp;&nbsp;&nbsp;&nbsp; 其实网页带宽往往被图片等资源大量占用，压缩他们能带来超出预期的优化效益。现代前端工程化框架一般继承了此类压缩插件，如`imagemin-webpack-plugin`插件。\n```js\nimport ImageminPlugin from 'imagemin-webpack-plugin'\n\nmodule.exports = {\n  plugins: [\n    // 确保该插件在任何添加图片的插件之后\n    new ImageminPlugin({\n      disable: process.env.NODE_ENV !== 'production', // 开发模式禁用\n      pngquant: {\n        quality: '95-100'\n      }\n    })\n  ]\n}\n```\n\n##### 5）使用雪碧图  \n&nbsp;&nbsp;&nbsp;&nbsp; 使用雪碧图本质上优化了HTTP请求的数量，将众多图片拼贴为一张作为背景图片引用，然后我们给一个元素设置固定大小，让它的背景图片位置进行变化，只截取大图一部分进行显示，就好像显示出了不同的图片，这就是雪碧图的原理。\n\n![](http://nojsja.gitee.io/static-resources/images/optimization/sprite.png)\n\n```css\n.container {\n  ...\n  background-image: url(\"sprite.png\");\n  background-position: -60px 0px;\n  width:48px;\n  height:48px;\n}\n```\n\n##### 6）避免空的 src 和 href 值  \n&nbsp;&nbsp;&nbsp;&nbsp; 当link标签的href属性为空、script标签的src属性为空的时候，浏览器渲染的时候会把当前页面的URL作为它们的属性值，从而把页面的内容加载进来作为它们的值。\n\n##### 7）避免使用`@import`来引入css  \n&nbsp;&nbsp;&nbsp;&nbsp; 这种语法会阻止多个css文件的并行下载，被`@import`引入的css文件会在引入它的css文件下载并渲染好之后才开始下载渲染自身。并且`@import`引入的css文件的下载顺序会被打乱，排列在`@import`之后的JS文件会先于`@import`下载。\n```css\n/* css file */\n@import 'custom.css';\n```\n\n##### 8）使用 CDN 服务来存放静态资源\n\n&nbsp;&nbsp;&nbsp;&nbsp; CDN 即内容分发网络。CDN 服务商将静态资源缓存到遍布全国的高性能加速节点上，当用户访问相应的业务资源时，CDN系统能够实时地根据网络流量和各节点的连接负载状况、到用户的距离和响应时间 等综合信息将用户的请求重新导向离用户最近的服务节点上，使内容能够传输的更快，更加稳定。可以提升首次请求的响应能力。\n\nCDN 的核心点有两个：\n- 缓存：把资源 copy 一份到 CDN 服务器上这个过程。\n- 回源：CDN节点 发现自己没有这个资源（一般是缓存的数据过期了），转头向根服务器（或者它的上层服务器）去要这个资源的过程。\n\nCDN 的优点：\n- 突破单域名文件加载并发请求限制\n- 减少服务器本身的流量消耗\n- 更快的资源加载速度\n- CDN内置版本控制，可以通过版本号加载指定版本的静态资源\n- 提供静态资源使用情况分析功能\n- 提供安全服务有效防止网站被攻击\n\n##### 9）使用 SVG 矢量图\n\n&nbsp;&nbsp;&nbsp;&nbsp; 优点：\n  - 任意放缩：用户可以任意缩放图像显示，而不会破坏图像的清晰度、细节等。\n  - 较小文件：总体来讲，SVG文件比那些GIF和JPEG格式的文件要小很多，因而下载也很快。\n  - 超强显示效果：SVG图像在屏幕上总是边缘清晰，它的清晰度适合任何屏幕分辨力和打印分辨力。\n\n#### 2. 渲染层面\n\n##### 1）减少页面的回流和重绘\n  - 使用CSS3属性`transform`来实现元素位移\n  - 让动画效果应用到`position: fixed/absolute`的元素上，原理是让其脱离文档流\n  - 向界面插入大量dom节点时先将dom元素添加到虚拟dom操作节点`DocumentFragment`上，最后再将虚拟节点实际添加到界面上。\n  - 避免直接使用JS操作dom元素的style样式，可以使用class一次性改变dom样式类。\n  - 将会引起页面回流、重绘的操作尽量放到DOM树的后面，减少级联反应。\n  - 使用CSS3动画Animation来实现一些复杂元素的动画效果，原理是利用了硬件加速\n  - 重复读取一些容易引起回流的元素属性时注意使用变量缓存\n  ```html\n  <!-- 几何属性相关 -->\n  elem.offsetLeft, elem.offsetTop, elem.offsetWidth, elem.offsetHeight, elem.offsetParent\n  elem.clientLeft, elem.clientTop, elem.clientWidth, elem.clientHeight elem.getClientRects(), elem.getBoundingClientRect()\n  <!-- 滚动相关 -->\n  elem.scrollBy(), elem.scrollTo()\n  elem.scrollIntoView(), elem.scrollIntoViewIfNeeded()\n  elem.scrollWidth, elem.scrollHeight\n  elem.scrollLeft, elem.scrollTop 除了读取，设置也会触发\n  ...\n  ```\n##### 2）减少DOM结构的层级\n##### 3）尽量不使用`table`布局和`iframe`内联网页\n  ```js\n  /* table布局 */\n  table布局不灵活，不利于css样式定制\n  table布局渲染性能较低，可能触发多次重绘\n  table布局不利于html语义化\n\n  /* iframe */\n  iframe会阻塞主页面的onload事件\n  iframe和主页面共享HTTP连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载\n  iframe不利于网页布局\n  iframe对移动端不友好\n  iframe的反复重新加载可能导致一些浏览器的内存泄露\n  iframe中的数据传输复杂\n  iframe不利于SEO\n  ```\n\n##### 4）flex布局的性能比`inline-block`和`float`布局都要好\n##### 5）CSS选择器的使用策略\n\n&nbsp;&nbsp;&nbsp;&nbsp; 浏览器是从选择器的右边到左边读取，选择器最右边的部分被称为关键选择器，与CSS选择器规则的效率相关。\n\n  **效率排序如下：**\n  内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类选择器 > 标签选择器 = 伪元素选择器\n\n  **要点：**\n  - 关键选择器避免使用通用选择器*，其查询开销较大\n  - 使用ID/Class选择器时尽量使其独立，因为无用的上层规则(标签、类名)只会增加查找时间，ID/Class已经具有单独筛选元素的能力\n  - 避免使用子选择器，尤其是将其与标签、通配符组合使用，性能开销较大\n  - 利用CSS元素属性继承的特性，是多个元素复用多一种规则\n  - 移除无匹配样式，否则会造成无用的样式解析和匹配，同时增大CSS文件体积\n\n##### 6）css的书写顺序也会对其解析渲染性能造成影响\n&nbsp;&nbsp;&nbsp;&nbsp; 浏览器从上到下开始解析一段css规则，将容易造成回流、重绘的属性放在上部可以让渲染引擎更高效地工作，可以按照下列顺序来进行书写，使用编辑器的`csslint`插件可以辅助完成这一过程：\n  - 定位属性\n  ```css\n  position  display  float  left  top  right  bottom \n  overflow  clear  z-index\n  ```\n  - 几何属性\n  ```css\n  width  height  padding  border  margin   background\n  ```\n  - 文字样式\n  ```css\n  font-family   font-size   font-style   font-weight   font-varient  color\n  ```\n  - 文本属性\n  ```css\n  text-align   vertical-align   text-wrap   text-transform   text-indent    text-decoration   letter-spacing    word-spacing    white-space   text-overflow\n  ```\n  - CSS3中新增属性\n  ```css\n  content   box-shadow   border-radius  transform\n  ```\n\n### ➣ Javascript 性能优化方面\n\n#### 1. 网络层面\n\n##### 1）压缩JS代码资源  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 代码资源中存在很多无用的空格和符号等，去除他们带来的效益是可观的，另一方面压缩资源也能起到源代码保护的作用。现代前端工程化框架一般继承了此类压缩插件，比如webpack框架的`uglifyjs`插件。\n```js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n\nmodule.exports = {\n  optimization: {\n    minimizer: [new UglifyJsPlugin()],\n  },\n};\n```\n\n#### 2. 渲染层面\n\n##### 1）使用函数节流和函数去抖处理一些函数的高频触发调用  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; 在面对一些需要进行调用控制的函数高频触发场景时，可能有人会对何时使用节流何时使用去抖产生疑问。这里通过一个特性进行简单区分：如果你需要保留短时间内高频触发的最后一次结果时，那么使用去抖函数，如果你需要对函数的调用次数进行限制，以最佳的调用间隔时间保持函数的持续调用而不关心是否是最后一次调用结果时，请使用节流函数。  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; 比如echarts图常常需要在窗口resize之后重新使用数据渲染，但是直接监听resize事件可能导致短时间内渲染函数被触发多次。我们可以使用函数去抖的思想，监听resize事件后在监听器函数里获取参数再使用参数调用事先初始化好了的throttle函数，保证resize过程结束后能触发一次实际的echarts重渲染即可。\n  - 节流`throttle`\n  ```js\n  function throttle(fn, time) {\n    let canRun = true;\n\n    return function() {\n      if (canRun) {\n        canRun = false;\n        setTimeout(() => {\n          fn.apply(this, arguments);\n          canRun = true;\n        }, time);\n      }\n    };\n  }\n  ```\n  - 去抖`debounce`\n  ```js\n  function debounce(fn, time) {\n    let timer;\n\n    return function() {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        fn.apply(this, arguments);\n      }, time);\n    };\n  }\n  ```\n\n##### 2）Js实现动画时使用`requestAnimationFrame`替代定时器  \n\n&nbsp;&nbsp;&nbsp;&nbsp; `window.requestAnimationFrame()`告诉浏览器你希望执行一个动画，并且要求浏览器在下次重绘之前(每帧之前)调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 设置的回调函数在被调用时会被传入触发的时间戳，在同一个帧中的多个回调函数，它们每一个都会接受到一个相同的时间戳，即使在计算上一个回调函数的工作负载期间已经消耗了一些时间，我们可以记录前后时间戳差值来控制元素动画的速度和启停。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 如果换用过定时器`setTimeout/setInterval`来控制帧动画的话，一般我们采用60帧进行动画绘制，所以设置的定时时间就应该是`1000 / 60 = 17ms`。不过由于定时器本身只是把回调函数放入了`宏任务队列`，其精确度受到主进程代码执行栈影响，可能导致帧动画的回调函数在浏览器的一次渲染过程中才被触发(理想情况是渲染前调用回调函数获得计算值，渲染时执行计算值绘制)，因此本应在当前帧呈现的绘制效果被延迟到了下一帧，产生丢帧卡顿的情况。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 这里让我们使用`requestAnimationFrame`来实现一个[动画处理类](https://github.com/nojsja/javascript-learning/blob/master/js-animation/animation.js)作为例子，使用方式如下：  \n```js\nvar anime = new Animation();\nanime.setTarget('#animationTarget');\n// 右下角移动50px\nanime.push('#animationTarget', { x: 50, y: 50, duration: 1000, func: 'easeIn' });\n// 右上角移动50px\nanime.push('#animationTarget', { x: -50, y: -50, duration: 500, func: 'linear' });\n```\n预览图：\n![](http://nojsja.gitee.io/static-resources/images/optimization/animation.gif)\n```js\n/**\n * [tween 缓动算法]\n * @param {[Number]}  time [动画已经消耗的时间]\n * @param {[String]}  start [目标开始的位置]\n * @param {[String]}  distance [目标开始位置和结束位置的距离]\n * @param {[Number]}  duration [动画总持续时间]\n */\nvar tween = {\n  linear: function( time, start, distance, duration ) { return distance*time/duration + start; },\n  easeIn: function( time, start, distance, duration ) { return distance * ( time /= duration ) * time + start; },\n  strongEaseIn: function(time, start, distance, duration) { return distance * ( time /= duration ) * time * time * time * time + start; },\n  strongEaseOut: function(time, start, distance, duration) { return distance * ( ( time = time / duration - 1) * time * time * time * time + 1 ) + start; },\n  sinEaseIn: function( time, start, distance, duration ) { return distance * ( time /= duration) * time * time + start; },\n  sinEaseOut: function(time,start,distance,duration){ return distance * ( ( time = time / duration - 1) * time * time + 1 ) + start; },\n};\n\n\n/* ------------------- 动画控制类 ------------------- */\nfunction Animation() {\n  this.store = {};\n};\n\n/* ------------------- 初始化处理元素 ------------------- */\nAnimation.prototype.setTarget = function (selector) {\n  var element = document.querySelector(selector);\n\n  if (element) {\n    // element.style.position = 'relative';\n    this.store[selector] = {\n      selector: selector,\n      element: document.querySelector(selector),\n      status: 'pending',\n      queue: [],\n      timeStart: '',\n      positionStart: { x: '', y: '' },\n      positionEnd: { x: '', y: '' },\n    };\n  }\n};\n\n/**\n * [start 开始动画]\n * @param  {[String]} selector [选择器]\n * @param  {[type]} func     [缓动动画]\n */\nAnimation.prototype.start = function (selector, func) {\n  var that = this;\n  var target = this.store[selector];\n  target.status = 'running';\n  // 帧调用函数\n  that.update({x: 0, y: 0}, selector);\n};\n\n/**\n * [update 更新位置]\n * @param  {[type]} selector [description]\n */\nAnimation.prototype.update =  function (position, selector) {\n  var target = this.store[selector],\n    that = this,\n    timeUsed,\n    positionX, positionY;\n  //\n  if (!target || !target.queue.length) {\n    target.status = 'pending';\n    return;\n  };\n\n  // reset position\n  target.element.style.left = position.x + 'px';\n  target.element.style.top = position.y + 'px';\n\n  // position\n  target.positionStart = { x: position.x, y: position.y };\n  target.positionEnd = { x: position.x + target.queue[0].x, y: position.y + target.queue[0].y };\n  // time\n  target.timeStart = null;\n\n  // 递归调用\n  var callback = function (time) {\n    if (target.timeStart === null) target.timeStart = time; // 动画开始时间\n    timeUsed = time - target.timeStart;\n    // 当前动画完成\n    if (timeUsed >= target.queue[0].duration) {\n      target.queue.shift();\n      that.step(target.element, target.positionEnd.x, target.positionEnd.y);\n      target.status = 'running';\n      // var position = target.element.getBoundingClientRect();\n      var position = {\n        x: parseInt(target.element.style.left),\n        y: parseInt(target.element.style.top),\n      };\n      // 下一个动画\n      that.update(position, selector);\n      return;\n    }\n    positionX = target.queue[0].func(\n      timeUsed,\n      target.positionStart.x,\n      target.positionEnd.x - target.positionStart.x,\n      target.queue[0].duration,\n    );\n    positionY = target.queue[0].func(\n      timeUsed,\n      target.positionStart.y,\n      target.positionEnd.y - target.positionStart.y,\n      target.queue[0].duration,\n    );\n    that.step(target.element, positionX, positionY);\n\n    requestAnimationFrame(callback);\n  };\n\n  requestAnimationFrame(callback);\n};\n\n/**\n * [step dom操作]\n * @param  {[DOM]} element [dom 元素]\n * @param  {[Number]} x        [x坐标]\n * @param  {[Number]} y        [y坐标]\n */\nAnimation.prototype.step = function (element, x, y) {\n  element.style.left = x + 'px';\n  element.style.top = y + 'px';\n};\n\n/**\n * [push 加入动画队列]\n * @param  {[String]} selector [dom选择器]\n * @param  {[Object]} conf     [位置数据]\n */\nAnimation.prototype.push = function (selector, conf) {\n  if (this.store[selector]) {\n    this.store[selector].queue.push({\n      x: conf.x,\n      y: conf.y,\n      duration: conf.duration || 1000,\n      func: tween[conf.func] || tween['linear'],\n    });\n  }\n};\n\n/* ------------------- 动画出队列 ------------------- */\nAnimation.prototype.pop = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.pop();\n  }\n};\n\n/* ------------------- 清空动画队列 ------------------- */\nAnimation.prototype.clear = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.length = 1;\n  }\n};\n```\n\n##### 3）使用`IntersectionObserver`API来替代`scroll`事件实现元素相交检测  \n\n以下是一些需要用到相交检测的场景：  \n  - 图片懒加载 -- 当图片滚动到可见时才进行加载\n  - 内容无限滚动 -- 用户滚动到接近滚动容器底部时直接加载更多数据，而无需用户操作翻页，给用户一种网页可以无限滚动的错觉\n  - 检测广告的曝光情况——为了计算广告收益，需要知道广告元素的曝光情况\n  - 在用户看见某个区域时执行任务、播放视频\n\n&nbsp;&nbsp;&nbsp;&nbsp; 以内容无限滚动为例，古老的相交检测方案就是使用`scroll`事件监听滚动容器，在监听器函数中获取滚动元素的几何属性判断元素是否已经滚动到底部。我们知道`scrollTop`等属性的获取和设置都会导致页面回流，并且如果界面需要绑定多个监听函数到`scroll`事件进行类似操作的时候，页面性能会大打折扣：\n```js\n/* 滚动监听 */\n  onScroll = () => {\n    const { \n      scrollTop, scrollHeight, clientHeight\n    } = document.querySelector('#target');\n    \n    /* 已经滚动到底部 */\n    // scrollTop(向上滚动的高度)；clientHeight(容器可视总高度)；scrollHeight(容器的总内容长度)\n    if (scrollTop + clientHeight === scrollHeight) { /* do something ... */ }\n  }\n```\n&nbsp;&nbsp;&nbsp;&nbsp; 因此在处理相交检测的问题时我们应该在考虑兼容性的情况下尽可能使用`IntersectionObserver` API，浏览器会自行优化多个元素的相交管理。IntersectionObserver API 允许你配置一个回调函数，当以下情况发生时会被调用：\n  - 每当目标(target)元素与设备视窗或者其他指定元素发生交集的时候执行。设备视窗或者其他元素我们称它为根元素或根(root)。\n  - Observer第一次监听目标元素的时候\n\n&nbsp;&nbsp;&nbsp;&nbsp; 创建一个 IntersectionObserver对象，并传入相应参数和回调用函数，该回调函数将会在目标(target)元素和根(root)元素的交集大小超过阈值(threshold)规定的大小时候被执行：\n```js\nlet options = {\n    root: document.querySelector('#scrollArea'),\n    rootMargin: '0px', // 指定根(root)元素的外边距\n    threshold: 1.0, // 表示子元素完全和容器元素相交\n}\n\nconst observer = new IntersectionObserver(callback, options);\nobserver.observe(document.querySelector('#scrollTarget'));\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; **配置项1：** 通常需要关注文档最接近的可滚动祖先元素的交集更改，如果元素不是可滚动元素的后代，则默认为设备视窗。如果要观察相对于根(root)元素的交集，请指定根(root)元素为null。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **配置项2：** 目标(target)元素与根(root)元素之间的交叉度是交叉比(intersection ratio)。这是目标(target)元素相对于根(root)的交集百分比的表示，它的取值在0.0和1.0之间。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **配置项3：** 根(root)元素的外边距。类似于 CSS 中的  margin 属性，比如 \"10px 20px 30px 40px\" (top, right, bottom, left)。如果有指定root参数，则rootMargin也可以使用百分比来取值。该属性值是用作root元素和target发生交集时候的计算交集的区域范围，使用该属性可以控制root元素每一边的收缩或者扩张。默认值为0。  \n\n这里我们再以一个实际案例来进行展示，即图片懒加载方案：\n```js\n(function lazyload() {\n\n  var imagesToLoad = document.querySelectorAll('image[data-src]');\n\n  function loadImage(image) {\n    image.src = image.getAttribute('data-src');\n    image.addEventListener('load', function() {\n      image.removeAttribute('data-src');\n    });\n  }\n\n  var intersectionObserver = new IntersectionObserver(function(items, observer) {\n    items.forEach(function(item) {\n      /* 所有属性：\n        item.boundingClientRect - 目标元素的几何边界信息\n        item.intersectionRatio - 相交比 intersectionRect/boundingClientRect\n        item.intersectionRect -  描述根和目标元素的相交区域\n        item.isIntersecting - true(相交开始)，false(相交结束)\n        item.rootBounds - 描述根元素\n        item.target - 目标元素\n        item.time - 时间原点(网页在窗口加载完成时的时间点)到交叉被触发的时间的时间戳\n      */\n      if (item.isIntersecting) {\n        loadImage(item.target);\n        observer.unobserve(item.target);\n      }\n    });\n  });\n\n  imagesToLoad.forEach(function(image) {\n    intersectionObserver.observe(image);\n  });\n  \n})();\n```\n\n##### 4）使用`Web-Workers`在后台运行CPU密集型任务  \n&nbsp;&nbsp;&nbsp;&nbsp; Web Worker 允许你在后台线程中运行脚本。如果你有一些高强度的任务，可以将它们分配给 Web Worker，这些 WebWorker 可以在不干扰用户界面的情况下运行它们。创建后，Web Worker 可以将消息发布到该代码指定的事件处理程序来与 JavaScript 代码通信，反之亦然。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 一个简单的专用worker示例，我们在主进程代码中创建一个worker实例，然后向实例发送一个数字，worker接受到消息后拿到数字进行一次`斐波那契函数`运算，并发送运算结果给主线程：\n```js\n/* -------------- main.js -------------- */\nvar myWorker = new Worker(\"fibonacci.js\");\nworker.onmessage = function (e) {\n  console.log('The result of fibonacci.js: ', e.data);\n};\nworker.postMessage(100);\n\n/* -------------- fibonacci.js -------------- */\nfunction fibonacci(n) {\n  if (n > 1)\n    return fibonacci(n - 2) + fibonacci(n - 1);\n  return n;\n}\n\nself.onmessage = function(e) {\n  self.postMessage(fibonacci(Number(e.data)));\n}\n```\n\n\\> Worker的常见类型\n\n  - **专用Worker：** 一个专用worker仅仅能被生成它的脚本所使用。\n  - **共享Worker：** 一个共享worker可以被多个脚本使用——即使这些脚本正在被不同的window、iframe或者worker访问。\n  - **Service Workers：** 一般作为web应用程序、浏览器和网络（如果可用）之前的代理服务器。它们旨在（除开其他方面）创建有效的离线体验，拦截网络请求，以及根据网络是否可用采取合适的行动并更新驻留在服务器上的资源。他们还将允许访问推送通知和后台同步API。\n  - **Chrome Workers：** 一种仅适用于firefox的worker。如果您正在开发附加组件，希望在扩展程序中使用worker且有在你的worker中访问  js-ctypes 的权限，你可以使用Chrome Workers。\n  - **Audio Workers：** 音频worker使得在web worker上下文中直接完成脚本化音频处理成为可能。\n\n\\> Worker中可以使用的函数和接口  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 你可以在web worker中使用大多数的标准javascript特性，包括：\n  - Navigator\n  - Location(只读)\n  - XMLHttpRequest\n  - Array, Date, Math, and String\n  - setTimeout/setInterval\n  - Cache & IndexedDB\n\n\\> 关于线程安全  \n\n&nbsp;&nbsp;&nbsp;&nbsp; Worker接口会生成真正的操作系统级别的线程，然而，对于 web worker 来说，与其他线程的通信点会被很小心的控制，这意味着你很难引起并发问题。你没有办法去访问非线程安全的组件或者是 DOM，此外你还需要通过序列化对象来与线程交互特定的数据。所以你要是不费点劲儿，还真搞不出错误来。\n\n\\> 内容安全策略  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 有别于创建它的document对象，worker有它自己的执行上下文。因此普遍来说，worker并不受限于创建它的document（或者父级worker）的内容安全策略。举个例子，假设一个document有如下头部声明：`Content-Security-Policy: script-src 'self'`，这个声明有一部分作用在于禁止脚本代码使用eval()方法。然而，如果脚本代码创建了一个worker，在worker中却是可以使用eval()的。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 为了给worker指定内容安全策略，必须为发送worker代码的请求本身加上一个`内容安全策略`。有一个例外情况，即worker脚本的使用dataURL或者blob创建的话，worker会继承创建它的document或者worker的内容安全策略。\n\n\\> 一些使用场景\n\n  - 在一些不采用`websockets`架构的应用中使用传统的轮询方式定时获取接口数据以供前端脚本实现一些界面和数据自动更新功能\n  - 光线追踪：光线追踪是一种通过将光线追踪为像素来生成图像的渲染技术。光线追踪使用CPU密集型数学计算来模拟光线路径。这个想法是模拟反射，折射，材质等一些效果。所有这些计算逻辑都可以添加到Web Worker中以避免阻塞UI线程。\n  - 加密：由于对个人和敏感数据的监管日益严格，端到端加密越来越受欢迎。加密可能是一件非常耗时的事情，特别是如果有很多数据必须经常加密（例如在将数据发送到服务器之前）。这是一个非常好的场景，可以使用Web Worker。\n  - 预取数据：为了优化您的网站或Web应用程序并缩短数据加载时间，您可以利用Web Workers预先加载和存储一些数据，以便稍后在需要时使用它。\n  - PWA进式Web应用程序：这种应用程序中即使网络连接不稳定，它们也必须快速加载。这意味着数据必须存储在本地浏览器中，这是IndexDB或类似的API进场的地方。为了在不阻塞UI线程的情况下使用，工作必须在Web Workers中完成。\n\n##### 5）使用事件委托  \n&nbsp;&nbsp;&nbsp;&nbsp; 事件委托就是把一个元素响应事件（click、keydown......）的函数委托到另一个元素。一般来讲，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。[=> 一篇不错的参考文章](https://zhuanlan.zhihu.com/p/26536815)\n\n&nbsp;&nbsp;&nbsp;&nbsp; 其实我们熟悉的 React 框架也并不是将 click 事件直接绑定在 dom 上面，而是采用事件冒泡的形式冒泡到 document 上面，这个思路借鉴了事件委托机制。而更老一点的jQuery也是允许我们直接使用它提供的API来进行事件委托：\n```js\n$('.parent').on('click', 'a', function () {\n  console.log('click event on tag a');\n}\n```\n\\>  关于事件冒泡机制：\n\n![event-pop](http://nojsja.gitee.io/static-resources/images/optimization/event-pop.jpg)\n\n\\>  事件模型的**三个阶段**：\n\n- 捕获阶段：在事件冒泡的模型中，捕获阶段不会响应任何事件\n- 目标阶段：目标阶段就是指事件响应到触发事件的最底层元素上\n- 冒泡阶段：冒泡阶段就是事件的触发响应会从最底层目标一层层地向外到最外层（根节点），事件代理即是利用\n件冒泡的机制把里层所需要响应的事件绑定到外层\n\n\\> 事件委托的**优点**：\n- 减少内存消耗，提升性能  \n我们不需要再为每个列表元素都绑定一个事件，只需要将事件函数绑定到父级`ul`组件：\n```\n<ul id=\"list\">\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n  ......\n  <li>item n</li>\n</ul>\n```\n- 动态绑定事件  \n&nbsp;&nbsp;&nbsp;&nbsp; 比如上述的例子中列表项就几个，我们给每个列表项都绑定了事件。在很多时候，我们需要通过 AJAX 或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的。所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。\n\n\\> 使用`Element.matchesSelector` API简单实现事件委托：\n```js\nif (!Element.prototype.matches) {\n  Element.prototype.matches =\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector ||\n    function(s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n      while (--i >= 0 && matches.item(i) !== this) {}\n      return i > -1;            \n    };\n}\n\ndocument.getElementById('list').addEventListener('click', function (e) {\n  // 兼容性处理\n  var event = e || window.event;\n  var target = event.target || event.srcElement;\n  if (target.matches('li.class-1')) {\n    console.log('the content is: ', target.innerHTML);\n  }\n});\n```\n\n\\>  事件委托的**局限性**：\n- 比如 focus、blur 之类的事件本身没有事件冒泡机制，所以无法委托。\n- mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。\n\n##### 6）一些编码方面的优化建议  \n  - 长列表数据的遍历使用`for`循环替代`forEach`。  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; for循环能通过关键字`break`实现循环中断，forEach首先性能不如for，其次在处理一些需要条件断开的循环时比较麻烦(可以包裹try catch，然后throw error断开)。如果是数组类型的数据遍历的话，也可以使用`array.every(item => { if (...) return false; else do something; })`来实现条件断开。\n\n  - 尽量不要在全局作用域声明过多变量  \n  \n  &nbsp;&nbsp;&nbsp;&nbsp; 全局变量存在于全局上下文，全局上下文是作用域链的顶端，当通过作用域链进行变量查找的时候，会延长查找时间。全局执行上下文会一直存在于上下文执行栈，直到程序推出，这样会影响GC垃圾回收。如果局部作用域中定义了同名变量，会遮蔽或者污染全局。  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; 可以使用单例模式来封装一系列逻辑(运用了闭包的原理)，并通过一个公用的变量名暴露给作用域中的其它模块使用，同时也提高了代码的内聚性：\n  ```js\n  /* bad */\n  const workData = {};\n  function workA() { /* do something ... */ }\n  function workB() { /* do something ... */ }\n  function workC() { /* do something ... */ }\n\n  /* good */\n  const work = (function (initParams) {\n    const workData = {};\n    function workA() { /* do something ... */ }\n    function workB() { /* do something ... */ }\n    function workC() { /* do something ... */ }\n\n    return {\n      doWorkA: workA,\n      doWorkB: workB,\n      doWorkC: workC,\n      workSeries: function() {\n        this.doWorkB();\n        this.doWorkC();\n      }\n    };\n  })(initParams);\n\n  work.doWorkA();\n  work.workSeries();\n  ```\n  - 使用`switch`和`map`的方式处理需要大量逻辑判断的情况  \n  \n  &nbsp;&nbsp;&nbsp;&nbsp; 连续的`if`判断中在到达目标条件之前需要经过多个条件判断，而map和switch方式都能够通过条件直接找到对应的处理逻辑。\n  ```js\n  /* bad */\n  if (condition === 'a')\n    // do something\n  else if (condition === 'b')\n    // do something\n  else\n  ...\n\n  /* good */\n  switch (condition) {\n    case 'a':\n      // do something ...\n    break;\n    case 'b':\n      // do something ...\n    break;\n    ...\n    default:\n      break;\n  }\n  \n  const conditionMap = {\n    a: function() { /* do something */ },\n    b: function() { /* do something */ },\n    ...\n  };\n  conditionMap[condition]();\n  ```\n  - 定义构造函数时使用原型声明对象的公用方法  \n  \n  &nbsp;&nbsp;&nbsp;&nbsp; 我们在`new`一个对象时，js所做的就是创建一个空对象，并把此对象作为构造函数的context来执行(参考call调用逻辑)，执行后空对象上就被复制了构造函数的的属性和方法，然后js会把构造函数的原型绑定到对象的`__proto__`属性上，最后构造函数将对象返回给我们使用。  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; 从以上可以看出，如果我们直接把一些function逻辑写入构造函数的话，在对象创建的时候每个function都会在新对象上被创建一次，消耗额外的资源，且违反了程序复用原则。建议将function放入构造函数的原型，那么对象就能通过原型链查找来使用这个方法，而不是在对象自身上重新复制一个一模一样的逻辑。\n  ```js\n  /* bad */\n  function Structure(attr) {\n    this.attr = attr;\n    this.getAttr = (function() {\n      return this.attr;\n    }).bind(this);\n  }\n  var obj = new Structure('obj1');\n  obj.getAttr(); // from obj itself\n\n  /* good */\n  function Structure(attr) {\n    this.attr = attr;\n  }\n  Structure.prototype.getAttr = function() {\n    return this.attr;\n  }\n  var obj = new Structure('obj1');\n  obj.getAttr(); // from obj prototype chain\n  ```\n\n### ➣ React 性能优化方面\n\n#### 1. 网络层面\n\n##### 1）React jsx/js文件压缩  \n\n##### 2）使用`React.lazy`和`React.Suspense`实现代码分割和懒加载  \n\n&nbsp;&nbsp;&nbsp;&nbsp; React开发的应用通常会借用`webpack`这类项目打包器将编写的各个模块代码和引入的依赖库的代码打包成一个单独的JS文件，有些未做CSS样式分离优化的项目甚至连样式表都和JS文件打包在一起，然后在页面加载的HTML文件中需要下载了这一整个JS文件后之后才能进去到页面构建阶段。对于中小型项目还好，简单的首屏优化就能将资源压缩到足够小，但是一些大型项目可能存在很多子项目，如果不对代码做分割然后按子项目模块加载的话，在首屏我们浏览器需要下载整个项目的依赖文件，导致加载时间过长。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 使用`React.lazy`可以分割子项目代码并根据当前页面路由来动态加载页面依赖文件，尽管并没有减少应用整体的代码体积，但你可以避免加载用户永远不需要的代码，并在初始加载的时候减少所需加载的代码量。\n\n注意：搭配`Babel`进行代码编译时需要安装额外的babel插件以提供动态加载功能：\n```json\n{\n  \"presets\": [...],\n  \"plugins\": [\n    \"dynamic-import-webpack\",\n    ...\n  ]\n}\n```\n\n- React.lazy 函数能让你像渲染常规组件一样处理动态引入的组件：  \n  它接受一个函数，这个函数需要动态调用 import()。它必须返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。\n  ```js\n  /* 使用前 */\n  import OtherComponent from './OtherComponent';\n  /* 使用后，代码将会在组件首次渲染时，自动导入包含 OtherComponent 组件的包 */\n  const OtherComponent = React.lazy(() => import('./OtherComponent'));\n\n  /* -------------- OtherComponent.js -------------- */\n  export default function() { return (<span>other</span>) };\n  ```\n- 使用 React.Suspense 提供一个组件加载时的占位组件：  \n  ```js\n  import React, { Suspense } from 'react';\n\n  const OtherComponent = React.lazy(() => import('./OtherComponent'));\n\n  function mainComponent() {\n    return (\n      <Suspense fallback={<div>Loading...</div>}>\n        <section>\n          <OtherComponent />\n          <AnotherComponent />\n        </section>\n      </Suspense>\n    )\n  }\n  ```\n\n- 使用异常捕获组件避免模块加载失败时让整个应用崩溃\n  ```js\n  /* -------------- mainComponent.js -------------- */\n  function MyComponent() {\n    return (\n      <MyErrorBoundary>\n        <Suspense fallback={<div>Loading...</div>}>\n          <OtherComponent />\n        </Suspense>\n      </MyErrorBoundary>\n    )\n  }\n\n  /* -------------- ErrorBoundary.js -------------- */\n  class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n      // 更新 state 使下一次渲染能够显示降级后的 UI\n      return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n      logErrorToMyService(error, errorInfo); // 可以选择将错误日志上报给服务器\n    }\n\n    render() {\n      if (this.state.hasError)\n        return <h1>Something went wrong.</h1>; // 你可以自定义降级后的 UI 并渲染\n      return this.props.children; // 正常渲染子组件\n    }\n  }\n  ```\n- 代码分割搭配 React-Router 同样适用\n  ```js\n  import React, { Suspense, lazy } from 'react';\n  import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n  const Home = lazy(() => import('./routes/Home'));\n\n  const App = () => (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n  ```\n\n##### 3）使用`React.Fragment`来避免非必要DOM层级的引入  \n\n&nbsp;&nbsp;&nbsp;&nbsp; React通常要求我们在编写一个组件时返回单个container组件包裹的DOM结构，而不允许直接返回多个未包裹的子组件，如果不使用Fragment就必须额外添加一层DOM节点，比如：\n```js\n/* bad */\nclass myComponent extends React.Component {\n  render() {\n    return (\n      <div>\n        <td>1</td>\n        <td>2</td>\n      </div>\n    )\n  }\n}\n```\n额外添加的`div`增加了无用的DOM层级，且会造成`table`组件无法正确渲染(tr/td之间多了一层div)。\n使用Fragment后最终所有`td`标签都会被直接添加到上层的`tr`标签下，同时也不会产生多余层级：\n```js\n/* good */\nclass myComponent extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <td>1</td>\n        <td>2</td>\n      </React.Fragment>\n    )\n  }\n}\n```\n\n#### 2. 渲染层面\n\n##### 1）使用`shouldComponentUpdate`避免不必要渲染  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 当一个React组件内部state或外部传入props更新时，会触发组件的重新渲染，开发者可以在`shouldComponentUpdate`生命周期中通过对比传入的即将被更新的state和props来决定组件是否要重新渲染，函数默认返回true，即触发渲染：\n```js\nclass CounterButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 1};\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.color !== nextProps.color ||\n      this.state.count !== nextState.count\n    ) return true;\n    \n    return false;\n  }\n\n  render() {\n    return (\n      <button\n        color={this.props.color}\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n```\n&nbsp;&nbsp;&nbsp;&nbsp; **适用情况：** 当前组件的props/state并没有发生改变，但是由于其父组件的重新渲染，导致当前组件也被迫进入了重新渲染阶段。这时候为组件添加`shouldComponentUpdate`生命周期函数进行数据比较就显得尤为重要了，特别是当组件的DOM结构复杂、嵌套层次很深，重新渲染的性能消耗昂贵的时候。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **滥用情况：** 并非所有组件都需要被添加此生命周期用于数据比较，因为比较这一过程本身也是需要消耗性能的，如果一个组件的state/props本来就会经常更新，那么这个组件久无需使用`scp`进行优化  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **深比较函数：** 有时候一个组件所需的数据结构很复杂，比如用于展示当前目录层级的资源树组件，其依赖的数据采用树形结构，树形组件一般采用递归的渲染方式，组件的渲染更新操作昂贵。因此我们可以考虑在这类组件的`scp`生命周期中使用深比较函数来对更新前后的属性数据进行一次递归比较，以判断当前资源树组件是否需要进行更新：\n```js\n/**\n * [deepComparison 深比较]\n * @param  {[type]} data [any]\n * @return {[type]}      [boolean]\n */\nfunction deepComparison(data1, data2) {\n  const { hasOwnProperty } = Object.prototype;\n  const { toString } = Object.prototype;\n\n  // 获取变量类型\n  const getType = (d) => {\n    if (d === null) return 'null';\n    if (d !== d) return 'nan';\n    if (typeof d === 'object') {\n      if (toString.call(d) === '[object Date]') return 'date';\n      if (toString.call(d) === '[object RegExp]') return 'regexp';\n      return 'object';\n    }\n    return (typeof d).toLowerCase();\n  };\n\n  // 基本类型比较\n  const is = (d1, d2, type) => {\n    if (type === 'nan') return true;\n    if (type === 'date' || type === 'regexp') return d1.toString() === d2.toString();\n    return (d1 === d2);\n  };\n\n  // 递归比较\n  const compare = (d1, d2) => {\n    var type1 = getType(d1);\n    var type2 = getType(d2);\n    var index;\n\n    if (type1 !== type2) return false;\n\n    if (type1 === 'object') {\n      var keys1 = Object.keys(d1);\n      var keys2 = Object.keys(d2);\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      for (let i = 0; i < keys1.length; i += 1) {\n        index = keys2.indexOf(keys1[i]);\n        if (\n          (index === -1) ||\n          !compare(d1[keys1[i]], d2[keys2[index]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    return is(d1, d2, type1);\n  };\n\n  return compare(data1, data2);\n}\n```\n&nbsp;&nbsp;&nbsp;&nbsp; **最佳实践：** 深比较函数其实消耗的性能很大，特别是当数据层级很深的时候，函数的递归需要创建和销毁多个执行上下文，可能数据比较本身所消耗的性能就多于一次渲染了。因此大部分情况下使用`immutable`不可变数据结构(对象每次更新都返回一个全新的对象，对象的引用发生变化) + `shallowEqual`做浅比较是比较理想的选择。\n\n##### 2）使用`PureComponnet`实现简单展示组件的自动浅比较  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 上文提到`scu`生命周期中我们可以通过自定义prop/state比较函数来来控制组件是否需要重新渲染，最后得出了`immutable`不可变数据+shallowEqual是最佳实践。其实React已经给我们提供了一种自带浅比较函数的组件类型即`React.PureComponnet`，它适用于一些数据类型简单的展示组件，当我们给这些React组件传入相同的 props 和 state时，render() 函数会渲染相同的内容，那么在这些情况下使用 React.PureComponent 可提高性能：\n```js\nclass SimpleCounter extends React.PureComponnet {\n  state = { count: 0 }\n\n  render(props) {\n    return (\n      <div\n        onClick={() => this.setState({ count: (this.state.count+1) })}\n        style={{color: this.props.color}}\n      >count:${this.state.count}</div>\n    )\n  }\n}\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; **适用情况** 和 **滥用情况** 与`scp`生命周期大致相同，不过需要额外注意：  \n- React.PureComponent仅作对象的浅层比较，如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。\n- 我们可以仅仅在props 和 state 较为简单时，才使用 React.PureComponent。\n- 另一种处理方式就是在深层数据结构发生变化时调用 forceUpdate() 来确保组件被正确地更新。\n- 当然也可以使用[ immutable.js ](https://immutable-js.github.io/immutable-js/)框架来处理数据结构，可以加快不可变对象加速嵌套数据的比较。一种简单的处理方式是在state数据需要更新时我们手动进行对象引用的更新：\n```js\nclass SimpleDisplay extends React.PureComponent {\n  state = {\n    list: ['a', 'b']\n  }\n\n  insertItem = () => {\n    const { list } = this.state;\n    /* bad - 组件不会更新 */\n    list.push('c');\n    this.setState({ list });\n\n    /* good - 重新更新list变量的引用 */\n    this.setState({ list: [...list, 'c'] });\n    // or\n    this.setState({ list: a.concat('c') });\n\n  }\n\n  render() {\n    return (\n      <div onClick={this.insertItem}>\n      { this.state.list.join('/') }\n      </div>\n    )\n  }\n}\n```\n\n##### 3）使用`React.memo`缓存和复用组件的渲染结果  \n\n&nbsp;&nbsp;&nbsp;&nbsp; `React.memo()`为高阶组组件，如果组件在相同 props 的情况下渲染相同的结果(state的更新依然会导致重新渲染)，那么你可以通过将其包装在 React.memo 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现：\n```js\nfunction MyComponent(props) {\n  /* 使用 props 渲染 */\n}\nfunction areEqual(prevProps, nextProps) {\n  /*\n  如果把 nextProps 与 prevProps 的比较结果一致则返回 true，\n  否则返回 false，这一点与shoudComponentUpdate表现相反，且areEqual\n  中无法对组件内部state进行比较\n  */\n}\nexport default React.memo(MyComponent, areEqual);\n```\n\\>  **不建议**使用`React.memo()`的情况：  \n- 如果组件经常接收不同的属性props对象来更新的话，那么缓存上一次渲染结果这一过程毫无意义，且增加了额外的性能支出。\n- 此方法仅作为性能优化的方式而存在，不要依赖它来“阻止”渲染，因为这会产生 bug。\n  \n\\>  **建议**使用`React.memo()`的情况：\n- 一个组件经常会以相同的props更新，比如父组件的其它部分更新导致的当前子组件非必要渲染\n- 常常用于将函数组件转变为具有`memorized`缓存特性的组件，组件内部可以使用`useState`hook进行内部状态管理，对组件的自更新没有影响。\n- 如果一个组件包含大量复杂的`dom`结构，重新渲染的性能消耗较大的话可以考虑使用`React.memo`包裹，避免很多不必要的渲染情况，在props不变的情况下让react能直接复用上次的渲染结果。\n\n##### 4）使用Context来共享全局数据  \n\n&nbsp;&nbsp;&nbsp;&nbsp; Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言，使用 context, 我们可以避免通过中间元素来逐级传递 props。举个例子，在下面的代码中，我们通过一个 “theme” 属性手动调整一个按钮组件的样式：\n```js\n/* -------------- context.js -------------- */\nconst theme = {\n  light: { color: 'black', backgroundColor: 'white' },\n  dark: { color: 'white', backgroundColor: 'black' }\n}\n\n// 为当前的 theme 创建一个 context（“light”为默认值）。\nexport default const ThemeContext = React.createContext(theme.light);\n\n/* -------------- App.js -------------- */\n// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\nconst ThemeContext = require('./context.js');\nclass App extends React.Component {\n  render() {\n    // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n    // 无论多深，任何组件都能读取这个值。\n    // 在这个例子中，我们将 “dark” 作为当前的值传递下去，当Provider不指定当前值时\n    // createContext中传入的默认值会生效\n    return (\n      <ThemeContext.Provider value=\"dark\">\n        <Toolbar />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\n/* -------------- Toolbar.js -------------- */\n\n// 中间的组件再也不必指明往下传递 theme 了。\nfunction Toolbar() {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\n/* -------------- ThemedButton.js -------------- */\nconst ThemeContext = require('./context.js');\nclass ThemedButton extends React.Component {\n  // 指定 contextType 读取当前的 theme context。\n  // React 会往上找到最近的 theme Provider，然后使用它的值。\n  // 在这个例子中，当前的 theme 值为 “dark”。\n  static contextType = ThemeContext;\n  render() {\n    return <Button theme={this.context} />;\n  }\n}\n```\n&nbsp;&nbsp;&nbsp;&nbsp; 对于不需要订阅context更新来重新渲染界面的情况，上面的代码示例已经足够应付，如果想要接收动态变化的context值来响应式更新界面，则需要使用`Context.Consumer`API，它内部包裹一个返回dom组件的function函数，传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 默认值：\n```js\n...\nrender() {\n  return (\n    <MyContext.Consumer>\n      { value => <span>{value}</span>/* 基于 context 值进行渲染*/ }\n    </MyContext.Consumer>\n  )\n}\n```\n**注意：** Context 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。\n\n##### 5）优化组件分割策略来处理长列表组件的渲染  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 有时候我们需要渲染一些拥有很多子组件的的列表组件，比如一个展示当前目录下有哪些文件的`FileList`组件，它包含很多子组件`FileListItem`，如下。想象我们在使用 input 组件获取输入值更新 state 得时候，同时也不可避免的触发了同一个render函数下`FileListItem`组件的重新渲染，即使从父级传入的 files 数组未发生任任何改变：\n```js\nclass FileList extends Component {\n  state = {\n    value: null\n  }\n\n  onChange = (e) => this.setState({ value: e.target.value })\n\n  render() {\n    return (\n      <div>\n        <input value={this.state.value} onChange={this.onChange}></input>\n        <div>\n          {\n            this.props.files.map((file) => {\n              return <FileListItem key={file.name} name={file.name} />;\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; 这时候我们就可以考虑在设计组件结构时将 `files.map()`这部分的逻辑完全抽离到一个完整的子组件内，否则前面提到的`shouldComponentUpdate`、`PureComponent`、`memo`等优化方法都将无法施展。我们无法直接在`FileList`组件内针对 files 数组未改变的情况下做任何优化，因为 input 组件的每次状态更新都会让 `FileList` 组件的每一个部分都重新渲染一遍，优化的组件结构如下：\n```jsx\n/* -------------- FileList.js -------------- */\nclass FileList extends Component {\n  state = { value: null }\n\n  onChange = (e) => this.setState({ value: e.target.value })\n\n  render() {\n    return (\n      <>\n        <input value={this.state.value} onChange={this.onChange}></input>\n        <FileListItemContainer files={this.props.files} />\n      </>\n    );\n  }\n}\n\n/* -------------- FileListItemContainer.js -------------- */\nexport default React.memo(function({ files }) {\n  return (\n    <div>\n      {\n        files.map((file) => {\n          return <FileListItem key={file.name} name={file.name} />;\n        });\n      }\n    </div>\n  );\n});\n```\n\n##### 6）正确理解组件 key 的使用策略  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 在 React 中，UI 界面的构建是由当前虚拟DOM树状态决定的。前后两个状态就对应两套界面，产生不同的状态之后，然后由 React 通过时间复杂度为O(n)的 dom diff 算法来比较两个界面的区别，最后由React选择性的来更新真实DOM。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 要想理解 React组件 key 的设计理念我们得先简单了解一下React进行DOM树 diff 的过程，我们都知道Js脚本直接操作网页DOM元素时会造成重绘和回流等`低效渲染`，因此React的DOM树 diff 过程针对的是更新前后两颗虚拟的DOM树，虚拟DOM树并不是真实的DOM节点，而是一种描述页面DOM元素结构的树形数据结构，每个虚拟树节点存储了一个DOM元素的属性和样式等信息。React 需要基于这两棵树之间的差别来判断如何有效率的更新 UI 以保证当前 UI 与最新的树保持同步。为了提高树diff的效率，于是 React 在以下两个假设的基础之上提出了一套复杂度为 O(n) 的启发式算法：\n- i. 两个不同类型的元素会产生出不同的树(比如 img 和 span 被看做完全不同的两个节点)\n- ii. 开发者可以通过 key 属性来暗示哪些子元素在不同的渲染下能保持稳定\n\n&nbsp;&nbsp;&nbsp;&nbsp; 如果两次渲染同一位置的某个元素的类型改变，例如从 span 变成了 image，那么不用多说这个组件和其子组件都会先被卸载，同时触发卸载前组件的生命周期`componentWillUnmount`，然后将新的DOM节点渲染添加到页面上，新的组件实例将执行 `componentWillMount`、`componentDidMount` 等周期方法，所有跟之前的树所关联的 state 也会被销毁。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 如果两次渲染组件的类型未改变，React 将更新该组件实例的 props 以跟最新的元素保持一致，并且调用该实例的 `componentWillReceiveProps`、`componentWillUpdate` 以及 `componentDidUpdate` 方法。下一步，React 会调用 `render()`方法并比较其子节点产生的差异。\n\n想象我们在子元素列表末尾新增元素时：\n```js\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n/* 插入third */\n<ul>\n  <li>first</li>\n  <li>second</li>\n  <li>third</li>\n</ul>\n```\nReact 会先匹配到两颗虚拟DOM树对应的 `first`节点，然后匹配到两棵树的 `second` 节点，最后发现在`second`之后出现了一个全新的节点，dom渲染时就会插入第三个元素 `<li>third</li>` 到`second`之后，其更新开销会比较小。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 但是也有一种比较坏的情况，当我们将`third`节点插入到列表头时，React在 diff 过程中发现所有子节点都发生了变化(整体位置发生了相对改变)，React 不会意识到应该保留`first`和`second`，而是会重建每一个子元素，这种情况会带来性能问题：\n```jsx\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n/* 插入third */\n<ul>\n  <li>third</li>\n  <li>first</li>\n  <li>second</li>\n</ul>\n```\n&nbsp;&nbsp;&nbsp;&nbsp; 为了解决以上问题，React 支持 `key` 属性。当子元素拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素，相当于每个子节点都有了ID，因此能够游刃有余的判断哪些节点需要重建，而哪些节点只需要进行简单的位置移动即可。比如上个例子中React根据组件的Key就能识别我们只需要新建`third`节点并将它插入到first节点之前就能满足要求，而不需要将列表元素都重建一遍。  \n\n\\> 对组件key的 **误解 和 乱用：**\n- 页面中的所有组件key都不能重复 => 错！我们只需要保证同一列表层级的组件key不重复即可，当有重复key时可能会导致React在多次渲染时结果错乱。\n- 使用`Math.random()`函数来随机产生key值 => 大错特错！这样子做了之后，每次渲染key值都会变化，会引起所有使用了key的组件都会被卸载重建一次，性能优化效果为负。\n- key值只能用于列表组件 => 错！我们可以给任意一个组件添加key值，比如我们想让某个组件在props/state完全没改变的情况下触发其重建更新，那么就可以给予它两个阶段不同的key值。一个例子是用于重置Antd Form表单状态，让其在某些特殊情况下以之前的默认值重新挂载(触发表单更改后其默认值无法恢复)。\n\n##### 7）使用虚拟化渲染技术来优化超长列表组件  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 有时候项目中要求我们在不使用分页的情况下渲染一个超长的列表组件，比如一个文件上传列表里面的每个文件上传任务，我们同时添加成千上万个上传任务，然后并行上传几个，操作者同时也能通过列表的上下滚动来查看每个上传任务的状态。这种变态数量级的界面元素展示+本就不简单的上传流程控制，必然导致我们的界面会有一定程度的卡顿。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 一个解决方案就是可以采用懒加载技术来实现当滚动到任务列表底部时加载其余的一小部分任务列表元素，这样虽然解决了初次渲染时耗费时间过长的问题，不过随着滚动到底部加载的任务条目越来越多，界面的渲染负载也会越来越大。这种情况下采用虚拟化滚动技术来进行优化就显得很有必要了。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 虚拟列表是一种根据滚动容器元素的可视区域高度来渲染长列表数据中某一个部分数据的技术。这里需要简单了解一下其原理，如果要直接使用的话可以考虑这两个热门的虚拟滚动库 [react-window](https://react-window.now.sh/) 和 [react-virtualized](https://bvaughn.github.io/react-virtualized/)。\n\n\\> 首先清楚虚拟化滚动技术中的几个**关键元素**：\n\n![vitual-scroll](http://nojsja.gitee.io/static-resources/images/optimization/vitual-scroll.png)\n\n- i. 滚动容器元素：一般情况下，滚动容器元素是 window 对象。然而，我们可以通过布局的方式，在某个页面中任意指定一个或者多个滚动容器元素。只要某个元素能在内部产生横向或者纵向的滚动，那这个元素就是滚动容器元素。\n- ii. 可滚动区域：滚动容器元素的内部内容区域。假设有 100 条数据，每个列表项的高度是 50，那么可滚动的区域的高度就是 100 * 50。可滚动区域当前的具体高度值一般可以通过(滚动容器)元素的 scrollHeight 属性获取。用户可以通过滚动来改变列表在可视区域的显示部分。\n- iii. 可视区域：滚动容器元素的视觉可见区域。如果容器元素是 window 对象，可视区域就是浏览器的视口大小(即视觉视口)；如果容器元素是某个 div 元素，其高度是 300，右侧有纵向滚动条可以滚动，那么视觉可见的区域就是可视区域。\n\n\\> 如何在只渲染少量可视元素的情况下，还能让滚动条的长度和位置显示正确呢：\n- i. 首先明确滚动容器内容的总高度=`列表元素高度 * 列表元素总个数`，容器可视高度固定，通过设置css `overflow: scroll` 就能显示滚动条。\n- ii. 滚动容器的可视高度固定，那么可视区域能显示的列表元素个数=`容器可视高度/列表元素高度`，这些少量的元素不足以撑起容器元素的进行滚动，滚动容器滚动条高度仍然会为0。因此我们通过设置容器元素`paddingTop+paddingBottom`(startOffset+endOffset)来让容器元素内容总高度正确显示，这里`padding+可视高度=容器内容总高度`。\n```jsx\n...\nrender() {\n  return (\n    <div\n      style={{\n        paddingTop: `${startOffset}px`,\n        paddingBottom: `${endOffset}px`\n      }}\n      className='wrapper'\n    >\n      { /* render list */ }\n    </div>\n  )\n}\n```\n- iii. 容器能正确显示滚动高度了，那么如何让我们在滚动的时候能知道应该显示哪些元素呢？一个巧妙的方法就是根据当前滚动条的`scrollTop`(滚动容器的固有属性：表示能够向上滚动的高度值，可以直接获取)计算首个应该渲染的元素的索引`startIndex`以及最后需要渲染的元素的索引`endIndex`，然后再根据两个索引分别计算 paddingTop 和 paddingBottom 即可：\n  - startIndex = Math.ceil(scrollTop / 滚动容器元素总高度)\n  - 可视元素个数 = 可视区域高度 / 滚动元素高度\n  - endIndex = startIndex + 可视区域元素个数\n  - 当前渲染元素renderItems = data.slice(startIndex, endIndex)\n  - paddingTop = startIndex * 滚动元素高度\n  - paddingBottom = (this.data.length - this.endIndex - 1) * 滚动元素高度\n\n&nbsp;&nbsp;&nbsp;&nbsp; 以上为虚拟化滚动简化的描述模型，实际实现时还要考虑：缓存已经加载的列表元素的位置信息、列表元素的高度是否可变、增加缓冲元素来减少白屏情况(缓冲元素就是预加载的几个接近视口可显示元素的上下部分其它元素)、容器元素resize后的处理等。处理情况还是比较复杂，使用成熟的库处理而不是自己造轮子是比较好的方案，不过个中原理还是要理解。\n\n### 结语\n&nbsp;&nbsp;&nbsp;&nbsp; 学习前端性能优化的方方面面，一方面是对我们核心基础知识的考察，另一方面也能为我们遇到的一些实际问题提供处理思路，是每个前端人进阶的的必经之路。  \n\n以上就是本篇文章的所有内容，后续有需要还会继续更新...","source":"_posts/2021-02-07-前端性能优化技巧详解-1.md","raw":"---\ntitle: 前端性能优化技巧详解(1)\ncatalog: true\ncomments: true\nindexing: true\nheader-img: \"/blogs/img/article_header/article_header.png\"\ntop: false\ntocnum: true\ndate: 2021-02-07 12:37:10\nsubtitle: The guide of frontend performance optimization\ntags:\n- javascript\n- html\n- css\n- performance\ncategories:\n- Performance\n- Javascript\n- HTML\n- CSS\n---\n\n> 此文主要描述 html / css / js / react 即时渲染和网络加载优化方面的知识，webpack常用优化方法和HTTP Server等优化请关注《 前端性能优化技巧详解(2) 》  \n\n> 如果之后发现有其它要点值得梳理，会继续更新本文...\n\n### 目录\n\n- 目录\n- ➣ HTML/CSS 性能优化方面\n  - 1. 网络层面\n    - 1）抽离内联样式内联脚本\n    - 2）defer脚本和async脚本\n    - 3）压缩HTML/CSS代码资源\n    - 4）压缩图片/音视频等多媒体资源\n    - 5）使用雪碧图\n    - 6）避免空的 src 和 href 值\n    - 7）避免使用`@import`来引入css\n  - 2. 渲染层面\n    - 1）减少页面的回流和重绘\n    - 2）减少DOM结构的层级\n    - 3）尽量不使用`table`布局和`iframe`内联网页\n    - 4）flex布局的性能比`inline-block`和`float`布局都要好\n    - 5）CSS选择器的使用策略\n    - 6）css的书写顺序也会对其解析渲染性能造成影响\n- ➣ Javascript 性能优化方面\n  - 1. 网络层面\n    - 1）压缩JS代码资源\n  - 2. 渲染层面\n    - 1）使用函数节流和函数去抖处理一些函数的高频触发调用\n    - 2）Js实现动画时使用`requestAnimationFrame`替代定时器\n    - 3）使用`IntersectionObserver`API来替代`scroll`事件实现元素相交检测\n    - 4）使用`Web-Workers`在后台运行CPU密集型任务\n    - 5）使用事件委托\n    - 6）一些编码方面的优化建议\n- ➣ React 性能优化方面\n  - 1. 网络层面\n    - 1）React jsx/js文件压缩\n    - 2）使用`React.lazy`和`React.Suspense`实现代码分割和懒加载\n    - 3）使用`React.Fragment`来避免非必要DOM层级的引入\n  - 2. 渲染层面\n    - 1）使用`shouldComponentUpdate`避免不必要渲染\n    - 2）使用`PureComponnet`实现简单展示组件的自动浅比较\n    - 3）使用`React.memo`缓存和复用组件的渲染结果\n    - 4）使用Context来共享全局数据\n    - 5）优化组件分割策略来处理长列表组件的渲染\n    - 6）正确理解组件 key 的使用策略\n    - 7）使用虚拟化渲染技术来优化超长列表组件\n- 结语\n\n\\>  思维导图：\n\n![](http://nojsja.gitee.io/static-resources/images/optimization//frontend-optimization.png)\n\n&nbsp;&nbsp;&nbsp;&nbsp; 前端性能优化是个很大的概念，涉及HTTP协议、浏览器渲染原理、操作系统和网络、前端工程化和Js底层原理等各个方面。通过建立思维导图可以让我们很好的将各个优化方面组织和联系起来。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 按照优化原理的不同则可以将其分为`网络层面优化`和`渲染层面`的优化，网络层面的优化更多体现在资源加载时的优化，而渲染层的优化更多体现在运行时优化。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 例如优化浏览器缓存策略以减少HTTP请求传输量、图片和其它静态资源的压缩、服务器端启用Gzip压缩、使用CDN、图片懒加载、延迟脚本Defer和异步脚本Async等属于网络层面的优化。另一方面，减少页面的回流和重绘、使用React.Fragment减少界面dom层级、使用骨架屏、函数节流和去抖、React长列表组件优化、通过事件冒泡机制实现事件委托等就属于渲染层面的优化。\n\n### ➣ HTML/CSS 性能优化方面\n\n#### 1. 网络层面\n\n##### 1）抽离内联样式内联脚本\n  - 内联资源不利于浏览器缓存，造成重复的资源请求\n  - 内联资源会造成HTML臃肿，不利于HTTP传输\n  - 内联资源的下载和解析可能会阻塞导致界面渲染，导致界面白屏\n  - 内联资源不好管理和维护\n\n##### 2）defer脚本和async脚本  \n  &nbsp;&nbsp;&nbsp;&nbsp; HTML在解析时遇到声明的`<script>`脚本会立即下载和执行，往往会延迟界面剩余部分的解析，造成界面白屏的情况。比较古老的优化方式之一就是将脚本放到HTML文档末尾，这样子解决了白屏的问题，可是在DOM文档结构复杂冗长时，也会造成一定的界面脚本下载和执行延迟，script标签新属性`async`和`defer`可以解决此类问题：\n  ```html\n  <!DOCTYPE html>\n  <html>\n    <head>\n    </head>\n    <body>\n      <script src=\"path/to/target.js\" defer></script>\n      <script src=\"path/to/target.js\" async></script>\n    </body>\n  </html>\n  ```\n  - defer脚本  \n  &nbsp;&nbsp;&nbsp;&nbsp; 延迟脚本-声明`defer`属性的外部`<script>`脚本下载时不会阻塞HTML的解析和渲染，并且会在HTML渲染完成并且可实际操作之后开始执行(`DOMContentLoaded`事件被触发之前)，各个脚本解析执行顺序对应声明时的位置顺序，执行完成后会触发页面`DOMContentLoaded`事件。\n  - async脚本  \n  &nbsp;&nbsp;&nbsp;&nbsp; 异步脚本-声明`async`属性的外部`<script>`脚本下载时不会阻塞HTML的解析和渲染，各个脚本的下载和执行完全独立，下载完成后即开始执行，所以执行顺序不固定，与`DOMContentLoaded`事件的触发没有关联性。\n  - 动态脚本加载技术  \n  &nbsp;&nbsp;&nbsp;&nbsp; 在脚本执行时动态运行`loadScript`函数可以实现类似延迟脚本和异步脚本的效果：`isDefer`为真值时脚本的执行顺序为脚本位置顺序，为假值时效果同于异步脚本。\n  ```js\n    function loadScript(src, isDefer) {\n      let script = document.createElement('script');\n      script.src = src;\n      script.async = !isDefer;\n      document.body.append(script);\n    }\n  ```\n\n##### 3）压缩HTML/CSS代码资源  \n&nbsp;&nbsp;&nbsp;&nbsp; 代码资源中存在很多无用的空格和符号等，去除他们带来的效益是可观的，另一方面压缩资源也能起到源代码保护的作用。现代前端工程化框架一般继承了此类压缩功能，比如webpack框架的`html-loader`。\n```json\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.html$/i,\n        loader: 'html-loader',\n        options: {\n          minimize: true,\n        },\n      },\n    ],\n  },\n};\n\n```\n\n##### 4）压缩图片/音视频等多媒体资源  \n&nbsp;&nbsp;&nbsp;&nbsp; 其实网页带宽往往被图片等资源大量占用，压缩他们能带来超出预期的优化效益。现代前端工程化框架一般继承了此类压缩插件，如`imagemin-webpack-plugin`插件。\n```js\nimport ImageminPlugin from 'imagemin-webpack-plugin'\n\nmodule.exports = {\n  plugins: [\n    // 确保该插件在任何添加图片的插件之后\n    new ImageminPlugin({\n      disable: process.env.NODE_ENV !== 'production', // 开发模式禁用\n      pngquant: {\n        quality: '95-100'\n      }\n    })\n  ]\n}\n```\n\n##### 5）使用雪碧图  \n&nbsp;&nbsp;&nbsp;&nbsp; 使用雪碧图本质上优化了HTTP请求的数量，将众多图片拼贴为一张作为背景图片引用，然后我们给一个元素设置固定大小，让它的背景图片位置进行变化，只截取大图一部分进行显示，就好像显示出了不同的图片，这就是雪碧图的原理。\n\n![](http://nojsja.gitee.io/static-resources/images/optimization/sprite.png)\n\n```css\n.container {\n  ...\n  background-image: url(\"sprite.png\");\n  background-position: -60px 0px;\n  width:48px;\n  height:48px;\n}\n```\n\n##### 6）避免空的 src 和 href 值  \n&nbsp;&nbsp;&nbsp;&nbsp; 当link标签的href属性为空、script标签的src属性为空的时候，浏览器渲染的时候会把当前页面的URL作为它们的属性值，从而把页面的内容加载进来作为它们的值。\n\n##### 7）避免使用`@import`来引入css  \n&nbsp;&nbsp;&nbsp;&nbsp; 这种语法会阻止多个css文件的并行下载，被`@import`引入的css文件会在引入它的css文件下载并渲染好之后才开始下载渲染自身。并且`@import`引入的css文件的下载顺序会被打乱，排列在`@import`之后的JS文件会先于`@import`下载。\n```css\n/* css file */\n@import 'custom.css';\n```\n\n##### 8）使用 CDN 服务来存放静态资源\n\n&nbsp;&nbsp;&nbsp;&nbsp; CDN 即内容分发网络。CDN 服务商将静态资源缓存到遍布全国的高性能加速节点上，当用户访问相应的业务资源时，CDN系统能够实时地根据网络流量和各节点的连接负载状况、到用户的距离和响应时间 等综合信息将用户的请求重新导向离用户最近的服务节点上，使内容能够传输的更快，更加稳定。可以提升首次请求的响应能力。\n\nCDN 的核心点有两个：\n- 缓存：把资源 copy 一份到 CDN 服务器上这个过程。\n- 回源：CDN节点 发现自己没有这个资源（一般是缓存的数据过期了），转头向根服务器（或者它的上层服务器）去要这个资源的过程。\n\nCDN 的优点：\n- 突破单域名文件加载并发请求限制\n- 减少服务器本身的流量消耗\n- 更快的资源加载速度\n- CDN内置版本控制，可以通过版本号加载指定版本的静态资源\n- 提供静态资源使用情况分析功能\n- 提供安全服务有效防止网站被攻击\n\n##### 9）使用 SVG 矢量图\n\n&nbsp;&nbsp;&nbsp;&nbsp; 优点：\n  - 任意放缩：用户可以任意缩放图像显示，而不会破坏图像的清晰度、细节等。\n  - 较小文件：总体来讲，SVG文件比那些GIF和JPEG格式的文件要小很多，因而下载也很快。\n  - 超强显示效果：SVG图像在屏幕上总是边缘清晰，它的清晰度适合任何屏幕分辨力和打印分辨力。\n\n#### 2. 渲染层面\n\n##### 1）减少页面的回流和重绘\n  - 使用CSS3属性`transform`来实现元素位移\n  - 让动画效果应用到`position: fixed/absolute`的元素上，原理是让其脱离文档流\n  - 向界面插入大量dom节点时先将dom元素添加到虚拟dom操作节点`DocumentFragment`上，最后再将虚拟节点实际添加到界面上。\n  - 避免直接使用JS操作dom元素的style样式，可以使用class一次性改变dom样式类。\n  - 将会引起页面回流、重绘的操作尽量放到DOM树的后面，减少级联反应。\n  - 使用CSS3动画Animation来实现一些复杂元素的动画效果，原理是利用了硬件加速\n  - 重复读取一些容易引起回流的元素属性时注意使用变量缓存\n  ```html\n  <!-- 几何属性相关 -->\n  elem.offsetLeft, elem.offsetTop, elem.offsetWidth, elem.offsetHeight, elem.offsetParent\n  elem.clientLeft, elem.clientTop, elem.clientWidth, elem.clientHeight elem.getClientRects(), elem.getBoundingClientRect()\n  <!-- 滚动相关 -->\n  elem.scrollBy(), elem.scrollTo()\n  elem.scrollIntoView(), elem.scrollIntoViewIfNeeded()\n  elem.scrollWidth, elem.scrollHeight\n  elem.scrollLeft, elem.scrollTop 除了读取，设置也会触发\n  ...\n  ```\n##### 2）减少DOM结构的层级\n##### 3）尽量不使用`table`布局和`iframe`内联网页\n  ```js\n  /* table布局 */\n  table布局不灵活，不利于css样式定制\n  table布局渲染性能较低，可能触发多次重绘\n  table布局不利于html语义化\n\n  /* iframe */\n  iframe会阻塞主页面的onload事件\n  iframe和主页面共享HTTP连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载\n  iframe不利于网页布局\n  iframe对移动端不友好\n  iframe的反复重新加载可能导致一些浏览器的内存泄露\n  iframe中的数据传输复杂\n  iframe不利于SEO\n  ```\n\n##### 4）flex布局的性能比`inline-block`和`float`布局都要好\n##### 5）CSS选择器的使用策略\n\n&nbsp;&nbsp;&nbsp;&nbsp; 浏览器是从选择器的右边到左边读取，选择器最右边的部分被称为关键选择器，与CSS选择器规则的效率相关。\n\n  **效率排序如下：**\n  内联样式 > ID 选择器 > 类选择器 = 属性选择器 = 伪类选择器 > 标签选择器 = 伪元素选择器\n\n  **要点：**\n  - 关键选择器避免使用通用选择器*，其查询开销较大\n  - 使用ID/Class选择器时尽量使其独立，因为无用的上层规则(标签、类名)只会增加查找时间，ID/Class已经具有单独筛选元素的能力\n  - 避免使用子选择器，尤其是将其与标签、通配符组合使用，性能开销较大\n  - 利用CSS元素属性继承的特性，是多个元素复用多一种规则\n  - 移除无匹配样式，否则会造成无用的样式解析和匹配，同时增大CSS文件体积\n\n##### 6）css的书写顺序也会对其解析渲染性能造成影响\n&nbsp;&nbsp;&nbsp;&nbsp; 浏览器从上到下开始解析一段css规则，将容易造成回流、重绘的属性放在上部可以让渲染引擎更高效地工作，可以按照下列顺序来进行书写，使用编辑器的`csslint`插件可以辅助完成这一过程：\n  - 定位属性\n  ```css\n  position  display  float  left  top  right  bottom \n  overflow  clear  z-index\n  ```\n  - 几何属性\n  ```css\n  width  height  padding  border  margin   background\n  ```\n  - 文字样式\n  ```css\n  font-family   font-size   font-style   font-weight   font-varient  color\n  ```\n  - 文本属性\n  ```css\n  text-align   vertical-align   text-wrap   text-transform   text-indent    text-decoration   letter-spacing    word-spacing    white-space   text-overflow\n  ```\n  - CSS3中新增属性\n  ```css\n  content   box-shadow   border-radius  transform\n  ```\n\n### ➣ Javascript 性能优化方面\n\n#### 1. 网络层面\n\n##### 1）压缩JS代码资源  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 代码资源中存在很多无用的空格和符号等，去除他们带来的效益是可观的，另一方面压缩资源也能起到源代码保护的作用。现代前端工程化框架一般继承了此类压缩插件，比如webpack框架的`uglifyjs`插件。\n```js\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n\nmodule.exports = {\n  optimization: {\n    minimizer: [new UglifyJsPlugin()],\n  },\n};\n```\n\n#### 2. 渲染层面\n\n##### 1）使用函数节流和函数去抖处理一些函数的高频触发调用  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; 在面对一些需要进行调用控制的函数高频触发场景时，可能有人会对何时使用节流何时使用去抖产生疑问。这里通过一个特性进行简单区分：如果你需要保留短时间内高频触发的最后一次结果时，那么使用去抖函数，如果你需要对函数的调用次数进行限制，以最佳的调用间隔时间保持函数的持续调用而不关心是否是最后一次调用结果时，请使用节流函数。  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; 比如echarts图常常需要在窗口resize之后重新使用数据渲染，但是直接监听resize事件可能导致短时间内渲染函数被触发多次。我们可以使用函数去抖的思想，监听resize事件后在监听器函数里获取参数再使用参数调用事先初始化好了的throttle函数，保证resize过程结束后能触发一次实际的echarts重渲染即可。\n  - 节流`throttle`\n  ```js\n  function throttle(fn, time) {\n    let canRun = true;\n\n    return function() {\n      if (canRun) {\n        canRun = false;\n        setTimeout(() => {\n          fn.apply(this, arguments);\n          canRun = true;\n        }, time);\n      }\n    };\n  }\n  ```\n  - 去抖`debounce`\n  ```js\n  function debounce(fn, time) {\n    let timer;\n\n    return function() {\n      clearTimeout(timer);\n      timer = setTimeout(() => {\n        fn.apply(this, arguments);\n      }, time);\n    };\n  }\n  ```\n\n##### 2）Js实现动画时使用`requestAnimationFrame`替代定时器  \n\n&nbsp;&nbsp;&nbsp;&nbsp; `window.requestAnimationFrame()`告诉浏览器你希望执行一个动画，并且要求浏览器在下次重绘之前(每帧之前)调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 设置的回调函数在被调用时会被传入触发的时间戳，在同一个帧中的多个回调函数，它们每一个都会接受到一个相同的时间戳，即使在计算上一个回调函数的工作负载期间已经消耗了一些时间，我们可以记录前后时间戳差值来控制元素动画的速度和启停。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 如果换用过定时器`setTimeout/setInterval`来控制帧动画的话，一般我们采用60帧进行动画绘制，所以设置的定时时间就应该是`1000 / 60 = 17ms`。不过由于定时器本身只是把回调函数放入了`宏任务队列`，其精确度受到主进程代码执行栈影响，可能导致帧动画的回调函数在浏览器的一次渲染过程中才被触发(理想情况是渲染前调用回调函数获得计算值，渲染时执行计算值绘制)，因此本应在当前帧呈现的绘制效果被延迟到了下一帧，产生丢帧卡顿的情况。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 这里让我们使用`requestAnimationFrame`来实现一个[动画处理类](https://github.com/nojsja/javascript-learning/blob/master/js-animation/animation.js)作为例子，使用方式如下：  \n```js\nvar anime = new Animation();\nanime.setTarget('#animationTarget');\n// 右下角移动50px\nanime.push('#animationTarget', { x: 50, y: 50, duration: 1000, func: 'easeIn' });\n// 右上角移动50px\nanime.push('#animationTarget', { x: -50, y: -50, duration: 500, func: 'linear' });\n```\n预览图：\n![](http://nojsja.gitee.io/static-resources/images/optimization/animation.gif)\n```js\n/**\n * [tween 缓动算法]\n * @param {[Number]}  time [动画已经消耗的时间]\n * @param {[String]}  start [目标开始的位置]\n * @param {[String]}  distance [目标开始位置和结束位置的距离]\n * @param {[Number]}  duration [动画总持续时间]\n */\nvar tween = {\n  linear: function( time, start, distance, duration ) { return distance*time/duration + start; },\n  easeIn: function( time, start, distance, duration ) { return distance * ( time /= duration ) * time + start; },\n  strongEaseIn: function(time, start, distance, duration) { return distance * ( time /= duration ) * time * time * time * time + start; },\n  strongEaseOut: function(time, start, distance, duration) { return distance * ( ( time = time / duration - 1) * time * time * time * time + 1 ) + start; },\n  sinEaseIn: function( time, start, distance, duration ) { return distance * ( time /= duration) * time * time + start; },\n  sinEaseOut: function(time,start,distance,duration){ return distance * ( ( time = time / duration - 1) * time * time + 1 ) + start; },\n};\n\n\n/* ------------------- 动画控制类 ------------------- */\nfunction Animation() {\n  this.store = {};\n};\n\n/* ------------------- 初始化处理元素 ------------------- */\nAnimation.prototype.setTarget = function (selector) {\n  var element = document.querySelector(selector);\n\n  if (element) {\n    // element.style.position = 'relative';\n    this.store[selector] = {\n      selector: selector,\n      element: document.querySelector(selector),\n      status: 'pending',\n      queue: [],\n      timeStart: '',\n      positionStart: { x: '', y: '' },\n      positionEnd: { x: '', y: '' },\n    };\n  }\n};\n\n/**\n * [start 开始动画]\n * @param  {[String]} selector [选择器]\n * @param  {[type]} func     [缓动动画]\n */\nAnimation.prototype.start = function (selector, func) {\n  var that = this;\n  var target = this.store[selector];\n  target.status = 'running';\n  // 帧调用函数\n  that.update({x: 0, y: 0}, selector);\n};\n\n/**\n * [update 更新位置]\n * @param  {[type]} selector [description]\n */\nAnimation.prototype.update =  function (position, selector) {\n  var target = this.store[selector],\n    that = this,\n    timeUsed,\n    positionX, positionY;\n  //\n  if (!target || !target.queue.length) {\n    target.status = 'pending';\n    return;\n  };\n\n  // reset position\n  target.element.style.left = position.x + 'px';\n  target.element.style.top = position.y + 'px';\n\n  // position\n  target.positionStart = { x: position.x, y: position.y };\n  target.positionEnd = { x: position.x + target.queue[0].x, y: position.y + target.queue[0].y };\n  // time\n  target.timeStart = null;\n\n  // 递归调用\n  var callback = function (time) {\n    if (target.timeStart === null) target.timeStart = time; // 动画开始时间\n    timeUsed = time - target.timeStart;\n    // 当前动画完成\n    if (timeUsed >= target.queue[0].duration) {\n      target.queue.shift();\n      that.step(target.element, target.positionEnd.x, target.positionEnd.y);\n      target.status = 'running';\n      // var position = target.element.getBoundingClientRect();\n      var position = {\n        x: parseInt(target.element.style.left),\n        y: parseInt(target.element.style.top),\n      };\n      // 下一个动画\n      that.update(position, selector);\n      return;\n    }\n    positionX = target.queue[0].func(\n      timeUsed,\n      target.positionStart.x,\n      target.positionEnd.x - target.positionStart.x,\n      target.queue[0].duration,\n    );\n    positionY = target.queue[0].func(\n      timeUsed,\n      target.positionStart.y,\n      target.positionEnd.y - target.positionStart.y,\n      target.queue[0].duration,\n    );\n    that.step(target.element, positionX, positionY);\n\n    requestAnimationFrame(callback);\n  };\n\n  requestAnimationFrame(callback);\n};\n\n/**\n * [step dom操作]\n * @param  {[DOM]} element [dom 元素]\n * @param  {[Number]} x        [x坐标]\n * @param  {[Number]} y        [y坐标]\n */\nAnimation.prototype.step = function (element, x, y) {\n  element.style.left = x + 'px';\n  element.style.top = y + 'px';\n};\n\n/**\n * [push 加入动画队列]\n * @param  {[String]} selector [dom选择器]\n * @param  {[Object]} conf     [位置数据]\n */\nAnimation.prototype.push = function (selector, conf) {\n  if (this.store[selector]) {\n    this.store[selector].queue.push({\n      x: conf.x,\n      y: conf.y,\n      duration: conf.duration || 1000,\n      func: tween[conf.func] || tween['linear'],\n    });\n  }\n};\n\n/* ------------------- 动画出队列 ------------------- */\nAnimation.prototype.pop = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.pop();\n  }\n};\n\n/* ------------------- 清空动画队列 ------------------- */\nAnimation.prototype.clear = function (selector) {\n  if (this.store[selector]) {\n    this.store[selector].queue.length = 1;\n  }\n};\n```\n\n##### 3）使用`IntersectionObserver`API来替代`scroll`事件实现元素相交检测  \n\n以下是一些需要用到相交检测的场景：  \n  - 图片懒加载 -- 当图片滚动到可见时才进行加载\n  - 内容无限滚动 -- 用户滚动到接近滚动容器底部时直接加载更多数据，而无需用户操作翻页，给用户一种网页可以无限滚动的错觉\n  - 检测广告的曝光情况——为了计算广告收益，需要知道广告元素的曝光情况\n  - 在用户看见某个区域时执行任务、播放视频\n\n&nbsp;&nbsp;&nbsp;&nbsp; 以内容无限滚动为例，古老的相交检测方案就是使用`scroll`事件监听滚动容器，在监听器函数中获取滚动元素的几何属性判断元素是否已经滚动到底部。我们知道`scrollTop`等属性的获取和设置都会导致页面回流，并且如果界面需要绑定多个监听函数到`scroll`事件进行类似操作的时候，页面性能会大打折扣：\n```js\n/* 滚动监听 */\n  onScroll = () => {\n    const { \n      scrollTop, scrollHeight, clientHeight\n    } = document.querySelector('#target');\n    \n    /* 已经滚动到底部 */\n    // scrollTop(向上滚动的高度)；clientHeight(容器可视总高度)；scrollHeight(容器的总内容长度)\n    if (scrollTop + clientHeight === scrollHeight) { /* do something ... */ }\n  }\n```\n&nbsp;&nbsp;&nbsp;&nbsp; 因此在处理相交检测的问题时我们应该在考虑兼容性的情况下尽可能使用`IntersectionObserver` API，浏览器会自行优化多个元素的相交管理。IntersectionObserver API 允许你配置一个回调函数，当以下情况发生时会被调用：\n  - 每当目标(target)元素与设备视窗或者其他指定元素发生交集的时候执行。设备视窗或者其他元素我们称它为根元素或根(root)。\n  - Observer第一次监听目标元素的时候\n\n&nbsp;&nbsp;&nbsp;&nbsp; 创建一个 IntersectionObserver对象，并传入相应参数和回调用函数，该回调函数将会在目标(target)元素和根(root)元素的交集大小超过阈值(threshold)规定的大小时候被执行：\n```js\nlet options = {\n    root: document.querySelector('#scrollArea'),\n    rootMargin: '0px', // 指定根(root)元素的外边距\n    threshold: 1.0, // 表示子元素完全和容器元素相交\n}\n\nconst observer = new IntersectionObserver(callback, options);\nobserver.observe(document.querySelector('#scrollTarget'));\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; **配置项1：** 通常需要关注文档最接近的可滚动祖先元素的交集更改，如果元素不是可滚动元素的后代，则默认为设备视窗。如果要观察相对于根(root)元素的交集，请指定根(root)元素为null。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **配置项2：** 目标(target)元素与根(root)元素之间的交叉度是交叉比(intersection ratio)。这是目标(target)元素相对于根(root)的交集百分比的表示，它的取值在0.0和1.0之间。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **配置项3：** 根(root)元素的外边距。类似于 CSS 中的  margin 属性，比如 \"10px 20px 30px 40px\" (top, right, bottom, left)。如果有指定root参数，则rootMargin也可以使用百分比来取值。该属性值是用作root元素和target发生交集时候的计算交集的区域范围，使用该属性可以控制root元素每一边的收缩或者扩张。默认值为0。  \n\n这里我们再以一个实际案例来进行展示，即图片懒加载方案：\n```js\n(function lazyload() {\n\n  var imagesToLoad = document.querySelectorAll('image[data-src]');\n\n  function loadImage(image) {\n    image.src = image.getAttribute('data-src');\n    image.addEventListener('load', function() {\n      image.removeAttribute('data-src');\n    });\n  }\n\n  var intersectionObserver = new IntersectionObserver(function(items, observer) {\n    items.forEach(function(item) {\n      /* 所有属性：\n        item.boundingClientRect - 目标元素的几何边界信息\n        item.intersectionRatio - 相交比 intersectionRect/boundingClientRect\n        item.intersectionRect -  描述根和目标元素的相交区域\n        item.isIntersecting - true(相交开始)，false(相交结束)\n        item.rootBounds - 描述根元素\n        item.target - 目标元素\n        item.time - 时间原点(网页在窗口加载完成时的时间点)到交叉被触发的时间的时间戳\n      */\n      if (item.isIntersecting) {\n        loadImage(item.target);\n        observer.unobserve(item.target);\n      }\n    });\n  });\n\n  imagesToLoad.forEach(function(image) {\n    intersectionObserver.observe(image);\n  });\n  \n})();\n```\n\n##### 4）使用`Web-Workers`在后台运行CPU密集型任务  \n&nbsp;&nbsp;&nbsp;&nbsp; Web Worker 允许你在后台线程中运行脚本。如果你有一些高强度的任务，可以将它们分配给 Web Worker，这些 WebWorker 可以在不干扰用户界面的情况下运行它们。创建后，Web Worker 可以将消息发布到该代码指定的事件处理程序来与 JavaScript 代码通信，反之亦然。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 一个简单的专用worker示例，我们在主进程代码中创建一个worker实例，然后向实例发送一个数字，worker接受到消息后拿到数字进行一次`斐波那契函数`运算，并发送运算结果给主线程：\n```js\n/* -------------- main.js -------------- */\nvar myWorker = new Worker(\"fibonacci.js\");\nworker.onmessage = function (e) {\n  console.log('The result of fibonacci.js: ', e.data);\n};\nworker.postMessage(100);\n\n/* -------------- fibonacci.js -------------- */\nfunction fibonacci(n) {\n  if (n > 1)\n    return fibonacci(n - 2) + fibonacci(n - 1);\n  return n;\n}\n\nself.onmessage = function(e) {\n  self.postMessage(fibonacci(Number(e.data)));\n}\n```\n\n\\> Worker的常见类型\n\n  - **专用Worker：** 一个专用worker仅仅能被生成它的脚本所使用。\n  - **共享Worker：** 一个共享worker可以被多个脚本使用——即使这些脚本正在被不同的window、iframe或者worker访问。\n  - **Service Workers：** 一般作为web应用程序、浏览器和网络（如果可用）之前的代理服务器。它们旨在（除开其他方面）创建有效的离线体验，拦截网络请求，以及根据网络是否可用采取合适的行动并更新驻留在服务器上的资源。他们还将允许访问推送通知和后台同步API。\n  - **Chrome Workers：** 一种仅适用于firefox的worker。如果您正在开发附加组件，希望在扩展程序中使用worker且有在你的worker中访问  js-ctypes 的权限，你可以使用Chrome Workers。\n  - **Audio Workers：** 音频worker使得在web worker上下文中直接完成脚本化音频处理成为可能。\n\n\\> Worker中可以使用的函数和接口  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 你可以在web worker中使用大多数的标准javascript特性，包括：\n  - Navigator\n  - Location(只读)\n  - XMLHttpRequest\n  - Array, Date, Math, and String\n  - setTimeout/setInterval\n  - Cache & IndexedDB\n\n\\> 关于线程安全  \n\n&nbsp;&nbsp;&nbsp;&nbsp; Worker接口会生成真正的操作系统级别的线程，然而，对于 web worker 来说，与其他线程的通信点会被很小心的控制，这意味着你很难引起并发问题。你没有办法去访问非线程安全的组件或者是 DOM，此外你还需要通过序列化对象来与线程交互特定的数据。所以你要是不费点劲儿，还真搞不出错误来。\n\n\\> 内容安全策略  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 有别于创建它的document对象，worker有它自己的执行上下文。因此普遍来说，worker并不受限于创建它的document（或者父级worker）的内容安全策略。举个例子，假设一个document有如下头部声明：`Content-Security-Policy: script-src 'self'`，这个声明有一部分作用在于禁止脚本代码使用eval()方法。然而，如果脚本代码创建了一个worker，在worker中却是可以使用eval()的。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 为了给worker指定内容安全策略，必须为发送worker代码的请求本身加上一个`内容安全策略`。有一个例外情况，即worker脚本的使用dataURL或者blob创建的话，worker会继承创建它的document或者worker的内容安全策略。\n\n\\> 一些使用场景\n\n  - 在一些不采用`websockets`架构的应用中使用传统的轮询方式定时获取接口数据以供前端脚本实现一些界面和数据自动更新功能\n  - 光线追踪：光线追踪是一种通过将光线追踪为像素来生成图像的渲染技术。光线追踪使用CPU密集型数学计算来模拟光线路径。这个想法是模拟反射，折射，材质等一些效果。所有这些计算逻辑都可以添加到Web Worker中以避免阻塞UI线程。\n  - 加密：由于对个人和敏感数据的监管日益严格，端到端加密越来越受欢迎。加密可能是一件非常耗时的事情，特别是如果有很多数据必须经常加密（例如在将数据发送到服务器之前）。这是一个非常好的场景，可以使用Web Worker。\n  - 预取数据：为了优化您的网站或Web应用程序并缩短数据加载时间，您可以利用Web Workers预先加载和存储一些数据，以便稍后在需要时使用它。\n  - PWA进式Web应用程序：这种应用程序中即使网络连接不稳定，它们也必须快速加载。这意味着数据必须存储在本地浏览器中，这是IndexDB或类似的API进场的地方。为了在不阻塞UI线程的情况下使用，工作必须在Web Workers中完成。\n\n##### 5）使用事件委托  \n&nbsp;&nbsp;&nbsp;&nbsp; 事件委托就是把一个元素响应事件（click、keydown......）的函数委托到另一个元素。一般来讲，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。[=> 一篇不错的参考文章](https://zhuanlan.zhihu.com/p/26536815)\n\n&nbsp;&nbsp;&nbsp;&nbsp; 其实我们熟悉的 React 框架也并不是将 click 事件直接绑定在 dom 上面，而是采用事件冒泡的形式冒泡到 document 上面，这个思路借鉴了事件委托机制。而更老一点的jQuery也是允许我们直接使用它提供的API来进行事件委托：\n```js\n$('.parent').on('click', 'a', function () {\n  console.log('click event on tag a');\n}\n```\n\\>  关于事件冒泡机制：\n\n![event-pop](http://nojsja.gitee.io/static-resources/images/optimization/event-pop.jpg)\n\n\\>  事件模型的**三个阶段**：\n\n- 捕获阶段：在事件冒泡的模型中，捕获阶段不会响应任何事件\n- 目标阶段：目标阶段就是指事件响应到触发事件的最底层元素上\n- 冒泡阶段：冒泡阶段就是事件的触发响应会从最底层目标一层层地向外到最外层（根节点），事件代理即是利用\n件冒泡的机制把里层所需要响应的事件绑定到外层\n\n\\> 事件委托的**优点**：\n- 减少内存消耗，提升性能  \n我们不需要再为每个列表元素都绑定一个事件，只需要将事件函数绑定到父级`ul`组件：\n```\n<ul id=\"list\">\n  <li>item 1</li>\n  <li>item 2</li>\n  <li>item 3</li>\n  ......\n  <li>item n</li>\n</ul>\n```\n- 动态绑定事件  \n&nbsp;&nbsp;&nbsp;&nbsp; 比如上述的例子中列表项就几个，我们给每个列表项都绑定了事件。在很多时候，我们需要通过 AJAX 或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的。所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。\n\n\\> 使用`Element.matchesSelector` API简单实现事件委托：\n```js\nif (!Element.prototype.matches) {\n  Element.prototype.matches =\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector ||\n    function(s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n      while (--i >= 0 && matches.item(i) !== this) {}\n      return i > -1;            \n    };\n}\n\ndocument.getElementById('list').addEventListener('click', function (e) {\n  // 兼容性处理\n  var event = e || window.event;\n  var target = event.target || event.srcElement;\n  if (target.matches('li.class-1')) {\n    console.log('the content is: ', target.innerHTML);\n  }\n});\n```\n\n\\>  事件委托的**局限性**：\n- 比如 focus、blur 之类的事件本身没有事件冒泡机制，所以无法委托。\n- mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。\n\n##### 6）一些编码方面的优化建议  \n  - 长列表数据的遍历使用`for`循环替代`forEach`。  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; for循环能通过关键字`break`实现循环中断，forEach首先性能不如for，其次在处理一些需要条件断开的循环时比较麻烦(可以包裹try catch，然后throw error断开)。如果是数组类型的数据遍历的话，也可以使用`array.every(item => { if (...) return false; else do something; })`来实现条件断开。\n\n  - 尽量不要在全局作用域声明过多变量  \n  \n  &nbsp;&nbsp;&nbsp;&nbsp; 全局变量存在于全局上下文，全局上下文是作用域链的顶端，当通过作用域链进行变量查找的时候，会延长查找时间。全局执行上下文会一直存在于上下文执行栈，直到程序推出，这样会影响GC垃圾回收。如果局部作用域中定义了同名变量，会遮蔽或者污染全局。  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; 可以使用单例模式来封装一系列逻辑(运用了闭包的原理)，并通过一个公用的变量名暴露给作用域中的其它模块使用，同时也提高了代码的内聚性：\n  ```js\n  /* bad */\n  const workData = {};\n  function workA() { /* do something ... */ }\n  function workB() { /* do something ... */ }\n  function workC() { /* do something ... */ }\n\n  /* good */\n  const work = (function (initParams) {\n    const workData = {};\n    function workA() { /* do something ... */ }\n    function workB() { /* do something ... */ }\n    function workC() { /* do something ... */ }\n\n    return {\n      doWorkA: workA,\n      doWorkB: workB,\n      doWorkC: workC,\n      workSeries: function() {\n        this.doWorkB();\n        this.doWorkC();\n      }\n    };\n  })(initParams);\n\n  work.doWorkA();\n  work.workSeries();\n  ```\n  - 使用`switch`和`map`的方式处理需要大量逻辑判断的情况  \n  \n  &nbsp;&nbsp;&nbsp;&nbsp; 连续的`if`判断中在到达目标条件之前需要经过多个条件判断，而map和switch方式都能够通过条件直接找到对应的处理逻辑。\n  ```js\n  /* bad */\n  if (condition === 'a')\n    // do something\n  else if (condition === 'b')\n    // do something\n  else\n  ...\n\n  /* good */\n  switch (condition) {\n    case 'a':\n      // do something ...\n    break;\n    case 'b':\n      // do something ...\n    break;\n    ...\n    default:\n      break;\n  }\n  \n  const conditionMap = {\n    a: function() { /* do something */ },\n    b: function() { /* do something */ },\n    ...\n  };\n  conditionMap[condition]();\n  ```\n  - 定义构造函数时使用原型声明对象的公用方法  \n  \n  &nbsp;&nbsp;&nbsp;&nbsp; 我们在`new`一个对象时，js所做的就是创建一个空对象，并把此对象作为构造函数的context来执行(参考call调用逻辑)，执行后空对象上就被复制了构造函数的的属性和方法，然后js会把构造函数的原型绑定到对象的`__proto__`属性上，最后构造函数将对象返回给我们使用。  \n\n  &nbsp;&nbsp;&nbsp;&nbsp; 从以上可以看出，如果我们直接把一些function逻辑写入构造函数的话，在对象创建的时候每个function都会在新对象上被创建一次，消耗额外的资源，且违反了程序复用原则。建议将function放入构造函数的原型，那么对象就能通过原型链查找来使用这个方法，而不是在对象自身上重新复制一个一模一样的逻辑。\n  ```js\n  /* bad */\n  function Structure(attr) {\n    this.attr = attr;\n    this.getAttr = (function() {\n      return this.attr;\n    }).bind(this);\n  }\n  var obj = new Structure('obj1');\n  obj.getAttr(); // from obj itself\n\n  /* good */\n  function Structure(attr) {\n    this.attr = attr;\n  }\n  Structure.prototype.getAttr = function() {\n    return this.attr;\n  }\n  var obj = new Structure('obj1');\n  obj.getAttr(); // from obj prototype chain\n  ```\n\n### ➣ React 性能优化方面\n\n#### 1. 网络层面\n\n##### 1）React jsx/js文件压缩  \n\n##### 2）使用`React.lazy`和`React.Suspense`实现代码分割和懒加载  \n\n&nbsp;&nbsp;&nbsp;&nbsp; React开发的应用通常会借用`webpack`这类项目打包器将编写的各个模块代码和引入的依赖库的代码打包成一个单独的JS文件，有些未做CSS样式分离优化的项目甚至连样式表都和JS文件打包在一起，然后在页面加载的HTML文件中需要下载了这一整个JS文件后之后才能进去到页面构建阶段。对于中小型项目还好，简单的首屏优化就能将资源压缩到足够小，但是一些大型项目可能存在很多子项目，如果不对代码做分割然后按子项目模块加载的话，在首屏我们浏览器需要下载整个项目的依赖文件，导致加载时间过长。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 使用`React.lazy`可以分割子项目代码并根据当前页面路由来动态加载页面依赖文件，尽管并没有减少应用整体的代码体积，但你可以避免加载用户永远不需要的代码，并在初始加载的时候减少所需加载的代码量。\n\n注意：搭配`Babel`进行代码编译时需要安装额外的babel插件以提供动态加载功能：\n```json\n{\n  \"presets\": [...],\n  \"plugins\": [\n    \"dynamic-import-webpack\",\n    ...\n  ]\n}\n```\n\n- React.lazy 函数能让你像渲染常规组件一样处理动态引入的组件：  \n  它接受一个函数，这个函数需要动态调用 import()。它必须返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。\n  ```js\n  /* 使用前 */\n  import OtherComponent from './OtherComponent';\n  /* 使用后，代码将会在组件首次渲染时，自动导入包含 OtherComponent 组件的包 */\n  const OtherComponent = React.lazy(() => import('./OtherComponent'));\n\n  /* -------------- OtherComponent.js -------------- */\n  export default function() { return (<span>other</span>) };\n  ```\n- 使用 React.Suspense 提供一个组件加载时的占位组件：  \n  ```js\n  import React, { Suspense } from 'react';\n\n  const OtherComponent = React.lazy(() => import('./OtherComponent'));\n\n  function mainComponent() {\n    return (\n      <Suspense fallback={<div>Loading...</div>}>\n        <section>\n          <OtherComponent />\n          <AnotherComponent />\n        </section>\n      </Suspense>\n    )\n  }\n  ```\n\n- 使用异常捕获组件避免模块加载失败时让整个应用崩溃\n  ```js\n  /* -------------- mainComponent.js -------------- */\n  function MyComponent() {\n    return (\n      <MyErrorBoundary>\n        <Suspense fallback={<div>Loading...</div>}>\n          <OtherComponent />\n        </Suspense>\n      </MyErrorBoundary>\n    )\n  }\n\n  /* -------------- ErrorBoundary.js -------------- */\n  class ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n      // 更新 state 使下一次渲染能够显示降级后的 UI\n      return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n      logErrorToMyService(error, errorInfo); // 可以选择将错误日志上报给服务器\n    }\n\n    render() {\n      if (this.state.hasError)\n        return <h1>Something went wrong.</h1>; // 你可以自定义降级后的 UI 并渲染\n      return this.props.children; // 正常渲染子组件\n    }\n  }\n  ```\n- 代码分割搭配 React-Router 同样适用\n  ```js\n  import React, { Suspense, lazy } from 'react';\n  import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n  const Home = lazy(() => import('./routes/Home'));\n\n  const App = () => (\n    <Router>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n        </Switch>\n      </Suspense>\n    </Router>\n  );\n  ```\n\n##### 3）使用`React.Fragment`来避免非必要DOM层级的引入  \n\n&nbsp;&nbsp;&nbsp;&nbsp; React通常要求我们在编写一个组件时返回单个container组件包裹的DOM结构，而不允许直接返回多个未包裹的子组件，如果不使用Fragment就必须额外添加一层DOM节点，比如：\n```js\n/* bad */\nclass myComponent extends React.Component {\n  render() {\n    return (\n      <div>\n        <td>1</td>\n        <td>2</td>\n      </div>\n    )\n  }\n}\n```\n额外添加的`div`增加了无用的DOM层级，且会造成`table`组件无法正确渲染(tr/td之间多了一层div)。\n使用Fragment后最终所有`td`标签都会被直接添加到上层的`tr`标签下，同时也不会产生多余层级：\n```js\n/* good */\nclass myComponent extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <td>1</td>\n        <td>2</td>\n      </React.Fragment>\n    )\n  }\n}\n```\n\n#### 2. 渲染层面\n\n##### 1）使用`shouldComponentUpdate`避免不必要渲染  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 当一个React组件内部state或外部传入props更新时，会触发组件的重新渲染，开发者可以在`shouldComponentUpdate`生命周期中通过对比传入的即将被更新的state和props来决定组件是否要重新渲染，函数默认返回true，即触发渲染：\n```js\nclass CounterButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 1};\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      this.props.color !== nextProps.color ||\n      this.state.count !== nextState.count\n    ) return true;\n    \n    return false;\n  }\n\n  render() {\n    return (\n      <button\n        color={this.props.color}\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n```\n&nbsp;&nbsp;&nbsp;&nbsp; **适用情况：** 当前组件的props/state并没有发生改变，但是由于其父组件的重新渲染，导致当前组件也被迫进入了重新渲染阶段。这时候为组件添加`shouldComponentUpdate`生命周期函数进行数据比较就显得尤为重要了，特别是当组件的DOM结构复杂、嵌套层次很深，重新渲染的性能消耗昂贵的时候。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **滥用情况：** 并非所有组件都需要被添加此生命周期用于数据比较，因为比较这一过程本身也是需要消耗性能的，如果一个组件的state/props本来就会经常更新，那么这个组件久无需使用`scp`进行优化  \n\n&nbsp;&nbsp;&nbsp;&nbsp; **深比较函数：** 有时候一个组件所需的数据结构很复杂，比如用于展示当前目录层级的资源树组件，其依赖的数据采用树形结构，树形组件一般采用递归的渲染方式，组件的渲染更新操作昂贵。因此我们可以考虑在这类组件的`scp`生命周期中使用深比较函数来对更新前后的属性数据进行一次递归比较，以判断当前资源树组件是否需要进行更新：\n```js\n/**\n * [deepComparison 深比较]\n * @param  {[type]} data [any]\n * @return {[type]}      [boolean]\n */\nfunction deepComparison(data1, data2) {\n  const { hasOwnProperty } = Object.prototype;\n  const { toString } = Object.prototype;\n\n  // 获取变量类型\n  const getType = (d) => {\n    if (d === null) return 'null';\n    if (d !== d) return 'nan';\n    if (typeof d === 'object') {\n      if (toString.call(d) === '[object Date]') return 'date';\n      if (toString.call(d) === '[object RegExp]') return 'regexp';\n      return 'object';\n    }\n    return (typeof d).toLowerCase();\n  };\n\n  // 基本类型比较\n  const is = (d1, d2, type) => {\n    if (type === 'nan') return true;\n    if (type === 'date' || type === 'regexp') return d1.toString() === d2.toString();\n    return (d1 === d2);\n  };\n\n  // 递归比较\n  const compare = (d1, d2) => {\n    var type1 = getType(d1);\n    var type2 = getType(d2);\n    var index;\n\n    if (type1 !== type2) return false;\n\n    if (type1 === 'object') {\n      var keys1 = Object.keys(d1);\n      var keys2 = Object.keys(d2);\n      if (keys1.length !== keys2.length) {\n        return false;\n      }\n      for (let i = 0; i < keys1.length; i += 1) {\n        index = keys2.indexOf(keys1[i]);\n        if (\n          (index === -1) ||\n          !compare(d1[keys1[i]], d2[keys2[index]])) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    return is(d1, d2, type1);\n  };\n\n  return compare(data1, data2);\n}\n```\n&nbsp;&nbsp;&nbsp;&nbsp; **最佳实践：** 深比较函数其实消耗的性能很大，特别是当数据层级很深的时候，函数的递归需要创建和销毁多个执行上下文，可能数据比较本身所消耗的性能就多于一次渲染了。因此大部分情况下使用`immutable`不可变数据结构(对象每次更新都返回一个全新的对象，对象的引用发生变化) + `shallowEqual`做浅比较是比较理想的选择。\n\n##### 2）使用`PureComponnet`实现简单展示组件的自动浅比较  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 上文提到`scu`生命周期中我们可以通过自定义prop/state比较函数来来控制组件是否需要重新渲染，最后得出了`immutable`不可变数据+shallowEqual是最佳实践。其实React已经给我们提供了一种自带浅比较函数的组件类型即`React.PureComponnet`，它适用于一些数据类型简单的展示组件，当我们给这些React组件传入相同的 props 和 state时，render() 函数会渲染相同的内容，那么在这些情况下使用 React.PureComponent 可提高性能：\n```js\nclass SimpleCounter extends React.PureComponnet {\n  state = { count: 0 }\n\n  render(props) {\n    return (\n      <div\n        onClick={() => this.setState({ count: (this.state.count+1) })}\n        style={{color: this.props.color}}\n      >count:${this.state.count}</div>\n    )\n  }\n}\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; **适用情况** 和 **滥用情况** 与`scp`生命周期大致相同，不过需要额外注意：  \n- React.PureComponent仅作对象的浅层比较，如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。\n- 我们可以仅仅在props 和 state 较为简单时，才使用 React.PureComponent。\n- 另一种处理方式就是在深层数据结构发生变化时调用 forceUpdate() 来确保组件被正确地更新。\n- 当然也可以使用[ immutable.js ](https://immutable-js.github.io/immutable-js/)框架来处理数据结构，可以加快不可变对象加速嵌套数据的比较。一种简单的处理方式是在state数据需要更新时我们手动进行对象引用的更新：\n```js\nclass SimpleDisplay extends React.PureComponent {\n  state = {\n    list: ['a', 'b']\n  }\n\n  insertItem = () => {\n    const { list } = this.state;\n    /* bad - 组件不会更新 */\n    list.push('c');\n    this.setState({ list });\n\n    /* good - 重新更新list变量的引用 */\n    this.setState({ list: [...list, 'c'] });\n    // or\n    this.setState({ list: a.concat('c') });\n\n  }\n\n  render() {\n    return (\n      <div onClick={this.insertItem}>\n      { this.state.list.join('/') }\n      </div>\n    )\n  }\n}\n```\n\n##### 3）使用`React.memo`缓存和复用组件的渲染结果  \n\n&nbsp;&nbsp;&nbsp;&nbsp; `React.memo()`为高阶组组件，如果组件在相同 props 的情况下渲染相同的结果(state的更新依然会导致重新渲染)，那么你可以通过将其包装在 React.memo 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现：\n```js\nfunction MyComponent(props) {\n  /* 使用 props 渲染 */\n}\nfunction areEqual(prevProps, nextProps) {\n  /*\n  如果把 nextProps 与 prevProps 的比较结果一致则返回 true，\n  否则返回 false，这一点与shoudComponentUpdate表现相反，且areEqual\n  中无法对组件内部state进行比较\n  */\n}\nexport default React.memo(MyComponent, areEqual);\n```\n\\>  **不建议**使用`React.memo()`的情况：  \n- 如果组件经常接收不同的属性props对象来更新的话，那么缓存上一次渲染结果这一过程毫无意义，且增加了额外的性能支出。\n- 此方法仅作为性能优化的方式而存在，不要依赖它来“阻止”渲染，因为这会产生 bug。\n  \n\\>  **建议**使用`React.memo()`的情况：\n- 一个组件经常会以相同的props更新，比如父组件的其它部分更新导致的当前子组件非必要渲染\n- 常常用于将函数组件转变为具有`memorized`缓存特性的组件，组件内部可以使用`useState`hook进行内部状态管理，对组件的自更新没有影响。\n- 如果一个组件包含大量复杂的`dom`结构，重新渲染的性能消耗较大的话可以考虑使用`React.memo`包裹，避免很多不必要的渲染情况，在props不变的情况下让react能直接复用上次的渲染结果。\n\n##### 4）使用Context来共享全局数据  \n\n&nbsp;&nbsp;&nbsp;&nbsp; Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言，使用 context, 我们可以避免通过中间元素来逐级传递 props。举个例子，在下面的代码中，我们通过一个 “theme” 属性手动调整一个按钮组件的样式：\n```js\n/* -------------- context.js -------------- */\nconst theme = {\n  light: { color: 'black', backgroundColor: 'white' },\n  dark: { color: 'white', backgroundColor: 'black' }\n}\n\n// 为当前的 theme 创建一个 context（“light”为默认值）。\nexport default const ThemeContext = React.createContext(theme.light);\n\n/* -------------- App.js -------------- */\n// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\nconst ThemeContext = require('./context.js');\nclass App extends React.Component {\n  render() {\n    // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n    // 无论多深，任何组件都能读取这个值。\n    // 在这个例子中，我们将 “dark” 作为当前的值传递下去，当Provider不指定当前值时\n    // createContext中传入的默认值会生效\n    return (\n      <ThemeContext.Provider value=\"dark\">\n        <Toolbar />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\n/* -------------- Toolbar.js -------------- */\n\n// 中间的组件再也不必指明往下传递 theme 了。\nfunction Toolbar() {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\n/* -------------- ThemedButton.js -------------- */\nconst ThemeContext = require('./context.js');\nclass ThemedButton extends React.Component {\n  // 指定 contextType 读取当前的 theme context。\n  // React 会往上找到最近的 theme Provider，然后使用它的值。\n  // 在这个例子中，当前的 theme 值为 “dark”。\n  static contextType = ThemeContext;\n  render() {\n    return <Button theme={this.context} />;\n  }\n}\n```\n&nbsp;&nbsp;&nbsp;&nbsp; 对于不需要订阅context更新来重新渲染界面的情况，上面的代码示例已经足够应付，如果想要接收动态变化的context值来响应式更新界面，则需要使用`Context.Consumer`API，它内部包裹一个返回dom组件的function函数，传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 默认值：\n```js\n...\nrender() {\n  return (\n    <MyContext.Consumer>\n      { value => <span>{value}</span>/* 基于 context 值进行渲染*/ }\n    </MyContext.Consumer>\n  )\n}\n```\n**注意：** Context 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。\n\n##### 5）优化组件分割策略来处理长列表组件的渲染  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 有时候我们需要渲染一些拥有很多子组件的的列表组件，比如一个展示当前目录下有哪些文件的`FileList`组件，它包含很多子组件`FileListItem`，如下。想象我们在使用 input 组件获取输入值更新 state 得时候，同时也不可避免的触发了同一个render函数下`FileListItem`组件的重新渲染，即使从父级传入的 files 数组未发生任任何改变：\n```js\nclass FileList extends Component {\n  state = {\n    value: null\n  }\n\n  onChange = (e) => this.setState({ value: e.target.value })\n\n  render() {\n    return (\n      <div>\n        <input value={this.state.value} onChange={this.onChange}></input>\n        <div>\n          {\n            this.props.files.map((file) => {\n              return <FileListItem key={file.name} name={file.name} />;\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp; 这时候我们就可以考虑在设计组件结构时将 `files.map()`这部分的逻辑完全抽离到一个完整的子组件内，否则前面提到的`shouldComponentUpdate`、`PureComponent`、`memo`等优化方法都将无法施展。我们无法直接在`FileList`组件内针对 files 数组未改变的情况下做任何优化，因为 input 组件的每次状态更新都会让 `FileList` 组件的每一个部分都重新渲染一遍，优化的组件结构如下：\n```jsx\n/* -------------- FileList.js -------------- */\nclass FileList extends Component {\n  state = { value: null }\n\n  onChange = (e) => this.setState({ value: e.target.value })\n\n  render() {\n    return (\n      <>\n        <input value={this.state.value} onChange={this.onChange}></input>\n        <FileListItemContainer files={this.props.files} />\n      </>\n    );\n  }\n}\n\n/* -------------- FileListItemContainer.js -------------- */\nexport default React.memo(function({ files }) {\n  return (\n    <div>\n      {\n        files.map((file) => {\n          return <FileListItem key={file.name} name={file.name} />;\n        });\n      }\n    </div>\n  );\n});\n```\n\n##### 6）正确理解组件 key 的使用策略  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 在 React 中，UI 界面的构建是由当前虚拟DOM树状态决定的。前后两个状态就对应两套界面，产生不同的状态之后，然后由 React 通过时间复杂度为O(n)的 dom diff 算法来比较两个界面的区别，最后由React选择性的来更新真实DOM。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 要想理解 React组件 key 的设计理念我们得先简单了解一下React进行DOM树 diff 的过程，我们都知道Js脚本直接操作网页DOM元素时会造成重绘和回流等`低效渲染`，因此React的DOM树 diff 过程针对的是更新前后两颗虚拟的DOM树，虚拟DOM树并不是真实的DOM节点，而是一种描述页面DOM元素结构的树形数据结构，每个虚拟树节点存储了一个DOM元素的属性和样式等信息。React 需要基于这两棵树之间的差别来判断如何有效率的更新 UI 以保证当前 UI 与最新的树保持同步。为了提高树diff的效率，于是 React 在以下两个假设的基础之上提出了一套复杂度为 O(n) 的启发式算法：\n- i. 两个不同类型的元素会产生出不同的树(比如 img 和 span 被看做完全不同的两个节点)\n- ii. 开发者可以通过 key 属性来暗示哪些子元素在不同的渲染下能保持稳定\n\n&nbsp;&nbsp;&nbsp;&nbsp; 如果两次渲染同一位置的某个元素的类型改变，例如从 span 变成了 image，那么不用多说这个组件和其子组件都会先被卸载，同时触发卸载前组件的生命周期`componentWillUnmount`，然后将新的DOM节点渲染添加到页面上，新的组件实例将执行 `componentWillMount`、`componentDidMount` 等周期方法，所有跟之前的树所关联的 state 也会被销毁。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 如果两次渲染组件的类型未改变，React 将更新该组件实例的 props 以跟最新的元素保持一致，并且调用该实例的 `componentWillReceiveProps`、`componentWillUpdate` 以及 `componentDidUpdate` 方法。下一步，React 会调用 `render()`方法并比较其子节点产生的差异。\n\n想象我们在子元素列表末尾新增元素时：\n```js\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n/* 插入third */\n<ul>\n  <li>first</li>\n  <li>second</li>\n  <li>third</li>\n</ul>\n```\nReact 会先匹配到两颗虚拟DOM树对应的 `first`节点，然后匹配到两棵树的 `second` 节点，最后发现在`second`之后出现了一个全新的节点，dom渲染时就会插入第三个元素 `<li>third</li>` 到`second`之后，其更新开销会比较小。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 但是也有一种比较坏的情况，当我们将`third`节点插入到列表头时，React在 diff 过程中发现所有子节点都发生了变化(整体位置发生了相对改变)，React 不会意识到应该保留`first`和`second`，而是会重建每一个子元素，这种情况会带来性能问题：\n```jsx\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n/* 插入third */\n<ul>\n  <li>third</li>\n  <li>first</li>\n  <li>second</li>\n</ul>\n```\n&nbsp;&nbsp;&nbsp;&nbsp; 为了解决以上问题，React 支持 `key` 属性。当子元素拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素，相当于每个子节点都有了ID，因此能够游刃有余的判断哪些节点需要重建，而哪些节点只需要进行简单的位置移动即可。比如上个例子中React根据组件的Key就能识别我们只需要新建`third`节点并将它插入到first节点之前就能满足要求，而不需要将列表元素都重建一遍。  \n\n\\> 对组件key的 **误解 和 乱用：**\n- 页面中的所有组件key都不能重复 => 错！我们只需要保证同一列表层级的组件key不重复即可，当有重复key时可能会导致React在多次渲染时结果错乱。\n- 使用`Math.random()`函数来随机产生key值 => 大错特错！这样子做了之后，每次渲染key值都会变化，会引起所有使用了key的组件都会被卸载重建一次，性能优化效果为负。\n- key值只能用于列表组件 => 错！我们可以给任意一个组件添加key值，比如我们想让某个组件在props/state完全没改变的情况下触发其重建更新，那么就可以给予它两个阶段不同的key值。一个例子是用于重置Antd Form表单状态，让其在某些特殊情况下以之前的默认值重新挂载(触发表单更改后其默认值无法恢复)。\n\n##### 7）使用虚拟化渲染技术来优化超长列表组件  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 有时候项目中要求我们在不使用分页的情况下渲染一个超长的列表组件，比如一个文件上传列表里面的每个文件上传任务，我们同时添加成千上万个上传任务，然后并行上传几个，操作者同时也能通过列表的上下滚动来查看每个上传任务的状态。这种变态数量级的界面元素展示+本就不简单的上传流程控制，必然导致我们的界面会有一定程度的卡顿。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 一个解决方案就是可以采用懒加载技术来实现当滚动到任务列表底部时加载其余的一小部分任务列表元素，这样虽然解决了初次渲染时耗费时间过长的问题，不过随着滚动到底部加载的任务条目越来越多，界面的渲染负载也会越来越大。这种情况下采用虚拟化滚动技术来进行优化就显得很有必要了。  \n\n&nbsp;&nbsp;&nbsp;&nbsp; 虚拟列表是一种根据滚动容器元素的可视区域高度来渲染长列表数据中某一个部分数据的技术。这里需要简单了解一下其原理，如果要直接使用的话可以考虑这两个热门的虚拟滚动库 [react-window](https://react-window.now.sh/) 和 [react-virtualized](https://bvaughn.github.io/react-virtualized/)。\n\n\\> 首先清楚虚拟化滚动技术中的几个**关键元素**：\n\n![vitual-scroll](http://nojsja.gitee.io/static-resources/images/optimization/vitual-scroll.png)\n\n- i. 滚动容器元素：一般情况下，滚动容器元素是 window 对象。然而，我们可以通过布局的方式，在某个页面中任意指定一个或者多个滚动容器元素。只要某个元素能在内部产生横向或者纵向的滚动，那这个元素就是滚动容器元素。\n- ii. 可滚动区域：滚动容器元素的内部内容区域。假设有 100 条数据，每个列表项的高度是 50，那么可滚动的区域的高度就是 100 * 50。可滚动区域当前的具体高度值一般可以通过(滚动容器)元素的 scrollHeight 属性获取。用户可以通过滚动来改变列表在可视区域的显示部分。\n- iii. 可视区域：滚动容器元素的视觉可见区域。如果容器元素是 window 对象，可视区域就是浏览器的视口大小(即视觉视口)；如果容器元素是某个 div 元素，其高度是 300，右侧有纵向滚动条可以滚动，那么视觉可见的区域就是可视区域。\n\n\\> 如何在只渲染少量可视元素的情况下，还能让滚动条的长度和位置显示正确呢：\n- i. 首先明确滚动容器内容的总高度=`列表元素高度 * 列表元素总个数`，容器可视高度固定，通过设置css `overflow: scroll` 就能显示滚动条。\n- ii. 滚动容器的可视高度固定，那么可视区域能显示的列表元素个数=`容器可视高度/列表元素高度`，这些少量的元素不足以撑起容器元素的进行滚动，滚动容器滚动条高度仍然会为0。因此我们通过设置容器元素`paddingTop+paddingBottom`(startOffset+endOffset)来让容器元素内容总高度正确显示，这里`padding+可视高度=容器内容总高度`。\n```jsx\n...\nrender() {\n  return (\n    <div\n      style={{\n        paddingTop: `${startOffset}px`,\n        paddingBottom: `${endOffset}px`\n      }}\n      className='wrapper'\n    >\n      { /* render list */ }\n    </div>\n  )\n}\n```\n- iii. 容器能正确显示滚动高度了，那么如何让我们在滚动的时候能知道应该显示哪些元素呢？一个巧妙的方法就是根据当前滚动条的`scrollTop`(滚动容器的固有属性：表示能够向上滚动的高度值，可以直接获取)计算首个应该渲染的元素的索引`startIndex`以及最后需要渲染的元素的索引`endIndex`，然后再根据两个索引分别计算 paddingTop 和 paddingBottom 即可：\n  - startIndex = Math.ceil(scrollTop / 滚动容器元素总高度)\n  - 可视元素个数 = 可视区域高度 / 滚动元素高度\n  - endIndex = startIndex + 可视区域元素个数\n  - 当前渲染元素renderItems = data.slice(startIndex, endIndex)\n  - paddingTop = startIndex * 滚动元素高度\n  - paddingBottom = (this.data.length - this.endIndex - 1) * 滚动元素高度\n\n&nbsp;&nbsp;&nbsp;&nbsp; 以上为虚拟化滚动简化的描述模型，实际实现时还要考虑：缓存已经加载的列表元素的位置信息、列表元素的高度是否可变、增加缓冲元素来减少白屏情况(缓冲元素就是预加载的几个接近视口可显示元素的上下部分其它元素)、容器元素resize后的处理等。处理情况还是比较复杂，使用成熟的库处理而不是自己造轮子是比较好的方案，不过个中原理还是要理解。\n\n### 结语\n&nbsp;&nbsp;&nbsp;&nbsp; 学习前端性能优化的方方面面，一方面是对我们核心基础知识的考察，另一方面也能为我们遇到的一些实际问题提供处理思路，是每个前端人进阶的的必经之路。  \n\n以上就是本篇文章的所有内容，后续有需要还会继续更新...","slug":"前端性能优化技巧详解-1","published":1,"updated":"2021-03-15T10:42:15.645Z","layout":"post","photos":[],"link":"","_id":"ckmahmusm005hkl95htwcayi8","content":"<blockquote><p>此文主要描述 html / css / js / react 即时渲染和网络加载优化方面的知识，webpack常用优化方法和HTTP Server等优化请关注《 前端性能优化技巧详解(2) 》</p></blockquote><blockquote><p>如果之后发现有其它要点值得梳理，会继续更新本文…</p></blockquote><h3 id=\"目录\">目录</h3><ul><li>目录</li><li>➣ HTML/CSS 性能优化方面<ul><li><ol><li>网络层面</li></ol><ul><li>1）抽离内联样式内联脚本</li><li>2）defer脚本和async脚本</li><li>3）压缩HTML/CSS代码资源</li><li>4）压缩图片/音视频等多媒体资源</li><li>5）使用雪碧图</li><li>6）避免空的 src 和 href 值</li><li>7）避免使用<code>@import</code>来引入css</li></ul></li><li><ol start=\"2\"><li>渲染层面</li></ol><ul><li>1）减少页面的回流和重绘</li><li>2）减少DOM结构的层级</li><li>3）尽量不使用<code>table</code>布局和<code>iframe</code>内联网页</li><li>4）flex布局的性能比<code>inline-block</code>和<code>float</code>布局都要好</li><li>5）CSS选择器的使用策略</li><li>6）css的书写顺序也会对其解析渲染性能造成影响</li></ul></li></ul></li><li>➣ Javascript 性能优化方面<ul><li><ol><li>网络层面</li></ol><ul><li>1）压缩JS代码资源</li></ul></li><li><ol start=\"2\"><li>渲染层面</li></ol><ul><li>1）使用函数节流和函数去抖处理一些函数的高频触发调用</li><li>2）Js实现动画时使用<code>requestAnimationFrame</code>替代定时器</li><li>3）使用<code>IntersectionObserver</code>API来替代<code>scroll</code>事件实现元素相交检测</li><li>4）使用<code>Web-Workers</code>在后台运行CPU密集型任务</li><li>5）使用事件委托</li><li>6）一些编码方面的优化建议</li></ul></li></ul></li><li>➣ React 性能优化方面<ul><li><ol><li>网络层面</li></ol><ul><li>1）React jsx/js文件压缩</li><li>2）使用<code>React.lazy</code>和<code>React.Suspense</code>实现代码分割和懒加载</li><li>3）使用<code>React.Fragment</code>来避免非必要DOM层级的引入</li></ul></li><li><ol start=\"2\"><li>渲染层面</li></ol><ul><li>1）使用<code>shouldComponentUpdate</code>避免不必要渲染</li><li>2）使用<code>PureComponnet</code>实现简单展示组件的自动浅比较</li><li>3）使用<code>React.memo</code>缓存和复用组件的渲染结果</li><li>4）使用Context来共享全局数据</li><li>5）优化组件分割策略来处理长列表组件的渲染</li><li>6）正确理解组件 key 的使用策略</li><li>7）使用虚拟化渲染技术来优化超长列表组件</li></ul></li></ul></li><li>结语</li></ul><p>&gt; 思维导图：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/optimization//frontend-optimization.png\" alt=\"\"></p><p>     前端性能优化是个很大的概念，涉及HTTP协议、浏览器渲染原理、操作系统和网络、前端工程化和Js底层原理等各个方面。通过建立思维导图可以让我们很好的将各个优化方面组织和联系起来。</p><p>     按照优化原理的不同则可以将其分为<code>网络层面优化</code>和<code>渲染层面</code>的优化，网络层面的优化更多体现在资源加载时的优化，而渲染层的优化更多体现在运行时优化。</p><p>     例如优化浏览器缓存策略以减少HTTP请求传输量、图片和其它静态资源的压缩、服务器端启用Gzip压缩、使用CDN、图片懒加载、延迟脚本Defer和异步脚本Async等属于网络层面的优化。另一方面，减少页面的回流和重绘、使用React.Fragment减少界面dom层级、使用骨架屏、函数节流和去抖、React长列表组件优化、通过事件冒泡机制实现事件委托等就属于渲染层面的优化。</p><h3 id=\"➣-HTML-CSS-性能优化方面\">➣ HTML/CSS 性能优化方面</h3><h4 id=\"1-网络层面\">1. 网络层面</h4><h5 id=\"1）抽离内联样式内联脚本\">1）抽离内联样式内联脚本</h5><ul><li>内联资源不利于浏览器缓存，造成重复的资源请求</li><li>内联资源会造成HTML臃肿，不利于HTTP传输</li><li>内联资源的下载和解析可能会阻塞导致界面渲染，导致界面白屏</li><li>内联资源不好管理和维护</li></ul><h5 id=\"2）defer脚本和async脚本\">2）defer脚本和async脚本</h5><p>     HTML在解析时遇到声明的<code>&lt;script&gt;</code>脚本会立即下载和执行，往往会延迟界面剩余部分的解析，造成界面白屏的情况。比较古老的优化方式之一就是将脚本放到HTML文档末尾，这样子解决了白屏的问题，可是在DOM文档结构复杂冗长时，也会造成一定的界面脚本下载和执行延迟，script标签新属性<code>async</code>和<code>defer</code>可以解决此类问题：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"path/to/target.js\"</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"path/to/target.js\"</span> <span class=\"attr\">async</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>defer脚本<br>     延迟脚本-声明<code>defer</code>属性的外部<code>&lt;script&gt;</code>脚本下载时不会阻塞HTML的解析和渲染，并且会在HTML渲染完成并且可实际操作之后开始执行(<code>DOMContentLoaded</code>事件被触发之前)，各个脚本解析执行顺序对应声明时的位置顺序，执行完成后会触发页面<code>DOMContentLoaded</code>事件。</li><li>async脚本<br>     异步脚本-声明<code>async</code>属性的外部<code>&lt;script&gt;</code>脚本下载时不会阻塞HTML的解析和渲染，各个脚本的下载和执行完全独立，下载完成后即开始执行，所以执行顺序不固定，与<code>DOMContentLoaded</code>事件的触发没有关联性。</li><li>动态脚本加载技术<br>     在脚本执行时动态运行<code>loadScript</code>函数可以实现类似延迟脚本和异步脚本的效果：<code>isDefer</code>为真值时脚本的执行顺序为脚本位置顺序，为假值时效果同于异步脚本。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">src, isDefer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  script.src = src;</span><br><span class=\"line\">  script.async = !isDefer;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.append(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"3）压缩HTML-CSS代码资源\">3）压缩HTML/CSS代码资源</h5><p>     代码资源中存在很多无用的空格和符号等，去除他们带来的效益是可观的，另一方面压缩资源也能起到源代码保护的作用。现代前端工程化框架一般继承了此类压缩功能，比如webpack框架的<code>html-loader</code>。</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.html$/i,</span><br><span class=\"line\">        loader: 'html-loader',</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          minimize: true,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h5 id=\"4）压缩图片-音视频等多媒体资源\">4）压缩图片/音视频等多媒体资源</h5><p>     其实网页带宽往往被图片等资源大量占用，压缩他们能带来超出预期的优化效益。现代前端工程化框架一般继承了此类压缩插件，如<code>imagemin-webpack-plugin</code>插件。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ImageminPlugin <span class=\"keyword\">from</span> <span class=\"string\">'imagemin-webpack-plugin'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 确保该插件在任何添加图片的插件之后</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> ImageminPlugin(&#123;</span><br><span class=\"line\">      disable: process.env.NODE_ENV !== <span class=\"string\">'production'</span>, <span class=\"comment\">// 开发模式禁用</span></span><br><span class=\"line\">      pngquant: &#123;</span><br><span class=\"line\">        quality: <span class=\"string\">'95-100'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"5）使用雪碧图\">5）使用雪碧图</h5><p>     使用雪碧图本质上优化了HTTP请求的数量，将众多图片拼贴为一张作为背景图片引用，然后我们给一个元素设置固定大小，让它的背景图片位置进行变化，只截取大图一部分进行显示，就好像显示出了不同的图片，这就是雪碧图的原理。</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/optimization/sprite.png\" alt=\"\"></p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">url</span>(\"<span class=\"selector-tag\">sprite</span><span class=\"selector-class\">.png</span>\");</span><br><span class=\"line\">  <span class=\"selector-tag\">background-position</span>: <span class=\"selector-tag\">-60px</span> 0<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:48px</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:48px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"6）避免空的-src-和-href-值\">6）避免空的 src 和 href 值</h5><p>     当link标签的href属性为空、script标签的src属性为空的时候，浏览器渲染的时候会把当前页面的URL作为它们的属性值，从而把页面的内容加载进来作为它们的值。</p><h5 id=\"7）避免使用-import来引入css\">7）避免使用<code>@import</code>来引入css</h5><p>     这种语法会阻止多个css文件的并行下载，被<code>@import</code>引入的css文件会在引入它的css文件下载并渲染好之后才开始下载渲染自身。并且<code>@import</code>引入的css文件的下载顺序会被打乱，排列在<code>@import</code>之后的JS文件会先于<code>@import</code>下载。</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* css file */</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">'custom.css'</span>;</span><br></pre></td></tr></table></figure><h5 id=\"8）使用-CDN-服务来存放静态资源\">8）使用 CDN 服务来存放静态资源</h5><p>     CDN 即内容分发网络。CDN 服务商将静态资源缓存到遍布全国的高性能加速节点上，当用户访问相应的业务资源时，CDN系统能够实时地根据网络流量和各节点的连接负载状况、到用户的距离和响应时间 等综合信息将用户的请求重新导向离用户最近的服务节点上，使内容能够传输的更快，更加稳定。可以提升首次请求的响应能力。</p><p>CDN 的核心点有两个：</p><ul><li>缓存：把资源 copy 一份到 CDN 服务器上这个过程。</li><li>回源：CDN节点 发现自己没有这个资源（一般是缓存的数据过期了），转头向根服务器（或者它的上层服务器）去要这个资源的过程。</li></ul><p>CDN 的优点：</p><ul><li>突破单域名文件加载并发请求限制</li><li>减少服务器本身的流量消耗</li><li>更快的资源加载速度</li><li>CDN内置版本控制，可以通过版本号加载指定版本的静态资源</li><li>提供静态资源使用情况分析功能</li><li>提供安全服务有效防止网站被攻击</li></ul><h5 id=\"9）使用-SVG-矢量图\">9）使用 SVG 矢量图</h5><p>     优点：</p><ul><li>任意放缩：用户可以任意缩放图像显示，而不会破坏图像的清晰度、细节等。</li><li>较小文件：总体来讲，SVG文件比那些GIF和JPEG格式的文件要小很多，因而下载也很快。</li><li>超强显示效果：SVG图像在屏幕上总是边缘清晰，它的清晰度适合任何屏幕分辨力和打印分辨力。</li></ul><h4 id=\"2-渲染层面\">2. 渲染层面</h4><h5 id=\"1）减少页面的回流和重绘\">1）减少页面的回流和重绘</h5><ul><li>使用CSS3属性<code>transform</code>来实现元素位移</li><li>让动画效果应用到<code>position: fixed/absolute</code>的元素上，原理是让其脱离文档流</li><li>向界面插入大量dom节点时先将dom元素添加到虚拟dom操作节点<code>DocumentFragment</code>上，最后再将虚拟节点实际添加到界面上。</li><li>避免直接使用JS操作dom元素的style样式，可以使用class一次性改变dom样式类。</li><li>将会引起页面回流、重绘的操作尽量放到DOM树的后面，减少级联反应。</li><li>使用CSS3动画Animation来实现一些复杂元素的动画效果，原理是利用了硬件加速</li><li>重复读取一些容易引起回流的元素属性时注意使用变量缓存</li></ul><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 几何属性相关 --&gt;</span></span><br><span class=\"line\">elem.offsetLeft, elem.offsetTop, elem.offsetWidth, elem.offsetHeight, elem.offsetParent</span><br><span class=\"line\">elem.clientLeft, elem.clientTop, elem.clientWidth, elem.clientHeight elem.getClientRects(), elem.getBoundingClientRect()</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 滚动相关 --&gt;</span></span><br><span class=\"line\">elem.scrollBy(), elem.scrollTo()</span><br><span class=\"line\">elem.scrollIntoView(), elem.scrollIntoViewIfNeeded()</span><br><span class=\"line\">elem.scrollWidth, elem.scrollHeight</span><br><span class=\"line\">elem.scrollLeft, elem.scrollTop 除了读取，设置也会触发</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h5 id=\"2）减少DOM结构的层级\">2）减少DOM结构的层级</h5><h5 id=\"3）尽量不使用table布局和iframe内联网页\">3）尽量不使用<code>table</code>布局和<code>iframe</code>内联网页</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* table布局 */</span></span><br><span class=\"line\">table布局不灵活，不利于css样式定制</span><br><span class=\"line\">table布局渲染性能较低，可能触发多次重绘</span><br><span class=\"line\">table布局不利于html语义化</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* iframe */</span></span><br><span class=\"line\">iframe会阻塞主页面的onload事件</span><br><span class=\"line\">iframe和主页面共享HTTP连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</span><br><span class=\"line\">iframe不利于网页布局</span><br><span class=\"line\">iframe对移动端不友好</span><br><span class=\"line\">iframe的反复重新加载可能导致一些浏览器的内存泄露</span><br><span class=\"line\">iframe中的数据传输复杂</span><br><span class=\"line\">iframe不利于SEO</span><br></pre></td></tr></table></figure><h5 id=\"4）flex布局的性能比inline-block和float布局都要好\">4）flex布局的性能比<code>inline-block</code>和<code>float</code>布局都要好</h5><h5 id=\"5）CSS选择器的使用策略\">5）CSS选择器的使用策略</h5><p>     浏览器是从选择器的右边到左边读取，选择器最右边的部分被称为关键选择器，与CSS选择器规则的效率相关。</p><p><strong>效率排序如下：</strong><br>内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器</p><p><strong>要点：</strong></p><ul><li>关键选择器避免使用通用选择器*，其查询开销较大</li><li>使用ID/Class选择器时尽量使其独立，因为无用的上层规则(标签、类名)只会增加查找时间，ID/Class已经具有单独筛选元素的能力</li><li>避免使用子选择器，尤其是将其与标签、通配符组合使用，性能开销较大</li><li>利用CSS元素属性继承的特性，是多个元素复用多一种规则</li><li>移除无匹配样式，否则会造成无用的样式解析和匹配，同时增大CSS文件体积</li></ul><h5 id=\"6）css的书写顺序也会对其解析渲染性能造成影响\">6）css的书写顺序也会对其解析渲染性能造成影响</h5><p>     浏览器从上到下开始解析一段css规则，将容易造成回流、重绘的属性放在上部可以让渲染引擎更高效地工作，可以按照下列顺序来进行书写，使用编辑器的<code>csslint</code>插件可以辅助完成这一过程：</p><ul><li>定位属性</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>  <span class=\"selector-tag\">display</span>  <span class=\"selector-tag\">float</span>  <span class=\"selector-tag\">left</span>  <span class=\"selector-tag\">top</span>  <span class=\"selector-tag\">right</span>  <span class=\"selector-tag\">bottom</span> </span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>  <span class=\"selector-tag\">clear</span>  <span class=\"selector-tag\">z-index</span></span><br></pre></td></tr></table></figure><ul><li>几何属性</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>  <span class=\"selector-tag\">height</span>  <span class=\"selector-tag\">padding</span>  <span class=\"selector-tag\">border</span>  <span class=\"selector-tag\">margin</span>   <span class=\"selector-tag\">background</span></span><br></pre></td></tr></table></figure><ul><li>文字样式</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-family</span>   <span class=\"selector-tag\">font-size</span>   <span class=\"selector-tag\">font-style</span>   <span class=\"selector-tag\">font-weight</span>   <span class=\"selector-tag\">font-varient</span>  <span class=\"selector-tag\">color</span></span><br></pre></td></tr></table></figure><ul><li>文本属性</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">text-align</span>   <span class=\"selector-tag\">vertical-align</span>   <span class=\"selector-tag\">text-wrap</span>   <span class=\"selector-tag\">text-transform</span>   <span class=\"selector-tag\">text-indent</span>    <span class=\"selector-tag\">text-decoration</span>   <span class=\"selector-tag\">letter-spacing</span>    <span class=\"selector-tag\">word-spacing</span>    <span class=\"selector-tag\">white-space</span>   <span class=\"selector-tag\">text-overflow</span></span><br></pre></td></tr></table></figure><ul><li>CSS3中新增属性</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">content</span>   <span class=\"selector-tag\">box-shadow</span>   <span class=\"selector-tag\">border-radius</span>  <span class=\"selector-tag\">transform</span></span><br></pre></td></tr></table></figure><h3 id=\"➣-Javascript-性能优化方面\">➣ Javascript 性能优化方面</h3><h4 id=\"1-网络层面-2\">1. 网络层面</h4><h5 id=\"1）压缩JS代码资源\">1）压缩JS代码资源</h5><p>     代码资源中存在很多无用的空格和符号等，去除他们带来的效益是可观的，另一方面压缩资源也能起到源代码保护的作用。现代前端工程化框架一般继承了此类压缩插件，比如webpack框架的<code>uglifyjs</code>插件。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimizer: [<span class=\"keyword\">new</span> UglifyJsPlugin()],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"2-渲染层面-2\">2. 渲染层面</h4><h5 id=\"1）使用函数节流和函数去抖处理一些函数的高频触发调用\">1）使用函数节流和函数去抖处理一些函数的高频触发调用</h5><p>     在面对一些需要进行调用控制的函数高频触发场景时，可能有人会对何时使用节流何时使用去抖产生疑问。这里通过一个特性进行简单区分：如果你需要保留短时间内高频触发的最后一次结果时，那么使用去抖函数，如果你需要对函数的调用次数进行限制，以最佳的调用间隔时间保持函数的持续调用而不关心是否是最后一次调用结果时，请使用节流函数。</p><p>     比如echarts图常常需要在窗口resize之后重新使用数据渲染，但是直接监听resize事件可能导致短时间内渲染函数被触发多次。我们可以使用函数去抖的思想，监听resize事件后在监听器函数里获取参数再使用参数调用事先初始化好了的throttle函数，保证resize过程结束后能触发一次实际的echarts重渲染即可。</p><ul><li>节流<code>throttle</code></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canRun) &#123;</span><br><span class=\"line\">      canRun = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;, time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>去抖<code>debounce</code></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"2）Js实现动画时使用requestAnimationFrame替代定时器\">2）Js实现动画时使用<code>requestAnimationFrame</code>替代定时器</h5><p>     <code>window.requestAnimationFrame()</code>告诉浏览器你希望执行一个动画，并且要求浏览器在下次重绘之前(每帧之前)调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><p>     设置的回调函数在被调用时会被传入触发的时间戳，在同一个帧中的多个回调函数，它们每一个都会接受到一个相同的时间戳，即使在计算上一个回调函数的工作负载期间已经消耗了一些时间，我们可以记录前后时间戳差值来控制元素动画的速度和启停。</p><p>     如果换用过定时器<code>setTimeout/setInterval</code>来控制帧动画的话，一般我们采用60帧进行动画绘制，所以设置的定时时间就应该是<code>1000 / 60 = 17ms</code>。不过由于定时器本身只是把回调函数放入了<code>宏任务队列</code>，其精确度受到主进程代码执行栈影响，可能导致帧动画的回调函数在浏览器的一次渲染过程中才被触发(理想情况是渲染前调用回调函数获得计算值，渲染时执行计算值绘制)，因此本应在当前帧呈现的绘制效果被延迟到了下一帧，产生丢帧卡顿的情况。</p><p>     这里让我们使用<code>requestAnimationFrame</code>来实现一个<a href=\"https://github.com/nojsja/javascript-learning/blob/master/js-animation/animation.js\" target=\"_blank\" rel=\"noopener\">动画处理类</a>作为例子，使用方式如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anime = <span class=\"keyword\">new</span> Animation();</span><br><span class=\"line\">anime.setTarget(<span class=\"string\">'#animationTarget'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 右下角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 右上角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">-50</span>, <span class=\"attr\">y</span>: <span class=\"number\">-50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br></pre></td></tr></table></figure><p>预览图：<br><img src=\"http://nojsja.gitee.io/static-resources/images/optimization/animation.gif\" alt=\"\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [tween 缓动算法]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>time [动画已经消耗的时间]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>start [目标开始的位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>distance [目标开始位置和结束位置的距离]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>duration [动画总持续时间]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tween = &#123;</span><br><span class=\"line\">  linear: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance*time/duration + start; &#125;,</span><br><span class=\"line\">  easeIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time + start; &#125;,</span><br><span class=\"line\">  strongEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time * time * time * time + start; &#125;,</span><br><span class=\"line\">  strongEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">  sinEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration) * time * time + start; &#125;,</span><br><span class=\"line\">  sinEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time,start,distance,duration</span>)</span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 动画控制类 ------------------- */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 初始化处理元素 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.setTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// element.style.position = 'relative';</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector] = &#123;</span><br><span class=\"line\">      selector: selector,</span><br><span class=\"line\">      element: <span class=\"built_in\">document</span>.querySelector(selector),</span><br><span class=\"line\">      status: <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">      queue: [],</span><br><span class=\"line\">      timeStart: <span class=\"string\">''</span>,</span><br><span class=\"line\">      positionStart: &#123; <span class=\"attr\">x</span>: <span class=\"string\">''</span>, <span class=\"attr\">y</span>: <span class=\"string\">''</span> &#125;,</span><br><span class=\"line\">      positionEnd: &#123; <span class=\"attr\">x</span>: <span class=\"string\">''</span>, <span class=\"attr\">y</span>: <span class=\"string\">''</span> &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [start 开始动画]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>func     [缓动动画]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector];</span><br><span class=\"line\">  target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 帧调用函数</span></span><br><span class=\"line\">  that.update(&#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>&#125;, selector);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [update 更新位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>selector [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.update =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector],</span><br><span class=\"line\">    that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    timeUsed,</span><br><span class=\"line\">    positionX, positionY;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!target || !target.queue.length) &#123;</span><br><span class=\"line\">    target.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset position</span></span><br><span class=\"line\">  target.element.style.left = position.x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  target.element.style.top = position.y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// position</span></span><br><span class=\"line\">  target.positionStart = &#123; <span class=\"attr\">x</span>: position.x, <span class=\"attr\">y</span>: position.y &#125;;</span><br><span class=\"line\">  target.positionEnd = &#123; <span class=\"attr\">x</span>: position.x + target.queue[<span class=\"number\">0</span>].x, <span class=\"attr\">y</span>: position.y + target.queue[<span class=\"number\">0</span>].y &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// time</span></span><br><span class=\"line\">  target.timeStart = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.timeStart === <span class=\"literal\">null</span>) target.timeStart = time; <span class=\"comment\">// 动画开始时间</span></span><br><span class=\"line\">    timeUsed = time - target.timeStart;</span><br><span class=\"line\">    <span class=\"comment\">// 当前动画完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeUsed &gt;= target.queue[<span class=\"number\">0</span>].duration) &#123;</span><br><span class=\"line\">      target.queue.shift();</span><br><span class=\"line\">      that.step(target.element, target.positionEnd.x, target.positionEnd.y);</span><br><span class=\"line\">      target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\">      <span class=\"comment\">// var position = target.element.getBoundingClientRect();</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> position = &#123;</span><br><span class=\"line\">        x: <span class=\"built_in\">parseInt</span>(target.element.style.left),</span><br><span class=\"line\">        y: <span class=\"built_in\">parseInt</span>(target.element.style.top),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 下一个动画</span></span><br><span class=\"line\">      that.update(position, selector);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    positionX = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.x,</span><br><span class=\"line\">      target.positionEnd.x - target.positionStart.x,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    positionY = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.y,</span><br><span class=\"line\">      target.positionEnd.y - target.positionStart.y,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    that.step(target.element, positionX, positionY);</span><br><span class=\"line\"></span><br><span class=\"line\">    requestAnimationFrame(callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  requestAnimationFrame(callback);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [step dom操作]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[DOM]&#125;</span> </span>element [dom 元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>x        [x坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>y        [y坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, x, y</span>) </span>&#123;</span><br><span class=\"line\">  element.style.left = x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  element.style.top = y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [push 加入动画队列]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [dom选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>conf     [位置数据]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, conf</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.push(&#123;</span><br><span class=\"line\">      x: conf.x,</span><br><span class=\"line\">      y: conf.y,</span><br><span class=\"line\">      duration: conf.duration || <span class=\"number\">1000</span>,</span><br><span class=\"line\">      func: tween[conf.func] || tween[<span class=\"string\">'linear'</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 动画出队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 清空动画队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.clear = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h5 id=\"3）使用IntersectionObserverAPI来替代scroll事件实现元素相交检测\">3）使用<code>IntersectionObserver</code>API来替代<code>scroll</code>事件实现元素相交检测</h5><p>以下是一些需要用到相交检测的场景：</p><ul><li>图片懒加载 – 当图片滚动到可见时才进行加载</li><li>内容无限滚动 – 用户滚动到接近滚动容器底部时直接加载更多数据，而无需用户操作翻页，给用户一种网页可以无限滚动的错觉</li><li>检测广告的曝光情况——为了计算广告收益，需要知道广告元素的曝光情况</li><li>在用户看见某个区域时执行任务、播放视频</li></ul><p>     以内容无限滚动为例，古老的相交检测方案就是使用<code>scroll</code>事件监听滚动容器，在监听器函数中获取滚动元素的几何属性判断元素是否已经滚动到底部。我们知道<code>scrollTop</code>等属性的获取和设置都会导致页面回流，并且如果界面需要绑定多个监听函数到<code>scroll</code>事件进行类似操作的时候，页面性能会大打折扣：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 滚动监听 */</span></span><br><span class=\"line\">  onScroll = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; </span><br><span class=\"line\">      scrollTop, scrollHeight, clientHeight</span><br><span class=\"line\">    &#125; = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#target'</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* 已经滚动到底部 */</span></span><br><span class=\"line\">    <span class=\"comment\">// scrollTop(向上滚动的高度)；clientHeight(容器可视总高度)；scrollHeight(容器的总内容长度)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scrollTop + clientHeight === scrollHeight) &#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p>     因此在处理相交检测的问题时我们应该在考虑兼容性的情况下尽可能使用<code>IntersectionObserver</code> API，浏览器会自行优化多个元素的相交管理。IntersectionObserver API 允许你配置一个回调函数，当以下情况发生时会被调用：</p><ul><li>每当目标(target)元素与设备视窗或者其他指定元素发生交集的时候执行。设备视窗或者其他元素我们称它为根元素或根(root)。</li><li>Observer第一次监听目标元素的时候</li></ul><p>     创建一个 IntersectionObserver对象，并传入相应参数和回调用函数，该回调函数将会在目标(target)元素和根(root)元素的交集大小超过阈值(threshold)规定的大小时候被执行：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">    root: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#scrollArea'</span>),</span><br><span class=\"line\">    rootMargin: <span class=\"string\">'0px'</span>, <span class=\"comment\">// 指定根(root)元素的外边距</span></span><br><span class=\"line\">    threshold: <span class=\"number\">1.0</span>, <span class=\"comment\">// 表示子元素完全和容器元素相交</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(callback, options);</span><br><span class=\"line\">observer.observe(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#scrollTarget'</span>));</span><br></pre></td></tr></table></figure><p>     <strong>配置项1：</strong> 通常需要关注文档最接近的可滚动祖先元素的交集更改，如果元素不是可滚动元素的后代，则默认为设备视窗。如果要观察相对于根(root)元素的交集，请指定根(root)元素为null。</p><p>     <strong>配置项2：</strong> 目标(target)元素与根(root)元素之间的交叉度是交叉比(intersection ratio)。这是目标(target)元素相对于根(root)的交集百分比的表示，它的取值在0.0和1.0之间。</p><p>     <strong>配置项3：</strong> 根(root)元素的外边距。类似于 CSS 中的 margin 属性，比如 “10px 20px 30px 40px” (top, right, bottom, left)。如果有指定root参数，则rootMargin也可以使用百分比来取值。该属性值是用作root元素和target发生交集时候的计算交集的区域范围，使用该属性可以控制root元素每一边的收缩或者扩张。默认值为0。</p><p>这里我们再以一个实际案例来进行展示，即图片懒加载方案：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazyload</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> imagesToLoad = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'image[data-src]'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImage</span>(<span class=\"params\">image</span>) </span>&#123;</span><br><span class=\"line\">    image.src = image.getAttribute(<span class=\"string\">'data-src'</span>);</span><br><span class=\"line\">    image.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      image.removeAttribute(<span class=\"string\">'data-src'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> intersectionObserver = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">items, observer</span>) </span>&#123;</span><br><span class=\"line\">    items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 所有属性：</span></span><br><span class=\"line\"><span class=\"comment\">        item.boundingClientRect - 目标元素的几何边界信息</span></span><br><span class=\"line\"><span class=\"comment\">        item.intersectionRatio - 相交比 intersectionRect/boundingClientRect</span></span><br><span class=\"line\"><span class=\"comment\">        item.intersectionRect -  描述根和目标元素的相交区域</span></span><br><span class=\"line\"><span class=\"comment\">        item.isIntersecting - true(相交开始)，false(相交结束)</span></span><br><span class=\"line\"><span class=\"comment\">        item.rootBounds - 描述根元素</span></span><br><span class=\"line\"><span class=\"comment\">        item.target - 目标元素</span></span><br><span class=\"line\"><span class=\"comment\">        item.time - 时间原点(网页在窗口加载完成时的时间点)到交叉被触发的时间的时间戳</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item.isIntersecting) &#123;</span><br><span class=\"line\">        loadImage(item.target);</span><br><span class=\"line\">        observer.unobserve(item.target);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  imagesToLoad.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">image</span>) </span>&#123;</span><br><span class=\"line\">    intersectionObserver.observe(image);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><h5 id=\"4）使用Web-Workers在后台运行CPU密集型任务\">4）使用<code>Web-Workers</code>在后台运行CPU密集型任务</h5><p>     Web Worker 允许你在后台线程中运行脚本。如果你有一些高强度的任务，可以将它们分配给 Web Worker，这些 WebWorker 可以在不干扰用户界面的情况下运行它们。创建后，Web Worker 可以将消息发布到该代码指定的事件处理程序来与 JavaScript 代码通信，反之亦然。</p><p>     一个简单的专用worker示例，我们在主进程代码中创建一个worker实例，然后向实例发送一个数字，worker接受到消息后拿到数字进行一次<code>斐波那契函数</code>运算，并发送运算结果给主线程：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -------------- main.js -------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myWorker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"fibonacci.js\"</span>);</span><br><span class=\"line\">worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'The result of fibonacci.js: '</span>, e.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">worker.postMessage(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------- fibonacci.js -------------- */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">2</span>) + fibonacci(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">self.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  self.postMessage(fibonacci(<span class=\"built_in\">Number</span>(e.data)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>&gt; Worker的常见类型</p><ul><li><strong>专用Worker：</strong> 一个专用worker仅仅能被生成它的脚本所使用。</li><li><strong>共享Worker：</strong> 一个共享worker可以被多个脚本使用——即使这些脚本正在被不同的window、iframe或者worker访问。</li><li><strong>Service Workers：</strong> 一般作为web应用程序、浏览器和网络（如果可用）之前的代理服务器。它们旨在（除开其他方面）创建有效的离线体验，拦截网络请求，以及根据网络是否可用采取合适的行动并更新驻留在服务器上的资源。他们还将允许访问推送通知和后台同步API。</li><li><strong>Chrome Workers：</strong> 一种仅适用于firefox的worker。如果您正在开发附加组件，希望在扩展程序中使用worker且有在你的worker中访问 js-ctypes 的权限，你可以使用Chrome Workers。</li><li><strong>Audio Workers：</strong> 音频worker使得在web worker上下文中直接完成脚本化音频处理成为可能。</li></ul><p>&gt; Worker中可以使用的函数和接口</p><p>     你可以在web worker中使用大多数的标准javascript特性，包括：</p><ul><li>Navigator</li><li>Location(只读)</li><li>XMLHttpRequest</li><li>Array, Date, Math, and String</li><li>setTimeout/setInterval</li><li>Cache &amp; IndexedDB</li></ul><p>&gt; 关于线程安全</p><p>     Worker接口会生成真正的操作系统级别的线程，然而，对于 web worker 来说，与其他线程的通信点会被很小心的控制，这意味着你很难引起并发问题。你没有办法去访问非线程安全的组件或者是 DOM，此外你还需要通过序列化对象来与线程交互特定的数据。所以你要是不费点劲儿，还真搞不出错误来。</p><p>&gt; 内容安全策略</p><p>     有别于创建它的document对象，worker有它自己的执行上下文。因此普遍来说，worker并不受限于创建它的document（或者父级worker）的内容安全策略。举个例子，假设一个document有如下头部声明：<code>Content-Security-Policy: script-src 'self'</code>，这个声明有一部分作用在于禁止脚本代码使用eval()方法。然而，如果脚本代码创建了一个worker，在worker中却是可以使用eval()的。</p><p>     为了给worker指定内容安全策略，必须为发送worker代码的请求本身加上一个<code>内容安全策略</code>。有一个例外情况，即worker脚本的使用dataURL或者blob创建的话，worker会继承创建它的document或者worker的内容安全策略。</p><p>&gt; 一些使用场景</p><ul><li>在一些不采用<code>websockets</code>架构的应用中使用传统的轮询方式定时获取接口数据以供前端脚本实现一些界面和数据自动更新功能</li><li>光线追踪：光线追踪是一种通过将光线追踪为像素来生成图像的渲染技术。光线追踪使用CPU密集型数学计算来模拟光线路径。这个想法是模拟反射，折射，材质等一些效果。所有这些计算逻辑都可以添加到Web Worker中以避免阻塞UI线程。</li><li>加密：由于对个人和敏感数据的监管日益严格，端到端加密越来越受欢迎。加密可能是一件非常耗时的事情，特别是如果有很多数据必须经常加密（例如在将数据发送到服务器之前）。这是一个非常好的场景，可以使用Web Worker。</li><li>预取数据：为了优化您的网站或Web应用程序并缩短数据加载时间，您可以利用Web Workers预先加载和存储一些数据，以便稍后在需要时使用它。</li><li>PWA进式Web应用程序：这种应用程序中即使网络连接不稳定，它们也必须快速加载。这意味着数据必须存储在本地浏览器中，这是IndexDB或类似的API进场的地方。为了在不阻塞UI线程的情况下使用，工作必须在Web Workers中完成。</li></ul><h5 id=\"5）使用事件委托\">5）使用事件委托</h5><p>     事件委托就是把一个元素响应事件（click、keydown…）的函数委托到另一个元素。一般来讲，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。<a href=\"https://zhuanlan.zhihu.com/p/26536815\" target=\"_blank\" rel=\"noopener\">=&gt; 一篇不错的参考文章</a></p><p>     其实我们熟悉的 React 框架也并不是将 click 事件直接绑定在 dom 上面，而是采用事件冒泡的形式冒泡到 document 上面，这个思路借鉴了事件委托机制。而更老一点的jQuery也是允许我们直接使用它提供的API来进行事件委托：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.parent'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'click event on tag a'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>&gt; 关于事件冒泡机制：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/optimization/event-pop.jpg\" alt=\"event-pop\"></p><p>&gt; 事件模型的<strong>三个阶段</strong>：</p><ul><li>捕获阶段：在事件冒泡的模型中，捕获阶段不会响应任何事件</li><li>目标阶段：目标阶段就是指事件响应到触发事件的最底层元素上</li><li>冒泡阶段：冒泡阶段就是事件的触发响应会从最底层目标一层层地向外到最外层（根节点），事件代理即是利用<br>件冒泡的机制把里层所需要响应的事件绑定到外层</li></ul><p>&gt; 事件委托的<strong>优点</strong>：</p><ul><li>减少内存消耗，提升性能<br>我们不需要再为每个列表元素都绑定一个事件，只需要将事件函数绑定到父级<code>ul</code>组件：</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id&#x3D;&quot;list&quot;&gt;</span><br><span class=\"line\">  &lt;li&gt;item 1&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;li&gt;item 2&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;li&gt;item 3&lt;&#x2F;li&gt;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  &lt;li&gt;item n&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><ul><li>动态绑定事件<br>     比如上述的例子中列表项就几个，我们给每个列表项都绑定了事件。在很多时候，我们需要通过 AJAX 或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件。</li></ul><p>     如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的。所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。</p><p>&gt; 使用<code>Element.matchesSelector</code> API简单实现事件委托：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!Element.prototype.matches) &#123;</span><br><span class=\"line\">  Element.prototype.matches =</span><br><span class=\"line\">    Element.prototype.matchesSelector ||</span><br><span class=\"line\">    Element.prototype.mozMatchesSelector ||</span><br><span class=\"line\">    Element.prototype.msMatchesSelector ||</span><br><span class=\"line\">    Element.prototype.oMatchesSelector ||</span><br><span class=\"line\">    Element.prototype.webkitMatchesSelector ||</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> matches = (<span class=\"keyword\">this</span>.document || <span class=\"keyword\">this</span>.ownerDocument).querySelectorAll(s),</span><br><span class=\"line\">        i = matches.length;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (--i &gt;= <span class=\"number\">0</span> &amp;&amp; matches.item(i) !== <span class=\"keyword\">this</span>) &#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i &gt; <span class=\"number\">-1</span>;            </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 兼容性处理</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = event.target || event.srcElement;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (target.matches(<span class=\"string\">'li.class-1'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'the content is: '</span>, target.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>&gt; 事件委托的<strong>局限性</strong>：</p><ul><li>比如 focus、blur 之类的事件本身没有事件冒泡机制，所以无法委托。</li><li>mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。</li></ul><h5 id=\"6）一些编码方面的优化建议\">6）一些编码方面的优化建议</h5><ul><li>长列表数据的遍历使用<code>for</code>循环替代<code>forEach</code>。</li></ul><p>     for循环能通过关键字<code>break</code>实现循环中断，forEach首先性能不如for，其次在处理一些需要条件断开的循环时比较麻烦(可以包裹try catch，然后throw error断开)。如果是数组类型的数据遍历的话，也可以使用<code>array.every(item =&gt; { if (...) return false; else do something; })</code>来实现条件断开。</p><ul><li>尽量不要在全局作用域声明过多变量</li></ul><p>     全局变量存在于全局上下文，全局上下文是作用域链的顶端，当通过作用域链进行变量查找的时候，会延长查找时间。全局执行上下文会一直存在于上下文执行栈，直到程序推出，这样会影响GC垃圾回收。如果局部作用域中定义了同名变量，会遮蔽或者污染全局。</p><p>     可以使用单例模式来封装一系列逻辑(运用了闭包的原理)，并通过一个公用的变量名暴露给作用域中的其它模块使用，同时也提高了代码的内聚性：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> workData = &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workA</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workB</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workC</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> work = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">initParams</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> workData = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workA</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workB</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workC</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    doWorkA: workA,</span><br><span class=\"line\">    doWorkB: workB,</span><br><span class=\"line\">    doWorkC: workC,</span><br><span class=\"line\">    workSeries: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.doWorkB();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.doWorkC();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)(initParams);</span><br><span class=\"line\"></span><br><span class=\"line\">work.doWorkA();</span><br><span class=\"line\">work.workSeries();</span><br></pre></td></tr></table></figure><ul><li>使用<code>switch</code>和<code>map</code>的方式处理需要大量逻辑判断的情况</li></ul><p>     连续的<code>if</code>判断中在到达目标条件之前需要经过多个条件判断，而map和switch方式都能够通过条件直接找到对应的处理逻辑。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (condition === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// do something ...</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'b'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// do something ...</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> conditionMap = &#123;</span><br><span class=\"line\">  a: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something */</span> &#125;,</span><br><span class=\"line\">  b: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something */</span> &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">conditionMap[condition]();</span><br></pre></td></tr></table></figure><ul><li>定义构造函数时使用原型声明对象的公用方法</li></ul><p>     我们在<code>new</code>一个对象时，js所做的就是创建一个空对象，并把此对象作为构造函数的context来执行(参考call调用逻辑)，执行后空对象上就被复制了构造函数的的属性和方法，然后js会把构造函数的原型绑定到对象的<code>__proto__</code>属性上，最后构造函数将对象返回给我们使用。</p><p>     从以上可以看出，如果我们直接把一些function逻辑写入构造函数的话，在对象创建的时候每个function都会在新对象上被创建一次，消耗额外的资源，且违反了程序复用原则。建议将function放入构造函数的原型，那么对象就能通过原型链查找来使用这个方法，而不是在对象自身上重新复制一个一模一样的逻辑。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Structure</span>(<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.attr = attr;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getAttr = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.attr;</span><br><span class=\"line\">  &#125;).bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Structure(<span class=\"string\">'obj1'</span>);</span><br><span class=\"line\">obj.getAttr(); <span class=\"comment\">// from obj itself</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Structure</span>(<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.attr = attr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Structure.prototype.getAttr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.attr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Structure(<span class=\"string\">'obj1'</span>);</span><br><span class=\"line\">obj.getAttr(); <span class=\"comment\">// from obj prototype chain</span></span><br></pre></td></tr></table></figure><h3 id=\"➣-React-性能优化方面\">➣ React 性能优化方面</h3><h4 id=\"1-网络层面-3\">1. 网络层面</h4><h5 id=\"1）React-jsx-js文件压缩\">1）React jsx/js文件压缩</h5><h5 id=\"2）使用React-lazy和React-Suspense实现代码分割和懒加载\">2）使用<code>React.lazy</code>和<code>React.Suspense</code>实现代码分割和懒加载</h5><p>     React开发的应用通常会借用<code>webpack</code>这类项目打包器将编写的各个模块代码和引入的依赖库的代码打包成一个单独的JS文件，有些未做CSS样式分离优化的项目甚至连样式表都和JS文件打包在一起，然后在页面加载的HTML文件中需要下载了这一整个JS文件后之后才能进去到页面构建阶段。对于中小型项目还好，简单的首屏优化就能将资源压缩到足够小，但是一些大型项目可能存在很多子项目，如果不对代码做分割然后按子项目模块加载的话，在首屏我们浏览器需要下载整个项目的依赖文件，导致加载时间过长。</p><p>     使用<code>React.lazy</code>可以分割子项目代码并根据当前页面路由来动态加载页面依赖文件，尽管并没有减少应用整体的代码体积，但你可以避免加载用户永远不需要的代码，并在初始加载的时候减少所需加载的代码量。</p><p>注意：搭配<code>Babel</code>进行代码编译时需要安装额外的babel插件以提供动态加载功能：</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [...],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"dynamic-import-webpack\"</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>React.lazy 函数能让你像渲染常规组件一样处理动态引入的组件：<br>它接受一个函数，这个函数需要动态调用 import()。它必须返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用前 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> OtherComponent <span class=\"keyword\">from</span> <span class=\"string\">'./OtherComponent'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 使用后，代码将会在组件首次渲染时，自动导入包含 OtherComponent 组件的包 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OtherComponent = React.lazy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./OtherComponent'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------- OtherComponent.js -------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>other<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>) &#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用 React.Suspense 提供一个组件加载时的占位组件：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Suspense &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> OtherComponent = React.lazy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./OtherComponent'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mainComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class=\"regexp\">/div&gt;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;section&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;OtherComponent /</span>&gt;</span><br><span class=\"line\">        &lt;AnotherComponent /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/section&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Suspense&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用异常捕获组件避免模块加载失败时让整个应用崩溃</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -------------- mainComponent.js -------------- */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;MyErrorBoundary&gt;</span><br><span class=\"line\">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class=\"regexp\">/div&gt;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;OtherComponent /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Suspense&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>MyErrorBoundary&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------- ErrorBoundary.js -------------- */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorBoundary</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">hasError</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromError(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新 state 使下一次渲染能够显示降级后的 UI</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">hasError</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidCatch(error, errorInfo) &#123;</span><br><span class=\"line\">    logErrorToMyService(error, errorInfo); <span class=\"comment\">// 可以选择将错误日志上报给服务器</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.hasError)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Something went wrong.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>; <span class=\"comment\">// 你可以自定义降级后的 UI 并渲染</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children; <span class=\"comment\">// 正常渲染子组件</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码分割搭配 React-Router 同样适用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Suspense, lazy &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Home = lazy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./routes/Home'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class=\"regexp\">/div&gt;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route exact path=\"/</span><span class=\"string\">\" component=&#123;Home&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Suspense&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure></li></ul><h5 id=\"3）使用React-Fragment来避免非必要DOM层级的引入\">3）使用<code>React.Fragment</code>来避免非必要DOM层级的引入</h5><p>     React通常要求我们在编写一个组件时返回单个container组件包裹的DOM结构，而不允许直接返回多个未包裹的子组件，如果不使用Fragment就必须额外添加一层DOM节点，比如：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;td&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;2&lt;/</span>td&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><p>额外添加的<code>div</code>增加了无用的DOM层级，且会造成<code>table</code>组件无法正确渲染(tr/td之间多了一层div)。<br>使用Fragment后最终所有<code>td</code>标签都会被直接添加到上层的<code>tr</code>标签下，同时也不会产生多余层级：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;React.Fragment&gt;</span><br><span class=\"line\">        &lt;td&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;2&lt;/</span>td&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/React.Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><h4 id=\"2-渲染层面-3\">2. 渲染层面</h4><h5 id=\"1）使用shouldComponentUpdate避免不必要渲染\">1）使用<code>shouldComponentUpdate</code>避免不必要渲染</h5><p>     当一个React组件内部state或外部传入props更新时，会触发组件的重新渲染，开发者可以在<code>shouldComponentUpdate</code>生命周期中通过对比传入的即将被更新的state和props来决定组件是否要重新渲染，函数默认返回true，即触发渲染：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.color !== nextProps.color ||</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.count !== nextState.count</span><br><span class=\"line\">    ) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button</span><br><span class=\"line\">        color=&#123;<span class=\"keyword\">this</span>.props.color&#125;</span><br><span class=\"line\">        onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;<span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span>&#125;))&#125;&gt;</span><br><span class=\"line\">        Count: &#123;<span class=\"keyword\">this</span>.state.count&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><p>     <strong>适用情况：</strong> 当前组件的props/state并没有发生改变，但是由于其父组件的重新渲染，导致当前组件也被迫进入了重新渲染阶段。这时候为组件添加<code>shouldComponentUpdate</code>生命周期函数进行数据比较就显得尤为重要了，特别是当组件的DOM结构复杂、嵌套层次很深，重新渲染的性能消耗昂贵的时候。</p><p>     <strong>滥用情况：</strong> 并非所有组件都需要被添加此生命周期用于数据比较，因为比较这一过程本身也是需要消耗性能的，如果一个组件的state/props本来就会经常更新，那么这个组件久无需使用<code>scp</code>进行优化</p><p>     <strong>深比较函数：</strong> 有时候一个组件所需的数据结构很复杂，比如用于展示当前目录层级的资源树组件，其依赖的数据采用树形结构，树形组件一般采用递归的渲染方式，组件的渲染更新操作昂贵。因此我们可以考虑在这类组件的<code>scp</code>生命周期中使用深比较函数来对更新前后的属性数据进行一次递归比较，以判断当前资源树组件是否需要进行更新：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [deepComparison 深比较]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>data [any]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>      </span>[boolean]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepComparison</span>(<span class=\"params\">data1, data2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; toString &#125; = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取变量类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getType = <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">'null'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d !== d) <span class=\"keyword\">return</span> <span class=\"string\">'nan'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> d === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (toString.call(d) === <span class=\"string\">'[object Date]'</span>) <span class=\"keyword\">return</span> <span class=\"string\">'date'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (toString.call(d) === <span class=\"string\">'[object RegExp]'</span>) <span class=\"keyword\">return</span> <span class=\"string\">'regexp'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'object'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> d).toLowerCase();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 基本类型比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> is = <span class=\"function\">(<span class=\"params\">d1, d2, type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'nan'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'date'</span> || type === <span class=\"string\">'regexp'</span>) <span class=\"keyword\">return</span> d1.toString() === d2.toString();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (d1 === d2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compare = <span class=\"function\">(<span class=\"params\">d1, d2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type1 = getType(d1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type2 = getType(d2);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 !== type2) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys1 = <span class=\"built_in\">Object</span>.keys(d1);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys2 = <span class=\"built_in\">Object</span>.keys(d2);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (keys1.length !== keys2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys1.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        index = keys2.indexOf(keys1[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          (index === <span class=\"number\">-1</span>) ||</span><br><span class=\"line\">          !compare(d1[keys1[i]], d2[keys2[index]])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> is(d1, d2, type1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> compare(data1, data2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>     <strong>最佳实践：</strong> 深比较函数其实消耗的性能很大，特别是当数据层级很深的时候，函数的递归需要创建和销毁多个执行上下文，可能数据比较本身所消耗的性能就多于一次渲染了。因此大部分情况下使用<code>immutable</code>不可变数据结构(对象每次更新都返回一个全新的对象，对象的引用发生变化) + <code>shallowEqual</code>做浅比较是比较理想的选择。</p><h5 id=\"2）使用PureComponnet实现简单展示组件的自动浅比较\">2）使用<code>PureComponnet</code>实现简单展示组件的自动浅比较</h5><p>     上文提到<code>scu</code>生命周期中我们可以通过自定义prop/state比较函数来来控制组件是否需要重新渲染，最后得出了<code>immutable</code>不可变数据+shallowEqual是最佳实践。其实React已经给我们提供了一种自带浅比较函数的组件类型即<code>React.PureComponnet</code>，它适用于一些数据类型简单的展示组件，当我们给这些React组件传入相同的 props 和 state时，render() 函数会渲染相同的内容，那么在这些情况下使用 React.PureComponent 可提高性能：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCounter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponnet</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div</span><br><span class=\"line\">        onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">count</span>: (<span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span>) &#125;)&#125;</span><br><span class=\"line\">        style=&#123;&#123;<span class=\"attr\">color</span>: <span class=\"keyword\">this</span>.props.color&#125;&#125;</span><br><span class=\"line\">      &gt;count:$&#123;<span class=\"keyword\">this</span>.state.count&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><p>     <strong>适用情况</strong> 和 <strong>滥用情况</strong> 与<code>scp</code>生命周期大致相同，不过需要额外注意：</p><ul><li>React.PureComponent仅作对象的浅层比较，如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。</li><li>我们可以仅仅在props 和 state 较为简单时，才使用 React.PureComponent。</li><li>另一种处理方式就是在深层数据结构发生变化时调用 forceUpdate() 来确保组件被正确地更新。</li><li>当然也可以使用<a href=\"https://immutable-js.github.io/immutable-js/\" target=\"_blank\" rel=\"noopener\"> immutable.js </a>框架来处理数据结构，可以加快不可变对象加速嵌套数据的比较。一种简单的处理方式是在state数据需要更新时我们手动进行对象引用的更新：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDisplay</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    list: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  insertItem = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; list &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"comment\">/* bad - 组件不会更新 */</span></span><br><span class=\"line\">    list.push(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; list &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* good - 重新更新list变量的引用 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">list</span>: [...list, <span class=\"string\">'c'</span>] &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// or</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">list</span>: a.concat(<span class=\"string\">'c'</span>) &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div onClick=&#123;<span class=\"keyword\">this</span>.insertItem&#125;&gt;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.state.list.join(<span class=\"string\">'/'</span>) &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><h5 id=\"3）使用React-memo缓存和复用组件的渲染结果\">3）使用<code>React.memo</code>缓存和复用组件的渲染结果</h5><p>     <code>React.memo()</code>为高阶组组件，如果组件在相同 props 的情况下渲染相同的结果(state的更新依然会导致重新渲染)，那么你可以通过将其包装在 React.memo 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</p><p>     默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyComponent</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 使用 props 渲染 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">areEqual</span>(<span class=\"params\">prevProps, nextProps</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  如果把 nextProps 与 prevProps 的比较结果一致则返回 true，</span></span><br><span class=\"line\"><span class=\"comment\">  否则返回 false，这一点与shoudComponentUpdate表现相反，且areEqual</span></span><br><span class=\"line\"><span class=\"comment\">  中无法对组件内部state进行比较</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure><p>&gt; <strong>不建议</strong>使用<code>React.memo()</code>的情况：</p><ul><li>如果组件经常接收不同的属性props对象来更新的话，那么缓存上一次渲染结果这一过程毫无意义，且增加了额外的性能支出。</li><li>此方法仅作为性能优化的方式而存在，不要依赖它来“阻止”渲染，因为这会产生 bug。</li></ul><p>&gt; <strong>建议</strong>使用<code>React.memo()</code>的情况：</p><ul><li>一个组件经常会以相同的props更新，比如父组件的其它部分更新导致的当前子组件非必要渲染</li><li>常常用于将函数组件转变为具有<code>memorized</code>缓存特性的组件，组件内部可以使用<code>useState</code>hook进行内部状态管理，对组件的自更新没有影响。</li><li>如果一个组件包含大量复杂的<code>dom</code>结构，重新渲染的性能消耗较大的话可以考虑使用<code>React.memo</code>包裹，避免很多不必要的渲染情况，在props不变的情况下让react能直接复用上次的渲染结果。</li></ul><h5 id=\"4）使用Context来共享全局数据\">4）使用Context来共享全局数据</h5><p>     Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言，使用 context, 我们可以避免通过中间元素来逐级传递 props。举个例子，在下面的代码中，我们通过一个 “theme” 属性手动调整一个按钮组件的样式：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -------------- context.js -------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> theme = &#123;</span><br><span class=\"line\">  light: &#123; <span class=\"attr\">color</span>: <span class=\"string\">'black'</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'white'</span> &#125;,</span><br><span class=\"line\">  dark: &#123; <span class=\"attr\">color</span>: <span class=\"string\">'white'</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'black'</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为当前的 theme 创建一个 context（“light”为默认值）。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">const</span> ThemeContext = React.createContext(theme.light);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------- App.js -------------- */</span></span><br><span class=\"line\"><span class=\"comment\">// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ThemeContext = <span class=\"built_in\">require</span>(<span class=\"string\">'./context.js'</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用一个 Provider 来将当前的 theme 传递给以下的组件树。</span></span><br><span class=\"line\">    <span class=\"comment\">// 无论多深，任何组件都能读取这个值。</span></span><br><span class=\"line\">    <span class=\"comment\">// 在这个例子中，我们将 “dark” 作为当前的值传递下去，当Provider不指定当前值时</span></span><br><span class=\"line\">    <span class=\"comment\">// createContext中传入的默认值会生效</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ThemeContext.Provider value=<span class=\"string\">\"dark\"</span>&gt;</span><br><span class=\"line\">        &lt;Toolbar /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ThemeContext.Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* -------------- Toolbar.js -------------- *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 中间的组件再也不必指明往下传递 theme 了。</span></span><br><span class=\"line\"><span class=\"regexp\">function Toolbar() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;ThemedButton /</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* -------------- ThemedButton.js -------------- *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">const ThemeContext = require('./</span>context.js<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">class ThemedButton extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"string\">  // 指定 contextType 读取当前的 theme context。</span></span><br><span class=\"line\"><span class=\"string\">  // React 会往上找到最近的 theme Provider，然后使用它的值。</span></span><br><span class=\"line\"><span class=\"string\">  // 在这个例子中，当前的 theme 值为 “dark”。</span></span><br><span class=\"line\"><span class=\"string\">  static contextType = ThemeContext;</span></span><br><span class=\"line\"><span class=\"string\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &lt;Button theme=&#123;this.context&#125; /&gt;;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure><p>     对于不需要订阅context更新来重新渲染界面的情况，上面的代码示例已经足够应付，如果想要接收动态变化的context值来响应式更新界面，则需要使用<code>Context.Consumer</code>API，它内部包裹一个返回dom组件的function函数，传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 默认值：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;MyContext.Consumer&gt;</span><br><span class=\"line\">      &#123; value =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><span class=\"comment\">/* 基于 context 值进行渲染*/</span> &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MyContext.Consumer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> Context 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。</p><h5 id=\"5）优化组件分割策略来处理长列表组件的渲染\">5）优化组件分割策略来处理长列表组件的渲染</h5><p>     有时候我们需要渲染一些拥有很多子组件的的列表组件，比如一个展示当前目录下有哪些文件的<code>FileList</code>组件，它包含很多子组件<code>FileListItem</code>，如下。想象我们在使用 input 组件获取输入值更新 state 得时候，同时也不可避免的触发了同一个render函数下<code>FileListItem</code>组件的重新渲染，即使从父级传入的 files 数组未发生任任何改变：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    value: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  onChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">value</span>: e.target.value &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;&gt;&lt;<span class=\"regexp\">/input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            this.props.files.map((file) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">              return &lt;FileListItem key=&#123;file.name&#125; name=&#123;file.name&#125; /</span>&gt;;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>     这时候我们就可以考虑在设计组件结构时将 <code>files.map()</code>这部分的逻辑完全抽离到一个完整的子组件内，否则前面提到的<code>shouldComponentUpdate</code>、<code>PureComponent</code>、<code>memo</code>等优化方法都将无法施展。我们无法直接在<code>FileList</code>组件内针对 files 数组未改变的情况下做任何优化，因为 input 组件的每次状态更新都会让 <code>FileList</code> 组件的每一个部分都重新渲染一遍，优化的组件结构如下：</p><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -------------- FileList.js -------------- */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">value</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  onChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">value</span>: e.target.value &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;&gt;</span><br><span class=\"line\">        &lt;input value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;&gt;&lt;<span class=\"regexp\">/input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;FileListItemContainer files=&#123;this.props.files&#125; /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* -------------- FileListItemContainer.js -------------- *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">export default React.memo(function(&#123; files &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        files.map((file) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">          return &lt;FileListItem key=&#123;file.name&#125; name=&#123;file.name&#125; /</span>&gt;;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br></pre></td></tr></table></figure><h5 id=\"6）正确理解组件-key-的使用策略\">6）正确理解组件 key 的使用策略</h5><p>     在 React 中，UI 界面的构建是由当前虚拟DOM树状态决定的。前后两个状态就对应两套界面，产生不同的状态之后，然后由 React 通过时间复杂度为O(n)的 dom diff 算法来比较两个界面的区别，最后由React选择性的来更新真实DOM。</p><p>     要想理解 React组件 key 的设计理念我们得先简单了解一下React进行DOM树 diff 的过程，我们都知道Js脚本直接操作网页DOM元素时会造成重绘和回流等<code>低效渲染</code>，因此React的DOM树 diff 过程针对的是更新前后两颗虚拟的DOM树，虚拟DOM树并不是真实的DOM节点，而是一种描述页面DOM元素结构的树形数据结构，每个虚拟树节点存储了一个DOM元素的属性和样式等信息。React 需要基于这两棵树之间的差别来判断如何有效率的更新 UI 以保证当前 UI 与最新的树保持同步。为了提高树diff的效率，于是 React 在以下两个假设的基础之上提出了一套复杂度为 O(n) 的启发式算法：</p><ul><li>i. 两个不同类型的元素会产生出不同的树(比如 img 和 span 被看做完全不同的两个节点)</li><li>ii. 开发者可以通过 key 属性来暗示哪些子元素在不同的渲染下能保持稳定</li></ul><p>     如果两次渲染同一位置的某个元素的类型改变，例如从 span 变成了 image，那么不用多说这个组件和其子组件都会先被卸载，同时触发卸载前组件的生命周期<code>componentWillUnmount</code>，然后将新的DOM节点渲染添加到页面上，新的组件实例将执行 <code>componentWillMount</code>、<code>componentDidMount</code> 等周期方法，所有跟之前的树所关联的 state 也会被销毁。</p><p>     如果两次渲染组件的类型未改变，React 将更新该组件实例的 props 以跟最新的元素保持一致，并且调用该实例的 <code>componentWillReceiveProps</code>、<code>componentWillUpdate</code> 以及 <code>componentDidUpdate</code> 方法。下一步，React 会调用 <code>render()</code>方法并比较其子节点产生的差异。</p><p>想象我们在子元素列表末尾新增元素时：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;first&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* 插入third *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;first&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;second&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;third&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>React 会先匹配到两颗虚拟DOM树对应的 <code>first</code>节点，然后匹配到两棵树的 <code>second</code> 节点，最后发现在<code>second</code>之后出现了一个全新的节点，dom渲染时就会插入第三个元素 <code>&lt;li&gt;third&lt;/li&gt;</code> 到<code>second</code>之后，其更新开销会比较小。</p><p>     但是也有一种比较坏的情况，当我们将<code>third</code>节点插入到列表头时，React在 diff 过程中发现所有子节点都发生了变化(整体位置发生了相对改变)，React 不会意识到应该保留<code>first</code>和<code>second</code>，而是会重建每一个子元素，这种情况会带来性能问题：</p><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;first&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* 插入third *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;third&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;first&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>     为了解决以上问题，React 支持 <code>key</code> 属性。当子元素拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素，相当于每个子节点都有了ID，因此能够游刃有余的判断哪些节点需要重建，而哪些节点只需要进行简单的位置移动即可。比如上个例子中React根据组件的Key就能识别我们只需要新建<code>third</code>节点并将它插入到first节点之前就能满足要求，而不需要将列表元素都重建一遍。</p><p>&gt; 对组件key的 <strong>误解 和 乱用：</strong></p><ul><li>页面中的所有组件key都不能重复 =&gt; 错！我们只需要保证同一列表层级的组件key不重复即可，当有重复key时可能会导致React在多次渲染时结果错乱。</li><li>使用<code>Math.random()</code>函数来随机产生key值 =&gt; 大错特错！这样子做了之后，每次渲染key值都会变化，会引起所有使用了key的组件都会被卸载重建一次，性能优化效果为负。</li><li>key值只能用于列表组件 =&gt; 错！我们可以给任意一个组件添加key值，比如我们想让某个组件在props/state完全没改变的情况下触发其重建更新，那么就可以给予它两个阶段不同的key值。一个例子是用于重置Antd Form表单状态，让其在某些特殊情况下以之前的默认值重新挂载(触发表单更改后其默认值无法恢复)。</li></ul><h5 id=\"7）使用虚拟化渲染技术来优化超长列表组件\">7）使用虚拟化渲染技术来优化超长列表组件</h5><p>     有时候项目中要求我们在不使用分页的情况下渲染一个超长的列表组件，比如一个文件上传列表里面的每个文件上传任务，我们同时添加成千上万个上传任务，然后并行上传几个，操作者同时也能通过列表的上下滚动来查看每个上传任务的状态。这种变态数量级的界面元素展示+本就不简单的上传流程控制，必然导致我们的界面会有一定程度的卡顿。</p><p>     一个解决方案就是可以采用懒加载技术来实现当滚动到任务列表底部时加载其余的一小部分任务列表元素，这样虽然解决了初次渲染时耗费时间过长的问题，不过随着滚动到底部加载的任务条目越来越多，界面的渲染负载也会越来越大。这种情况下采用虚拟化滚动技术来进行优化就显得很有必要了。</p><p>     虚拟列表是一种根据滚动容器元素的可视区域高度来渲染长列表数据中某一个部分数据的技术。这里需要简单了解一下其原理，如果要直接使用的话可以考虑这两个热门的虚拟滚动库 <a href=\"https://react-window.now.sh/\" target=\"_blank\" rel=\"noopener\">react-window</a> 和 <a href=\"https://bvaughn.github.io/react-virtualized/\" target=\"_blank\" rel=\"noopener\">react-virtualized</a>。</p><p>&gt; 首先清楚虚拟化滚动技术中的几个<strong>关键元素</strong>：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/optimization/vitual-scroll.png\" alt=\"vitual-scroll\"></p><ul><li>i. 滚动容器元素：一般情况下，滚动容器元素是 window 对象。然而，我们可以通过布局的方式，在某个页面中任意指定一个或者多个滚动容器元素。只要某个元素能在内部产生横向或者纵向的滚动，那这个元素就是滚动容器元素。</li><li>ii. 可滚动区域：滚动容器元素的内部内容区域。假设有 100 条数据，每个列表项的高度是 50，那么可滚动的区域的高度就是 100 * 50。可滚动区域当前的具体高度值一般可以通过(滚动容器)元素的 scrollHeight 属性获取。用户可以通过滚动来改变列表在可视区域的显示部分。</li><li>iii. 可视区域：滚动容器元素的视觉可见区域。如果容器元素是 window 对象，可视区域就是浏览器的视口大小(即视觉视口)；如果容器元素是某个 div 元素，其高度是 300，右侧有纵向滚动条可以滚动，那么视觉可见的区域就是可视区域。</li></ul><p>&gt; 如何在只渲染少量可视元素的情况下，还能让滚动条的长度和位置显示正确呢：</p><ul><li>i. 首先明确滚动容器内容的总高度=<code>列表元素高度 * 列表元素总个数</code>，容器可视高度固定，通过设置css <code>overflow: scroll</code> 就能显示滚动条。</li><li>ii. 滚动容器的可视高度固定，那么可视区域能显示的列表元素个数=<code>容器可视高度/列表元素高度</code>，这些少量的元素不足以撑起容器元素的进行滚动，滚动容器滚动条高度仍然会为0。因此我们通过设置容器元素<code>paddingTop+paddingBottom</code>(startOffset+endOffset)来让容器元素内容总高度正确显示，这里<code>padding+可视高度=容器内容总高度</code>。</li></ul><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      style=&#123;&#123;</span><br><span class=\"line\">        paddingTop: <span class=\"string\">`<span class=\"subst\">$&#123;startOffset&#125;</span>px`</span>,</span><br><span class=\"line\">        paddingBottom: <span class=\"string\">`<span class=\"subst\">$&#123;endOffset&#125;</span>px`</span></span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">      className=<span class=\"string\">'wrapper'</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &#123; <span class=\"comment\">/* render list */</span> &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>iii. 容器能正确显示滚动高度了，那么如何让我们在滚动的时候能知道应该显示哪些元素呢？一个巧妙的方法就是根据当前滚动条的<code>scrollTop</code>(滚动容器的固有属性：表示能够向上滚动的高度值，可以直接获取)计算首个应该渲染的元素的索引<code>startIndex</code>以及最后需要渲染的元素的索引<code>endIndex</code>，然后再根据两个索引分别计算 paddingTop 和 paddingBottom 即可：<ul><li>startIndex = Math.ceil(scrollTop / 滚动容器元素总高度)</li><li>可视元素个数 = 可视区域高度 / 滚动元素高度</li><li>endIndex = startIndex + 可视区域元素个数</li><li>当前渲染元素renderItems = data.slice(startIndex, endIndex)</li><li>paddingTop = startIndex * 滚动元素高度</li><li>paddingBottom = (this.data.length - this.endIndex - 1) * 滚动元素高度</li></ul></li></ul><p>     以上为虚拟化滚动简化的描述模型，实际实现时还要考虑：缓存已经加载的列表元素的位置信息、列表元素的高度是否可变、增加缓冲元素来减少白屏情况(缓冲元素就是预加载的几个接近视口可显示元素的上下部分其它元素)、容器元素resize后的处理等。处理情况还是比较复杂，使用成熟的库处理而不是自己造轮子是比较好的方案，不过个中原理还是要理解。</p><h3 id=\"结语\">结语</h3><p>     学习前端性能优化的方方面面，一方面是对我们核心基础知识的考察，另一方面也能为我们遇到的一些实际问题提供处理思路，是每个前端人进阶的的必经之路。</p><p>以上就是本篇文章的所有内容，后续有需要还会继续更新…</p>","site":{"data":{}},"excerpt":"","more":"<blockquote><p>此文主要描述 html / css / js / react 即时渲染和网络加载优化方面的知识，webpack常用优化方法和HTTP Server等优化请关注《 前端性能优化技巧详解(2) 》</p></blockquote><blockquote><p>如果之后发现有其它要点值得梳理，会继续更新本文…</p></blockquote><h3 id=\"目录\">目录</h3><ul><li>目录</li><li>➣ HTML/CSS 性能优化方面<ul><li><ol><li>网络层面</li></ol><ul><li>1）抽离内联样式内联脚本</li><li>2）defer脚本和async脚本</li><li>3）压缩HTML/CSS代码资源</li><li>4）压缩图片/音视频等多媒体资源</li><li>5）使用雪碧图</li><li>6）避免空的 src 和 href 值</li><li>7）避免使用<code>@import</code>来引入css</li></ul></li><li><ol start=\"2\"><li>渲染层面</li></ol><ul><li>1）减少页面的回流和重绘</li><li>2）减少DOM结构的层级</li><li>3）尽量不使用<code>table</code>布局和<code>iframe</code>内联网页</li><li>4）flex布局的性能比<code>inline-block</code>和<code>float</code>布局都要好</li><li>5）CSS选择器的使用策略</li><li>6）css的书写顺序也会对其解析渲染性能造成影响</li></ul></li></ul></li><li>➣ Javascript 性能优化方面<ul><li><ol><li>网络层面</li></ol><ul><li>1）压缩JS代码资源</li></ul></li><li><ol start=\"2\"><li>渲染层面</li></ol><ul><li>1）使用函数节流和函数去抖处理一些函数的高频触发调用</li><li>2）Js实现动画时使用<code>requestAnimationFrame</code>替代定时器</li><li>3）使用<code>IntersectionObserver</code>API来替代<code>scroll</code>事件实现元素相交检测</li><li>4）使用<code>Web-Workers</code>在后台运行CPU密集型任务</li><li>5）使用事件委托</li><li>6）一些编码方面的优化建议</li></ul></li></ul></li><li>➣ React 性能优化方面<ul><li><ol><li>网络层面</li></ol><ul><li>1）React jsx/js文件压缩</li><li>2）使用<code>React.lazy</code>和<code>React.Suspense</code>实现代码分割和懒加载</li><li>3）使用<code>React.Fragment</code>来避免非必要DOM层级的引入</li></ul></li><li><ol start=\"2\"><li>渲染层面</li></ol><ul><li>1）使用<code>shouldComponentUpdate</code>避免不必要渲染</li><li>2）使用<code>PureComponnet</code>实现简单展示组件的自动浅比较</li><li>3）使用<code>React.memo</code>缓存和复用组件的渲染结果</li><li>4）使用Context来共享全局数据</li><li>5）优化组件分割策略来处理长列表组件的渲染</li><li>6）正确理解组件 key 的使用策略</li><li>7）使用虚拟化渲染技术来优化超长列表组件</li></ul></li></ul></li><li>结语</li></ul><p>&gt; 思维导图：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/optimization//frontend-optimization.png\" alt=\"\"></p><p>     前端性能优化是个很大的概念，涉及HTTP协议、浏览器渲染原理、操作系统和网络、前端工程化和Js底层原理等各个方面。通过建立思维导图可以让我们很好的将各个优化方面组织和联系起来。</p><p>     按照优化原理的不同则可以将其分为<code>网络层面优化</code>和<code>渲染层面</code>的优化，网络层面的优化更多体现在资源加载时的优化，而渲染层的优化更多体现在运行时优化。</p><p>     例如优化浏览器缓存策略以减少HTTP请求传输量、图片和其它静态资源的压缩、服务器端启用Gzip压缩、使用CDN、图片懒加载、延迟脚本Defer和异步脚本Async等属于网络层面的优化。另一方面，减少页面的回流和重绘、使用React.Fragment减少界面dom层级、使用骨架屏、函数节流和去抖、React长列表组件优化、通过事件冒泡机制实现事件委托等就属于渲染层面的优化。</p><h3 id=\"➣-HTML-CSS-性能优化方面\">➣ HTML/CSS 性能优化方面</h3><h4 id=\"1-网络层面\">1. 网络层面</h4><h5 id=\"1）抽离内联样式内联脚本\">1）抽离内联样式内联脚本</h5><ul><li>内联资源不利于浏览器缓存，造成重复的资源请求</li><li>内联资源会造成HTML臃肿，不利于HTTP传输</li><li>内联资源的下载和解析可能会阻塞导致界面渲染，导致界面白屏</li><li>内联资源不好管理和维护</li></ul><h5 id=\"2）defer脚本和async脚本\">2）defer脚本和async脚本</h5><p>     HTML在解析时遇到声明的<code>&lt;script&gt;</code>脚本会立即下载和执行，往往会延迟界面剩余部分的解析，造成界面白屏的情况。比较古老的优化方式之一就是将脚本放到HTML文档末尾，这样子解决了白屏的问题，可是在DOM文档结构复杂冗长时，也会造成一定的界面脚本下载和执行延迟，script标签新属性<code>async</code>和<code>defer</code>可以解决此类问题：</p><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"path/to/target.js\"</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"path/to/target.js\"</span> <span class=\"attr\">async</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>defer脚本<br>     延迟脚本-声明<code>defer</code>属性的外部<code>&lt;script&gt;</code>脚本下载时不会阻塞HTML的解析和渲染，并且会在HTML渲染完成并且可实际操作之后开始执行(<code>DOMContentLoaded</code>事件被触发之前)，各个脚本解析执行顺序对应声明时的位置顺序，执行完成后会触发页面<code>DOMContentLoaded</code>事件。</li><li>async脚本<br>     异步脚本-声明<code>async</code>属性的外部<code>&lt;script&gt;</code>脚本下载时不会阻塞HTML的解析和渲染，各个脚本的下载和执行完全独立，下载完成后即开始执行，所以执行顺序不固定，与<code>DOMContentLoaded</code>事件的触发没有关联性。</li><li>动态脚本加载技术<br>     在脚本执行时动态运行<code>loadScript</code>函数可以实现类似延迟脚本和异步脚本的效果：<code>isDefer</code>为真值时脚本的执行顺序为脚本位置顺序，为假值时效果同于异步脚本。</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">src, isDefer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  script.src = src;</span><br><span class=\"line\">  script.async = !isDefer;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.append(script);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"3）压缩HTML-CSS代码资源\">3）压缩HTML/CSS代码资源</h5><p>     代码资源中存在很多无用的空格和符号等，去除他们带来的效益是可观的，另一方面压缩资源也能起到源代码保护的作用。现代前端工程化框架一般继承了此类压缩功能，比如webpack框架的<code>html-loader</code>。</p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.html$/i,</span><br><span class=\"line\">        loader: 'html-loader',</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          minimize: true,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h5 id=\"4）压缩图片-音视频等多媒体资源\">4）压缩图片/音视频等多媒体资源</h5><p>     其实网页带宽往往被图片等资源大量占用，压缩他们能带来超出预期的优化效益。现代前端工程化框架一般继承了此类压缩插件，如<code>imagemin-webpack-plugin</code>插件。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ImageminPlugin <span class=\"keyword\">from</span> <span class=\"string\">'imagemin-webpack-plugin'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"comment\">// 确保该插件在任何添加图片的插件之后</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> ImageminPlugin(&#123;</span><br><span class=\"line\">      disable: process.env.NODE_ENV !== <span class=\"string\">'production'</span>, <span class=\"comment\">// 开发模式禁用</span></span><br><span class=\"line\">      pngquant: &#123;</span><br><span class=\"line\">        quality: <span class=\"string\">'95-100'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"5）使用雪碧图\">5）使用雪碧图</h5><p>     使用雪碧图本质上优化了HTTP请求的数量，将众多图片拼贴为一张作为背景图片引用，然后我们给一个元素设置固定大小，让它的背景图片位置进行变化，只截取大图一部分进行显示，就好像显示出了不同的图片，这就是雪碧图的原理。</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/optimization/sprite.png\" alt=\"\"></p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">url</span>(\"<span class=\"selector-tag\">sprite</span><span class=\"selector-class\">.png</span>\");</span><br><span class=\"line\">  <span class=\"selector-tag\">background-position</span>: <span class=\"selector-tag\">-60px</span> 0<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">width</span><span class=\"selector-pseudo\">:48px</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">height</span><span class=\"selector-pseudo\">:48px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"6）避免空的-src-和-href-值\">6）避免空的 src 和 href 值</h5><p>     当link标签的href属性为空、script标签的src属性为空的时候，浏览器渲染的时候会把当前页面的URL作为它们的属性值，从而把页面的内容加载进来作为它们的值。</p><h5 id=\"7）避免使用-import来引入css\">7）避免使用<code>@import</code>来引入css</h5><p>     这种语法会阻止多个css文件的并行下载，被<code>@import</code>引入的css文件会在引入它的css文件下载并渲染好之后才开始下载渲染自身。并且<code>@import</code>引入的css文件的下载顺序会被打乱，排列在<code>@import</code>之后的JS文件会先于<code>@import</code>下载。</p><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* css file */</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">'custom.css'</span>;</span><br></pre></td></tr></table></figure><h5 id=\"8）使用-CDN-服务来存放静态资源\">8）使用 CDN 服务来存放静态资源</h5><p>     CDN 即内容分发网络。CDN 服务商将静态资源缓存到遍布全国的高性能加速节点上，当用户访问相应的业务资源时，CDN系统能够实时地根据网络流量和各节点的连接负载状况、到用户的距离和响应时间 等综合信息将用户的请求重新导向离用户最近的服务节点上，使内容能够传输的更快，更加稳定。可以提升首次请求的响应能力。</p><p>CDN 的核心点有两个：</p><ul><li>缓存：把资源 copy 一份到 CDN 服务器上这个过程。</li><li>回源：CDN节点 发现自己没有这个资源（一般是缓存的数据过期了），转头向根服务器（或者它的上层服务器）去要这个资源的过程。</li></ul><p>CDN 的优点：</p><ul><li>突破单域名文件加载并发请求限制</li><li>减少服务器本身的流量消耗</li><li>更快的资源加载速度</li><li>CDN内置版本控制，可以通过版本号加载指定版本的静态资源</li><li>提供静态资源使用情况分析功能</li><li>提供安全服务有效防止网站被攻击</li></ul><h5 id=\"9）使用-SVG-矢量图\">9）使用 SVG 矢量图</h5><p>     优点：</p><ul><li>任意放缩：用户可以任意缩放图像显示，而不会破坏图像的清晰度、细节等。</li><li>较小文件：总体来讲，SVG文件比那些GIF和JPEG格式的文件要小很多，因而下载也很快。</li><li>超强显示效果：SVG图像在屏幕上总是边缘清晰，它的清晰度适合任何屏幕分辨力和打印分辨力。</li></ul><h4 id=\"2-渲染层面\">2. 渲染层面</h4><h5 id=\"1）减少页面的回流和重绘\">1）减少页面的回流和重绘</h5><ul><li>使用CSS3属性<code>transform</code>来实现元素位移</li><li>让动画效果应用到<code>position: fixed/absolute</code>的元素上，原理是让其脱离文档流</li><li>向界面插入大量dom节点时先将dom元素添加到虚拟dom操作节点<code>DocumentFragment</code>上，最后再将虚拟节点实际添加到界面上。</li><li>避免直接使用JS操作dom元素的style样式，可以使用class一次性改变dom样式类。</li><li>将会引起页面回流、重绘的操作尽量放到DOM树的后面，减少级联反应。</li><li>使用CSS3动画Animation来实现一些复杂元素的动画效果，原理是利用了硬件加速</li><li>重复读取一些容易引起回流的元素属性时注意使用变量缓存</li></ul><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 几何属性相关 --&gt;</span></span><br><span class=\"line\">elem.offsetLeft, elem.offsetTop, elem.offsetWidth, elem.offsetHeight, elem.offsetParent</span><br><span class=\"line\">elem.clientLeft, elem.clientTop, elem.clientWidth, elem.clientHeight elem.getClientRects(), elem.getBoundingClientRect()</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 滚动相关 --&gt;</span></span><br><span class=\"line\">elem.scrollBy(), elem.scrollTo()</span><br><span class=\"line\">elem.scrollIntoView(), elem.scrollIntoViewIfNeeded()</span><br><span class=\"line\">elem.scrollWidth, elem.scrollHeight</span><br><span class=\"line\">elem.scrollLeft, elem.scrollTop 除了读取，设置也会触发</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><h5 id=\"2）减少DOM结构的层级\">2）减少DOM结构的层级</h5><h5 id=\"3）尽量不使用table布局和iframe内联网页\">3）尽量不使用<code>table</code>布局和<code>iframe</code>内联网页</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* table布局 */</span></span><br><span class=\"line\">table布局不灵活，不利于css样式定制</span><br><span class=\"line\">table布局渲染性能较低，可能触发多次重绘</span><br><span class=\"line\">table布局不利于html语义化</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* iframe */</span></span><br><span class=\"line\">iframe会阻塞主页面的onload事件</span><br><span class=\"line\">iframe和主页面共享HTTP连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</span><br><span class=\"line\">iframe不利于网页布局</span><br><span class=\"line\">iframe对移动端不友好</span><br><span class=\"line\">iframe的反复重新加载可能导致一些浏览器的内存泄露</span><br><span class=\"line\">iframe中的数据传输复杂</span><br><span class=\"line\">iframe不利于SEO</span><br></pre></td></tr></table></figure><h5 id=\"4）flex布局的性能比inline-block和float布局都要好\">4）flex布局的性能比<code>inline-block</code>和<code>float</code>布局都要好</h5><h5 id=\"5）CSS选择器的使用策略\">5）CSS选择器的使用策略</h5><p>     浏览器是从选择器的右边到左边读取，选择器最右边的部分被称为关键选择器，与CSS选择器规则的效率相关。</p><p><strong>效率排序如下：</strong><br>内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器</p><p><strong>要点：</strong></p><ul><li>关键选择器避免使用通用选择器*，其查询开销较大</li><li>使用ID/Class选择器时尽量使其独立，因为无用的上层规则(标签、类名)只会增加查找时间，ID/Class已经具有单独筛选元素的能力</li><li>避免使用子选择器，尤其是将其与标签、通配符组合使用，性能开销较大</li><li>利用CSS元素属性继承的特性，是多个元素复用多一种规则</li><li>移除无匹配样式，否则会造成无用的样式解析和匹配，同时增大CSS文件体积</li></ul><h5 id=\"6）css的书写顺序也会对其解析渲染性能造成影响\">6）css的书写顺序也会对其解析渲染性能造成影响</h5><p>     浏览器从上到下开始解析一段css规则，将容易造成回流、重绘的属性放在上部可以让渲染引擎更高效地工作，可以按照下列顺序来进行书写，使用编辑器的<code>csslint</code>插件可以辅助完成这一过程：</p><ul><li>定位属性</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>  <span class=\"selector-tag\">display</span>  <span class=\"selector-tag\">float</span>  <span class=\"selector-tag\">left</span>  <span class=\"selector-tag\">top</span>  <span class=\"selector-tag\">right</span>  <span class=\"selector-tag\">bottom</span> </span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>  <span class=\"selector-tag\">clear</span>  <span class=\"selector-tag\">z-index</span></span><br></pre></td></tr></table></figure><ul><li>几何属性</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">width</span>  <span class=\"selector-tag\">height</span>  <span class=\"selector-tag\">padding</span>  <span class=\"selector-tag\">border</span>  <span class=\"selector-tag\">margin</span>   <span class=\"selector-tag\">background</span></span><br></pre></td></tr></table></figure><ul><li>文字样式</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">font-family</span>   <span class=\"selector-tag\">font-size</span>   <span class=\"selector-tag\">font-style</span>   <span class=\"selector-tag\">font-weight</span>   <span class=\"selector-tag\">font-varient</span>  <span class=\"selector-tag\">color</span></span><br></pre></td></tr></table></figure><ul><li>文本属性</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">text-align</span>   <span class=\"selector-tag\">vertical-align</span>   <span class=\"selector-tag\">text-wrap</span>   <span class=\"selector-tag\">text-transform</span>   <span class=\"selector-tag\">text-indent</span>    <span class=\"selector-tag\">text-decoration</span>   <span class=\"selector-tag\">letter-spacing</span>    <span class=\"selector-tag\">word-spacing</span>    <span class=\"selector-tag\">white-space</span>   <span class=\"selector-tag\">text-overflow</span></span><br></pre></td></tr></table></figure><ul><li>CSS3中新增属性</li></ul><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">content</span>   <span class=\"selector-tag\">box-shadow</span>   <span class=\"selector-tag\">border-radius</span>  <span class=\"selector-tag\">transform</span></span><br></pre></td></tr></table></figure><h3 id=\"➣-Javascript-性能优化方面\">➣ Javascript 性能优化方面</h3><h4 id=\"1-网络层面-2\">1. 网络层面</h4><h5 id=\"1）压缩JS代码资源\">1）压缩JS代码资源</h5><p>     代码资源中存在很多无用的空格和符号等，去除他们带来的效益是可观的，另一方面压缩资源也能起到源代码保护的作用。现代前端工程化框架一般继承了此类压缩插件，比如webpack框架的<code>uglifyjs</code>插件。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    minimizer: [<span class=\"keyword\">new</span> UglifyJsPlugin()],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h4 id=\"2-渲染层面-2\">2. 渲染层面</h4><h5 id=\"1）使用函数节流和函数去抖处理一些函数的高频触发调用\">1）使用函数节流和函数去抖处理一些函数的高频触发调用</h5><p>     在面对一些需要进行调用控制的函数高频触发场景时，可能有人会对何时使用节流何时使用去抖产生疑问。这里通过一个特性进行简单区分：如果你需要保留短时间内高频触发的最后一次结果时，那么使用去抖函数，如果你需要对函数的调用次数进行限制，以最佳的调用间隔时间保持函数的持续调用而不关心是否是最后一次调用结果时，请使用节流函数。</p><p>     比如echarts图常常需要在窗口resize之后重新使用数据渲染，但是直接监听resize事件可能导致短时间内渲染函数被触发多次。我们可以使用函数去抖的思想，监听resize事件后在监听器函数里获取参数再使用参数调用事先初始化好了的throttle函数，保证resize过程结束后能触发一次实际的echarts重渲染即可。</p><ul><li>节流<code>throttle</code></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canRun) &#123;</span><br><span class=\"line\">      canRun = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;, time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li>去抖<code>debounce</code></li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, time</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, time);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h5 id=\"2）Js实现动画时使用requestAnimationFrame替代定时器\">2）Js实现动画时使用<code>requestAnimationFrame</code>替代定时器</h5><p>     <code>window.requestAnimationFrame()</code>告诉浏览器你希望执行一个动画，并且要求浏览器在下次重绘之前(每帧之前)调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。</p><p>     设置的回调函数在被调用时会被传入触发的时间戳，在同一个帧中的多个回调函数，它们每一个都会接受到一个相同的时间戳，即使在计算上一个回调函数的工作负载期间已经消耗了一些时间，我们可以记录前后时间戳差值来控制元素动画的速度和启停。</p><p>     如果换用过定时器<code>setTimeout/setInterval</code>来控制帧动画的话，一般我们采用60帧进行动画绘制，所以设置的定时时间就应该是<code>1000 / 60 = 17ms</code>。不过由于定时器本身只是把回调函数放入了<code>宏任务队列</code>，其精确度受到主进程代码执行栈影响，可能导致帧动画的回调函数在浏览器的一次渲染过程中才被触发(理想情况是渲染前调用回调函数获得计算值，渲染时执行计算值绘制)，因此本应在当前帧呈现的绘制效果被延迟到了下一帧，产生丢帧卡顿的情况。</p><p>     这里让我们使用<code>requestAnimationFrame</code>来实现一个<a href=\"https://github.com/nojsja/javascript-learning/blob/master/js-animation/animation.js\" target=\"_blank\" rel=\"noopener\">动画处理类</a>作为例子，使用方式如下：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> anime = <span class=\"keyword\">new</span> Animation();</span><br><span class=\"line\">anime.setTarget(<span class=\"string\">'#animationTarget'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 右下角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">50</span>, <span class=\"attr\">y</span>: <span class=\"number\">50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">func</span>: <span class=\"string\">'easeIn'</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 右上角移动50px</span></span><br><span class=\"line\">anime.push(<span class=\"string\">'#animationTarget'</span>, &#123; <span class=\"attr\">x</span>: <span class=\"number\">-50</span>, <span class=\"attr\">y</span>: <span class=\"number\">-50</span>, <span class=\"attr\">duration</span>: <span class=\"number\">500</span>, <span class=\"attr\">func</span>: <span class=\"string\">'linear'</span> &#125;);</span><br></pre></td></tr></table></figure><p>预览图：<br><img src=\"http://nojsja.gitee.io/static-resources/images/optimization/animation.gif\" alt=\"\"></p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [tween 缓动算法]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>time [动画已经消耗的时间]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>start [目标开始的位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[String]&#125;</span>  </span>distance [目标开始位置和结束位置的距离]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;[Number]&#125;</span>  </span>duration [动画总持续时间]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tween = &#123;</span><br><span class=\"line\">  linear: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance*time/duration + start; &#125;,</span><br><span class=\"line\">  easeIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time + start; &#125;,</span><br><span class=\"line\">  strongEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration ) * time * time * time * time + start; &#125;,</span><br><span class=\"line\">  strongEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time, start, distance, duration</span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">  sinEaseIn: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> time, start, distance, duration </span>) </span>&#123; <span class=\"keyword\">return</span> distance * ( time /= duration) * time * time + start; &#125;,</span><br><span class=\"line\">  sinEaseOut: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">time,start,distance,duration</span>)</span>&#123; <span class=\"keyword\">return</span> distance * ( ( time = time / duration - <span class=\"number\">1</span>) * time * time + <span class=\"number\">1</span> ) + start; &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 动画控制类 ------------------- */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animation</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 初始化处理元素 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.setTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.querySelector(selector);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (element) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// element.style.position = 'relative';</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector] = &#123;</span><br><span class=\"line\">      selector: selector,</span><br><span class=\"line\">      element: <span class=\"built_in\">document</span>.querySelector(selector),</span><br><span class=\"line\">      status: <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">      queue: [],</span><br><span class=\"line\">      timeStart: <span class=\"string\">''</span>,</span><br><span class=\"line\">      positionStart: &#123; <span class=\"attr\">x</span>: <span class=\"string\">''</span>, <span class=\"attr\">y</span>: <span class=\"string\">''</span> &#125;,</span><br><span class=\"line\">      positionEnd: &#123; <span class=\"attr\">x</span>: <span class=\"string\">''</span>, <span class=\"attr\">y</span>: <span class=\"string\">''</span> &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [start 开始动画]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>func     [缓动动画]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, func</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector];</span><br><span class=\"line\">  target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 帧调用函数</span></span><br><span class=\"line\">  that.update(&#123;<span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span>&#125;, selector);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [update 更新位置]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>selector [description]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.update =  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">position, selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = <span class=\"keyword\">this</span>.store[selector],</span><br><span class=\"line\">    that = <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    timeUsed,</span><br><span class=\"line\">    positionX, positionY;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!target || !target.queue.length) &#123;</span><br><span class=\"line\">    target.status = <span class=\"string\">'pending'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset position</span></span><br><span class=\"line\">  target.element.style.left = position.x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  target.element.style.top = position.y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// position</span></span><br><span class=\"line\">  target.positionStart = &#123; <span class=\"attr\">x</span>: position.x, <span class=\"attr\">y</span>: position.y &#125;;</span><br><span class=\"line\">  target.positionEnd = &#123; <span class=\"attr\">x</span>: position.x + target.queue[<span class=\"number\">0</span>].x, <span class=\"attr\">y</span>: position.y + target.queue[<span class=\"number\">0</span>].y &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// time</span></span><br><span class=\"line\">  target.timeStart = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target.timeStart === <span class=\"literal\">null</span>) target.timeStart = time; <span class=\"comment\">// 动画开始时间</span></span><br><span class=\"line\">    timeUsed = time - target.timeStart;</span><br><span class=\"line\">    <span class=\"comment\">// 当前动画完成</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeUsed &gt;= target.queue[<span class=\"number\">0</span>].duration) &#123;</span><br><span class=\"line\">      target.queue.shift();</span><br><span class=\"line\">      that.step(target.element, target.positionEnd.x, target.positionEnd.y);</span><br><span class=\"line\">      target.status = <span class=\"string\">'running'</span>;</span><br><span class=\"line\">      <span class=\"comment\">// var position = target.element.getBoundingClientRect();</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> position = &#123;</span><br><span class=\"line\">        x: <span class=\"built_in\">parseInt</span>(target.element.style.left),</span><br><span class=\"line\">        y: <span class=\"built_in\">parseInt</span>(target.element.style.top),</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 下一个动画</span></span><br><span class=\"line\">      that.update(position, selector);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    positionX = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.x,</span><br><span class=\"line\">      target.positionEnd.x - target.positionStart.x,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    positionY = target.queue[<span class=\"number\">0</span>].func(</span><br><span class=\"line\">      timeUsed,</span><br><span class=\"line\">      target.positionStart.y,</span><br><span class=\"line\">      target.positionEnd.y - target.positionStart.y,</span><br><span class=\"line\">      target.queue[<span class=\"number\">0</span>].duration,</span><br><span class=\"line\">    );</span><br><span class=\"line\">    that.step(target.element, positionX, positionY);</span><br><span class=\"line\"></span><br><span class=\"line\">    requestAnimationFrame(callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  requestAnimationFrame(callback);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [step dom操作]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[DOM]&#125;</span> </span>element [dom 元素]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>x        [x坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Number]&#125;</span> </span>y        [y坐标]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.step = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element, x, y</span>) </span>&#123;</span><br><span class=\"line\">  element.style.left = x + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">  element.style.top = y + <span class=\"string\">'px'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [push 加入动画队列]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[String]&#125;</span> </span>selector [dom选择器]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[Object]&#125;</span> </span>conf     [位置数据]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Animation.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector, conf</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.push(&#123;</span><br><span class=\"line\">      x: conf.x,</span><br><span class=\"line\">      y: conf.y,</span><br><span class=\"line\">      duration: conf.duration || <span class=\"number\">1000</span>,</span><br><span class=\"line\">      func: tween[conf.func] || tween[<span class=\"string\">'linear'</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 动画出队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.pop();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* ------------------- 清空动画队列 ------------------- */</span></span><br><span class=\"line\">Animation.prototype.clear = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">selector</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.store[selector]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.store[selector].queue.length = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><h5 id=\"3）使用IntersectionObserverAPI来替代scroll事件实现元素相交检测\">3）使用<code>IntersectionObserver</code>API来替代<code>scroll</code>事件实现元素相交检测</h5><p>以下是一些需要用到相交检测的场景：</p><ul><li>图片懒加载 – 当图片滚动到可见时才进行加载</li><li>内容无限滚动 – 用户滚动到接近滚动容器底部时直接加载更多数据，而无需用户操作翻页，给用户一种网页可以无限滚动的错觉</li><li>检测广告的曝光情况——为了计算广告收益，需要知道广告元素的曝光情况</li><li>在用户看见某个区域时执行任务、播放视频</li></ul><p>     以内容无限滚动为例，古老的相交检测方案就是使用<code>scroll</code>事件监听滚动容器，在监听器函数中获取滚动元素的几何属性判断元素是否已经滚动到底部。我们知道<code>scrollTop</code>等属性的获取和设置都会导致页面回流，并且如果界面需要绑定多个监听函数到<code>scroll</code>事件进行类似操作的时候，页面性能会大打折扣：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 滚动监听 */</span></span><br><span class=\"line\">  onScroll = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; </span><br><span class=\"line\">      scrollTop, scrollHeight, clientHeight</span><br><span class=\"line\">    &#125; = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#target'</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* 已经滚动到底部 */</span></span><br><span class=\"line\">    <span class=\"comment\">// scrollTop(向上滚动的高度)；clientHeight(容器可视总高度)；scrollHeight(容器的总内容长度)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (scrollTop + clientHeight === scrollHeight) &#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure><p>     因此在处理相交检测的问题时我们应该在考虑兼容性的情况下尽可能使用<code>IntersectionObserver</code> API，浏览器会自行优化多个元素的相交管理。IntersectionObserver API 允许你配置一个回调函数，当以下情况发生时会被调用：</p><ul><li>每当目标(target)元素与设备视窗或者其他指定元素发生交集的时候执行。设备视窗或者其他元素我们称它为根元素或根(root)。</li><li>Observer第一次监听目标元素的时候</li></ul><p>     创建一个 IntersectionObserver对象，并传入相应参数和回调用函数，该回调函数将会在目标(target)元素和根(root)元素的交集大小超过阈值(threshold)规定的大小时候被执行：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> options = &#123;</span><br><span class=\"line\">    root: <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#scrollArea'</span>),</span><br><span class=\"line\">    rootMargin: <span class=\"string\">'0px'</span>, <span class=\"comment\">// 指定根(root)元素的外边距</span></span><br><span class=\"line\">    threshold: <span class=\"number\">1.0</span>, <span class=\"comment\">// 表示子元素完全和容器元素相交</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(callback, options);</span><br><span class=\"line\">observer.observe(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#scrollTarget'</span>));</span><br></pre></td></tr></table></figure><p>     <strong>配置项1：</strong> 通常需要关注文档最接近的可滚动祖先元素的交集更改，如果元素不是可滚动元素的后代，则默认为设备视窗。如果要观察相对于根(root)元素的交集，请指定根(root)元素为null。</p><p>     <strong>配置项2：</strong> 目标(target)元素与根(root)元素之间的交叉度是交叉比(intersection ratio)。这是目标(target)元素相对于根(root)的交集百分比的表示，它的取值在0.0和1.0之间。</p><p>     <strong>配置项3：</strong> 根(root)元素的外边距。类似于 CSS 中的 margin 属性，比如 “10px 20px 30px 40px” (top, right, bottom, left)。如果有指定root参数，则rootMargin也可以使用百分比来取值。该属性值是用作root元素和target发生交集时候的计算交集的区域范围，使用该属性可以控制root元素每一边的收缩或者扩张。默认值为0。</p><p>这里我们再以一个实际案例来进行展示，即图片懒加载方案：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazyload</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> imagesToLoad = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'image[data-src]'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadImage</span>(<span class=\"params\">image</span>) </span>&#123;</span><br><span class=\"line\">    image.src = image.getAttribute(<span class=\"string\">'data-src'</span>);</span><br><span class=\"line\">    image.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      image.removeAttribute(<span class=\"string\">'data-src'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> intersectionObserver = <span class=\"keyword\">new</span> IntersectionObserver(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">items, observer</span>) </span>&#123;</span><br><span class=\"line\">    items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 所有属性：</span></span><br><span class=\"line\"><span class=\"comment\">        item.boundingClientRect - 目标元素的几何边界信息</span></span><br><span class=\"line\"><span class=\"comment\">        item.intersectionRatio - 相交比 intersectionRect/boundingClientRect</span></span><br><span class=\"line\"><span class=\"comment\">        item.intersectionRect -  描述根和目标元素的相交区域</span></span><br><span class=\"line\"><span class=\"comment\">        item.isIntersecting - true(相交开始)，false(相交结束)</span></span><br><span class=\"line\"><span class=\"comment\">        item.rootBounds - 描述根元素</span></span><br><span class=\"line\"><span class=\"comment\">        item.target - 目标元素</span></span><br><span class=\"line\"><span class=\"comment\">        item.time - 时间原点(网页在窗口加载完成时的时间点)到交叉被触发的时间的时间戳</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item.isIntersecting) &#123;</span><br><span class=\"line\">        loadImage(item.target);</span><br><span class=\"line\">        observer.unobserve(item.target);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  imagesToLoad.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">image</span>) </span>&#123;</span><br><span class=\"line\">    intersectionObserver.observe(image);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure><h5 id=\"4）使用Web-Workers在后台运行CPU密集型任务\">4）使用<code>Web-Workers</code>在后台运行CPU密集型任务</h5><p>     Web Worker 允许你在后台线程中运行脚本。如果你有一些高强度的任务，可以将它们分配给 Web Worker，这些 WebWorker 可以在不干扰用户界面的情况下运行它们。创建后，Web Worker 可以将消息发布到该代码指定的事件处理程序来与 JavaScript 代码通信，反之亦然。</p><p>     一个简单的专用worker示例，我们在主进程代码中创建一个worker实例，然后向实例发送一个数字，worker接受到消息后拿到数字进行一次<code>斐波那契函数</code>运算，并发送运算结果给主线程：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -------------- main.js -------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myWorker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">\"fibonacci.js\"</span>);</span><br><span class=\"line\">worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'The result of fibonacci.js: '</span>, e.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">worker.postMessage(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------- fibonacci.js -------------- */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fibonacci(n - <span class=\"number\">2</span>) + fibonacci(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">self.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  self.postMessage(fibonacci(<span class=\"built_in\">Number</span>(e.data)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>&gt; Worker的常见类型</p><ul><li><strong>专用Worker：</strong> 一个专用worker仅仅能被生成它的脚本所使用。</li><li><strong>共享Worker：</strong> 一个共享worker可以被多个脚本使用——即使这些脚本正在被不同的window、iframe或者worker访问。</li><li><strong>Service Workers：</strong> 一般作为web应用程序、浏览器和网络（如果可用）之前的代理服务器。它们旨在（除开其他方面）创建有效的离线体验，拦截网络请求，以及根据网络是否可用采取合适的行动并更新驻留在服务器上的资源。他们还将允许访问推送通知和后台同步API。</li><li><strong>Chrome Workers：</strong> 一种仅适用于firefox的worker。如果您正在开发附加组件，希望在扩展程序中使用worker且有在你的worker中访问 js-ctypes 的权限，你可以使用Chrome Workers。</li><li><strong>Audio Workers：</strong> 音频worker使得在web worker上下文中直接完成脚本化音频处理成为可能。</li></ul><p>&gt; Worker中可以使用的函数和接口</p><p>     你可以在web worker中使用大多数的标准javascript特性，包括：</p><ul><li>Navigator</li><li>Location(只读)</li><li>XMLHttpRequest</li><li>Array, Date, Math, and String</li><li>setTimeout/setInterval</li><li>Cache &amp; IndexedDB</li></ul><p>&gt; 关于线程安全</p><p>     Worker接口会生成真正的操作系统级别的线程，然而，对于 web worker 来说，与其他线程的通信点会被很小心的控制，这意味着你很难引起并发问题。你没有办法去访问非线程安全的组件或者是 DOM，此外你还需要通过序列化对象来与线程交互特定的数据。所以你要是不费点劲儿，还真搞不出错误来。</p><p>&gt; 内容安全策略</p><p>     有别于创建它的document对象，worker有它自己的执行上下文。因此普遍来说，worker并不受限于创建它的document（或者父级worker）的内容安全策略。举个例子，假设一个document有如下头部声明：<code>Content-Security-Policy: script-src 'self'</code>，这个声明有一部分作用在于禁止脚本代码使用eval()方法。然而，如果脚本代码创建了一个worker，在worker中却是可以使用eval()的。</p><p>     为了给worker指定内容安全策略，必须为发送worker代码的请求本身加上一个<code>内容安全策略</code>。有一个例外情况，即worker脚本的使用dataURL或者blob创建的话，worker会继承创建它的document或者worker的内容安全策略。</p><p>&gt; 一些使用场景</p><ul><li>在一些不采用<code>websockets</code>架构的应用中使用传统的轮询方式定时获取接口数据以供前端脚本实现一些界面和数据自动更新功能</li><li>光线追踪：光线追踪是一种通过将光线追踪为像素来生成图像的渲染技术。光线追踪使用CPU密集型数学计算来模拟光线路径。这个想法是模拟反射，折射，材质等一些效果。所有这些计算逻辑都可以添加到Web Worker中以避免阻塞UI线程。</li><li>加密：由于对个人和敏感数据的监管日益严格，端到端加密越来越受欢迎。加密可能是一件非常耗时的事情，特别是如果有很多数据必须经常加密（例如在将数据发送到服务器之前）。这是一个非常好的场景，可以使用Web Worker。</li><li>预取数据：为了优化您的网站或Web应用程序并缩短数据加载时间，您可以利用Web Workers预先加载和存储一些数据，以便稍后在需要时使用它。</li><li>PWA进式Web应用程序：这种应用程序中即使网络连接不稳定，它们也必须快速加载。这意味着数据必须存储在本地浏览器中，这是IndexDB或类似的API进场的地方。为了在不阻塞UI线程的情况下使用，工作必须在Web Workers中完成。</li></ul><h5 id=\"5）使用事件委托\">5）使用事件委托</h5><p>     事件委托就是把一个元素响应事件（click、keydown…）的函数委托到另一个元素。一般来讲，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。<a href=\"https://zhuanlan.zhihu.com/p/26536815\" target=\"_blank\" rel=\"noopener\">=&gt; 一篇不错的参考文章</a></p><p>     其实我们熟悉的 React 框架也并不是将 click 事件直接绑定在 dom 上面，而是采用事件冒泡的形式冒泡到 document 上面，这个思路借鉴了事件委托机制。而更老一点的jQuery也是允许我们直接使用它提供的API来进行事件委托：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'.parent'</span>).on(<span class=\"string\">'click'</span>, <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'click event on tag a'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>&gt; 关于事件冒泡机制：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/optimization/event-pop.jpg\" alt=\"event-pop\"></p><p>&gt; 事件模型的<strong>三个阶段</strong>：</p><ul><li>捕获阶段：在事件冒泡的模型中，捕获阶段不会响应任何事件</li><li>目标阶段：目标阶段就是指事件响应到触发事件的最底层元素上</li><li>冒泡阶段：冒泡阶段就是事件的触发响应会从最底层目标一层层地向外到最外层（根节点），事件代理即是利用<br>件冒泡的机制把里层所需要响应的事件绑定到外层</li></ul><p>&gt; 事件委托的<strong>优点</strong>：</p><ul><li>减少内存消耗，提升性能<br>我们不需要再为每个列表元素都绑定一个事件，只需要将事件函数绑定到父级<code>ul</code>组件：</li></ul><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id&#x3D;&quot;list&quot;&gt;</span><br><span class=\"line\">  &lt;li&gt;item 1&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;li&gt;item 2&lt;&#x2F;li&gt;</span><br><span class=\"line\">  &lt;li&gt;item 3&lt;&#x2F;li&gt;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">  &lt;li&gt;item n&lt;&#x2F;li&gt;</span><br><span class=\"line\">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><ul><li>动态绑定事件<br>     比如上述的例子中列表项就几个，我们给每个列表项都绑定了事件。在很多时候，我们需要通过 AJAX 或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件。</li></ul><p>     如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的。所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。</p><p>&gt; 使用<code>Element.matchesSelector</code> API简单实现事件委托：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!Element.prototype.matches) &#123;</span><br><span class=\"line\">  Element.prototype.matches =</span><br><span class=\"line\">    Element.prototype.matchesSelector ||</span><br><span class=\"line\">    Element.prototype.mozMatchesSelector ||</span><br><span class=\"line\">    Element.prototype.msMatchesSelector ||</span><br><span class=\"line\">    Element.prototype.oMatchesSelector ||</span><br><span class=\"line\">    Element.prototype.webkitMatchesSelector ||</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> matches = (<span class=\"keyword\">this</span>.document || <span class=\"keyword\">this</span>.ownerDocument).querySelectorAll(s),</span><br><span class=\"line\">        i = matches.length;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (--i &gt;= <span class=\"number\">0</span> &amp;&amp; matches.item(i) !== <span class=\"keyword\">this</span>) &#123;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i &gt; <span class=\"number\">-1</span>;            </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 兼容性处理</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> event = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> target = event.target || event.srcElement;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (target.matches(<span class=\"string\">'li.class-1'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'the content is: '</span>, target.innerHTML);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><p>&gt; 事件委托的<strong>局限性</strong>：</p><ul><li>比如 focus、blur 之类的事件本身没有事件冒泡机制，所以无法委托。</li><li>mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。</li></ul><h5 id=\"6）一些编码方面的优化建议\">6）一些编码方面的优化建议</h5><ul><li>长列表数据的遍历使用<code>for</code>循环替代<code>forEach</code>。</li></ul><p>     for循环能通过关键字<code>break</code>实现循环中断，forEach首先性能不如for，其次在处理一些需要条件断开的循环时比较麻烦(可以包裹try catch，然后throw error断开)。如果是数组类型的数据遍历的话，也可以使用<code>array.every(item =&gt; { if (...) return false; else do something; })</code>来实现条件断开。</p><ul><li>尽量不要在全局作用域声明过多变量</li></ul><p>     全局变量存在于全局上下文，全局上下文是作用域链的顶端，当通过作用域链进行变量查找的时候，会延长查找时间。全局执行上下文会一直存在于上下文执行栈，直到程序推出，这样会影响GC垃圾回收。如果局部作用域中定义了同名变量，会遮蔽或者污染全局。</p><p>     可以使用单例模式来封装一系列逻辑(运用了闭包的原理)，并通过一个公用的变量名暴露给作用域中的其它模块使用，同时也提高了代码的内聚性：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> workData = &#123;&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workA</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workB</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workC</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> work = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">initParams</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> workData = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workA</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workB</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">workC</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    doWorkA: workA,</span><br><span class=\"line\">    doWorkB: workB,</span><br><span class=\"line\">    doWorkC: workC,</span><br><span class=\"line\">    workSeries: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.doWorkB();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.doWorkC();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)(initParams);</span><br><span class=\"line\"></span><br><span class=\"line\">work.doWorkA();</span><br><span class=\"line\">work.workSeries();</span><br></pre></td></tr></table></figure><ul><li>使用<code>switch</code>和<code>map</code>的方式处理需要大量逻辑判断的情况</li></ul><p>     连续的<code>if</code>判断中在到达目标条件之前需要经过多个条件判断，而map和switch方式都能够通过条件直接找到对应的处理逻辑。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition === <span class=\"string\">'a'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (condition === <span class=\"string\">'b'</span>)</span><br><span class=\"line\">  <span class=\"comment\">// do something</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// do something ...</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'b'</span>:</span><br><span class=\"line\">    <span class=\"comment\">// do something ...</span></span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> conditionMap = &#123;</span><br><span class=\"line\">  a: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something */</span> &#125;,</span><br><span class=\"line\">  b: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* do something */</span> &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">conditionMap[condition]();</span><br></pre></td></tr></table></figure><ul><li>定义构造函数时使用原型声明对象的公用方法</li></ul><p>     我们在<code>new</code>一个对象时，js所做的就是创建一个空对象，并把此对象作为构造函数的context来执行(参考call调用逻辑)，执行后空对象上就被复制了构造函数的的属性和方法，然后js会把构造函数的原型绑定到对象的<code>__proto__</code>属性上，最后构造函数将对象返回给我们使用。</p><p>     从以上可以看出，如果我们直接把一些function逻辑写入构造函数的话，在对象创建的时候每个function都会在新对象上被创建一次，消耗额外的资源，且违反了程序复用原则。建议将function放入构造函数的原型，那么对象就能通过原型链查找来使用这个方法，而不是在对象自身上重新复制一个一模一样的逻辑。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Structure</span>(<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.attr = attr;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.getAttr = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.attr;</span><br><span class=\"line\">  &#125;).bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Structure(<span class=\"string\">'obj1'</span>);</span><br><span class=\"line\">obj.getAttr(); <span class=\"comment\">// from obj itself</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Structure</span>(<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.attr = attr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Structure.prototype.getAttr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.attr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Structure(<span class=\"string\">'obj1'</span>);</span><br><span class=\"line\">obj.getAttr(); <span class=\"comment\">// from obj prototype chain</span></span><br></pre></td></tr></table></figure><h3 id=\"➣-React-性能优化方面\">➣ React 性能优化方面</h3><h4 id=\"1-网络层面-3\">1. 网络层面</h4><h5 id=\"1）React-jsx-js文件压缩\">1）React jsx/js文件压缩</h5><h5 id=\"2）使用React-lazy和React-Suspense实现代码分割和懒加载\">2）使用<code>React.lazy</code>和<code>React.Suspense</code>实现代码分割和懒加载</h5><p>     React开发的应用通常会借用<code>webpack</code>这类项目打包器将编写的各个模块代码和引入的依赖库的代码打包成一个单独的JS文件，有些未做CSS样式分离优化的项目甚至连样式表都和JS文件打包在一起，然后在页面加载的HTML文件中需要下载了这一整个JS文件后之后才能进去到页面构建阶段。对于中小型项目还好，简单的首屏优化就能将资源压缩到足够小，但是一些大型项目可能存在很多子项目，如果不对代码做分割然后按子项目模块加载的话，在首屏我们浏览器需要下载整个项目的依赖文件，导致加载时间过长。</p><p>     使用<code>React.lazy</code>可以分割子项目代码并根据当前页面路由来动态加载页面依赖文件，尽管并没有减少应用整体的代码体积，但你可以避免加载用户永远不需要的代码，并在初始加载的时候减少所需加载的代码量。</p><p>注意：搭配<code>Babel</code>进行代码编译时需要安装额外的babel插件以提供动态加载功能：</p><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"presets\"</span>: [...],</span><br><span class=\"line\">  <span class=\"attr\">\"plugins\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"dynamic-import-webpack\"</span>,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>React.lazy 函数能让你像渲染常规组件一样处理动态引入的组件：<br>它接受一个函数，这个函数需要动态调用 import()。它必须返回一个 Promise，该 Promise 需要 resolve 一个 defalut export 的 React 组件。</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 使用前 */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> OtherComponent <span class=\"keyword\">from</span> <span class=\"string\">'./OtherComponent'</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 使用后，代码将会在组件首次渲染时，自动导入包含 OtherComponent 组件的包 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OtherComponent = React.lazy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./OtherComponent'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------- OtherComponent.js -------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>other<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>) &#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用 React.Suspense 提供一个组件加载时的占位组件：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Suspense &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> OtherComponent = React.lazy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./OtherComponent'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mainComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class=\"regexp\">/div&gt;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;section&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;OtherComponent /</span>&gt;</span><br><span class=\"line\">        &lt;AnotherComponent /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/section&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>Suspense&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用异常捕获组件避免模块加载失败时让整个应用崩溃</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -------------- mainComponent.js -------------- */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;MyErrorBoundary&gt;</span><br><span class=\"line\">      &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class=\"regexp\">/div&gt;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;OtherComponent /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/Suspense&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>MyErrorBoundary&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------- ErrorBoundary.js -------------- */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorBoundary</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123; <span class=\"attr\">hasError</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> getDerivedStateFromError(error) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新 state 使下一次渲染能够显示降级后的 UI</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">hasError</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidCatch(error, errorInfo) &#123;</span><br><span class=\"line\">    logErrorToMyService(error, errorInfo); <span class=\"comment\">// 可以选择将错误日志上报给服务器</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.hasError)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Something went wrong.<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>; <span class=\"comment\">// 你可以自定义降级后的 UI 并渲染</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.props.children; <span class=\"comment\">// 正常渲染子组件</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码分割搭配 React-Router 同样适用</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Suspense, lazy &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BrowserRouter <span class=\"keyword\">as</span> Router, Route, Switch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router-dom'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Home = lazy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'./routes/Home'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;Router&gt;</span><br><span class=\"line\">    &lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;<span class=\"regexp\">/div&gt;&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;Switch&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;Route exact path=\"/</span><span class=\"string\">\" component=&#123;Home&#125;/&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/Switch&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/Suspense&gt;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/Router&gt;</span></span><br><span class=\"line\"><span class=\"string\">);</span></span><br></pre></td></tr></table></figure></li></ul><h5 id=\"3）使用React-Fragment来避免非必要DOM层级的引入\">3）使用<code>React.Fragment</code>来避免非必要DOM层级的引入</h5><p>     React通常要求我们在编写一个组件时返回单个container组件包裹的DOM结构，而不允许直接返回多个未包裹的子组件，如果不使用Fragment就必须额外添加一层DOM节点，比如：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* bad */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;td&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;2&lt;/</span>td&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><p>额外添加的<code>div</code>增加了无用的DOM层级，且会造成<code>table</code>组件无法正确渲染(tr/td之间多了一层div)。<br>使用Fragment后最终所有<code>td</code>标签都会被直接添加到上层的<code>tr</code>标签下，同时也不会产生多余层级：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* good */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">myComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;React.Fragment&gt;</span><br><span class=\"line\">        &lt;td&gt;<span class=\"number\">1</span>&lt;<span class=\"regexp\">/td&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;td&gt;2&lt;/</span>td&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/React.Fragment&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><h4 id=\"2-渲染层面-3\">2. 渲染层面</h4><h5 id=\"1）使用shouldComponentUpdate避免不必要渲染\">1）使用<code>shouldComponentUpdate</code>避免不必要渲染</h5><p>     当一个React组件内部state或外部传入props更新时，会触发组件的重新渲染，开发者可以在<code>shouldComponentUpdate</code>生命周期中通过对比传入的即将被更新的state和props来决定组件是否要重新渲染，函数默认返回true，即触发渲染：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CounterButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">count</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.props.color !== nextProps.color ||</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.state.count !== nextState.count</span><br><span class=\"line\">    ) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;button</span><br><span class=\"line\">        color=&#123;<span class=\"keyword\">this</span>.props.color&#125;</span><br><span class=\"line\">        onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.setState(<span class=\"function\"><span class=\"params\">state</span> =&gt;</span> (&#123;<span class=\"attr\">count</span>: state.count + <span class=\"number\">1</span>&#125;))&#125;&gt;</span><br><span class=\"line\">        Count: &#123;<span class=\"keyword\">this</span>.state.count&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><p>     <strong>适用情况：</strong> 当前组件的props/state并没有发生改变，但是由于其父组件的重新渲染，导致当前组件也被迫进入了重新渲染阶段。这时候为组件添加<code>shouldComponentUpdate</code>生命周期函数进行数据比较就显得尤为重要了，特别是当组件的DOM结构复杂、嵌套层次很深，重新渲染的性能消耗昂贵的时候。</p><p>     <strong>滥用情况：</strong> 并非所有组件都需要被添加此生命周期用于数据比较，因为比较这一过程本身也是需要消耗性能的，如果一个组件的state/props本来就会经常更新，那么这个组件久无需使用<code>scp</code>进行优化</p><p>     <strong>深比较函数：</strong> 有时候一个组件所需的数据结构很复杂，比如用于展示当前目录层级的资源树组件，其依赖的数据采用树形结构，树形组件一般采用递归的渲染方式，组件的渲染更新操作昂贵。因此我们可以考虑在这类组件的<code>scp</code>生命周期中使用深比较函数来对更新前后的属性数据进行一次递归比较，以判断当前资源树组件是否需要进行更新：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [deepComparison 深比较]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param  <span class=\"type\">&#123;[type]&#125;</span> </span>data [any]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;[type]&#125;</span>      </span>[boolean]</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepComparison</span>(<span class=\"params\">data1, data2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; hasOwnProperty &#125; = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; toString &#125; = <span class=\"built_in\">Object</span>.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取变量类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> getType = <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"string\">'null'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d !== d) <span class=\"keyword\">return</span> <span class=\"string\">'nan'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> d === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (toString.call(d) === <span class=\"string\">'[object Date]'</span>) <span class=\"keyword\">return</span> <span class=\"string\">'date'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (toString.call(d) === <span class=\"string\">'[object RegExp]'</span>) <span class=\"keyword\">return</span> <span class=\"string\">'regexp'</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'object'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">typeof</span> d).toLowerCase();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 基本类型比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> is = <span class=\"function\">(<span class=\"params\">d1, d2, type</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'nan'</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type === <span class=\"string\">'date'</span> || type === <span class=\"string\">'regexp'</span>) <span class=\"keyword\">return</span> d1.toString() === d2.toString();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (d1 === d2);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归比较</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> compare = <span class=\"function\">(<span class=\"params\">d1, d2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type1 = getType(d1);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type2 = getType(d2);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 !== type2) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type1 === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys1 = <span class=\"built_in\">Object</span>.keys(d1);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys2 = <span class=\"built_in\">Object</span>.keys(d2);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (keys1.length !== keys2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys1.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        index = keys2.indexOf(keys1[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">          (index === <span class=\"number\">-1</span>) ||</span><br><span class=\"line\">          !compare(d1[keys1[i]], d2[keys2[index]])) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> is(d1, d2, type1);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> compare(data1, data2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>     <strong>最佳实践：</strong> 深比较函数其实消耗的性能很大，特别是当数据层级很深的时候，函数的递归需要创建和销毁多个执行上下文，可能数据比较本身所消耗的性能就多于一次渲染了。因此大部分情况下使用<code>immutable</code>不可变数据结构(对象每次更新都返回一个全新的对象，对象的引用发生变化) + <code>shallowEqual</code>做浅比较是比较理想的选择。</p><h5 id=\"2）使用PureComponnet实现简单展示组件的自动浅比较\">2）使用<code>PureComponnet</code>实现简单展示组件的自动浅比较</h5><p>     上文提到<code>scu</code>生命周期中我们可以通过自定义prop/state比较函数来来控制组件是否需要重新渲染，最后得出了<code>immutable</code>不可变数据+shallowEqual是最佳实践。其实React已经给我们提供了一种自带浅比较函数的组件类型即<code>React.PureComponnet</code>，它适用于一些数据类型简单的展示组件，当我们给这些React组件传入相同的 props 和 state时，render() 函数会渲染相同的内容，那么在这些情况下使用 React.PureComponent 可提高性能：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCounter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponnet</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">count</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render(props) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div</span><br><span class=\"line\">        onClick=&#123;() =&gt; <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">count</span>: (<span class=\"keyword\">this</span>.state.count+<span class=\"number\">1</span>) &#125;)&#125;</span><br><span class=\"line\">        style=&#123;&#123;<span class=\"attr\">color</span>: <span class=\"keyword\">this</span>.props.color&#125;&#125;</span><br><span class=\"line\">      &gt;count:$&#123;<span class=\"keyword\">this</span>.state.count&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><p>     <strong>适用情况</strong> 和 <strong>滥用情况</strong> 与<code>scp</code>生命周期大致相同，不过需要额外注意：</p><ul><li>React.PureComponent仅作对象的浅层比较，如果对象中包含复杂的数据结构，则有可能因为无法检查深层的差别，产生错误的比对结果。</li><li>我们可以仅仅在props 和 state 较为简单时，才使用 React.PureComponent。</li><li>另一种处理方式就是在深层数据结构发生变化时调用 forceUpdate() 来确保组件被正确地更新。</li><li>当然也可以使用<a href=\"https://immutable-js.github.io/immutable-js/\" target=\"_blank\" rel=\"noopener\"> immutable.js </a>框架来处理数据结构，可以加快不可变对象加速嵌套数据的比较。一种简单的处理方式是在state数据需要更新时我们手动进行对象引用的更新：</li></ul><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleDisplay</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">PureComponent</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    list: [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  insertItem = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; list &#125; = <span class=\"keyword\">this</span>.state;</span><br><span class=\"line\">    <span class=\"comment\">/* bad - 组件不会更新 */</span></span><br><span class=\"line\">    list.push(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; list &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* good - 重新更新list变量的引用 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">list</span>: [...list, <span class=\"string\">'c'</span>] &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// or</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">list</span>: a.concat(<span class=\"string\">'c'</span>) &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div onClick=&#123;<span class=\"keyword\">this</span>.insertItem&#125;&gt;</span><br><span class=\"line\">      &#123; <span class=\"keyword\">this</span>.state.list.join(<span class=\"string\">'/'</span>) &#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><h5 id=\"3）使用React-memo缓存和复用组件的渲染结果\">3）使用<code>React.memo</code>缓存和复用组件的渲染结果</h5><p>     <code>React.memo()</code>为高阶组组件，如果组件在相同 props 的情况下渲染相同的结果(state的更新依然会导致重新渲染)，那么你可以通过将其包装在 React.memo 中调用，以此通过记忆组件渲染结果的方式来提高组件的性能表现。这意味着在这种情况下，React 将跳过渲染组件的操作并直接复用最近一次渲染的结果。</p><p>     默认情况下其只会对复杂对象做浅层对比，如果你想要控制对比过程，那么请将自定义的比较函数通过第二个参数传入来实现：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyComponent</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 使用 props 渲染 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">areEqual</span>(<span class=\"params\">prevProps, nextProps</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  如果把 nextProps 与 prevProps 的比较结果一致则返回 true，</span></span><br><span class=\"line\"><span class=\"comment\">  否则返回 false，这一点与shoudComponentUpdate表现相反，且areEqual</span></span><br><span class=\"line\"><span class=\"comment\">  中无法对组件内部state进行比较</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure><p>&gt; <strong>不建议</strong>使用<code>React.memo()</code>的情况：</p><ul><li>如果组件经常接收不同的属性props对象来更新的话，那么缓存上一次渲染结果这一过程毫无意义，且增加了额外的性能支出。</li><li>此方法仅作为性能优化的方式而存在，不要依赖它来“阻止”渲染，因为这会产生 bug。</li></ul><p>&gt; <strong>建议</strong>使用<code>React.memo()</code>的情况：</p><ul><li>一个组件经常会以相同的props更新，比如父组件的其它部分更新导致的当前子组件非必要渲染</li><li>常常用于将函数组件转变为具有<code>memorized</code>缓存特性的组件，组件内部可以使用<code>useState</code>hook进行内部状态管理，对组件的自更新没有影响。</li><li>如果一个组件包含大量复杂的<code>dom</code>结构，重新渲染的性能消耗较大的话可以考虑使用<code>React.memo</code>包裹，避免很多不必要的渲染情况，在props不变的情况下让react能直接复用上次的渲染结果。</li></ul><h5 id=\"4）使用Context来共享全局数据\">4）使用Context来共享全局数据</h5><p>     Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言，使用 context, 我们可以避免通过中间元素来逐级传递 props。举个例子，在下面的代码中，我们通过一个 “theme” 属性手动调整一个按钮组件的样式：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -------------- context.js -------------- */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> theme = &#123;</span><br><span class=\"line\">  light: &#123; <span class=\"attr\">color</span>: <span class=\"string\">'black'</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'white'</span> &#125;,</span><br><span class=\"line\">  dark: &#123; <span class=\"attr\">color</span>: <span class=\"string\">'white'</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'black'</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为当前的 theme 创建一个 context（“light”为默认值）。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">const</span> ThemeContext = React.createContext(theme.light);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* -------------- App.js -------------- */</span></span><br><span class=\"line\"><span class=\"comment\">// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> ThemeContext = <span class=\"built_in\">require</span>(<span class=\"string\">'./context.js'</span>);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用一个 Provider 来将当前的 theme 传递给以下的组件树。</span></span><br><span class=\"line\">    <span class=\"comment\">// 无论多深，任何组件都能读取这个值。</span></span><br><span class=\"line\">    <span class=\"comment\">// 在这个例子中，我们将 “dark” 作为当前的值传递下去，当Provider不指定当前值时</span></span><br><span class=\"line\">    <span class=\"comment\">// createContext中传入的默认值会生效</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;ThemeContext.Provider value=<span class=\"string\">\"dark\"</span>&gt;</span><br><span class=\"line\">        &lt;Toolbar /&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ThemeContext.Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* -------------- Toolbar.js -------------- *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ 中间的组件再也不必指明往下传递 theme 了。</span></span><br><span class=\"line\"><span class=\"regexp\">function Toolbar() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;ThemedButton /</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* -------------- ThemedButton.js -------------- *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">const ThemeContext = require('./</span>context.js<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">class ThemedButton extends React.Component &#123;</span></span><br><span class=\"line\"><span class=\"string\">  // 指定 contextType 读取当前的 theme context。</span></span><br><span class=\"line\"><span class=\"string\">  // React 会往上找到最近的 theme Provider，然后使用它的值。</span></span><br><span class=\"line\"><span class=\"string\">  // 在这个例子中，当前的 theme 值为 “dark”。</span></span><br><span class=\"line\"><span class=\"string\">  static contextType = ThemeContext;</span></span><br><span class=\"line\"><span class=\"string\">  render() &#123;</span></span><br><span class=\"line\"><span class=\"string\">    return &lt;Button theme=&#123;this.context&#125; /&gt;;</span></span><br><span class=\"line\"><span class=\"string\">  &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure><p>     对于不需要订阅context更新来重新渲染界面的情况，上面的代码示例已经足够应付，如果想要接收动态变化的context值来响应式更新界面，则需要使用<code>Context.Consumer</code>API，它内部包裹一个返回dom组件的function函数，传递给函数的 value 值等价于组件树上方离这个 context 最近的 Provider 提供的 value 值。如果没有对应的 Provider，value 参数等同于传递给 createContext() 的 默认值：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;MyContext.Consumer&gt;</span><br><span class=\"line\">      &#123; value =&gt; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;value&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><span class=\"comment\">/* 基于 context 值进行渲染*/</span> &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MyContext.Consumer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> Context 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。</p><h5 id=\"5）优化组件分割策略来处理长列表组件的渲染\">5）优化组件分割策略来处理长列表组件的渲染</h5><p>     有时候我们需要渲染一些拥有很多子组件的的列表组件，比如一个展示当前目录下有哪些文件的<code>FileList</code>组件，它包含很多子组件<code>FileListItem</code>，如下。想象我们在使用 input 组件获取输入值更新 state 得时候，同时也不可避免的触发了同一个render函数下<code>FileListItem</code>组件的重新渲染，即使从父级传入的 files 数组未发生任任何改变：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123;</span><br><span class=\"line\">    value: <span class=\"literal\">null</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  onChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">value</span>: e.target.value &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;input value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;&gt;&lt;<span class=\"regexp\">/input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">          &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            this.props.files.map((file) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">              return &lt;FileListItem key=&#123;file.name&#125; name=&#123;file.name&#125; /</span>&gt;;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>     这时候我们就可以考虑在设计组件结构时将 <code>files.map()</code>这部分的逻辑完全抽离到一个完整的子组件内，否则前面提到的<code>shouldComponentUpdate</code>、<code>PureComponent</code>、<code>memo</code>等优化方法都将无法施展。我们无法直接在<code>FileList</code>组件内针对 files 数组未改变的情况下做任何优化，因为 input 组件的每次状态更新都会让 <code>FileList</code> 组件的每一个部分都重新渲染一遍，优化的组件结构如下：</p><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -------------- FileList.js -------------- */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileList</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  state = &#123; <span class=\"attr\">value</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  onChange = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">value</span>: e.target.value &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;&gt;</span><br><span class=\"line\">        &lt;input value=&#123;<span class=\"keyword\">this</span>.state.value&#125; onChange=&#123;<span class=\"keyword\">this</span>.onChange&#125;&gt;&lt;<span class=\"regexp\">/input&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;FileListItemContainer files=&#123;this.props.files&#125; /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    );</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* -------------- FileListItemContainer.js -------------- *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">export default React.memo(function(&#123; files &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">  return (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        files.map((file) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">          return &lt;FileListItem key=&#123;file.name&#125; name=&#123;file.name&#125; /</span>&gt;;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;);</span></span><br></pre></td></tr></table></figure><h5 id=\"6）正确理解组件-key-的使用策略\">6）正确理解组件 key 的使用策略</h5><p>     在 React 中，UI 界面的构建是由当前虚拟DOM树状态决定的。前后两个状态就对应两套界面，产生不同的状态之后，然后由 React 通过时间复杂度为O(n)的 dom diff 算法来比较两个界面的区别，最后由React选择性的来更新真实DOM。</p><p>     要想理解 React组件 key 的设计理念我们得先简单了解一下React进行DOM树 diff 的过程，我们都知道Js脚本直接操作网页DOM元素时会造成重绘和回流等<code>低效渲染</code>，因此React的DOM树 diff 过程针对的是更新前后两颗虚拟的DOM树，虚拟DOM树并不是真实的DOM节点，而是一种描述页面DOM元素结构的树形数据结构，每个虚拟树节点存储了一个DOM元素的属性和样式等信息。React 需要基于这两棵树之间的差别来判断如何有效率的更新 UI 以保证当前 UI 与最新的树保持同步。为了提高树diff的效率，于是 React 在以下两个假设的基础之上提出了一套复杂度为 O(n) 的启发式算法：</p><ul><li>i. 两个不同类型的元素会产生出不同的树(比如 img 和 span 被看做完全不同的两个节点)</li><li>ii. 开发者可以通过 key 属性来暗示哪些子元素在不同的渲染下能保持稳定</li></ul><p>     如果两次渲染同一位置的某个元素的类型改变，例如从 span 变成了 image，那么不用多说这个组件和其子组件都会先被卸载，同时触发卸载前组件的生命周期<code>componentWillUnmount</code>，然后将新的DOM节点渲染添加到页面上，新的组件实例将执行 <code>componentWillMount</code>、<code>componentDidMount</code> 等周期方法，所有跟之前的树所关联的 state 也会被销毁。</p><p>     如果两次渲染组件的类型未改变，React 将更新该组件实例的 props 以跟最新的元素保持一致，并且调用该实例的 <code>componentWillReceiveProps</code>、<code>componentWillUpdate</code> 以及 <code>componentDidUpdate</code> 方法。下一步，React 会调用 <code>render()</code>方法并比较其子节点产生的差异。</p><p>想象我们在子元素列表末尾新增元素时：</p><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;first&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* 插入third *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;first&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;second&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;third&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>React 会先匹配到两颗虚拟DOM树对应的 <code>first</code>节点，然后匹配到两棵树的 <code>second</code> 节点，最后发现在<code>second</code>之后出现了一个全新的节点，dom渲染时就会插入第三个元素 <code>&lt;li&gt;third&lt;/li&gt;</code> 到<code>second</code>之后，其更新开销会比较小。</p><p>     但是也有一种比较坏的情况，当我们将<code>third</code>节点插入到列表头时，React在 diff 过程中发现所有子节点都发生了变化(整体位置发生了相对改变)，React 不会意识到应该保留<code>first</code>和<code>second</code>，而是会重建每一个子元素，这种情况会带来性能问题：</p><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">  &lt;li&gt;first&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">/</span>* 插入third *<span class=\"regexp\">/</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;third&lt;/</span>li&gt;</span><br><span class=\"line\">  &lt;li&gt;first&lt;<span class=\"regexp\">/li&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;li&gt;second&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>     为了解决以上问题，React 支持 <code>key</code> 属性。当子元素拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素，相当于每个子节点都有了ID，因此能够游刃有余的判断哪些节点需要重建，而哪些节点只需要进行简单的位置移动即可。比如上个例子中React根据组件的Key就能识别我们只需要新建<code>third</code>节点并将它插入到first节点之前就能满足要求，而不需要将列表元素都重建一遍。</p><p>&gt; 对组件key的 <strong>误解 和 乱用：</strong></p><ul><li>页面中的所有组件key都不能重复 =&gt; 错！我们只需要保证同一列表层级的组件key不重复即可，当有重复key时可能会导致React在多次渲染时结果错乱。</li><li>使用<code>Math.random()</code>函数来随机产生key值 =&gt; 大错特错！这样子做了之后，每次渲染key值都会变化，会引起所有使用了key的组件都会被卸载重建一次，性能优化效果为负。</li><li>key值只能用于列表组件 =&gt; 错！我们可以给任意一个组件添加key值，比如我们想让某个组件在props/state完全没改变的情况下触发其重建更新，那么就可以给予它两个阶段不同的key值。一个例子是用于重置Antd Form表单状态，让其在某些特殊情况下以之前的默认值重新挂载(触发表单更改后其默认值无法恢复)。</li></ul><h5 id=\"7）使用虚拟化渲染技术来优化超长列表组件\">7）使用虚拟化渲染技术来优化超长列表组件</h5><p>     有时候项目中要求我们在不使用分页的情况下渲染一个超长的列表组件，比如一个文件上传列表里面的每个文件上传任务，我们同时添加成千上万个上传任务，然后并行上传几个，操作者同时也能通过列表的上下滚动来查看每个上传任务的状态。这种变态数量级的界面元素展示+本就不简单的上传流程控制，必然导致我们的界面会有一定程度的卡顿。</p><p>     一个解决方案就是可以采用懒加载技术来实现当滚动到任务列表底部时加载其余的一小部分任务列表元素，这样虽然解决了初次渲染时耗费时间过长的问题，不过随着滚动到底部加载的任务条目越来越多，界面的渲染负载也会越来越大。这种情况下采用虚拟化滚动技术来进行优化就显得很有必要了。</p><p>     虚拟列表是一种根据滚动容器元素的可视区域高度来渲染长列表数据中某一个部分数据的技术。这里需要简单了解一下其原理，如果要直接使用的话可以考虑这两个热门的虚拟滚动库 <a href=\"https://react-window.now.sh/\" target=\"_blank\" rel=\"noopener\">react-window</a> 和 <a href=\"https://bvaughn.github.io/react-virtualized/\" target=\"_blank\" rel=\"noopener\">react-virtualized</a>。</p><p>&gt; 首先清楚虚拟化滚动技术中的几个<strong>关键元素</strong>：</p><p><img src=\"http://nojsja.gitee.io/static-resources/images/optimization/vitual-scroll.png\" alt=\"vitual-scroll\"></p><ul><li>i. 滚动容器元素：一般情况下，滚动容器元素是 window 对象。然而，我们可以通过布局的方式，在某个页面中任意指定一个或者多个滚动容器元素。只要某个元素能在内部产生横向或者纵向的滚动，那这个元素就是滚动容器元素。</li><li>ii. 可滚动区域：滚动容器元素的内部内容区域。假设有 100 条数据，每个列表项的高度是 50，那么可滚动的区域的高度就是 100 * 50。可滚动区域当前的具体高度值一般可以通过(滚动容器)元素的 scrollHeight 属性获取。用户可以通过滚动来改变列表在可视区域的显示部分。</li><li>iii. 可视区域：滚动容器元素的视觉可见区域。如果容器元素是 window 对象，可视区域就是浏览器的视口大小(即视觉视口)；如果容器元素是某个 div 元素，其高度是 300，右侧有纵向滚动条可以滚动，那么视觉可见的区域就是可视区域。</li></ul><p>&gt; 如何在只渲染少量可视元素的情况下，还能让滚动条的长度和位置显示正确呢：</p><ul><li>i. 首先明确滚动容器内容的总高度=<code>列表元素高度 * 列表元素总个数</code>，容器可视高度固定，通过设置css <code>overflow: scroll</code> 就能显示滚动条。</li><li>ii. 滚动容器的可视高度固定，那么可视区域能显示的列表元素个数=<code>容器可视高度/列表元素高度</code>，这些少量的元素不足以撑起容器元素的进行滚动，滚动容器滚动条高度仍然会为0。因此我们通过设置容器元素<code>paddingTop+paddingBottom</code>(startOffset+endOffset)来让容器元素内容总高度正确显示，这里<code>padding+可视高度=容器内容总高度</code>。</li></ul><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div</span><br><span class=\"line\">      style=&#123;&#123;</span><br><span class=\"line\">        paddingTop: <span class=\"string\">`<span class=\"subst\">$&#123;startOffset&#125;</span>px`</span>,</span><br><span class=\"line\">        paddingBottom: <span class=\"string\">`<span class=\"subst\">$&#123;endOffset&#125;</span>px`</span></span><br><span class=\"line\">      &#125;&#125;</span><br><span class=\"line\">      className=<span class=\"string\">'wrapper'</span></span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">      &#123; <span class=\"comment\">/* render list */</span> &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>iii. 容器能正确显示滚动高度了，那么如何让我们在滚动的时候能知道应该显示哪些元素呢？一个巧妙的方法就是根据当前滚动条的<code>scrollTop</code>(滚动容器的固有属性：表示能够向上滚动的高度值，可以直接获取)计算首个应该渲染的元素的索引<code>startIndex</code>以及最后需要渲染的元素的索引<code>endIndex</code>，然后再根据两个索引分别计算 paddingTop 和 paddingBottom 即可：<ul><li>startIndex = Math.ceil(scrollTop / 滚动容器元素总高度)</li><li>可视元素个数 = 可视区域高度 / 滚动元素高度</li><li>endIndex = startIndex + 可视区域元素个数</li><li>当前渲染元素renderItems = data.slice(startIndex, endIndex)</li><li>paddingTop = startIndex * 滚动元素高度</li><li>paddingBottom = (this.data.length - this.endIndex - 1) * 滚动元素高度</li></ul></li></ul><p>     以上为虚拟化滚动简化的描述模型，实际实现时还要考虑：缓存已经加载的列表元素的位置信息、列表元素的高度是否可变、增加缓冲元素来减少白屏情况(缓冲元素就是预加载的几个接近视口可显示元素的上下部分其它元素)、容器元素resize后的处理等。处理情况还是比较复杂，使用成熟的库处理而不是自己造轮子是比较好的方案，不过个中原理还是要理解。</p><h3 id=\"结语\">结语</h3><p>     学习前端性能优化的方方面面，一方面是对我们核心基础知识的考察，另一方面也能为我们遇到的一些实际问题提供处理思路，是每个前端人进阶的的必经之路。</p><p>以上就是本篇文章的所有内容，后续有需要还会继续更新…</p>"}],"PostAsset":[{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-10.png","slug":"Ubuntu18.04-10.png","post":"ckmahmur70017kl9540he9enp","modified":1,"renderable":0},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-14.png","slug":"Ubuntu18.04-14.png","post":"ckmahmur70017kl9540he9enp","modified":1,"renderable":0},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-5.png","slug":"Ubuntu18.04-5.png","post":"ckmahmur70017kl9540he9enp","modified":1,"renderable":0},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-8.png","slug":"Ubuntu18.04-8.png","post":"ckmahmur70017kl9540he9enp","modified":1,"renderable":0},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-7.png","slug":"Ubuntu18.04-7.png","post":"ckmahmur70017kl9540he9enp","modified":1,"renderable":0},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-9.png","slug":"Ubuntu18.04-9.png","post":"ckmahmur70017kl9540he9enp","modified":1,"renderable":0},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx1.png","slug":"mobx1.png","post":"ckmahmur0000xkl9528g5d443","modified":1,"renderable":0},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx7.png","slug":"mobx7.png","post":"ckmahmur0000xkl9528g5d443","modified":1,"renderable":0},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-bug-fix.gif","slug":"tree-bug-fix.gif","post":"ckmahmur50014kl95g0a81vdk","modified":1,"renderable":0},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具/dev-tools.png","slug":"dev-tools.png","post":"ckmahmura001dkl95bmy696oj","modified":1,"renderable":0},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_upload_now.jpg","slug":"smb_upload_now.jpg","post":"ckmahmurd001hkl957exl1ehe","modified":1,"renderable":0},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/upload_performance.jpg","slug":"upload_performance.jpg","post":"ckmahmuri001skl95hku9fve8","modified":1,"renderable":0},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/process-manager.console.png","slug":"process-manager.console.png","post":"ckmahmurl0025kl9504qx3v41","modified":1,"renderable":0},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/process-manager.trends.png","slug":"process-manager.trends.png","post":"ckmahmurl0025kl9504qx3v41","modified":1,"renderable":0},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/smb_upload_now.jpg","slug":"smb_upload_now.jpg","post":"ckmahmurl0025kl9504qx3v41","modified":1,"renderable":0},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-6.png","slug":"Ubuntu18.04-6.png","post":"ckmahmur70017kl9540he9enp","modified":1,"renderable":0},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx10.png","slug":"mobx10.png","post":"ckmahmur0000xkl9528g5d443","modified":1,"renderable":0},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_login.jpg","slug":"smb_login.jpg","post":"ckmahmurd001hkl957exl1ehe","modified":1,"renderable":0},{"_id":"source/_posts/2020-12-08-Electron-Node多进程工具开发日记/smb_upload_now.jpg","slug":"smb_upload_now.jpg","post":"ckmahmurk0020kl95hu3yg5hf","modified":1,"renderable":0},{"_id":"source/_posts/2018-07-09-原生Js实现瀑布流效果/waterfall-1.gif","slug":"waterfall-1.gif","post":"ckmahmuqe0007kl9590sfdeo1","modified":1,"renderable":0},{"_id":"source/_posts/2018-10-31-使用ES5实现ES6中的Promise/lifeIsStrange.jpg","post":"ckmahmuqg0009kl95gwf61wn1","slug":"lifeIsStrange.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-11-05-简单实现一个Javascript动画处理类/animation.gif","slug":"animation.gif","post":"ckmahmuqj000bkl95g1t62g6g","modified":1,"renderable":0},{"_id":"source/_posts/2019-04-04-LinuxMint18日常软件安装配置/city.jpg","slug":"city.jpg","post":"ckmahmuql000ekl950vtn3clw","modified":1,"renderable":0},{"_id":"source/_posts/2019-10-26-Electron-Mobx-React开发记录（二）/Fly.jpg","post":"ckmahmur1000zkl95994o8chz","slug":"Fly.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-10-23-基于deepin-wine在Ubuntu20-04上安装新版微信/wechat3.0.png","slug":"wechat3.0.png","post":"ckmahmurg001okl95726p988q","modified":1,"renderable":0},{"_id":"source/_posts/2018-11-06-用Javascript实现一个可自定义样式的tootips组件/tootip.png","post":"ckmahmuqm000fkl95gt5de1hm","slug":"tootip.png","modified":1,"renderable":1},{"_id":"source/_posts/2018-11-06-用Javascript实现一个可自定义样式的tootips组件/tootips.gif","post":"ckmahmuqm000fkl95gt5de1hm","slug":"tootips.gif","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-07-基于s3对象存储多文件分片上传的Javascript实现（一）/shards_upload.jpg","post":"ckmahmur40012kl95cb25hjs4","slug":"shards_upload.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-07-基于s3对象存储多文件分片上传的Javascript实现（一）/upload.png","post":"ckmahmur40012kl95cb25hjs4","slug":"upload.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-26-基于s3对象存储多文件分片上传的Javascript实现（二）/node_pipe.png","post":"ckmahmur80019kl95cchn5qya","slug":"node_pipe.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-26-基于s3对象存储多文件分片上传的Javascript实现（二）/upload.png","post":"ckmahmur80019kl95cchn5qya","slug":"upload.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-10-25-LeetCode探险记：动态规划、栈和回溯/drawio-1.png","post":"ckmahmurh001rkl950jswd9m8","slug":"drawio-1.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-10-25-LeetCode探险记：动态规划、栈和回溯/drawio-2.png","post":"ckmahmurh001rkl950jswd9m8","slug":"drawio-2.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-09-29-联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop.png","slug":"Desktop.png","post":"ckmahmuqs000lkl95eidcbk6t","modified":1,"renderable":0},{"_id":"source/_posts/2019-09-29-联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop2.png","slug":"Desktop2.png","post":"ckmahmuqs000lkl95eidcbk6t","modified":1,"renderable":0},{"_id":"source/_posts/2019-09-29-联想y7000安装ubuntu18-04显卡驱动解决方案/Desktop3.png","slug":"Desktop3.png","post":"ckmahmuqs000lkl95eidcbk6t","modified":1,"renderable":0},{"_id":"source/_posts/2020-12-08-Electron-Node多进程工具开发日记/chromium.jpg","post":"ckmahmurk0020kl95hu3yg5hf","slug":"chromium.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-12-08-Electron-Node多进程工具开发日记/electron-re.png","post":"ckmahmurk0020kl95hu3yg5hf","slug":"electron-re.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具/dev-tools-debug.png","post":"ckmahmura001dkl95bmy696oj","slug":"dev-tools-debug.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具/dev-tools-storage.png","post":"ckmahmura001dkl95bmy696oj","slug":"dev-tools-storage.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-04-16-前端浏览器开发工具/dev-tools-storage2.png","post":"ckmahmura001dkl95bmy696oj","slug":"dev-tools-storage2.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件/editable_tree.png","post":"ckmahmurf001lkl9594og7clm","slug":"editable_tree.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件/tree_add_sister.png","post":"ckmahmurf001lkl9594og7clm","slug":"tree_add_sister.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件/tree_add_sub.png","post":"ckmahmurf001lkl9594og7clm","slug":"tree_add_sub.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-28-基于Antd库实现可编辑树组件/tree_in_edit.png","post":"ckmahmurf001lkl9594og7clm","slug":"tree_in_edit.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/chromium.jpg","post":"ckmahmurl0025kl9504qx3v41","slug":"chromium.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/electron-re.png","post":"ckmahmurl0025kl9504qx3v41","slug":"electron-re.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/process-manager.devtools.png","slug":"process-manager.devtools.png","post":"ckmahmurl0025kl9504qx3v41","modified":1,"renderable":0},{"_id":"source/_posts/2020-12-18-Electron多进程工具开发日记2：进程管理UI/process-manager.main.png","post":"ckmahmurl0025kl9504qx3v41","slug":"process-manager.main.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/chromium.jpg","post":"ckmahmuri001skl95hku9fve8","slug":"chromium.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/electron1.png","post":"ckmahmuri001skl95hku9fve8","slug":"electron1.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/inspect.jpg","post":"ckmahmuri001skl95hku9fve8","slug":"inspect.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/refreshTasks.jpg","post":"ckmahmuri001skl95hku9fve8","slug":"refreshTasks.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/shards_upload.jpg","post":"ckmahmuri001skl95hku9fve8","slug":"shards_upload.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/smb_upload_now.jpg","post":"ckmahmuri001skl95hku9fve8","slug":"smb_upload_now.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-08-16-基于Electron的smb客户端文件上传优化探索/upload_memory.jpg","post":"ckmahmuri001skl95hku9fve8","slug":"upload_memory.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/electron-lang.png","post":"ckmahmurd001hkl957exl1ehe","slug":"electron-lang.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/shards_upload.jpg","post":"ckmahmurd001hkl957exl1ehe","slug":"shards_upload.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_node.jpg","post":"ckmahmurd001hkl957exl1ehe","slug":"smb_node.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_node_conf.jpg","post":"ckmahmurd001hkl957exl1ehe","slug":"smb_node_conf.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_share.jpg","post":"ckmahmurd001hkl957exl1ehe","slug":"smb_share.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_share_mount.jpg","post":"ckmahmurd001hkl957exl1ehe","slug":"smb_share_mount.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-07-17-基于Electron的smb客户端开发记录/smb_upload_record.jpg","post":"ckmahmurd001hkl957exl1ehe","slug":"smb_upload_record.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-bug2.gif","post":"ckmahmur50014kl95g0a81vdk","slug":"tree-bug2.gif","modified":1,"renderable":1},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/Fly.jpg","post":"ckmahmur0000xkl9528g5d443","slug":"Fly.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx2.png","post":"ckmahmur0000xkl9528g5d443","slug":"mobx2.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx3.png","post":"ckmahmur0000xkl9528g5d443","slug":"mobx3.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx4.png","post":"ckmahmur0000xkl9528g5d443","slug":"mobx4.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx5.png","post":"ckmahmur0000xkl9528g5d443","slug":"mobx5.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx6.png","post":"ckmahmur0000xkl9528g5d443","slug":"mobx6.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx8.png","post":"ckmahmur0000xkl9528g5d443","slug":"mobx8.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-10-14-Electron-Mobx-React开发记录（一）/mobx9.png","post":"ckmahmur0000xkl9528g5d443","slug":"mobx9.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/snapshot.png","post":"ckmahmur50014kl95g0a81vdk","slug":"snapshot.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/snapshot_select.png","post":"ckmahmur50014kl95g0a81vdk","slug":"snapshot_select.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-1.png","post":"ckmahmur50014kl95g0a81vdk","slug":"tree-1.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-2.png","post":"ckmahmur50014kl95g0a81vdk","slug":"tree-2.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-3.png","post":"ckmahmur50014kl95g0a81vdk","slug":"tree-3.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-4.png","post":"ckmahmur50014kl95g0a81vdk","slug":"tree-4.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-5.png","post":"ckmahmur50014kl95g0a81vdk","slug":"tree-5.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-6.png","post":"ckmahmur50014kl95g0a81vdk","slug":"tree-6.png","modified":1,"renderable":1},{"_id":"source/_posts/2020-03-22-echarts图表-树形图开发记录/tree-bug1.gif","post":"ckmahmur50014kl95g0a81vdk","slug":"tree-bug1.gif","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-1.jpg","post":"ckmahmur70017kl9540he9enp","slug":"Ubuntu18.04-1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-11.png","post":"ckmahmur70017kl9540he9enp","slug":"Ubuntu18.04-11.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-12.png","post":"ckmahmur70017kl9540he9enp","slug":"Ubuntu18.04-12.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-13.png","post":"ckmahmur70017kl9540he9enp","slug":"Ubuntu18.04-13.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-2.png","post":"ckmahmur70017kl9540he9enp","slug":"Ubuntu18.04-2.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/Ubuntu18.04-3.png","post":"ckmahmur70017kl9540he9enp","slug":"Ubuntu18.04-3.png","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/smb_dir.jpg","post":"ckmahmur70017kl9540he9enp","slug":"smb_dir.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/smb_node.jpg","post":"ckmahmur70017kl9540he9enp","slug":"smb_node.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/smb_node_conf.jpg","post":"ckmahmur70017kl9540he9enp","slug":"smb_node_conf.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/smb_shutdown.jpg","post":"ckmahmur70017kl9540he9enp","slug":"smb_shutdown.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/waterfall-2.jpg","post":"ckmahmur70017kl9540he9enp","slug":"waterfall-2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2019-06-12-Ubuntu18踩坑记录/waterfall-3.jpg","post":"ckmahmur70017kl9540he9enp","slug":"waterfall-3.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckmahmuq70001kl95gock0m2j","category_id":"ckmahmuqd0005kl951tb1g25q","_id":"ckmahmuqn000gkl95aakih33s"},{"post_id":"ckmahmuqb0003kl95cifrhj6r","category_id":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmuqt000okl95cgy1e77l"},{"post_id":"ckmahmuqm000fkl95gt5de1hm","category_id":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmuqw000rkl95bqrg373j"},{"post_id":"ckmahmuqe0007kl9590sfdeo1","category_id":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmuqy000vkl951rmth7tt"},{"post_id":"ckmahmuqg0009kl95gwf61wn1","category_id":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmur30011kl95fkir9g5h"},{"post_id":"ckmahmuqj000bkl95g1t62g6g","category_id":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmur60015kl95a8csbfgn"},{"post_id":"ckmahmur40012kl95cb25hjs4","category_id":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmur9001akl952b7y7awd"},{"post_id":"ckmahmuql000ekl950vtn3clw","category_id":"ckmahmur10010kl952x3q6ofm","_id":"ckmahmurc001ekl9532vraunk"},{"post_id":"ckmahmur70017kl9540he9enp","category_id":"ckmahmur10010kl952x3q6ofm","_id":"ckmahmurd001ikl95cgsph20m"},{"post_id":"ckmahmuqp000jkl95hpapgy3c","category_id":"ckmahmur10010kl952x3q6ofm","_id":"ckmahmurf001mkl95hvc916rx"},{"post_id":"ckmahmuqs000lkl95eidcbk6t","category_id":"ckmahmur10010kl952x3q6ofm","_id":"ckmahmurg001qkl95app254y6"},{"post_id":"ckmahmuqv000qkl9539vv99uo","category_id":"ckmahmur10010kl952x3q6ofm","_id":"ckmahmurj001vkl95brrw788a"},{"post_id":"ckmahmurg001okl95726p988q","category_id":"ckmahmur10010kl952x3q6ofm","_id":"ckmahmurj001ykl95bcx4gz2o"},{"post_id":"ckmahmurh001rkl950jswd9m8","category_id":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmurl0022kl953ff71iif"},{"post_id":"ckmahmuqx000tkl958i7x2ww6","category_id":"ckmahmur10010kl952x3q6ofm","_id":"ckmahmurm0026kl95bn46cqvg"},{"post_id":"ckmahmur1000zkl95994o8chz","category_id":"ckmahmurl0023kl95ci4uaoho","_id":"ckmahmurs002ckl95b46r9ng5"},{"post_id":"ckmahmur50014kl95g0a81vdk","category_id":"ckmahmurn002akl952awx4o7s","_id":"ckmahmurw002hkl95bgsjc5nd"},{"post_id":"ckmahmur80019kl95cchn5qya","category_id":"ckmahmuqj000ckl959ud28lvu","_id":"ckmahmurx002lkl95ax0if0yd"},{"post_id":"ckmahmur80019kl95cchn5qya","category_id":"ckmahmurs002dkl95gta192ep","_id":"ckmahmurx002nkl95gbkzcpqn"},{"post_id":"ckmahmura001dkl95bmy696oj","category_id":"ckmahmurw002ikl95bega6rha","_id":"ckmahmury002rkl95a8svabaf"},{"post_id":"ckmahmurd001hkl957exl1ehe","category_id":"ckmahmurl0023kl95ci4uaoho","_id":"ckmahmury002ukl9534k60zgs"},{"post_id":"ckmahmuri001skl95hku9fve8","category_id":"ckmahmurl0023kl95ci4uaoho","_id":"ckmahmurz002zkl95gc5t42iv"},{"post_id":"ckmahmurj001xkl95gq8nfhvu","category_id":"ckmahmurz002xkl950unq5ty2","_id":"ckmahmus00036kl95gpj1b7tn"},{"post_id":"ckmahmur0000xkl9528g5d443","category_id":"ckmahmuri001ukl955odhe6fo","_id":"ckmahmus1003bkl95hjr61g9s"},{"post_id":"ckmahmur0000xkl9528g5d443","category_id":"ckmahmus00035kl95cu09a6tj","_id":"ckmahmus1003ckl95gtku6hs5"},{"post_id":"ckmahmurm0027kl950du3c0zk","category_id":"ckmahmus1003akl9562m77zja","_id":"ckmahmus3003ikl952nupfolc"},{"post_id":"ckmahmurn0029kl951l3c03ph","category_id":"ckmahmus2003ekl951ij05c2c","_id":"ckmahmus4003nkl95b7rna1ng"},{"post_id":"ckmahmurf001lkl9594og7clm","category_id":"ckmahmury002qkl95hq14fz4n","_id":"ckmahmus4003qkl95gpere8hr"},{"post_id":"ckmahmurf001lkl9594og7clm","category_id":"ckmahmus3003kkl957s9e450m","_id":"ckmahmus5003tkl958xfu6w1x"},{"post_id":"ckmahmurk0020kl95hu3yg5hf","category_id":"ckmahmurl0023kl95ci4uaoho","_id":"ckmahmus6003vkl95h7ekctsn"},{"post_id":"ckmahmurk0020kl95hu3yg5hf","category_id":"ckmahmus4003okl958sp705tl","_id":"ckmahmus6003ykl95egsl305s"},{"post_id":"ckmahmurl0025kl9504qx3v41","category_id":"ckmahmurl0023kl95ci4uaoho","_id":"ckmahmus60040kl95aypoceul"},{"post_id":"ckmahmurl0025kl9504qx3v41","category_id":"ckmahmus4003okl958sp705tl","_id":"ckmahmus60042kl9589aremj5"},{"post_id":"ckmahmusm005hkl95htwcayi8","category_id":"ckmahmuso005jkl95fxly2jh9","_id":"ckmahmuu0005tkl95gt8e72l2"},{"post_id":"ckmahmusm005hkl95htwcayi8","category_id":"ckmahmut0005mkl952mg02t83","_id":"ckmahmuu0005ukl957fljb5bl"},{"post_id":"ckmahmusm005hkl95htwcayi8","category_id":"ckmahmutb005pkl955yw2bqfr","_id":"ckmahmuu0005vkl952bx3dalr"},{"post_id":"ckmahmusm005hkl95htwcayi8","category_id":"ckmahmuto005skl95d3o28fc9","_id":"ckmahmuu1005wkl956sw7039g"}],"PostTag":[{"post_id":"ckmahmuq70001kl95gock0m2j","tag_id":"ckmahmuqe0006kl95a0sj1e37","_id":"ckmahmuqq000kkl95hsdr1i2h"},{"post_id":"ckmahmuq70001kl95gock0m2j","tag_id":"ckmahmuqj000dkl958qp1btyk","_id":"ckmahmuqt000mkl955vov58ur"},{"post_id":"ckmahmuqb0003kl95cifrhj6r","tag_id":"ckmahmuqn000ikl95h4dm3ehv","_id":"ckmahmuqw000skl95cy47045a"},{"post_id":"ckmahmuqe0007kl9590sfdeo1","tag_id":"ckmahmuqv000pkl958smgaffi","_id":"ckmahmur1000ykl955rtpg807"},{"post_id":"ckmahmuqg0009kl95gwf61wn1","tag_id":"ckmahmur0000wkl952at8e3y3","_id":"ckmahmur9001bkl955xtx3879"},{"post_id":"ckmahmuqg0009kl95gwf61wn1","tag_id":"ckmahmur40013kl95hgcyaozr","_id":"ckmahmurc001fkl95djck05b7"},{"post_id":"ckmahmuqj000bkl95g1t62g6g","tag_id":"ckmahmur70018kl954cb0akaw","_id":"ckmahmure001jkl95ahybb63b"},{"post_id":"ckmahmuql000ekl950vtn3clw","tag_id":"ckmahmurc001gkl95bo7uaohr","_id":"ckmahmurj001wkl95fneo50un"},{"post_id":"ckmahmuql000ekl950vtn3clw","tag_id":"ckmahmurf001nkl957azygm5s","_id":"ckmahmurk001zkl95brbxc7k8"},{"post_id":"ckmahmuqm000fkl95gt5de1hm","tag_id":"ckmahmuqv000pkl958smgaffi","_id":"ckmahmurl0024kl95g00l468w"},{"post_id":"ckmahmuqp000jkl95hpapgy3c","tag_id":"ckmahmurk0021kl950xl5ders","_id":"ckmahmurs002ekl95bxhh9jxq"},{"post_id":"ckmahmuqp000jkl95hpapgy3c","tag_id":"ckmahmurn0028kl953md7cgp3","_id":"ckmahmurw002fkl95gnq5181g"},{"post_id":"ckmahmuqs000lkl95eidcbk6t","tag_id":"ckmahmurr002bkl95g7yd87gt","_id":"ckmahmurx002jkl951fui7u5l"},{"post_id":"ckmahmuqv000qkl9539vv99uo","tag_id":"ckmahmurn0028kl953md7cgp3","_id":"ckmahmury002pkl952pl9elir"},{"post_id":"ckmahmuqv000qkl9539vv99uo","tag_id":"ckmahmurk0021kl950xl5ders","_id":"ckmahmury002skl953px068gg"},{"post_id":"ckmahmuqx000tkl958i7x2ww6","tag_id":"ckmahmurc001gkl95bo7uaohr","_id":"ckmahmurz0030kl954rg98c9n"},{"post_id":"ckmahmuqx000tkl958i7x2ww6","tag_id":"ckmahmury002tkl95h92e31o8","_id":"ckmahmus00032kl95hm1x4lin"},{"post_id":"ckmahmuqx000tkl958i7x2ww6","tag_id":"ckmahmurz002wkl95c4h9e5kl","_id":"ckmahmus00034kl950ay568u0"},{"post_id":"ckmahmur0000xkl9528g5d443","tag_id":"ckmahmur40013kl95hgcyaozr","_id":"ckmahmus2003fkl95hnw5ev0y"},{"post_id":"ckmahmur0000xkl9528g5d443","tag_id":"ckmahmus00033kl9566ka8jk0","_id":"ckmahmus2003gkl951i06couq"},{"post_id":"ckmahmur0000xkl9528g5d443","tag_id":"ckmahmus00037kl9588wo842v","_id":"ckmahmus3003jkl95hq1pfm4c"},{"post_id":"ckmahmur0000xkl9528g5d443","tag_id":"ckmahmus10039kl95a0ywhag3","_id":"ckmahmus3003lkl95f80x9lw9"},{"post_id":"ckmahmur1000zkl95994o8chz","tag_id":"ckmahmur40013kl95hgcyaozr","_id":"ckmahmus5003ukl951rqxgz3n"},{"post_id":"ckmahmur1000zkl95994o8chz","tag_id":"ckmahmus00033kl9566ka8jk0","_id":"ckmahmus6003wkl95c8d36zm3"},{"post_id":"ckmahmur1000zkl95994o8chz","tag_id":"ckmahmus00037kl9588wo842v","_id":"ckmahmus6003zkl95agwuf2y4"},{"post_id":"ckmahmur1000zkl95994o8chz","tag_id":"ckmahmus10039kl95a0ywhag3","_id":"ckmahmus60041kl95dsb7ew42"},{"post_id":"ckmahmur40012kl95cb25hjs4","tag_id":"ckmahmus5003skl958fspfj75","_id":"ckmahmus70045kl95850c9q2c"},{"post_id":"ckmahmur40012kl95cb25hjs4","tag_id":"ckmahmus6003xkl95d1kc5a2g","_id":"ckmahmus70046kl95hiiu3d84"},{"post_id":"ckmahmur40012kl95cb25hjs4","tag_id":"ckmahmus60043kl959yrlh03k","_id":"ckmahmus70048kl95ck624rfb"},{"post_id":"ckmahmur50014kl95g0a81vdk","tag_id":"ckmahmus70044kl95adwkc69a","_id":"ckmahmus8004akl952lenfajc"},{"post_id":"ckmahmur50014kl95g0a81vdk","tag_id":"ckmahmus00033kl9566ka8jk0","_id":"ckmahmus8004bkl95fdwa6cb1"},{"post_id":"ckmahmur70017kl9540he9enp","tag_id":"ckmahmurr002bkl95g7yd87gt","_id":"ckmahmus8004dkl95fg8r3rh0"},{"post_id":"ckmahmur80019kl95cchn5qya","tag_id":"ckmahmus5003skl958fspfj75","_id":"ckmahmus9004gkl955ike5jly"},{"post_id":"ckmahmur80019kl95cchn5qya","tag_id":"ckmahmus8004ekl95gqh7hspe","_id":"ckmahmus9004hkl95e1l7hasm"},{"post_id":"ckmahmura001dkl95bmy696oj","tag_id":"ckmahmus8004fkl954g1c1t3e","_id":"ckmahmus9004kkl952qjh30ma"},{"post_id":"ckmahmura001dkl95bmy696oj","tag_id":"ckmahmus9004ikl952qvc0dyq","_id":"ckmahmus9004lkl95d8a17xa4"},{"post_id":"ckmahmurd001hkl957exl1ehe","tag_id":"ckmahmus9004jkl954ry3gtie","_id":"ckmahmus9004nkl9515f8bezu"},{"post_id":"ckmahmurf001lkl9594og7clm","tag_id":"ckmahmus9004mkl95dewsemgd","_id":"ckmahmusa004qkl958kz52yw4"},{"post_id":"ckmahmurf001lkl9594og7clm","tag_id":"ckmahmus9004okl95bp8l1f7g","_id":"ckmahmusa004rkl959l6bckdt"},{"post_id":"ckmahmurg001okl95726p988q","tag_id":"ckmahmusa004pkl95ceqf04od","_id":"ckmahmusa004tkl953drfesvy"},{"post_id":"ckmahmurh001rkl950jswd9m8","tag_id":"ckmahmusa004skl9505oq4ugm","_id":"ckmahmusa004vkl955m2z34aa"},{"post_id":"ckmahmuri001skl95hku9fve8","tag_id":"ckmahmus5003skl958fspfj75","_id":"ckmahmusb004ykl95dqqd4hjk"},{"post_id":"ckmahmuri001skl95hku9fve8","tag_id":"ckmahmus9004jkl954ry3gtie","_id":"ckmahmusb004zkl9538tb80ww"},{"post_id":"ckmahmurj001xkl95gq8nfhvu","tag_id":"ckmahmusb004xkl9533cwe3rv","_id":"ckmahmusb0051kl957f4l9ljg"},{"post_id":"ckmahmurk0020kl95hu3yg5hf","tag_id":"ckmahmus10039kl95a0ywhag3","_id":"ckmahmusd0055kl95gjxhe4a0"},{"post_id":"ckmahmurk0020kl95hu3yg5hf","tag_id":"ckmahmus8004ekl95gqh7hspe","_id":"ckmahmusd0056kl9588099xg1"},{"post_id":"ckmahmurk0020kl95hu3yg5hf","tag_id":"ckmahmusc0053kl95clejf2rf","_id":"ckmahmuse0058kl95hb9e2qp8"},{"post_id":"ckmahmurl0025kl9504qx3v41","tag_id":"ckmahmus10039kl95a0ywhag3","_id":"ckmahmusf005bkl955fev28t1"},{"post_id":"ckmahmurl0025kl9504qx3v41","tag_id":"ckmahmus8004ekl95gqh7hspe","_id":"ckmahmusf005ckl95fofsei2q"},{"post_id":"ckmahmurl0025kl9504qx3v41","tag_id":"ckmahmusc0053kl95clejf2rf","_id":"ckmahmusf005ekl955y2z6bek"},{"post_id":"ckmahmurm0027kl950du3c0zk","tag_id":"ckmahmus00033kl9566ka8jk0","_id":"ckmahmusf005fkl9504563fll"},{"post_id":"ckmahmurn0029kl951l3c03ph","tag_id":"ckmahmusf005dkl958c4e9igy","_id":"ckmahmusf005gkl957un5ff1o"},{"post_id":"ckmahmusm005hkl95htwcayi8","tag_id":"ckmahmuqv000pkl958smgaffi","_id":"ckmahmut8005nkl959iqadd72"},{"post_id":"ckmahmusm005hkl95htwcayi8","tag_id":"ckmahmuso005kkl951b4c61ks","_id":"ckmahmutb005okl953dwpexah"},{"post_id":"ckmahmusm005hkl95htwcayi8","tag_id":"ckmahmuqj000dkl958qp1btyk","_id":"ckmahmutf005qkl95g5mc0apn"},{"post_id":"ckmahmusm005hkl95htwcayi8","tag_id":"ckmahmusx005lkl958r76an5c","_id":"ckmahmuti005rkl953tma4uve"}],"Tag":[{"name":"sass","_id":"ckmahmuqe0006kl95a0sj1e37"},{"name":"css","_id":"ckmahmuqj000dkl958qp1btyk"},{"name":"devtools","_id":"ckmahmuqn000ikl95h4dm3ehv"},{"name":"javascript","_id":"ckmahmuqv000pkl958smgaffi"},{"name":"promise","_id":"ckmahmur0000wkl952at8e3y3"},{"name":"es6","_id":"ckmahmur40013kl95hgcyaozr"},{"name":"animation","_id":"ckmahmur70018kl954cb0akaw"},{"name":"linux","_id":"ckmahmurc001gkl95bo7uaohr"},{"name":"mint","_id":"ckmahmurf001nkl957azygm5s"},{"name":"proxy","_id":"ckmahmurk0021kl950xl5ders"},{"name":"shadowsocks","_id":"ckmahmurn0028kl953md7cgp3"},{"name":"ubuntu18.04","_id":"ckmahmurr002bkl95g7yd87gt"},{"name":"docker","_id":"ckmahmury002tkl95h92e31o8"},{"name":"desktop","_id":"ckmahmurz002wkl95c4h9e5kl"},{"name":"react","_id":"ckmahmus00033kl9566ka8jk0"},{"name":"mobx","_id":"ckmahmus00037kl9588wo842v"},{"name":"electron","_id":"ckmahmus10039kl95a0ywhag3"},{"name":"upload","_id":"ckmahmus5003skl958fspfj75"},{"name":"aws","_id":"ckmahmus6003xkl95d1kc5a2g"},{"name":"s3","_id":"ckmahmus60043kl959yrlh03k"},{"name":"echarts","_id":"ckmahmus70044kl95adwkc69a"},{"name":"node","_id":"ckmahmus8004ekl95gqh7hspe"},{"name":"browser","_id":"ckmahmus8004fkl954g1c1t3e"},{"name":"tools","_id":"ckmahmus9004ikl952qvc0dyq"},{"name":"smb","_id":"ckmahmus9004jkl954ry3gtie"},{"name":"antd","_id":"ckmahmus9004mkl95dewsemgd"},{"name":"tree","_id":"ckmahmus9004okl95bp8l1f7g"},{"name":"ubuntu20.04","_id":"ckmahmusa004pkl95ceqf04od"},{"name":"leetcode","_id":"ckmahmusa004skl9505oq4ugm"},{"name":"js","_id":"ckmahmusb004xkl9533cwe3rv"},{"name":"process","_id":"ckmahmusc0053kl95clejf2rf"},{"name":"cache","_id":"ckmahmusf005dkl958c4e9igy"},{"name":"html","_id":"ckmahmuso005kkl951b4c61ks"},{"name":"performance","_id":"ckmahmusx005lkl958r76an5c"}]}}