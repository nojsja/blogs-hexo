---
title: webpack优化技巧详解
catalog: true
comments: true
indexing: true
header-img: "/blogs/img/article_header/article_header.png"
top: false
tocnum: true
date: 2021-02-12 11:22:25
subtitle: The guide of frontend performance optimization
tags:
- javascript
- webpack
- http
- performance
categories:
- Javascript
- Webpack
- HTTP
- Performance
---

> 文章部分参考《深入浅出webpack》

## 目录

- 目录
- 前言
- 优化技巧
  - I. 优化构建性能
    - 1.1 加快模块文件搜索
      - 1）提高 loader 的匹配精确度
      - 2）限制`module`模块系统查找范围
      - 3）通过`alias`直接指定模块加载地址
      - 4）使用`module.noParse`忽略非模块化规范文件的处理
    - 1.2 分离静态dll加快打包速度
    - 1.3 运用热加载技术实现代码自动更新
    - 1.4 使用多线程方式优化打包速度
    - 1.5 devtool:sourcemap的使用策略
  - II. 优化代码输出
    - 2.1 压缩Javascript代码
    - 2.2 压缩HTML和CSS
    - 2.3 JS treeShaking
    - 2.4 CSS treeShaking
    - 2.5 代码分割
    - 2.6 代码分割
  - III. 一些小技巧
    - 3.1 单次声明加载多张图片
    - 3.2 使用工具分析构建结果
    - 3.4 拆分webpack配置文件

## 前言
&nbsp;&nbsp;&nbsp;&nbsp; webpack 是一个用于现代 JavaScript 应用程序的**静态模块打包工具**。当 webpack 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 bundle。它是前端从刀耕火种的`jQuery`、`JSP`和`原生JS`开发的原始时代进化到集成了开发、优化、兼容、构建、部署为一体的工程化时代的一个标志。虽然之前也有诸如`gulp`、`grunt`之类的快速构建工具，但是`webpack`的强大和广泛应用最终让它成为前端工作者们不得不重视的一项职业技能。熟知webpack的工作原理和优化手段让我们能胜任一个大型项目的搭建和渐进优化。

**基础概念：**

1. webpack配置文件  

&nbsp;&nbsp;&nbsp;&nbsp; webpack跟其它工具一样，它的工作流程依赖于其`json`配置文件，我们通过参数配置让webpack集成各种自带和第三方的插件、loader等，并让webpack知道应该从哪里开始一个项目的打包、打包后应该生成什么格式的文件以及运用我们引入的插件和loader来处理各种文件的打包和输出优化。以下便是一个webpack基础的配置文件`webpack.config.js`：
```js
const path = require('path');
const webpack = require('webpack');

module.exports = {
  devtool: 'source-map',
  entry: [
    'react-hot-loader/patch',
    './index.js',
  ],
  mode: 'development',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/',
  },
  resolve: {
    alias: {
      resources: path.resolve(__dirname, 'resources'),
      app: path.resolve(__dirname, 'app'),
      utils: path.resolve(__dirname, 'app/utils'),
      components: path.resolve(__dirname, 'app/components'),
      router: path.resolve(__dirname, 'app/router'),
    },
  },
  module: {
    rules: [
      {
        test: /\.m?js|\.jsx$/,
        exclude: /(node_modules|bower_components)/,
        use: {
          loader: 'babel-loader?cacheDirectory',
          options: {
            presets: [
              '@babel/preset-env',
              '@babel/preset-react',
            ],
            plugins: [
              ["@babel/plugin-proposal-decorators", { "legacy": true }],
              ["@babel/plugin-proposal-class-properties", {"loose": true}],
              "@babel/plugin-proposal-function-sent",
              "@babel/plugin-proposal-export-namespace-from",
              "@babel/plugin-proposal-numeric-separator",
              "@babel/plugin-proposal-throw-expressions",
              "react-hot-loader/babel"
            ]
          }
        }
      },
      ...
    ],
  },

  plugins: [
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NamedModulesPlugin(),
    new webpack.NoEmitOnErrorsPlugin(),
  ],

  devServer: {
    host: 'localhost',
    port: 3000,
    compress: true,
    contentBase: '.',
    historyApiFallback: true,
    hot: true,
  }
}

```

2. webpack打包入口  

&nbsp;&nbsp;&nbsp;&nbsp; **入口起点(entry point)** 指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点直接和间接依赖的。默认值是 ./src/index.js，但你可以通过在 webpack 配置文件中声明 entry 属性，来指定一个（或多个）不同的入口起点。例如：
```js
module.exports = {
  entry: './path/to/my/entry/file.js',
};
```


3. webpack打包输出  

&nbsp;&nbsp;&nbsp;&nbsp; output 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。你可以通过在配置中指定一个 output 字段，来配置这些处理过程：
```js
module.exports = {
  entry: './path/to/my/entry/file.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'my-first-webpack.bundle.js',
  },
};
```
在上面的示例中，我们通过 output.filename 和 output.path 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成到哪里。

4. 文件处理器loader  

&nbsp;&nbsp;&nbsp;&nbsp; webpack 只能理解 JavaScript 和 JSON 文件，这是 webpack 开箱可用的自带能力。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为**有效模块**，并被添加到依赖图中，以供应用程序使用。loader 有两个属性： 
  - 1）test 属性，识别出哪些文件会被转换。
  - 2）use 属性，定义出在进行转换时，应该使用哪些 loader。
```js
module.exports = {
  output: {
    filename: 'my-first-webpack.bundle.js',
  },
  module: {
    rules: [{ test: /\.txt$/, use: 'raw-loader' }],
  },
};
```

5. 强大的插件系统 plugin  

&nbsp;&nbsp;&nbsp;&nbsp; loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建一个插件实例：
```js
const HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装
module.exports = {
  module: {
    ...
  },
  // 为应用程序生成一个 HTML 文件，并自动注入所有生成的 bundle
  plugins: [new HtmlWebpackPlugin({ template: './src/index.html' })],
};
```

6. 开发模式和生产模式

&nbsp;&nbsp;&nbsp;&nbsp; 通过选择 development, production 或 none 之中的一个，来设置 mode 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 production：
```js
module.exports = {
  mode: 'production',
};
```



## 优化技巧

### I. 优化构建性能

#### 1.1 加快模块文件搜索
&nbsp;&nbsp;&nbsp;&nbsp; 当我们启动webpack时，它会从配置的入口文件开始解析，遇到导入的模块再进行递归解析该模块直到项目中所有的模块都被解析完成。在遇到导入语句时 webpack 会做两件事情：
- 根据导入语句去寻找对应的要导入的文件。例如 `require('react')` 最终被解析到对应的文件 `./node_modules/react/index.js`，`require('./util')` 则被解析到 `./util.js`。
- 根据找到的要导入文件的后缀，使用配置文件中声明的针对特定文件类型的 `loader` 去处理文件，将其也打包成模块。例如`.jsx`文件会使用 babel-loader 进行处理。

根据以上过程，我们可以从`模块文件的查找`这一方面入手来着手进行优化：

##### 1）提高 loader 的匹配精确度  

&nbsp;&nbsp;&nbsp;&nbsp; 由于 Loader 对文件的转换操作很耗时，需要让尽可能少的文件被 Loader 处理。在使用 Loader 时可以通过 `test` 、`include`、`exclude` 三个配置项来命中 Loader 要应用规则的文件。为了尽可能少的让文件被 Loader 处理，可以通过 include 去命中只有哪些文件需要被处理。  
以采用 ES6 的项目为例，在配置 babel-loader 时，可以这样：
- 通过loader的`test`正则规则正确匹配需要被处理的文件类型
- 必要情况下可以使用`include`参数可以精确锁定loader的作用范围
- 当`include`参数不适用时反向使用`exclude`文件排除法也可以达到范围限定效果
```js
module.exports = {
  module: {
    rules: [
      {
        // 如果项目源码中只有 js 文件就不要写成 /\.jsx?$/，提升正则表达式性能
        test: /\.js$/,
        // babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启
        use: ['babel-loader?cacheDirectory'],
        // 只对项目根目录下的 src 目录中的文件采用 babel-loader
        include: path.resolve(__dirname, 'src'),
        // or 或者可以采用排除法来筛选一些不需要使用的目录
        // exclude: /(node_modules|bower_components)/,
      },
    ]
  },
};
```

##### 2）限制`module`模块系统查找范围  

&nbsp;&nbsp;&nbsp;&nbsp; `resolve.modules` 可用于配置webpack去哪些目录下寻找我们通过`npm install`安装的第三方模块。其默认值：`['node_modules']`表示node应该先去当前目录下的 `./node_modules` 目录下去搜索目标模块，如果没找到就依次去上层目录：`../node_modules, ../../node_modules` 中找，直到所有上层目录都搜索完成。

&nbsp;&nbsp;&nbsp;&nbsp; 如果我们能确定项目所需的所有模块都能从当前`./node_modules`下面找到，就没有必要让node按照默认的方式去一层层的寻找，可以指明存放第三方模块的绝对路径，以减少寻找，配置如下：
```js
module.exports = {
  resolve: {
    // 其中 __dirname 表示当前工作目录，也就是项目根目录
    modules: [path.resolve(__dirname, 'node_modules')]
  },
};
```

##### 3）通过`alias`直接指定模块加载地址  
&nbsp;&nbsp;&nbsp;&nbsp; `resolve.alias` 配置项通过别名来把原导入路径映射成一个新的导入路径。
在实战项目中经常会依赖一些庞大的第三方模块，以 React 库为例，安装到 node_modules 目录下的 React 库的目录结构如下：
```js
├── dist
│   ├── react.js
│   └── react.min.js
├── lib
│   ...
│   ├── LinkedStateMixin.js
│   ├── createClass.js
│   └── React.js
├── package.json
└── react.js
```
可以看到发布出去的 React 库中包含两套代码：
- 一套是采用 CommonJS 规范的模块化代码，这些文件都放在 lib 目录下，以 package.json 中指定的入口文件 react.js 为模块的入口。
- 一套是把 React 所有相关的代码打包好的完整代码放到一个单独的文件中，这些代码没有采用模块化可以直接执行。其中 `dist/react.js` 是用于开发环境，里面包含检查和警告的代码。`dist/react.min.js` 是用于线上环境，被最小化了。

&nbsp;&nbsp;&nbsp;&nbsp; 默认情况下 Webpack 会从入口文件 ./node_modules/react/react.js 开始递归的解析和处理依赖的几十个文件，这会时一个耗时的操作。 通过配置 resolve.alias 可以让 Webpack 在处理 React 库时，直接使用单独完整的 react.min.js 文件，从而跳过耗时的递归解析操作。
```js
module.exports = {
  resolve: {
    alias: {
      'react': path.resolve(__dirname, './node_modules/react/dist/react.min.js'), 
    }
  },
};
```

&nbsp;&nbsp;&nbsp;&nbsp; 除此之外，我们也可以使用`alias`来声明项目中的已有目录，然后直接使用这些目录作为起始路径名，就能够正确解析到该目录下的文件，在一些目录层级较深的项目中比较实用：
```js
module.exports = {
  resolve: {
    alias: {
      utils: path.resolve(__dirname, 'app/utils'),
    }
  },
};

/* -------------- other-module.js -------------- */
// 使用前
const { toString } = require('../../../utils/index.js');
// 使用后
const { toString } = require('utils/index.js');
```

**注意：** 我们通常在一些整体性比较强的库上采用此优化方法，比如`react`，而像`lodash`这种库可能项目中只会用到一小部分其中的工具函数，使用`alias`优化后，可能造成`tree-shaking`去除无效代码的优化效果失效。

##### 4）使用`module.noParse`忽略非模块化规范文件的处理  
&nbsp;&nbsp;&nbsp;&nbsp; `module.noParse` 配置项可以让 Webpack 忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能。 原因是一些库，例如 jQuery 、ChartJS， 它们庞大又没有采用模块化标准，让 Webpack 去解析这些文件耗时又没有意义。

在上面的 优化 resolve.alias 配置 中讲到单独完整的 react.min.js 文件就没有采用模块化，让我们来通过配置 module.noParse 忽略对 react.min.js 文件的递归解析处理， 相关 Webpack 配置如下：
```js
module.exports = {
  module: {
    noParse: [/react\.min\.js$/],
  },
};
```
**注意：** 被忽略掉的文件里不应该包含 import 、 require 、 define 等模块化语句，不然会导致构建出的代码中包含无法在浏览器环境下执行的模块化语句。


#### 1.2 分离静态dll加快打包速度
&nbsp;&nbsp;&nbsp;&nbsp; 当我们的项目引用了越来越多的外部库依赖时，比如React、Antd、Echarts等等，会发现项目的打包越来越慢。在我们的开发过程中，变化的是项目成员自己编写的业务代码，而这些外部库代码基本不会发生变化，除非项目进行了外部库版本升级。因此可以将这些不会变化的外部库代码编译并抽离到一个或多个独立的文件中，并在最终打包时实际打包我们自己编写的代码，同时再从已经编译好的这些独立外部库文件中引入其代码，这样可以大大缩减我们的打包时间。  
&nbsp;&nbsp;&nbsp;&nbsp; 这种优化技术称为`静态链接库技术`，除了以上提到的可以加快这个打包流程这个优点，它的另一个重要优点就是：将外部依赖的库代码抽离成多个`dll`文件后，可以减少主文件`bundle.js`的体积，利用浏览器页面加载过程中的并行下载能力尽可能减少加载时间。  

**1）使用`DllPlugin`插件用于产生静态链接库文件和模块映射文件**

&nbsp;&nbsp;&nbsp;&nbsp; 我们需要为插件单独编写一个配置文件`webpack.dll.js`用于静态依赖的声明和打包，运行命令`webpack --config webpack.dll.config.js`之后webpack会针对每个入口将其对应的多个外部依赖库打包成一个单独的静态链接库文件`dll.js`和其对应的模块依赖映射文件`manifest.json`，因此如果配置了多个入口就会产生多个`dll.js`和`manifest.json`：
```js
const path = require('path');
const webpack = require('webpack');

module.exports = {
  devtool: 'source-map',
  entry: {
    // 配置一个入口，其包含多个外部依赖会被打包成同一个文件dll_vendor.js
    vendor: [
      'prop-types', 'react', 'react-dom',
      'react-router', 'mobx', 'mobx-react', 'antd'
    ],
  },
  mode: 'production',
  output: {
    // 这里指定打包后生成的文件名，比如dll_vendor.js
    filename: 'dll_[name].js',
    // 将此dll包暴露到window上，给app.js调用
    library: '[name]_[hash]',
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/',
  },
  resolve: {
    ...
  },

  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify('production'),
      },
    }),
    new webpack.DllPlugin({
      // DllPlugin的name属性需要和libary保持一致
      name: '[name]_[hash]',
      // 指定生成的模块映射文件位置
      path: path.join(__dirname, '[name]-manifest.json'),
      context: path.join(__dirname),
    }),
  ],
};

```
这里有几个注意事项：
  - `DllPlugin` 的参数中`name` 值必须和 `output.library` 值保持一致，并且生成的manifest文件中会引用 `output.library` 值。  
  - 入口可以配置多个，相应的会生成多个`dll`文件和对应的`manifest`模块映射文件
  - `dll.js`文件生成的内容如下，文件向全局暴露了一个类似`require`功能的函数这个，全局函数的名字是可以配置的：
  ```js
  var vendor_6b775dd139ca944362cd = function(e) {...}
  ```
  - `manifest`模块映射文件内容大致如下，其指示了多个全局文件处理函数名和用到的所有模块依赖ID，以用于之后的模块查找：
  ```json
  {
    "name": "vendor_6b775dd139ca944362cd",
    "content": {
      "../node_modules/webpack/node_modules/node-libs-browser/node_modules/process/browser.js": 1,
      "../node_modules/react/node_modules/fbjs/lib/invariant.js": 2,
      "../node_modules/react/node_modules/fbjs/lib/warning.js": 3,
      "../node_modules/react/lib/reactProdInvariant.js": 4,
      "../node_modules/react/node_modules/object-assign/index.js": 5,
      "../node_modules/react/lib/ReactDOMComponentTree.js": 6, 

      /*more*/

      "../node_modules/react/react.js": 171,
      "./vendors.js": 172
  }
  ```
  - 生成的`manifest`文件不必放入服务器静态目录，因为其只会用于打包过程，生产环境无需引入，而`dll.js`文件则需要正确在html文件中引入。

**2）使用`DllReferencePlugin`插件在打包时正确引入静态链接文件**

&nbsp;&nbsp;&nbsp;&nbsp; 在打包业务代码时，每遇到一个在`manifest.json`中出现的文件，就可以利用上述 `vendor.dll.js` 暴露的全局函数进行相应处理，而webpack不再会把这些依赖文件再重复打包进最终的`bundle.js`文件里。为了实现以上功能，我们需要在`webpack.config.js`文件里引入`DllReferencePlugin`插件以配合`DllPlugin`生成的`dll.js`文件和`manifest`文件进行打包处理：
```js
const path = require('path');
const webpack = require('webpack');

module.exports = {
  entry: [
    './index',
  ],
  mode: 'production',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist/'),
    publicPath: '/',
  },
  resolve: {
    ...
  },
  module: {
    ...
  },

  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify('production'),
      },
    }),
    new webpack.DllReferencePlugin({
      context: __dirname,
      manifest: require(path.resolve('./vendor-manifest.json')),
    }),
    ...
  ],
};

```

#### 1.3 运用热加载技术实现代码自动更新
&nbsp;&nbsp;&nbsp;&nbsp; Webpack 提供了热替换（Hot-Module-Replacement，简写为 HMR）的接口，使得我们的代码更新时不需要刷新页面就能够应用更新后的代码。HMR 是 Webpack 的主要功能之一，它不依赖特定的框架。HMR 的工作流程如下：
- 在 Webpack config 文件中引入 webpack.HotModuleReplacementPlugin 插件
  ```js
  module.exports = {
    ...
    plugins: [
      new webpack.HotModuleReplacementPlugin(),
    ]
    ...
  }
  ```
- 使用参数`hot`开启 dev server 的热替换功能。
  ```js
  module.exports = {
    ...
    devServer: {
      host: 'localhost',
      port: 3000,
      compress: true,
      contentBase: '.',
      historyApiFallback: true,
      hot: true, // 启动局部代码热加载功能
      inline: true, // 将热更新client代码注入到我们的chunk代码中
      liveReload: false // 禁用devServer自带的代码更新后强制刷新网页功能
    }
    ...
  }
  ```
- 在业务代码中使用 module.hot.accept("./path/to/file", callbackToRunWhenThatFileIsRecompiled) API 来注册模块更新回调
  ```js
  import React from 'react';
  import { render } from 'react-dom';

  const rootDOMNode = document.getElementById('root');

  let App;
  function renderRoot() {
    App = require('./app/App.js').default;
    render(<App/>, rootDOMNode);
  }
  renderRoot();
  // 注册监听器在代码更新后重新渲染App
  if (module.hot) {
    module.hot.accept('./app/App.js', () => {
      console.log('Accepting the updated module');
      renderRoot();
    });
  }
  ```
- Webpack dev server 会监听代码更新并且重新编译
- Webpack dev server 通过 websocket 将更新后的代码推送到浏览器端
- 开发者通过 module.hot.accept 注册的回调被执行

**注意：**
- 替换之后 root component 和它内部的 component 的 state 都会丢失，但是对于保存在像 Mobx store 等外部数据容器中的状态则可以保持。
- 可以使用功能更完善的 React-Hot-Loader，它也使用了 Webpack HMR API，针对 React 框架实现了对单个 component 的热替换，并且能够保持组件的 state。
- React-Hot-Loader 在编译时会在每一个 React component 外封装一层，每一个这样的封装都会注册自己的 module.hot.accept 回调，它们会监听每一个 component 的更新，在当前 component 代码更新时只替换自己的模块，而不是整个替换 root component。
- React-Hot-Loader 对 component 的封装还会代理 component 的 state，所以当 component 替换之后依然能够保持之前的 state。
- 尽管 React-Hot-Loader 功能强大，但因为实际情况中会有很多边界情况，会导致奇怪的问题。

&nbsp;&nbsp;&nbsp;&nbsp; 总的来说，Webpack HMR 在 component 更新后不会保持 component 的 state，但它的实现和配置更简单，更可靠。通过 HMR 和 Mobx 等数据管理工具 一起使用，将应用状态保存在组件外，基本能够实现和 React-Hot-Loader 类似的效果。

#### 1.4 使用多线程方式优化打包速度

#### 1.5 devtool:sourcemap的使用策略

### II. 优化代码输出

#### 2.1 压缩Javascript代码
#### 2.2 压缩HTML和CSS
#### 2.3 JS treeShaking
#### 2.4 CSS treeShaking
#### 2.5 代码分割
#### 2.6 代码分割

### III. 一些小技巧

#### 3.1 单次声明加载多张图片
#### 3.2 使用工具分析构建结果
#### 3.4 拆分webpack配置文件



